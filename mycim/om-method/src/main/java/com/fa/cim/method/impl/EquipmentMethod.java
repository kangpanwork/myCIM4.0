package com.fa.cim.method.impl;

import com.alibaba.fastjson.JSON;
import com.fa.cim.annotaion.OmMethod;
import com.fa.cim.common.constant.BizConstant;
import com.fa.cim.common.constant.CIMStateConst;
import com.fa.cim.common.constant.ConstraintClassEnum;
import com.fa.cim.common.constant.TransactionIDEnum;
import com.fa.cim.common.exception.ServiceException;
import com.fa.cim.common.support.ErrorCode;
import com.fa.cim.common.support.ObjectIdentifier;
import com.fa.cim.common.support.OmCode;
import com.fa.cim.common.utils.*;
import com.fa.cim.config.RetCodeConfig;
import com.fa.cim.config.RetCodeConfigEx;
import com.fa.cim.dto.*;
import com.fa.cim.entity.event.evopcp.CimEventOpeCompleteDO;
import com.fa.cim.entity.nonruntime.CimEqpAuto3SettingDO;
import com.fa.cim.entity.nonruntime.arsh.CimRELDO;
import com.fa.cim.entity.runtime.cassette.CimCassetteDO;
import com.fa.cim.entity.runtime.cassette.CimCassetteLotDO;
import com.fa.cim.entity.runtime.code.CimCodeDO;
import com.fa.cim.entity.runtime.controljob.CimControlJobDO;
import com.fa.cim.entity.runtime.durablectrljob.CimDurableControlJobDO;
import com.fa.cim.entity.runtime.e10state.CimE10StateDO;
import com.fa.cim.entity.runtime.eqp.*;
import com.fa.cim.entity.runtime.eqpcontainer.CimEquipmentContainerDO;
import com.fa.cim.entity.runtime.eqpctnpst.CimEquipmentContainerPositionDO;
import com.fa.cim.entity.runtime.eqpmonitor.CimEquipmentMonitorActionDO;
import com.fa.cim.entity.runtime.eqpmonitor.CimEquipmentMonitorDO;
import com.fa.cim.entity.runtime.eqpmonitor.CimEquipmentMonitorProductSpecDO;
import com.fa.cim.entity.runtime.eqpmonitorjob.CimEquipmentMonitorJobDO;
import com.fa.cim.entity.runtime.eqpmonitorjob.CimEquipmentMonitorJobLotDO;
import com.fa.cim.entity.runtime.eqpnote.CimEquipmentNoteDO;
import com.fa.cim.entity.runtime.eqpprocedure.CimEquipmentProcedureDO;
import com.fa.cim.entity.runtime.eqpstate.CimEquipmentStateDO;
import com.fa.cim.entity.runtime.flowbatchdis.CimFlowDispatcherLotDO;
import com.fa.cim.entity.runtime.logicalrecipe.CimLogicalRecipeDO;
import com.fa.cim.entity.runtime.logicalrecipe.CimLogicalRecipeDSetDO;
import com.fa.cim.entity.runtime.lot.CimLotDO;
import com.fa.cim.entity.runtime.lot.CimLotMaterialContainerDO;
import com.fa.cim.entity.runtime.mrecipe.CimMachineRecipeDO;
import com.fa.cim.entity.runtime.mtrlloc.CimMaterialLocationDO;
import com.fa.cim.entity.runtime.person.CimPersonDO;
import com.fa.cim.entity.runtime.pfx.CimProcessFlowContextReturnDO;
import com.fa.cim.entity.runtime.po.CimProcessOperationDO;
import com.fa.cim.entity.runtime.port.CimPortDO;
import com.fa.cim.entity.runtime.pos.CimProcessOperationSpecificationDO;
import com.fa.cim.entity.runtime.prcrsc.CimProcessResourceDO;
import com.fa.cim.entity.runtime.processdefinition.CimProcessDefinitionDO;
import com.fa.cim.entity.runtime.processflow.CimPFDefinitionListDO;
import com.fa.cim.entity.runtime.processflow.CimPFPosListDO;
import com.fa.cim.entity.runtime.processflow.CimProcessFlowDO;
import com.fa.cim.entity.runtime.productgroup.CimProductGroupDO;
import com.fa.cim.entity.runtime.productspec.CimProductSpecificationDO;
import com.fa.cim.entity.runtime.reticleset.*;
import com.fa.cim.entity.runtime.rspport.CimReservePortDO;
import com.fa.cim.entity.runtime.stocker.CimStockerDO;
import com.fa.cim.entity.runtime.wafer.CimWaferDO;
import com.fa.cim.entitysuper.base.SequentialValueEntity;
import com.fa.cim.eqp.IBFurnaceEQPBatchInfo;
import com.fa.cim.eqp.carrierout.CarrierOutPortInfo;
import com.fa.cim.eqp.carrierout.CarrierOutPortResults;
import com.fa.cim.jpa.CimJpaRepository;
import com.fa.cim.jpa.SearchCondition;
import com.fa.cim.layoutrecipe.LayoutRecipeParams;
import com.fa.cim.layoutrecipe.LayoutRecipeResults;
import com.fa.cim.method.*;
import com.fa.cim.newcore.bo.code.*;
import com.fa.cim.newcore.bo.dispatch.CimDispatcher;
import com.fa.cim.newcore.bo.dispatch.CimFlowBatch;
import com.fa.cim.newcore.bo.dispatch.CimWhatNextLogicBase;
import com.fa.cim.newcore.bo.dispatch.DispatchingManager;
import com.fa.cim.newcore.bo.durable.*;
import com.fa.cim.newcore.bo.factory.CimArea;
import com.fa.cim.newcore.bo.factory.CimBank;
import com.fa.cim.newcore.bo.globalfunc.CimFrameWorkGlobals;
import com.fa.cim.newcore.bo.machine.*;
import com.fa.cim.newcore.bo.pd.CimProcessDefinition;
import com.fa.cim.newcore.bo.pd.CimProcessOperation;
import com.fa.cim.newcore.bo.pd.CimProcessOperationSpecification;
import com.fa.cim.newcore.bo.person.CimPerson;
import com.fa.cim.newcore.bo.person.PersonManager;
import com.fa.cim.newcore.bo.planning.CimProductRequest;
import com.fa.cim.newcore.bo.prodspec.CimProductSpecification;
import com.fa.cim.newcore.bo.product.CimControlJob;
import com.fa.cim.newcore.bo.product.CimLot;
import com.fa.cim.newcore.bo.product.CimWafer;
import com.fa.cim.newcore.bo.recipe.CimLogicalRecipe;
import com.fa.cim.newcore.bo.recipe.CimMachineRecipe;
import com.fa.cim.newcore.bo.restrict.CimRestriction;
import com.fa.cim.newcore.bo.restrict.RestrictionManager;
import com.fa.cim.newcore.dto.code.CodeDTO;
import com.fa.cim.newcore.dto.dispatch.DispatcherDTO;
import com.fa.cim.newcore.dto.durable.DurableDTO;
import com.fa.cim.newcore.dto.global.GlobalDTO;
import com.fa.cim.newcore.dto.machine.MachineDTO;
import com.fa.cim.newcore.dto.pd.ProcessDTO;
import com.fa.cim.newcore.dto.planning.PlanDTO;
import com.fa.cim.newcore.dto.product.ProductDTO;
import com.fa.cim.newcore.dto.restriction.Constrain;
import com.fa.cim.newcore.exceptions.DuplicateRecordException;
import com.fa.cim.newcore.factory.BaseCoreFactory;
import com.fa.cim.newcore.impl.bo.env.StandardProperties;
import com.fa.cim.newcore.standard.drblmngm.MaterialContainer;
import com.fa.cim.newcore.standard.mchnmngm.*;
import com.fa.cim.newcore.standard.mtrlmngm.Material;
import com.fa.cim.newcore.standard.prdctmng.Lot;
import com.fa.cim.newcore.standard.prdctspc.ProductSpecification;
import com.fa.cim.sorter.Info;
import com.fa.cim.sorter.SorterHandler;
import com.google.common.collect.Maps;
import com.rits.cloning.Cloner;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.compress.utils.Lists;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.util.CollectionUtils;
import org.springframework.util.ObjectUtils;
import org.springframework.util.StopWatch;

import java.sql.Timestamp;
import java.util.*;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Predicate;
import java.util.stream.Collectors;

import static com.fa.cim.constant.HistoryInfoConstant.EquipmentConstant.*;
import static com.google.common.base.Strings.nullToEmpty;

/**
 * description:
 *
 * <p>change history: date defect# person comments
 * ---------------------------------------------------------------------------------------------------------------------
 * 2018/6/21 ******** Bear create file
 *
 * @author Bear
 * @since 2018/6/21 10:33 Copyright: 2018, FA Software (Shanghai) Co., Ltd. All Rights Reserved.
 */
@Slf4j
@OmMethod
public class EquipmentMethod implements IEquipmentMethod {

    @Autowired
    private RetCodeConfigEx retCodeConfigEx;

    @Autowired
    private IWaferMethod waferMethod;

    @Autowired
    private IReticleMethod reticleMethod;

    @Autowired
    private ICodeMethod codeMethod;

    @Autowired
    private ISorterNewMethod sorterMethod;

    @Autowired
    private IBondingGroupMethod bondingGroupMethod;

    @Autowired
    private IFlowBatchMethod flowBatchMethod;

    @Autowired
    private ILogicalRecipeMethod logicalRecipeMethod;

    @Autowired
    private IControlJobMethod controlJobMethod;

    @Autowired
    private IDurableMethod durableMethod;

    @Autowired
    private CimJpaRepository cimJpaRepository;

    @Autowired
    private ILotMethod lotMethod;

    @Autowired
    private IAutoDispatchControlMethod autoDispatchControlMethod;

    @Autowired
    private IProcessMethod processMethod;

    @Autowired
    private ICassetteMethod cassetteMethod;

    @Autowired
    private IStockerMethod stockerMethod;

    @Autowired
    private IPortMethod portMethod;

    @Autowired
    private IEventMethod eventMethod;

    @Autowired
    private ITimeStampMethod timeStampMethod;

    @Autowired
    private IEquipmentContainerPositionMethod equipmentContainerPositionMethod;

    @Autowired
    private MachineManager newMachineManager;

    @Autowired
    private DispatchingManager dispatchingManagerCore;

    @Autowired
    private CodeManager codeManager;

    @Autowired
    private RestrictionManager entityInhibitManager;

    @Autowired
    private IMessageMethod messageMethod;

    @Autowired
    private BaseCoreFactory baseCoreFactory;

    @Autowired
    private CimFrameWorkGlobals cimFrameWorkGlobals;

    @Autowired
    private RetCodeConfig retCodeConfig;

    @Autowired
    private IObjectMethod objectMethod;

    @Autowired
    private IObjectLockMethod objectLockMethod;

    @Autowired
    private Cloner cloner;

    @Autowired
    private PersonManager personManager;

    @Autowired
    private DurableManager durableManager;

    @Autowired
    private IConstraintMethod constraintMethod;

    @Autowired
    private IContaminationMethod contaminationMethod;

    @Autowired
    private IMinQTimeMethod minQTimeMethod;

    @Override
    public String equipmentOnlineModeGet(Infos.ObjCommon objCommon, ObjectIdentifier objectID) {
        // step1 - get object reference from input parameter
        CimMachine aPosMachine = baseCoreFactory.getBO(CimMachine.class, objectID);
        Validations.check(null == aPosMachine, retCodeConfig.getNotFoundEqp());

        // step2 - get object reference of port resource
        List<PortResource> aPortResourceSeq = aPosMachine.allPortResources();
        Validations.check(CimArrayUtils.isEmpty(aPortResourceSeq), retCodeConfig.getNotFoundPort());

        CimPortResource aPosPortResource = (CimPortResource) aPortResourceSeq.get(0);

        // step3 get object reference of EquipmentOperationMode
        CimMachineOperationMode aPortOpeMode = aPosPortResource.getMachineOperationMode();
        Validations.check(aPortOpeMode == null, retCodeConfig.getNotFoundMachineOperationMode());

        // step4 get detail information of operaion mode
        CodeDTO.OperationModeInfo aCurrentOpeModeInfo = aPortOpeMode.getOperationModeInfo();
        // step5 -  et onLine Mode
        return aCurrentOpeModeInfo.getOnlineMode();
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param objCommon
     * @param equipmentID
     * @return com.fa.cim.dto.RetCode<Results.FlowBatchLotSelectionInqResult>
     * @author Ho
     * @date 2019/1/7 13:26:29
     */
    @Override
    public Results.FlowBatchLotSelectionInqResult equipmentFlowBatchWaitLotsGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        List<List<Infos.EntityInhibitInfo>> tmpEntityInhibitSeq = null;

        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                aMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));

        Integer runSize = aMachine.getProcessRunSizeMaximum();
        Validations.check(
                runSize < 2, new OmCode(retCodeConfig.getEqpFlowbatchNotReqd(), equipmentID.getValue()));

        Results.FlowBatchLotSelectionInqResult strFlowBatchLotSelectionInqResult =
                new Results.FlowBatchLotSelectionInqResult();
        strFlowBatchLotSelectionInqResult.setEquipmentID(equipmentID);

        CimMachineState aMachineState = aMachine.getCurrentMachineState();
        Validations.check(aMachineState == null, retCodeConfig.getNotFoundEqpState());

        Boolean availFlag = false;
        availFlag = aMachineState.isMachineAvailable();
        Validations.check(
                CimBooleanUtils.isFalse(availFlag), retCodeConfig.getEquipmentNotAvailableStat());

        Boolean condFlag = false;
        condFlag = aMachineState.isConditionalAvailable();
        strFlowBatchLotSelectionInqResult.setEquipmentStatusCode(
                ObjectIdentifier.build(aMachineState.getIdentifier(), aMachineState.getPrimaryKey()));

        strFlowBatchLotSelectionInqResult.setEquipmentStatusName(aMachineState.getMachineStateName());

        strFlowBatchLotSelectionInqResult.setEquipmentStatusDescription(
                aMachineState.getMachineStateDescription());

        CimE10State anE10State = aMachineState.getE10State();
        Validations.check(anE10State == null, retCodeConfig.getNotFoundE10State());

        strFlowBatchLotSelectionInqResult.setE10Status(anE10State.getIdentifier());

        Long maxCountForFlowBatch = 0L;
        maxCountForFlowBatch = CimNumberUtils.longValue(aMachine.getFlowBatchMaxCount());

        strFlowBatchLotSelectionInqResult.setMaxCountForFlowBatch(maxCountForFlowBatch);

        List<com.fa.cim.newcore.bo.dispatch.CimFlowBatch> flowBatchSeq = aMachine.allFlowBatches();

        int reservedFBLen = CimArrayUtils.getSize(flowBatchSeq);
        List<ObjectIdentifier> reserveFlowBatchIDs = new ArrayList<>();
        strFlowBatchLotSelectionInqResult.setReserveFlowBatchIDs(reserveFlowBatchIDs);
        for (int m = 0; m < reservedFBLen; m++) {
            reserveFlowBatchIDs.add(
                    ObjectIdentifier.build(
                            flowBatchSeq.get(m).getIdentifier(), flowBatchSeq.get(m).getPrimaryKey()));
        }

        // step1 - equipment_flowBatchCandidateLots_GetDR
        List<Infos.FlowBatchCandidateLot> flowBatchCandidateLots =
                this.equipmentFlowBatchCandidateLotsGetDR(objCommon, equipmentID);
        int lenFBLots = CimArrayUtils.getSize(flowBatchCandidateLots);

        List<Infos.EntityInhibitInfo> tmpEntityIdentifierSeq = new ArrayList<>();
        tmpEntityInhibitSeq = new ArrayList<>();
        int count = 0;
        List<Infos.TempFlowBatch> strTempFlowBatch = new ArrayList<>();
        strFlowBatchLotSelectionInqResult.setStrTempFlowBatch(strTempFlowBatch);

        int flowCnt = 0;
        int lotCnt = 0;
        int setCount = 0;

        String transferState = null;
        ObjectIdentifier aStockerID = null;
        ObjectIdentifier aEquipmentID = null;

        Boolean prevCassetteUseFlag = false;
        for (int i = 0; i < lenFBLots; i++) {
            Infos.FlowBatchCandidateLot flowBatchCandidateLot = flowBatchCandidateLots.get(i);
            if (CimBooleanUtils.isTrue(condFlag)) {
                Boolean condLotFlag = false;
                condLotFlag =
                        aMachineState.isConditionalAvailableFor(
                                flowBatchCandidateLot.getFlowBatchLotInfo().getSubLotType());

                if (CimBooleanUtils.isFalse(condLotFlag)) {
                    continue;
                }
            }

            Infos.TempFlowBatch tempFlowBatch = new Infos.TempFlowBatch();
            if (null == strFlowBatchLotSelectionInqResult.getStrTempFlowBatch()) {
                strFlowBatchLotSelectionInqResult.setStrTempFlowBatch(new ArrayList<>());
            }

            strFlowBatchLotSelectionInqResult.getStrTempFlowBatch().add(tempFlowBatch);
            if (setCount != 0) {
                if (CimObjectUtils.equals(
                        tempFlowBatch.getTemporaryFlowBatchID(), flowBatchCandidateLot.getFlowBatchID())
                        && ObjectIdentifier.equalsWithValue(
                        tempFlowBatch.getCassetteID(),
                        flowBatchCandidateLot.getFlowBatchLotInfo().getCarrierID())) {
                    prevCassetteUseFlag = true;
                } else {
                    prevCassetteUseFlag = false;
                    // strEquipment_flowBatchWaitLots_GetDR_out.strFlowBatchLotSelectionInqResult.strTempFlowBatch[flowCnt].strTempFlowBatchLot.length(lotCnt);
                    lotCnt = 0;
                    flowCnt++;
                    // strEquipment_flowBatchWaitLots_GetDR_out.strFlowBatchLotSelectionInqResult.strTempFlowBatch[flowCnt].strTempFlowBatchLot.length(lenFBLots);
                }
            }

            if (CimBooleanUtils.isFalse(prevCassetteUseFlag)) {
                ObjectIdentifier dummyID = new ObjectIdentifier();
                transferState = "";
                aStockerID = dummyID;
                aEquipmentID = dummyID;
                Boolean cassetteFound = false;

                // step2 - cassette_transferState_GetDR
                String strCassetteTransferStateGetDROut = null;
                try {
                    transferState =
                            cassetteMethod.cassetteTransferStateGet(
                                    objCommon, flowBatchCandidateLot.getFlowBatchLotInfo().getCarrierID());

                    // step3 - cassette_assignedMahine_GetDR
                    Infos.CassetteAssignedMahineGetDR strCassetteAssignedMahineGetDROut = null;
                    try {
                        strCassetteAssignedMahineGetDROut =
                                cassetteMethod.cassetteAssignedMahineGetDR(
                                        objCommon, flowBatchCandidateLot.getFlowBatchLotInfo().getCarrierID());
                    } catch (ServiceException e) {
                        tmpEntityInhibitSeq.clear();
                        throw e;
                    }

                    if (!ObjectIdentifier.isEmpty(strCassetteAssignedMahineGetDROut.getMachineID())) {
                        if (CimBooleanUtils.isTrue(strCassetteAssignedMahineGetDROut.getEquipmentFlag())) {
                            aEquipmentID = strCassetteAssignedMahineGetDROut.getMachineID();
                        } else {
                            aStockerID = strCassetteAssignedMahineGetDROut.getMachineID();
                        }
                    }
                } catch (ServiceException e) {
                    if (e.getCode() == retCodeConfig.getNotFoundCassette().getCode()) {

                    } else {
                        tmpEntityInhibitSeq.clear();
                        throw e;
                    }
                }
            }
            tempFlowBatch.setTemporaryFlowBatchID(
                    ObjectIdentifier.buildWithValue(flowBatchCandidateLot.getFlowBatchID()));
            tempFlowBatch.setCassetteID(flowBatchCandidateLot.getFlowBatchLotInfo().getCarrierID());
            Infos.TempFlowBatchLot tempFlowBatchLot = new Infos.TempFlowBatchLot();
            tempFlowBatchLot.setTransferStatus(transferState);
            tempFlowBatchLot.setStockerID(aStockerID);
            tempFlowBatchLot.setEquipmentID(aEquipmentID);
            tempFlowBatchLot.setLotID(flowBatchCandidateLot.getFlowBatchLotInfo().getLotID());
            tempFlowBatchLot.setLotStatus(flowBatchCandidateLot.getFlowBatchLotInfo().getLotStatus());
            tempFlowBatchLot.setPriorityClass(
                    flowBatchCandidateLot.getFlowBatchLotInfo().getPriorityClass());
            tempFlowBatchLot.setProductID(flowBatchCandidateLot.getFlowBatchLotInfo().getProductID());
            tempFlowBatchLot.setFlowBatchOperationCount(
                    CimNumberUtils.longValue(
                            flowBatchCandidateLot
                                    .getFlowBatchLotInfo()
                                    .getFlowBatchControl()
                                    .getOperationCount()));
            tempFlowBatchLot.setFlowBatchLotSize(
                    CimNumberUtils.longValue(
                            flowBatchCandidateLot.getFlowBatchLotInfo().getFlowBatchControl().getMaxLotSize()));
            tempFlowBatchLot.setFlowBatchLotMinSize(
                    CimNumberUtils.longValue(
                            flowBatchCandidateLot.getFlowBatchLotInfo().getFlowBatchControl().getMinLotSize()));
            tempFlowBatchLot.setFlowBatchLotMinWaferSize(
                    CimNumberUtils.longValue(
                            flowBatchCandidateLot.getFlowBatchLotInfo().getFlowBatchControl().getMinWaferSize()));

            if (null == tempFlowBatch.getStrTempFlowBatchLot()) {
                tempFlowBatch.setStrTempFlowBatchLot(new ArrayList<>());
            }
            tempFlowBatch.getStrTempFlowBatchLot().add(tempFlowBatchLot);

            ObjectIdentifier lotID = flowBatchCandidateLot.getFlowBatchLotInfo().getLotID();
            // step4 - lot_entityIDList_GetDR
            List<Infos.EntityIdentifier> entityIDSeq =
                    lotMethod.lotEntityIDListGetDR(objCommon, lotID, equipmentID);
            // step5 - lot_subLotType_GetDR
            String strLotSubLotTypeGetDROut = lotMethod.lotSubLotTypeGetDR(objCommon, lotID);

            Boolean inhibitRecordCheckedFlag = false;
            int entityIDLen = CimArrayUtils.getSize(entityIDSeq);
            int j = 0;

            for (j = 0; j < count; j++) {
                List<String> subLotTypes =
                        tmpEntityIdentifierSeq.get(j).getEntityInhibitAttributes().getSubLotTypes();
                int subLotTypeLen = CimArrayUtils.getSize(subLotTypes);
                if (subLotTypeLen != 0) {
                    int ii = 0;
                    for (ii = 0; ii < subLotTypeLen; ii++) {
                        if (CimStringUtils.equals(subLotTypes.get(ii), strLotSubLotTypeGetDROut)) {
                            break;
                        }
                    }
                    if (subLotTypeLen == ii) {
                        inhibitRecordCheckedFlag = true;
                        continue;
                    }
                }

                List<Infos.EntityIdentifier> entities =
                        tmpEntityIdentifierSeq.get(j).getEntityInhibitAttributes().getEntities();
                int entLen = CimArrayUtils.getSize(entities);
                int l = 0;
                for (l = 0; l < entityIDLen; l++) {
                    int k = 0;
                    Infos.EntityIdentifier entityID = entityIDSeq.get(l);
                    for (k = 0; k < entLen; k++) {
                        Infos.EntityIdentifier entity = entities.get(k);
                        if (CimStringUtils.equals(entityID.getClassName(), entity.getClassName())
                                && ObjectIdentifier.equalsWithValue(entityID.getObjectID(), entity.getObjectID())
                                && CimStringUtils.equals(entityID.getAttribution(), entity.getAttribution())) {
                            break;
                        }
                    }
                    if (entLen == k) {
                        inhibitRecordCheckedFlag = true;
                        break;
                    }
                }
                if (entityIDLen == l) {
                    inhibitRecordCheckedFlag = false;
                    break;
                }
            }

            List<Infos.EntityInhibitInfo> entityInhibits = new ArrayList<>();
            if (inhibitRecordCheckedFlag || count == 0) {
                int entityLen = CimArrayUtils.getSize(entityIDSeq);
                List<Constrain.EntityIdentifier> entities = new ArrayList<>();
                for (int ii = 0; ii < entityLen; ii++) {
                    Infos.EntityIdentifier entityID = entityIDSeq.get(ii);
                    Constrain.EntityIdentifier entity = new Constrain.EntityIdentifier();
                    entity.setClassName(entityID.getClassName());
                    entity.setObjectId(ObjectIdentifier.fetchValue(entityID.getObjectID()));
                    entity.setAttrib(entityID.getAttribution());
                    entities.add(entity);
                }

                List<String> subLotSeq = new ArrayList<>();
                subLotSeq.add(strLotSubLotTypeGetDROut);
                List<Constrain.EntityInhibitRecord> entityRecords =
                        entityInhibitManager.getEntityInhibitRecordsFor(entities, subLotSeq);
                int inhibitLen = CimArrayUtils.getSize(entityRecords);

                if (inhibitLen > 0) {
                    List<Infos.EntityInhibitInfo> entityInhibitInfos = new ArrayList<>();
                    constraintMethod.setEntityInhibitRecordsToEntityInhibitInfos(
                            entityInhibitInfos, entityRecords);
                    Inputs.ObjEntityInhibiteffectiveForLotGetDRIn strEntityInhibitEffectiveForLotGetDRIn =
                            new Inputs.ObjEntityInhibiteffectiveForLotGetDRIn();

                    strEntityInhibitEffectiveForLotGetDRIn.setStrEntityInhibitInfos(entityInhibitInfos);
                    strEntityInhibitEffectiveForLotGetDRIn.setLotID(lotID);

                    // step6 - entityInhibit_effectiveForLot_GetDR
                    List<Infos.EntityInhibitInfo> strEntityInhibitEffectiveForLotGetDROut =
                            constraintMethod.constraintEffectiveForLotGetDR(
                                    objCommon,
                                    strEntityInhibitEffectiveForLotGetDRIn.getStrEntityInhibitInfos(),
                                    strEntityInhibitEffectiveForLotGetDRIn.getLotID());
                    constraintMethod.setEntityInhibitInfosToEntityInhibitRecords(
                            entityRecords, strEntityInhibitEffectiveForLotGetDROut);
                    inhibitLen = CimArrayUtils.getSize(entityRecords);
                }

                for (int n = 0; n < inhibitLen; n++) {
                    Constrain.EntityInhibitRecord entityRecord = entityRecords.get(n);
                    List<Constrain.EntityIdentifier> entities1 = entityRecord.getEntities();
                    int numOfEntities = CimArrayUtils.getSize(entities1);
                    Infos.EntityInhibitInfo entityInhibit = new Infos.EntityInhibitInfo();
                    entityInhibits.add(entityInhibit);
                    Infos.EntityInhibitAttributes entityInhibitAttributes =
                            new Infos.EntityInhibitAttributes();
                    entityInhibit.setEntityInhibitAttributes(entityInhibitAttributes);
                    List<Infos.EntityIdentifier> entities2 = new ArrayList<>();
                    entityInhibitAttributes.setEntities(entities2);
                    for (int jj = 0; jj < numOfEntities; jj++) {
                        Infos.EntityIdentifier entity = new Infos.EntityIdentifier();
                        entities2.add(entity);
                        entity.setClassName(entities1.get(jj).getClassName());
                        entity.setObjectID(new ObjectIdentifier(entities1.get(jj).getObjectId()));
                        entity.setAttribution(entities1.get(jj).getAttrib());
                    }

                    entityInhibit.setEntityInhibitID(
                            ObjectIdentifier.build(
                                    entityRecord.getId(), entityRecord.getReferenceKey()));
                    entityInhibitAttributes.setSubLotTypes(entityRecord.getSubLotTypes());
                    entityInhibitAttributes.setStartTimeStamp(
                            CimDateUtils.getTimestampAsString(entityRecord.getStartTimeStamp()));
                    entityInhibitAttributes.setEndTimeStamp(
                            CimDateUtils.getTimestampAsString(entityRecord.getEndTimeStamp()));
                    entityInhibitAttributes.setClaimedTimeStamp(
                            CimDateUtils.getTimestampAsString(entityRecord.getChangedTimeStamp()));
                    entityInhibitAttributes.setReasonCode(entityRecord.getReasonCode().getValue());
                    entityInhibitAttributes.setOwnerID(entityRecord.getOwner());
                    entityInhibitAttributes.setMemo(entityRecord.getClaimMemo());

                    if (!CimStringUtils.isEmpty(entityInhibitAttributes.getReasonCode())) {
                        String categoryID = BizConstant.SP_REASONCAT_ENTITYINHIBIT;
                        // step7 - code_reasonDiscription_GetDR
                        List<Infos.ReasonCodeAttributes> strCodeReasonDiscriptionGetDROut =
                                codeMethod.codeReasonDiscriptionGetDR(
                                        objCommon, categoryID, entityRecord.getReasonCode());
                        if (CimArrayUtils.getSize(strCodeReasonDiscriptionGetDROut) != 0) {
                            entityInhibitAttributes.setReasonDesc(
                                    strCodeReasonDiscriptionGetDROut.get(0).getCodeDescription());
                        }
                    }
                }

                Infos.EntityInhibitInfo tmpEntityIdentifier = new Infos.EntityInhibitInfo();
                Infos.EntityInhibitAttributes entityInhibitAttributes = new Infos.EntityInhibitAttributes();
                tmpEntityIdentifier.setEntityInhibitAttributes(entityInhibitAttributes);
                tmpEntityIdentifierSeq.add(tmpEntityIdentifier);
                entityInhibitAttributes.setEntities(entityIDSeq);
                entityInhibitAttributes.setSubLotTypes(subLotSeq);
                tmpEntityInhibitSeq.add(entityInhibits);
                count++;
            } else {
                entityInhibits = tmpEntityInhibitSeq.get(j);
            }

            int lenInhitib = CimArrayUtils.getSize(entityInhibits);
            List<Infos.EntityInhibitAttributes> entityInhibitions = new ArrayList<>();
            tempFlowBatchLot.setEntityInhibitions(entityInhibitions);

            for (int m = 0; m < lenInhitib; m++) {
                entityInhibitions.add(entityInhibits.get(m).getEntityInhibitAttributes());
            }

            lotCnt++;
            setCount++;
        }

        if (lenFBLots == 0 || setCount == 0) {
            tmpEntityInhibitSeq.clear();
            throw new ServiceException(
                    new OmCode(retCodeConfig.getNotFoundFlowbatchCandLot(), equipmentID.getValue()),
                    strFlowBatchLotSelectionInqResult);
        }
        tmpEntityInhibitSeq.clear();

        return strFlowBatchLotSelectionInqResult;
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param objCommon
     * @param equipmentID
     * @return com.fa.cim.dto.RetCode<java.util.List < Infos.FlowBatchCandidateLot>>
     * @author Ho
     * @date 2019/1/7 15:41:26
     */
    @Override
    public List<Infos.FlowBatchCandidateLot> equipmentFlowBatchCandidateLotsGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        int tmpLotCount = 0;
        List<Infos.FlowBatchCandidateLot> tmpLotList = new ArrayList<>();
        String sql =
                "SELECT A.LOT_KEY,\n"
                        + "                A.LOT_RKEY\n"
                        + "        FROM   OMFLOWBDISP_LOT A, OMLOT B\n"
                        + "        WHERE  A.LOT_RKEY        = B.ID\n"
                        + "        AND  B.LOT_HOLD_STATE = 'NOTONHOLD'";

        List<CimFlowDispatcherLotDO> flowDispatcherLotList =
                cimJpaRepository.query(sql, CimFlowDispatcherLotDO.class);

        for (CimFlowDispatcherLotDO flowDispatcherLot : flowDispatcherLotList) {

            ObjectIdentifier lotID =
                    ObjectIdentifier.build(
                            flowDispatcherLot.getLotKey(), flowDispatcherLot.getLotObj());

            // step1 - lot_inPostProcessFlag_Get
            Outputs.ObjLotInPostProcessFlagOut strLotInPostProcessFlagGetOut =
                    lotMethod.lotInPostProcessFlagGet(objCommon, lotID);

            if (CimBooleanUtils.isTrue(strLotInPostProcessFlagGetOut.getInPostProcessFlagOfLot())
                    || CimBooleanUtils.isTrue(
                    strLotInPostProcessFlagGetOut.getInPostProcessFlagOfCassette())) {
                continue;
            }

            // step2 - lot_flowBatchSectionInfo_GetDR
            Infos.FlowBatchLotInfo strLotFlowBatchSectionInfoGetDROut =
                    lotMethod.lotFlowBatchSectionInfoGetDR(objCommon, lotID);

            List<Infos.FlowBatchSection> flowBatchSections =
                    strLotFlowBatchSectionInfoGetDROut.getFlowBatchSectionList();
            ObjectIdentifier productID = strLotFlowBatchSectionInfoGetDROut.getProductID();
            for (int i = 0; i < CimArrayUtils.getSize(flowBatchSections); i++) {
                Infos.FlowBatchSection flowBatchSection = flowBatchSections.get(i);
                if (CimBooleanUtils.isTrue(flowBatchSection.getTargetOperationFlag())) {
                    ObjectIdentifier operationID = flowBatchSection.getOperationID();

                    // step3 - process_dispatchEquipments_GetDR
                    List<ObjectIdentifier> strProcessDispatchEquipmentsGetDROut =
                            processMethod.processDispatchEquipmentsGetDR(objCommon, productID, operationID);

                    Boolean targetEquipmentFoundFlag = false;
                    List<ObjectIdentifier> equipmentIDs = strProcessDispatchEquipmentsGetDROut;
                    for (int j = 0; j < CimArrayUtils.getSize(equipmentIDs); j++) {
                        if (ObjectIdentifier.equalsWithValue(equipmentID, equipmentIDs.get(j))) {
                            targetEquipmentFoundFlag = true;
                            break;
                        }
                    }

                    if (CimBooleanUtils.isTrue(targetEquipmentFoundFlag)) {
                        Infos.FlowBatchCandidateLot tmpLot = new Infos.FlowBatchCandidateLot();
                        tmpLotList.add(tmpLot);
                        tmpLot.setFlowBatchLotInfo(strLotFlowBatchSectionInfoGetDROut);
                        tmpLotCount++;
                    }

                    break;
                }
            }
        }

        if (tmpLotCount == 0) {
            return tmpLotList;
        }

        List<ObjectIdentifier> lotIDSeq = new ArrayList<>();
        int i = 0;
        for (i = 0; i < tmpLotCount; i++) {
            lotIDSeq.add(tmpLotList.get(i).getFlowBatchLotInfo().getLotID());
        }
        // -----------------------------------------
        //   Sort by whatNextLogicBase
        // -----------------------------------------
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                aMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        CimDispatcher aDisp = aMachine.getDispatcher();
        Validations.check(
                aDisp == null,
                new OmCode(retCodeConfig.getNotFoundEqpDispatcher(), equipmentID.getValue()));
        DispatcherDTO.EffectiveWhatNextLogic aEffectiveLogic = aDisp.currentWhatNextForMachine();
        List<GlobalDTO.LogicInfo> aPosLogicInfoSequence =
                cimFrameWorkGlobals.convertToLogicInfoFromParameters(aEffectiveLogic.getParameters());
        int logicLen = CimArrayUtils.getSize(aPosLogicInfoSequence);
        CimWhatNextLogicBase aPosWhatNextLogicBase = null;
        List<ObjectIdentifier> tempLotIDs = new ArrayList<>();
        for (i = logicLen - 1; i >= 0; i--) {
            GlobalDTO.LogicInfo aPosLogicInfo = aPosLogicInfoSequence.get(i);
            aPosWhatNextLogicBase =
                    dispatchingManagerCore.findWhatNextLogicObjectNamed(aPosLogicInfo.getLogicName());
            if (aPosWhatNextLogicBase != null) {
                tempLotIDs =
                        aPosWhatNextLogicBase.dispatchForInSQL(
                                aPosLogicInfoSequence.get(i).getParams(), lotIDSeq, aMachine);
            }
        }

        List<Infos.FlowBatchCandidateLot> lotList = new ArrayList<>();
        int count = 0;
        int lotIDCount = CimArrayUtils.getSize(tempLotIDs);
        for (i = 0; i < lotIDCount; i++) {
            for (int j = 0; j < tmpLotCount; j++) {
                if (ObjectIdentifier.equalsWithValue(
                        tempLotIDs.get(i), tmpLotList.get(j).getFlowBatchLotInfo().getLotID())) {
                    lotList.add(tmpLotList.get(j));
                    count++;
                    break;
                }
            }
        }

        List<List<ObjectIdentifier>> recipeInfoSeq = new ArrayList<>();
        List<Boolean> searchFlags = new ArrayList<>();

        for (i = 0; i < tmpLotCount; i++) {
            Infos.FlowBatchLotInfo flowBatchLotInfo = tmpLotList.get(i).getFlowBatchLotInfo();
            List<Infos.FlowBatchSection> flowBatchSections = flowBatchLotInfo.getFlowBatchSectionList();
            searchFlags.add(true);
            int sectionLen = CimArrayUtils.getSize(flowBatchSections);
            List<ObjectIdentifier> logicalRecipes = new ArrayList<>();
            recipeInfoSeq.add(logicalRecipes);
            for (int j = 0; j < sectionLen; j++) {
                // step4- process_logicalRecipe_GetDR
                ObjectIdentifier logicalRecipeID =
                        logicalRecipeMethod.processLogicalRecipeGetDR(
                                objCommon,
                                flowBatchLotInfo.getProductID(),
                                flowBatchSections.get(j).getOperationID());

                logicalRecipes.add(logicalRecipeID);
            }
        }

        // grouping by same batch information
        log.debug("grouping by same batch information");

        int lotCount = 0;
        int tempBatchCnt = 0;

        List<Infos.FlowBatchCandidateLot> tmpFlowBatchCandidateLots = new ArrayList<>();
        for (int j = 0; j < tmpLotCount; j++) {
            if (CimBooleanUtils.isTrue(searchFlags.get(j))) {
                Infos.FlowBatchCandidateLot flowBatchCandidateLot = tmpLotList.get(j);
                if (null == flowBatchCandidateLot || null == flowBatchCandidateLot.getFlowBatchLotInfo()) {
                    continue;
                }
                int sectionLen =
                        CimArrayUtils.getSize(
                                flowBatchCandidateLot.getFlowBatchLotInfo().getFlowBatchSectionList());
                if (0 == sectionLen
                        || flowBatchCandidateLot.getFlowBatchLotInfo().getFlowBatchControl().getOperationCount()
                        != sectionLen) {
                    throw new ServiceException(retCodeConfig.getInvalidFlowbatchOperationcount());
                }
                tempBatchCnt++;
                Boolean entryOperationFlag =
                        flowBatchCandidateLot
                                .getFlowBatchLotInfo()
                                .getFlowBatchSectionList()
                                .get(0)
                                .getEntryOperationFlag();
                int flowBatchOperationCount = sectionLen;
                Boolean machineRecipeExistFlag = false;
                for (int k = 0; k < flowBatchOperationCount; k++) {
                    Infos.FlowBatchSection flowBatchSection =
                            flowBatchCandidateLot.getFlowBatchLotInfo().getFlowBatchSectionList().get(k);
                    if (CimBooleanUtils.isFalse(flowBatchSection.getTargetOperationFlag())) {
                        continue;
                    }
                    ObjectIdentifier logicalRecipeID =
                            new ObjectIdentifier(
                                    recipeInfoSeq.get(j).get(k).getValue(),
                                    recipeInfoSeq.get(j).get(k).getReferenceKey());
                    ObjectIdentifier lotID = flowBatchCandidateLot.getFlowBatchLotInfo().getLotID();

                    ObjectIdentifier machineRecipeID =
                            logicalRecipeMethod.logicalRecipeMachineRecipeGetDR(
                                    objCommon, logicalRecipeID, lotID, equipmentID);

                    if (ObjectIdentifier.isNotEmptyWithValue(machineRecipeID)) {
                        machineRecipeExistFlag = true;
                    }
                }
                if (CimBooleanUtils.isTrue(machineRecipeExistFlag)
                        && CimBooleanUtils.isTrue(entryOperationFlag)) {
                    Infos.FlowBatchCandidateLot tmpFlowBatchCandidateLot = new Infos.FlowBatchCandidateLot();
                    tmpFlowBatchCandidateLots.add(tmpFlowBatchCandidateLot);
                    tmpFlowBatchCandidateLot.setFlowBatchID(String.format("%06d", tempBatchCnt));
                    tmpFlowBatchCandidateLot.setFlowBatchLotInfo(flowBatchCandidateLot.getFlowBatchLotInfo());
                    lotCount++;
                } else {
                    continue;
                }

                // search lot of same condition in the remain lot list
                log.debug("search lot of same condition in the remain lot list");
                Boolean firstDifferentGroupLot = true;
                Boolean sameGroupFlag = false;
                // --- Start searching from the next lot in a lot list ---//
                for (int k = j + 1; k < tmpLotCount; k++) {
                    sameGroupFlag = false;
                    Infos.FlowBatchCandidateLot flowBatchCandidateLot2 = tmpLotList.get(k);
                    if (flowBatchCandidateLot2.getFlowBatchLotInfo().getFlowBatchControl().getOperationCount()
                            == flowBatchOperationCount) {
                        // check batch infoemation of pos in batch period.
                        int l = 0;
                        for (l = 0; l < flowBatchOperationCount; l++) {
                            if (!flowBatchCandidateLot
                                    .getFlowBatchLotInfo()
                                    .getFlowBatchSectionList()
                                    .get(l)
                                    .getTargetOperationFlag()
                                    .equals(
                                            flowBatchCandidateLot2
                                                    .getFlowBatchLotInfo()
                                                    .getFlowBatchSectionList()
                                                    .get(l)
                                                    .getTargetOperationFlag())) {
                                break;
                            }

                            if (!ObjectIdentifier.equals(
                                    recipeInfoSeq.get(j).get(l), recipeInfoSeq.get(k).get(l))) {
                                break;
                            }

                            if (l == 0) {
                                if (!flowBatchCandidateLot
                                        .getFlowBatchLotInfo()
                                        .getFlowBatchControl()
                                        .getMaxLotSize()
                                        .equals(
                                                flowBatchCandidateLot2
                                                        .getFlowBatchLotInfo()
                                                        .getFlowBatchControl()
                                                        .getMaxLotSize())) {
                                    break;
                                }

                                if (!flowBatchCandidateLot
                                        .getFlowBatchLotInfo()
                                        .getFlowBatchControl()
                                        .getMinLotSize()
                                        .equals(
                                                flowBatchCandidateLot2
                                                        .getFlowBatchLotInfo()
                                                        .getFlowBatchControl()
                                                        .getMinLotSize())) {
                                    break;
                                }

                                if (!flowBatchCandidateLot
                                        .getFlowBatchLotInfo()
                                        .getFlowBatchControl()
                                        .getMinWaferSize()
                                        .equals(
                                                flowBatchCandidateLot2
                                                        .getFlowBatchLotInfo()
                                                        .getFlowBatchControl()
                                                        .getMinWaferSize())) {
                                    break;
                                }
                            }
                        }

                        if (l == flowBatchOperationCount) {
                            sameGroupFlag = true;
                        }
                    }

                    // set lot and batch information for the lot of same condition with the first one in a
                    // group to lot list
                    log.debug(
                            "set lot and batch information for the lot of same condition with the first one in a group to lot list");
                    if (CimBooleanUtils.isFalse(sameGroupFlag)) {
                        if (CimBooleanUtils.isTrue(firstDifferentGroupLot)) {
                            j = k - 1;
                            firstDifferentGroupLot = false;
                        }
                    } else {
                        Infos.FlowBatchCandidateLot tmpFlowBatchCandidateLot =
                                new Infos.FlowBatchCandidateLot();
                        tmpFlowBatchCandidateLots.add(tmpFlowBatchCandidateLot);
                        tmpFlowBatchCandidateLot.setFlowBatchID(String.format("%06d", tempBatchCnt));
                        tmpFlowBatchCandidateLot.setFlowBatchLotInfo(
                                flowBatchCandidateLot2.getFlowBatchLotInfo());
                        lotCount++;
                        searchFlags.set(k, false); // to ignore in next search
                    }
                }
            }
        }
        return tmpFlowBatchCandidateLots;
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param strObjCommonIn
     * @param equipmentID
     * @param portID
     * @param cassetteID
     * @return com.fa.cim.dto.RetCode<java.lang.Object>
     * @author Ho
     * @date 2018/11/14 14:35:17
     */
    @Override
    public void equipmentLoadLotDeleteForInternalBuffer(
            Infos.ObjCommon strObjCommonIn,
            ObjectIdentifier equipmentID,
            ObjectIdentifier portID,
            ObjectIdentifier cassetteID) {

        /*------------------------*/
        /*   Get Machine Object   */
        /*------------------------*/
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                aMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        /*-------------------------*/
        /*   Get Cassette Object   */
        /*-------------------------*/
        CimCassette aCassette = baseCoreFactory.getBO(CimCassette.class, cassetteID);
        Validations.check(aCassette == null, retCodeConfig.getNotFoundCassette());
        /*--------------------------------------*/
        /*   Get Cassette-On-Port information   */
        /*--------------------------------------*/
        MachineDTO.MachineCassette machineCassette =
                aMachine.findCassetteNamed(ObjectIdentifier.fetchValue(cassetteID));
        Validations.check(machineCassette == null, retCodeConfig.getNoCassetteOnPort());
        /*---------------------------------------*/
        /*   Clear MaterialLocation's Cassette   */
        /*---------------------------------------*/
        MaterialLocation aMtrlLoc = aCassette.getLocation();
        if (aMtrlLoc != null) {
            // delete MaterialLocation's Cassette
            // materialLocationCore.deleteMaterialLocationCassette(aMtrlLoc);
            aMtrlLoc.materialSent();
        }
        /*----------------------------*/
        /*   Remove MachineCassette   */
        /*----------------------------*/
        aMachine.removeCassette(aCassette);

        /*-------------------------------*/
        /*   Remove Allocated Material   */
        /*   (No controlJob only)        */
        /*-------------------------------*/
        com.fa.cim.newcore.bo.product.CimControlJob aCassetteControlJob = aCassette.getControlJob();
        CimDurableControlJob durableControlJob = aCassette.getDurableControlJob();
        // ---------------------------------------------------------------------------
        // Reservation of a shelf is deleted
        //     if relation of the CJ is other equipment even if equipment has CJ.
        // ---------------------------------------------------------------------------
        boolean bReservedOtherEqp = false;
        if (aCassetteControlJob != null) {
            CimMachine aReserveMachine = aCassetteControlJob.getMachine();
            ObjectIdentifier resvEqpID =
                    ObjectIdentifier.build(aReserveMachine.getIdentifier(), aReserveMachine.getPrimaryKey());
            if (!ObjectIdentifier.equalsWithValue(equipmentID, resvEqpID)) {
                bReservedOtherEqp = true;
            }
        }

        if (durableControlJob != null) {
            CimMachine aReserveMachine = durableControlJob.getMachine();
            ObjectIdentifier resvEqpID =
                    ObjectIdentifier.build(aReserveMachine.getIdentifier(), aReserveMachine.getPrimaryKey());
            if (!ObjectIdentifier.equalsWithValue(equipmentID, resvEqpID)) {
                bReservedOtherEqp = true;
            }
        }

        if (aCassetteControlJob == null && durableControlJob == null || bReservedOtherEqp) {
            /*------------------------------*/
            /*   Get BufferResource Info    */
            /*------------------------------*/
            List<BufferResource> aBufferResourceSeq = aMachine.allBufferResources();
            int lenBufferResource = CimArrayUtils.getSize(aBufferResourceSeq);
            BufferResource aBufferResource = null;
            /*-------------------------------------------------*/
            /*   Find MaterialLocation of BufferResource       */
            /*-------------------------------------------------*/
            for (int i = 0; i < lenBufferResource; i++) {
                aBufferResource = aBufferResourceSeq.get(i);
                Validations.check(aBufferResource == null, retCodeConfig.getNotFoundBufferResource());

                List<MaterialLocation> aMaterialLocationSeq = aBufferResource.allMaterialLocations();

                int lenMaterialLocation = CimArrayUtils.getSize(aMaterialLocationSeq);
                for (int j = 0; j < lenMaterialLocation; j++) {
                    CimMaterialLocation aMaterialLocation = (CimMaterialLocation) aMaterialLocationSeq.get(j);
                    Validations.check(aMaterialLocation == null, retCodeConfig.getNotFoundMaterialLocation());

                    /*-------------------------------------------------*/
                    /*   Check CassetteID for Material Location        */
                    /*-------------------------------------------------*/
                    aMaterialLocation.getAllocatedMaterial();
                    CimCassette aLocatedCassette = (CimCassette) aMaterialLocation.getAllocatedMaterial();
                    if (aLocatedCassette == null) {
                        continue;
                    }
                    String cassetteIdent = aLocatedCassette.getIdentifier();
                    if (!ObjectIdentifier.equalsWithValue(cassetteID, cassetteIdent)) {
                        continue;
                    }
                    /*---------------------------------------------------*/
                    /*   Clear Allocated MaterialID of MaterialLocation  */
                    /*---------------------------------------------------*/
                    aMaterialLocation.makeNotAllocated();
                    /*---------------------------------------------------*/
                    /*   Clear ReservedLoadPort of MaterialLocation      */
                    /*---------------------------------------------------*/
                    aMaterialLocation.setReservedLoadPort(null);
                    /*---------------------------------------------------*/
                    /*   Clear ReservedLoadPort of MaterialLocation      */
                    /*---------------------------------------------------*/
                    aMaterialLocation.setReservedUnloadPort(null);
                }
            }
        }

        /*--------------------------------------*/
        /*       Get Port Resource Object       */
        /*--------------------------------------*/
        CimPortResource aPosPortResource = baseCoreFactory.getBO(CimPortResource.class, portID);
        aPosPortResource.setDispatchUnloadCassette(null);
        // -------------------------------
        //   Get Port's PortUsage
        // -------------------------------
        String portUsage;
        portUsage = aPosPortResource.getPortUsage();
        // -------------------------------
        //   Get Port's LoadPurposeType
        // -------------------------------
        String loadPurposeType;
        loadPurposeType = aPosPortResource.getLoadPurposeType();

        if (CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_WAITINGMONITORLOT)
                || CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_SIDEDUMMYLOT)
                || CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_FILLERDUMMY)
                || CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_INTERNALBUFFER)
                || CimStringUtils.equals(portUsage, CIMStateConst.CIM_PORT_RESOURCE_OUTPUT)) {
            // ------------------------------
            //   Get Lot in Cassette
            // ------------------------------
            List<Lot> aLotSeq = aCassette.allLots();

            int nLotLen = CimArrayUtils.getSize(aLotSeq);

            for (int k = 0; k < nLotLen; k++) {
                // -------------------------------
                //   Get Lot's InventoryState
                // -------------------------------
                CimLot aPosLot = (CimLot) aLotSeq.get(k);

                boolean inBankFlag = aPosLot.isInBank();
                // -------------------------------
                //   Get Lot's ControlUseState
                // -------------------------------
                if (CimBooleanUtils.isTrue(inBankFlag)) {
                    boolean inUseFlag = aPosLot.isInUse();
                    if (CimBooleanUtils.isTrue(inUseFlag)) {
                        com.fa.cim.newcore.bo.factory.CimBank aBank = aPosLot.getBank();
                        Validations.check(aBank == null, retCodeConfig.getNotFoundBank());

                        boolean isRecycleBank = aBank.isRecycleBank();
                        boolean isControlWaferBank = aBank.isControlWaferBank();

                        if (CimBooleanUtils.isTrue(isRecycleBank)) {
                            // ---------------------------------------------
                            //   Change Lot's ControlUseState to WaitRecycle
                            // ---------------------------------------------
                            aPosLot.makeWaitRecycle();
                        } else if (CimBooleanUtils.isTrue(isControlWaferBank)) {
                            aPosLot.makeWaitUse();
                        }
                    }
                }
            }
        }
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param strObjCommonIn
     * @param equipmentID
     * @param cassetteID
     * @param portID
     * @param loadPurposeType
     * @param controlJobID
     * @return com.fa.cim.dto.RetCode<java.lang.Object>
     * @author Ho
     * @date 2018/11/12 18:07:52
     */
    @Override
    public void equipmentAllocatedMaterialAdd(
            Infos.ObjCommon strObjCommonIn,
            ObjectIdentifier equipmentID,
            ObjectIdentifier cassetteID,
            ObjectIdentifier portID,
            String loadPurposeType,
            ObjectIdentifier controlJobID) {

        /*---------------------------------*/
        /*   Get Cassette's ControlJobID   */
        /*---------------------------------*/
        String tempLoadPurposeType = null;
        boolean isControlJob = true;
        CimCassette aCassette = baseCoreFactory.getBO(CimCassette.class, cassetteID);
        Validations.check(
                null == aCassette,
                new OmCode(retCodeConfig.getNotFoundCassette(), ObjectIdentifier.fetchValue(cassetteID)));

        com.fa.cim.newcore.bo.product.CimControlJob aCassetteControlJob = aCassette.getControlJob();

        /*---------------------------*/
        /*   Check loadPurposeType   */
        /*---------------------------*/
        if (aCassetteControlJob == null) {
            isControlJob = false;
            if (aCassette.isEmpty()) {
                Validations.check(
                        !CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE)
                                && !CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_OTHER),
                        new OmCode(
                                retCodeConfig.getInvalidLoadpurpose(),
                                loadPurposeType,
                                ObjectIdentifier.fetchValue(cassetteID)));

            } else {
                List<Lot> lotSeq = aCassette.allLots();
                int i = 0;
                boolean InBankFlag = false;
                ObjectIdentifier lotBankID = null;
                for (i = 0; i < CimArrayUtils.getSize(lotSeq); i++) {
                    CimLot aLot = (CimLot) lotSeq.get(i);
                    Validations.check(aLot == null, new OmCode(retCodeConfig.getNotFoundLot(), "*****"));

                    if (CimStringUtils.equals(
                            aLot.getLotInventoryState(), BizConstant.SP_LOT_INVENTORYSTATE_INBANK)) {
                        InBankFlag = true;
                        // CimBankDO aPosBank =
                        // convertObjectIdentifierToEntity(BaseStaticMethod.getObjectIdentifier(aLot.getBank(),
                        // aLot.getBankObj()), CimBankDO.class);
                        com.fa.cim.newcore.bo.factory.CimBank aPostBank = aLot.getBank();
                        Validations.check(aPostBank == null, new OmCode(retCodeConfig.getNotFoundBank(), ""));
                        lotBankID = new ObjectIdentifier(aPostBank.getIdentifier(), aPostBank.getPrimaryKey());
                        break;
                    }
                }
                if (InBankFlag) {
                    if (!CimStringUtils.equals(
                            loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_WAITINGMONITORLOT)
                            && !CimStringUtils.equals(
                            loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_SIDEDUMMYLOT)
                            && !CimStringUtils.equals(
                            loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_FILLERDUMMY)) {
                        throw new ServiceException(
                                new OmCode(
                                        retCodeConfig.getInvalidLoadpurpose(),
                                        loadPurposeType,
                                        ObjectIdentifier.fetchValue(cassetteID)));
                    }
                }
            }
            tempLoadPurposeType = loadPurposeType;
        } else {
            tempLoadPurposeType = loadPurposeType;
        }
        /*--------------------------*/
        /*   Check Machine Object   */
        /*--------------------------*/
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == aMachine,
                new OmCode(retCodeConfig.getNotFoundEqp(), ObjectIdentifier.fetchValue(equipmentID)));
        /*------------------------------*/
        /*   Get BufferResource Info    */
        /*------------------------------*/
        List<BufferResource> aBufferResourceSeq = aMachine.allBufferResources();
        int lenBufferResource = CimArrayUtils.getSize(aBufferResourceSeq);
        Validations.check(
                CimArrayUtils.isEmpty(aBufferResourceSeq), retCodeConfig.getNotFoundBufferResource());

        /*------------------------------------------------------------------*/
        /*   Check Reservation for MaterialLocation of BufferResource       */
        /*------------------------------------------------------------------*/

        boolean isReserved = false;
        for (int p = 0; p < lenBufferResource; p++) {
            CimBufferResource aCheckBufferResource = (CimBufferResource) aBufferResourceSeq.get(p);
            Validations.check(aCheckBufferResource == null, retCodeConfig.getNotFoundBufferResource());
            // String checkBufferResourceCategory = aCheckBufferResource.getCategory();
            if (!CimStringUtils.equals(tempLoadPurposeType, aCheckBufferResource.getCategory())) {
                continue;
            }

            List<MaterialLocation> aCheckMaterialLocationSeq =
                    aCheckBufferResource.allMaterialLocations();
            for (int q = 0; q < CimArrayUtils.getSize(aCheckMaterialLocationSeq); q++) {
                CimMaterialLocation aCheckMaterialLocation =
                        (CimMaterialLocation) aCheckMaterialLocationSeq.get(q);
                Validations.check(
                        aCheckMaterialLocation == null, retCodeConfig.getNotFoundMaterialLocation());
                /*-------------------------------------------------*/
                /*   Check CassetteID for Material Location        */
                /*-------------------------------------------------*/
                com.fa.cim.newcore.bo.durable.CimCassette aCheckAlocatedCassette =
                        (com.fa.cim.newcore.bo.durable.CimCassette)
                                aCheckMaterialLocation.getAllocatedMaterial();

                if (aCheckAlocatedCassette == null) {
                    /*--------------------------------*/
                    /*   Check ReservedUnloadPortID   */
                    /*--------------------------------*/
                    com.fa.cim.newcore.bo.durable.CimCassette aContainedCassette =
                            (com.fa.cim.newcore.bo.durable.CimCassette) aCheckMaterialLocation.getMaterial();
                    if (null == aContainedCassette) {
                        continue;
                    }

                    CimPortResource aUnloadPortResource = aCheckMaterialLocation.getReservedUnloadPort();

                    if (aUnloadPortResource != null) {
                        Validations.check(
                                ObjectIdentifier.equalsWithValue(portID, aUnloadPortResource.getIdentifier()),
                                retCodeConfig.getUnloaderReservedByAnother());
                    }
                    continue;
                }

                if (ObjectIdentifier.equalsWithValue(cassetteID, aCheckAlocatedCassette.getIdentifier())) {
                    isReserved = true;
                    continue;
                }
            }
        }

        if (!isReserved) {
            /*-------------------------------------------------*/
            /*   Find MaterialLocation of BufferResource       */
            /*-------------------------------------------------*/
            boolean foundTarget = false;
            for (int j = 0; j < lenBufferResource; j++) {
                CimBufferResource aBufferResource = (CimBufferResource) aBufferResourceSeq.get(j);
                Validations.check(aBufferResource == null, retCodeConfig.getNotFoundBufferResource());

                if (!CimStringUtils.equals(tempLoadPurposeType, aBufferResource.getCategory())) {
                    continue;
                }
                List<MaterialLocation> aMaterialLocationSeq = aBufferResource.allMaterialLocations();
                for (int k = 0; k < CimArrayUtils.getSize(aMaterialLocationSeq); k++) {
                    CimMaterialLocation aMaterialLocation = (CimMaterialLocation) aMaterialLocationSeq.get(k);
                    Validations.check(aMaterialLocation == null, retCodeConfig.getNotFoundMaterialLocation());
                    /*--------------------------------*/
                    /*   Check Allocated Avaialbility */
                    /*--------------------------------*/
                    if (aMaterialLocation.isAllocated()) {
                        continue;
                    }
                    if (aMaterialLocation.isOccupied()) {
                        continue;
                    }

          /*MOFW_TransactionalObject::lock_mode alockmode = MOFW_TransactionalObject::im_none;
          //Get ML lock mode which locked by self process..
          try
          {
              alockmode = aMaterialLocation -> GetTxnLockMode();
          }
          CATCH_AND_RAISE_EXCEPTIONS(PosMaterialLocation::GetTxnLockMode);

          log.info("","TxnLockMode", alockmode);
          //Not locked or not locked by self process.
          if(alockmode == MOFW_TransactionalObject::im_none)
          {
              log.info("PPTManager_i::equipment_allocatedMaterial_Add","LockMode is none");
              continue;
          }*/

                    aMaterialLocation.makeAllocated(aCassette);
                    if (isControlJob) {
                        aMaterialLocation.setControlJob(aCassetteControlJob);
                    }
                    /*---------------------------*/
                    /*   Set ReservedLoadPortID  */
                    /*---------------------------*/
                    CimPortResource reservedLoadPort = baseCoreFactory.getBO(CimPortResource.class, portID);
                    Validations.check(
                            reservedLoadPort == null, new OmCode(retCodeConfig.getNotFoundPort(), "*****"));
                    aMaterialLocation.setReservedLoadPort(reservedLoadPort);

                    /*--------------------------------*/
                    /*   Found Target,then update     */
                    /*--------------------------------*/
                    foundTarget = true;
                    break;
                }
                if (foundTarget) break;
            }
            Validations.check(!foundTarget, retCodeConfig.getNotFoundMaterialLocation());
        }
    }

    @Override
    public void equipmentAllocatedMaterialAddForDrbIB(
            Infos.ObjCommon strObjCommonIn,
            ObjectIdentifier equipmentID,
            ObjectIdentifier cassetteID,
            ObjectIdentifier portID,
            String loadPurposeType,
            ObjectIdentifier controlJobID) {

        /*---------------------------------*/
        /*   Get Cassette's ControlJobID   */
        /*---------------------------------*/
        String tempLoadPurposeType = null;
        boolean isControlJob = true;
        CimCassette aCassette = baseCoreFactory.getBO(CimCassette.class, cassetteID);
        Validations.check(
                null == aCassette,
                new OmCode(retCodeConfig.getNotFoundCassette(), ObjectIdentifier.fetchValue(cassetteID)));

        CimDurableControlJob aCassetteControlJob = aCassette.getDurableControlJob();

        /*---------------------------*/
        /*   Check loadPurposeType   */
        /*---------------------------*/
        if (aCassetteControlJob == null) {
            isControlJob = false;
            if (aCassette.isEmpty()) {
                Validations.check(
                        !CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE)
                                && !CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_OTHER),
                        new OmCode(
                                retCodeConfig.getInvalidLoadpurpose(),
                                loadPurposeType,
                                ObjectIdentifier.fetchValue(cassetteID)));

            } else {
                List<Lot> lotSeq = aCassette.allLots();
                int i = 0;
                boolean InBankFlag = false;
                ObjectIdentifier lotBankID = null;
                for (i = 0; i < CimArrayUtils.getSize(lotSeq); i++) {
                    CimLot aLot = (CimLot) lotSeq.get(i);
                    Validations.check(aLot == null, new OmCode(retCodeConfig.getNotFoundLot(), "*****"));

                    if (CimStringUtils.equals(
                            aLot.getLotInventoryState(), BizConstant.SP_LOT_INVENTORYSTATE_INBANK)) {
                        InBankFlag = true;
                        // CimBankDO aPosBank =
                        // convertObjectIdentifierToEntity(BaseStaticMethod.getObjectIdentifier(aLot.getBank(),
                        // aLot.getBankObj()), CimBankDO.class);
                        com.fa.cim.newcore.bo.factory.CimBank aPostBank = aLot.getBank();
                        Validations.check(aPostBank == null, new OmCode(retCodeConfig.getNotFoundBank(), ""));
                        lotBankID = new ObjectIdentifier(aPostBank.getIdentifier(), aPostBank.getPrimaryKey());
                        break;
                    }
                }
                if (InBankFlag) {
                    if (!CimStringUtils.equals(
                            loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_WAITINGMONITORLOT)
                            && !CimStringUtils.equals(
                            loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_SIDEDUMMYLOT)
                            && !CimStringUtils.equals(
                            loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_FILLERDUMMY)) {
                        throw new ServiceException(
                                new OmCode(
                                        retCodeConfig.getInvalidLoadpurpose(),
                                        loadPurposeType,
                                        ObjectIdentifier.fetchValue(cassetteID)));
                    }
                }
            }
            tempLoadPurposeType = loadPurposeType;
        } else {
            tempLoadPurposeType = loadPurposeType;
        }
        /*--------------------------*/
        /*   Check Machine Object   */
        /*--------------------------*/
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == aMachine,
                new OmCode(retCodeConfig.getNotFoundEqp(), ObjectIdentifier.fetchValue(equipmentID)));
        /*------------------------------*/
        /*   Get BufferResource Info    */
        /*------------------------------*/
        List<BufferResource> aBufferResourceSeq = aMachine.allBufferResources();
        int lenBufferResource = CimArrayUtils.getSize(aBufferResourceSeq);
        Validations.check(
                CimArrayUtils.isEmpty(aBufferResourceSeq), retCodeConfig.getNotFoundBufferResource());

        /*------------------------------------------------------------------*/
        /*   Check Reservation for MaterialLocation of BufferResource       */
        /*------------------------------------------------------------------*/

        boolean isReserved = false;
        for (int p = 0; p < lenBufferResource; p++) {
            CimBufferResource aCheckBufferResource = (CimBufferResource) aBufferResourceSeq.get(p);
            Validations.check(aCheckBufferResource == null, retCodeConfig.getNotFoundBufferResource());
            // String checkBufferResourceCategory = aCheckBufferResource.getCategory();
            if (!CimStringUtils.equals(tempLoadPurposeType, aCheckBufferResource.getCategory())) {
                continue;
            }

            List<MaterialLocation> aCheckMaterialLocationSeq =
                    aCheckBufferResource.allMaterialLocations();
            for (int q = 0; q < CimArrayUtils.getSize(aCheckMaterialLocationSeq); q++) {
                CimMaterialLocation aCheckMaterialLocation =
                        (CimMaterialLocation) aCheckMaterialLocationSeq.get(q);
                Validations.check(
                        aCheckMaterialLocation == null, retCodeConfig.getNotFoundMaterialLocation());
                /*-------------------------------------------------*/
                /*   Check CassetteID for Material Location        */
                /*-------------------------------------------------*/
                com.fa.cim.newcore.bo.durable.CimCassette aCheckAlocatedCassette =
                        (com.fa.cim.newcore.bo.durable.CimCassette)
                                aCheckMaterialLocation.getAllocatedMaterial();

                if (aCheckAlocatedCassette == null) {
                    /*--------------------------------*/
                    /*   Check ReservedUnloadPortID   */
                    /*--------------------------------*/
                    com.fa.cim.newcore.bo.durable.CimCassette aContainedCassette =
                            (com.fa.cim.newcore.bo.durable.CimCassette) aCheckMaterialLocation.getMaterial();
                    if (null == aContainedCassette) {
                        continue;
                    }

                    CimPortResource aUnloadPortResource = aCheckMaterialLocation.getReservedUnloadPort();

                    if (aUnloadPortResource != null) {
                        Validations.check(
                                ObjectIdentifier.equalsWithValue(portID, aUnloadPortResource.getIdentifier()),
                                retCodeConfig.getUnloaderReservedByAnother());
                    }
                    continue;
                }

                if (ObjectIdentifier.equalsWithValue(cassetteID, aCheckAlocatedCassette.getIdentifier())) {
                    isReserved = true;
                    continue;
                }
            }
        }

        if (!isReserved) {
            /*-------------------------------------------------*/
            /*   Find MaterialLocation of BufferResource       */
            /*-------------------------------------------------*/
            boolean foundTarget = false;
            for (int j = 0; j < lenBufferResource; j++) {
                CimBufferResource aBufferResource = (CimBufferResource) aBufferResourceSeq.get(j);
                Validations.check(aBufferResource == null, retCodeConfig.getNotFoundBufferResource());

                if (!CimStringUtils.equals(tempLoadPurposeType, aBufferResource.getCategory())) {
                    continue;
                }
                List<MaterialLocation> aMaterialLocationSeq = aBufferResource.allMaterialLocations();
                for (int k = 0; k < CimArrayUtils.getSize(aMaterialLocationSeq); k++) {
                    CimMaterialLocation aMaterialLocation = (CimMaterialLocation) aMaterialLocationSeq.get(k);
                    Validations.check(aMaterialLocation == null, retCodeConfig.getNotFoundMaterialLocation());
                    /*--------------------------------*/
                    /*   Check Allocated Avaialbility */
                    /*--------------------------------*/
                    if (aMaterialLocation.isAllocated()) {
                        continue;
                    }
                    if (aMaterialLocation.isOccupied()) {
                        continue;
                    }

          /*MOFW_TransactionalObject::lock_mode alockmode = MOFW_TransactionalObject::im_none;
          //Get ML lock mode which locked by self process..
          try
          {
              alockmode = aMaterialLocation -> GetTxnLockMode();
          }
          CATCH_AND_RAISE_EXCEPTIONS(PosMaterialLocation::GetTxnLockMode);

          log.info("","TxnLockMode", alockmode);
          //Not locked or not locked by self process.
          if(alockmode == MOFW_TransactionalObject::im_none)
          {
              log.info("PPTManager_i::equipment_allocatedMaterial_Add","LockMode is none");
              continue;
          }*/

                    aMaterialLocation.makeAllocated(aCassette);
                    if (isControlJob) {
                        aMaterialLocation.setDurableControlJob(aCassetteControlJob);
                    }
                    /*---------------------------*/
                    /*   Set ReservedLoadPortID  */
                    /*---------------------------*/
                    CimPortResource reservedLoadPort = baseCoreFactory.getBO(CimPortResource.class, portID);
                    Validations.check(
                            reservedLoadPort == null, new OmCode(retCodeConfig.getNotFoundPort(), "*****"));
                    aMaterialLocation.setReservedLoadPort(reservedLoadPort);

                    /*--------------------------------*/
                    /*   Found Target,then update     */
                    /*--------------------------------*/
                    foundTarget = true;
                    break;
                }
                if (foundTarget) break;
            }
            Validations.check(!foundTarget, retCodeConfig.getNotFoundMaterialLocation());
        }
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param strObjCommonIn
     * @param equipmentID
     * @param bEqpInternalBufferInfo
     * @param strEqpInternalBufferInfoSeq
     * @return com.fa.cim.dto.RetCode<com.fa.cim.pojo.Infos.EquipmentShelfSpaceForInternalBufferGet>
     * @author Ho
     * @date 2018/11/2 15:50:48
     */
    @Override
    public Infos.EquipmentShelfSpaceForInternalBufferGet equipmentShelfSpaceForInternalBufferGet(
            Infos.ObjCommon strObjCommonIn,
            ObjectIdentifier equipmentID,
            Boolean bEqpInternalBufferInfo,
            List<Infos.EqpInternalBufferInfo> strEqpInternalBufferInfoSeq) {
        Infos.EquipmentShelfSpaceForInternalBufferGet strEquipment_shelfSpaceForInternalBuffer_Get_out =
                new Infos.EquipmentShelfSpaceForInternalBufferGet();
        long emptyCassetteSpace = 0l,
                fillerDummyLotSpace = 0l,
                processLotSpace = 0l,
                processMonitorLotSpace = 0l,
                sideDummyLotSpace = 0l,
                waitingMonitorLotSpace = 0l,
                otherSpace = 0l;

        strEquipment_shelfSpaceForInternalBuffer_Get_out.setEmptyCassetteSpace(0l);
        strEquipment_shelfSpaceForInternalBuffer_Get_out.setFillerDummyLotSpace(0l);
        strEquipment_shelfSpaceForInternalBuffer_Get_out.setProcessLotSpace(0l);
        strEquipment_shelfSpaceForInternalBuffer_Get_out.setProcessMonitorLotSpace(0l);
        strEquipment_shelfSpaceForInternalBuffer_Get_out.setSideDummyLotSpace(0l);
        strEquipment_shelfSpaceForInternalBuffer_Get_out.setWaitingMonitorLotSpace(0l);
        strEquipment_shelfSpaceForInternalBuffer_Get_out.setOtherSpace(0l);

        int i, j;

        List<Infos.EqpInternalBufferInfo> strEquipment_internalBufferInfo_Get_out = null;
        if (!CimBooleanUtils.isTrue(bEqpInternalBufferInfo)) {
            // step1 - equipment_internalBufferInfo_Get
            strEquipment_internalBufferInfo_Get_out =
                    this.equipmentInternalBufferInfoGet(strObjCommonIn, equipmentID);
        } else {
            strEquipment_internalBufferInfo_Get_out = strEqpInternalBufferInfoSeq;
        }

        List<Infos.EqpInternalBufferInfo> equipmentInternalBufferInfo =
                strEquipment_internalBufferInfo_Get_out;
        int lenBufCategory = CimArrayUtils.getSize(equipmentInternalBufferInfo);
        for (i = 0; i < lenBufCategory; i++) {
            List<Infos.ShelfInBuffer> strShelfInBuffer =
                    equipmentInternalBufferInfo.get(i).getShelfInBufferList();
            int nShelfLen = CimArrayUtils.getSize(strShelfInBuffer);
            for (j = 0; j < nShelfLen; j++) {
                Infos.ShelfInBuffer shelfInBuffer = strShelfInBuffer.get(j);
                if (!ObjectIdentifier.isEmpty(shelfInBuffer.getLoadedCarrierID())) {
                    continue;
                }

                if (!ObjectIdentifier.isEmpty(shelfInBuffer.getReservedCarrierID())) {
                    continue;
                }

                if (CimStringUtils.equals(
                        BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE,
                        equipmentInternalBufferInfo.get(i).getBufferCategory())) {
                    strEquipment_shelfSpaceForInternalBuffer_Get_out.setEmptyCassetteSpace(
                            ++emptyCassetteSpace);
                } else if (CimStringUtils.equals(
                        BizConstant.SP_LOADPURPOSETYPE_FILLERDUMMY,
                        equipmentInternalBufferInfo.get(i).getBufferCategory())) {
                    strEquipment_shelfSpaceForInternalBuffer_Get_out.setFillerDummyLotSpace(
                            ++fillerDummyLotSpace);
                } else if (CimStringUtils.equals(
                        BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT,
                        equipmentInternalBufferInfo.get(i).getBufferCategory())) {
                    strEquipment_shelfSpaceForInternalBuffer_Get_out.setProcessLotSpace(++processLotSpace);
                } else if (CimStringUtils.equals(
                        BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT,
                        equipmentInternalBufferInfo.get(i).getBufferCategory())) {
                    strEquipment_shelfSpaceForInternalBuffer_Get_out.setProcessMonitorLotSpace(
                            ++processMonitorLotSpace);
                } else if (CimStringUtils.equals(
                        BizConstant.SP_LOADPURPOSETYPE_SIDEDUMMYLOT,
                        equipmentInternalBufferInfo.get(i).getBufferCategory())) {
                    strEquipment_shelfSpaceForInternalBuffer_Get_out.setSideDummyLotSpace(
                            ++sideDummyLotSpace);
                } else if (CimStringUtils.equals(
                        BizConstant.SP_LOADPURPOSETYPE_WAITINGMONITORLOT,
                        equipmentInternalBufferInfo.get(i).getBufferCategory())) {
                    strEquipment_shelfSpaceForInternalBuffer_Get_out.setWaitingMonitorLotSpace(
                            ++waitingMonitorLotSpace);
                } else if (CimStringUtils.equals(
                        BizConstant.SP_LOADPURPOSETYPE_OTHER,
                        equipmentInternalBufferInfo.get(i).getBufferCategory())) {
                    strEquipment_shelfSpaceForInternalBuffer_Get_out.setOtherSpace(++otherSpace);
                }
            }
        }
        return strEquipment_shelfSpaceForInternalBuffer_Get_out;
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param objCommon
     * @param equipmentID
     * @return com.fa.cim.dto.RetCode<java.util.List < com.fa.cim.pojo.Infos.EqpInternalBufferInfo>>
     * @author Ho
     * @date 2018/11/1 17:41:34
     */
    @Override
    public List<Infos.EqpInternalBufferInfo> equipmentInternalBufferInfoGet(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        log.debug("equipmentInternalBufferInfoGet start");
        List<Infos.EqpInternalBufferInfo> equipmentInternalBufferInfo = new ArrayList<>();
        /*--------------------------*/
        /*   Check Machine Object   */
        /*--------------------------*/
        CimMachine aPosMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        /*------------------------------*/
        /*   Get BufferResource Info    */
        /*------------------------------*/
        List<CimBufferResource> aBufferResourceSeq = new ArrayList<>();
        Optional<List<BufferResource>> optional = Optional.ofNullable(aPosMachine.allBufferResources());
        optional.ifPresent(
                bufferResource ->
                        bufferResource.forEach(x -> aBufferResourceSeq.add((CimBufferResource) x)));
        int lenBufferResource = CimArrayUtils.getSize(aBufferResourceSeq);
        for (int i = 0; i < lenBufferResource; i++) {
            CimBufferResource aPosBufferResource = aBufferResourceSeq.get(i);
            Validations.check(aPosBufferResource == null, retCodeConfig.getNotFoundBufferResource());
            /*--------------------------------*/
            /*   Set BufferResource Category  */
            /*--------------------------------*/
            String bufferResourceCategory = aPosBufferResource.getCategory();
            Infos.EqpInternalBufferInfo internalBufferInfo = new Infos.EqpInternalBufferInfo();
            internalBufferInfo.setBufferCategory(bufferResourceCategory);
            if (CimStringUtils.equals(
                    bufferResourceCategory, BizConstant.SP_BUFFERCATEGORY_ANYPROCESSLOT)) {
                internalBufferInfo.setShelfInBufferList(new ArrayList<>());
                continue;
            }
            /*--------------------------------*/
            /*   Set BufferResource Capacity  */
            /*--------------------------------*/
            Long bufferResourceCapacity = aPosBufferResource.getActualCapacity();
            internalBufferInfo.setBufferCapacity(String.format("%d", bufferResourceCapacity));
            /*--------------------------------*/
            /*   Get MaterialLocation         */
            /*--------------------------------*/
            List<MaterialLocation> aMaterialLocationSeq = aPosBufferResource.allMaterialLocations();
            int lenShelfInBuffer = CimArrayUtils.getSize(aMaterialLocationSeq);
            List<Infos.ShelfInBuffer> strShelfInBuffer = new ArrayList<>();
            for (int j = 0; j < lenShelfInBuffer; j++) {
                boolean findControlJob = false;
                CimMaterialLocation aMaterialLocation = (CimMaterialLocation) aMaterialLocationSeq.get(j);
                Validations.check(aMaterialLocation == null, retCodeConfig.getNotFoundMaterialLocation());
                /*--------------------------------*/
                /*   Set shelfOrderNumber         */
                /*--------------------------------*/
                Infos.ShelfInBuffer shelfInBuffer = new Infos.ShelfInBuffer();
                shelfInBuffer.setShelfOrderNumber(j + 1);

                /*--------------------------------*/
                /*   Set controlJobID             */
                /*--------------------------------*/
                com.fa.cim.newcore.bo.product.CimControlJob aMaterialLocationControlJob =
                        aMaterialLocation.getControlJob();
                if (aMaterialLocationControlJob == null) {
                    shelfInBuffer.setControlJobID(null);
                } else {
                    shelfInBuffer.setControlJobID(
                            new ObjectIdentifier(
                                    aMaterialLocationControlJob.getIdentifier(),
                                    aMaterialLocationControlJob.getPrimaryKey()));
                    findControlJob = true;
                }
                CimDurableControlJob aMaterialLocationDurableControlJob =
                        aMaterialLocation.getDurableControlJob();
                if (aMaterialLocationDurableControlJob == null) {
                    shelfInBuffer.setDurableControlJobID(null);
                } else {
                    shelfInBuffer.setDurableControlJobID(
                            new ObjectIdentifier(
                                    aMaterialLocationDurableControlJob.getIdentifier(),
                                    aMaterialLocationDurableControlJob.getPrimaryKey()));
                }
                /*--------------------------------*/
                /*   Set loadedCarrierID          */
                /*--------------------------------*/
                Material aContainedMaterial = aMaterialLocation.getMaterial();
                com.fa.cim.newcore.bo.durable.CimCassette aContainedCassette =
                        (com.fa.cim.newcore.bo.durable.CimCassette) aContainedMaterial;
                if (aContainedCassette != null) {
                    shelfInBuffer.setLoadedCarrierID(
                            new ObjectIdentifier(
                                    aContainedCassette.getIdentifier(), aContainedCassette.getPrimaryKey()));
                    List<MachineDTO.MachineCassette> posMachineCassetteSeq = aPosMachine.allCassettes();
                    int lenMachineCasSeq = CimArrayUtils.getSize(posMachineCassetteSeq);
                    for (int x = 0; x < lenMachineCasSeq; x++) {
                        MachineDTO.MachineCassette posMachineCassette = posMachineCassetteSeq.get(x);
                        if (ObjectIdentifier.equalsWithValue(
                                shelfInBuffer.getLoadedCarrierID(), posMachineCassette.getCassetteID())) {
                            List<MachineDTO.MachineCassetteLot> machineCassetteLots =
                                    posMachineCassette.getMachineCassetteLots();
                            int lenMachineCasLot = CimArrayUtils.getSize(machineCassetteLots);
                            List<Infos.LotOnPort> strLotInShelf = new ArrayList<>();
                            shelfInBuffer.setLotInShelfList(strLotInShelf);

                            for (int y = 0; y < lenMachineCasLot; y++) {
                                MachineDTO.MachineCassetteLot machineCassetteLot = machineCassetteLots.get(y);
                                Infos.LotOnPort lotInShelf = new Infos.LotOnPort();
                                lotInShelf.setMoveInFlag(machineCassetteLot.isOperationStartFlag());
                                lotInShelf.setMonitorLotFlag(machineCassetteLot.isMonitorLotFlag());

                                lotInShelf.setLotID(machineCassetteLot.getLotID());
                                CimLot aPosLot = baseCoreFactory.getBO(CimLot.class, machineCassetteLot.getLotID());
                                lotInShelf.setLotType(aPosLot.getLotType());
                                lotInShelf.setSubLotType(aPosLot.getSubLotType());
                                strLotInShelf.add(lotInShelf);
                            }
                        }
                    }
                }
                /*--------------------------------*/
                /*   Set reservedCarrierID        */
                /*--------------------------------*/
                Material aAllocatedMaterial = aMaterialLocation.getAllocatedMaterial();
                com.fa.cim.newcore.bo.durable.CimCassette aAllocatedCassette =
                        (com.fa.cim.newcore.bo.durable.CimCassette) aAllocatedMaterial;
                if (aAllocatedCassette == null) {
                    shelfInBuffer.setReservedCarrierID(null);
                } else {
                    shelfInBuffer.setReservedCarrierID(
                            new ObjectIdentifier(
                                    aAllocatedCassette.getIdentifier(), aAllocatedCassette.getPrimaryKey()));
                }
                /*--------------------------------*/
                /*   Set reservedLoadPortID       */
                /*--------------------------------*/
                CimPortResource aResevedLoadPort = aMaterialLocation.getReservedLoadPort();
                if (null != aResevedLoadPort) {
                    shelfInBuffer.setReservedLoadPortID(
                            new ObjectIdentifier(
                                    aResevedLoadPort.getIdentifier(), aResevedLoadPort.getPrimaryKey()));
                }
                /*--------------------------------*/
                /*   Set reservedUnloadPortID     */
                /*--------------------------------*/
                CimPortResource aResevedUnloadPort = aMaterialLocation.getReservedUnloadPort();
                if (null != aResevedUnloadPort) {
                    shelfInBuffer.setReservedUnloadPortID(
                            new ObjectIdentifier(
                                    aResevedUnloadPort.getIdentifier(), aResevedUnloadPort.getPrimaryKey()));
                }
                strShelfInBuffer.add(shelfInBuffer);
            }
            internalBufferInfo.setShelfInBufferList(strShelfInBuffer);
            equipmentInternalBufferInfo.add(internalBufferInfo);
        }
        return equipmentInternalBufferInfo;
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param objCommon
     * @param lotID
     * @param operation
     * @return com.fa.cim.dto.RetCode<java.lang.Object>
     * @author Ho
     * @date 2018/11/1 11:07:35
     */
    @Override
    public void eqpMonitorJobLotUpdate(
            Infos.ObjCommon objCommon, ObjectIdentifier lotID, String operation) {
        CimLot cimLotDO = baseCoreFactory.getBO(CimLot.class, lotID);
        Outputs.ObjEquipmentMonitorSectionInfoGetForJobOut strLotEqpMonitorSectionInfoGetForJobOut =
                lotMethod.lotEqpMonitorSectionInfoGetForJob(objCommon, lotID);
        if (ObjectIdentifier.isEmpty(strLotEqpMonitorSectionInfoGetForJobOut.getEquipmentMonitorJobID())
                || CimStringUtils.isEmpty(strLotEqpMonitorSectionInfoGetForJobOut.getOperationLabel())) {
            return;
        }
        CimEqpMonitorJob monitorJobByEquipmentMonitorJob =
                baseCoreFactory.getBO(
                        CimEqpMonitorJob.class,
                        strLotEqpMonitorSectionInfoGetForJobOut.getEquipmentMonitorJobID());
        MachineDTO.EqpMonitorLotInfo equipmentMonitorJobLotDO =
                monitorJobByEquipmentMonitorJob.findEqpMonitorLotFor(cimLotDO);
        Validations.check(
                null == equipmentMonitorJobLotDO
                        || ObjectIdentifier.isEmpty(equipmentMonitorJobLotDO.getLotID()),
                retCodeConfig.getNotFoundEqpMonitor());
        if (BizConstant.SP_EQPMONITORJOB_OPECATEGORY_OPESTART.equals(operation)) {
            if (BizConstant.SP_EQPMONITOR_OPELABEL_MONITOR.equals(
                    strLotEqpMonitorSectionInfoGetForJobOut.getOperationLabel())) {
                equipmentMonitorJobLotDO.setMonitorLotStatus(BizConstant.SP_EQPMONITOR_LOTSTATUS_EXECUTING);
            }
            if (BizConstant.SP_EQPMONITORJOB_STATUS_EXECUTING.equals(
                    equipmentMonitorJobLotDO.getMonitorLotStatus())
                    && strLotEqpMonitorSectionInfoGetForJobOut.isExitFlag()) {
                equipmentMonitorJobLotDO.setExitFlag(true);
            }
            equipmentMonitorJobLotDO.setResult(0);
        } else if (BizConstant.SP_EQPMONITORJOB_OPECATEGORY_OPESTARTCANCEL.equals(operation)) {
            if (BizConstant.SP_EQPMONITOR_OPELABEL_MONITOR.equals(
                    strLotEqpMonitorSectionInfoGetForJobOut.getOperationLabel())) {
                equipmentMonitorJobLotDO.setMonitorLotStatus(BizConstant.SP_EQPMONITOR_LOTSTATUS_RESERVED);
            }
            if (strLotEqpMonitorSectionInfoGetForJobOut.isExitFlag()) {
                equipmentMonitorJobLotDO.setExitFlag(false);
            }
            if (BizConstant.SP_EQPMONITOR_OPELABEL_POSTMEASUREMENT.equals(
                    strLotEqpMonitorSectionInfoGetForJobOut.getOperationLabel())) {
                equipmentMonitorJobLotDO.setResult(0);
            }
        } else if (BizConstant.SP_EQPMONITORJOB_OPECATEGORY_GATEPASS.equals(operation)) {
            if (BizConstant.SP_EQPMONITOR_LOTSTATUS_EXECUTING.equals(
                    strLotEqpMonitorSectionInfoGetForJobOut.getOperationLabel())
                    && strLotEqpMonitorSectionInfoGetForJobOut.isExitFlag()) {
                equipmentMonitorJobLotDO.setExitFlag(true);
            }

        } else if (BizConstant.SP_EQPMONITORJOB_OPECATEGORY_LOTREMOVE.equals(operation)) {
            monitorJobByEquipmentMonitorJob.removeEqpMonitorLot(cimLotDO);
        } else if (BizConstant.SP_EQPMONITORJOB_OPECATEGORY_SPECCHECK.equals(operation)) {
            if (BizConstant.SP_EQPMONITOR_OPELABEL_POSTMEASUREMENT.equals(
                    strLotEqpMonitorSectionInfoGetForJobOut.getOperationLabel())
                    && BizConstant.SP_EQPMONITOR_LOTSTATUS_EXECUTING.equals(
                    equipmentMonitorJobLotDO.getMonitorLotStatus())) {
                equipmentMonitorJobLotDO.setResult(1);
            }
        } else {
            throw new ServiceException(retCodeConfig.getUnknownOperation());
        }
        if (!(BizConstant.SP_EQPMONITORJOB_OPECATEGORY_LOTREMOVE.equals(operation))) {
            monitorJobByEquipmentMonitorJob.removeEqpMonitorLot(cimLotDO);
            monitorJobByEquipmentMonitorJob.addEqpMonitorLot(equipmentMonitorJobLotDO);
        }
        monitorJobByEquipmentMonitorJob.setLastClaimedTimeStamp(
                objCommon.getTimeStamp().getReportTimeStamp());

        CimPerson aPosPerson = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());

        monitorJobByEquipmentMonitorJob.setLastClaimedUser(aPosPerson);
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param strObjCommonIn
     * @param equipmentID
     * @param controlJobID
     * @param strStartCassette
     * @return com.fa.cim.dto.RetCode<java.lang.Object>
     * @author Ho
     * @date 2018/11/1 10:13:12
     */
    @Override
    public void equipmentProcessingLotAddForInternalBuffer(
            Infos.ObjCommon strObjCommonIn,
            ObjectIdentifier equipmentID,
            ObjectIdentifier controlJobID,
            List<Infos.StartCassette> strStartCassette) {
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == aMachine,
                new OmCode(retCodeConfig.getNotFoundEqp(), ObjectIdentifier.fetchValue(equipmentID)));

        int SCLength = CimArrayUtils.getSize(strStartCassette);
        for (int i = 0; i < SCLength; i++) {
            Infos.StartCassette startCassette = strStartCassette.get(i);
            String loadPurposeType;
            loadPurposeType = startCassette.getLoadPurposeType();
            if (!CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT)
                    && !CimStringUtils.equals(
                    loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT)) {
                continue;
            }

            List<Infos.LotInCassette> strLotInCassette = startCassette.getLotInCassetteList();
            int LICLength = CimArrayUtils.getSize(strLotInCassette);
            for (int j = 0; j < LICLength; j++) {
                Infos.LotInCassette lotInCassette = strLotInCassette.get(j);
                boolean operationStartFlag;
                operationStartFlag = CimBooleanUtils.isTrue(lotInCassette.getMoveInFlag());
                if (!operationStartFlag) {
                    continue;
                }

                MachineDTO.MachineLot processingLot = new MachineDTO.MachineLot();

                processingLot.setControlJobID(controlJobID);
                processingLot.setLotID(lotInCassette.getLotID());
                // processingLot.unloadCassetteID = strStartCassette[i].cassetteID; 注意
                processingLot.setUnloadCassetteID(startCassette.getCassetteID());
                processingLot.setUnloadPortID(startCassette.getUnloadPortID());
                /** EquipmentLot中午UnloadSequenceNumber这个字段 processingLot.setUnloadSequenceNumber(0l); */
                processingLot.setUnloadSequenceNumber(0L);
                processingLot.setDataCollectionRequiredFlag(
                        lotInCassette.getStartRecipe().getDataCollectionFlag());
                aMachine.addProcessingLot(processingLot);
                String updateRecipeFlag = StandardProperties.OM_UPDATE_LAST_USED_RECIPE.getValue();
                if (!CimStringUtils.equals("0", updateRecipeFlag)) {
                    CimMachineRecipe aMachineRecipe =
                            baseCoreFactory.getBO(
                                    CimMachineRecipe.class, lotInCassette.getStartRecipe().getMachineRecipeID());
                    Validations.check(
                            null == aMachineRecipe,
                            new OmCode(
                                    retCodeConfig.getNotFoundMachineRecipe(),
                                    ObjectIdentifier.fetchValue(
                                            lotInCassette.getStartRecipe().getMachineRecipeID())));
                    aMachine.setUsedMachineRecipe(aMachineRecipe);
                }
            }
        }
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param objCommon
     * @param equipmentID
     * @param eqpMonitorID
     * @return com.fa.cim.dto.RetCode<java.util.List < com.fa.cim.pojo.Infos.EqpMonitorDetailInfo>>
     * @author Ho
     * @date 2018/11/1 10:40:18
     */
    @Override
    public List<Infos.EqpMonitorDetailInfo> eqpMonitorInfoGet(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, ObjectIdentifier eqpMonitorID) {
        List<Infos.EqpMonitorDetailInfo> eqpMonitorDetailInfos = new ArrayList<>();
        Validations.check(
                !ObjectIdentifier.isEmptyWithValue(eqpMonitorID)
                        && !ObjectIdentifier.isEmptyWithValue(equipmentID),
                retCodeConfig.getInvalidParameter());
        if (!ObjectIdentifier.isEmptyWithValue(equipmentID)) {
            List<CimEqpMonitor> strEqpMonitorSeq =
                    newMachineManager.findEqpMonitorFor(ObjectIdentifier.fetchValue(equipmentID), null);
            int lenEqpMonSeq = CimArrayUtils.getSize(strEqpMonitorSeq);
            for (int i = 0; i < lenEqpMonSeq; i++) {
                MachineDTO.EqpMonitorInfo eqpMonitorInfo = strEqpMonitorSeq.get(i).getEqpMonitorInfo();

                Infos.EqpMonitorDetailInfo eqpMonitorDetailInfo = new Infos.EqpMonitorDetailInfo();
                eqpMonitorDetailInfo.setEqpMonitorID(eqpMonitorInfo.getEqpMonitorID());
                eqpMonitorDetailInfo.setEquipmentID(eqpMonitorInfo.getMachineID());
                eqpMonitorDetailInfo.setChamberID(eqpMonitorInfo.getChamberID());
                eqpMonitorDetailInfo.setDescription(eqpMonitorInfo.getDescription());
                eqpMonitorDetailInfo.setMonitorType(eqpMonitorInfo.getMonitorType());
                eqpMonitorDetailInfo.setScheduleType(eqpMonitorInfo.getScheduleType());
                eqpMonitorDetailInfo.setStartTimeStamp(eqpMonitorInfo.getStartTimeStamp());
                eqpMonitorDetailInfo.setExecutionInterval(eqpMonitorInfo.getExecutionInterval());
                eqpMonitorDetailInfo.setWarningInterval(eqpMonitorInfo.getWarningInterval());
                eqpMonitorDetailInfo.setStandAloneFlag(eqpMonitorInfo.isStandAloneFlag());
                eqpMonitorDetailInfo.setKitFlag(eqpMonitorInfo.isKitFlag());
                eqpMonitorDetailInfo.setMaxRetryCount(eqpMonitorInfo.getMaxRetryCount());
                Infos.EqpStatus eqpStatus = new Infos.EqpStatus();
                eqpStatus.setEquipmentStatusCode(eqpMonitorInfo.getMachineStateAtStart());
                eqpMonitorDetailInfo.setEqpStateAtStart(eqpStatus);
                Infos.EqpStatus eqpStateAtPassed = new Infos.EqpStatus();
                eqpMonitorDetailInfo.setEqpStateAtPassed(eqpStateAtPassed);
                eqpStateAtPassed.setEquipmentStatusCode(eqpMonitorInfo.getMachineStateAtPassed());
                Infos.EqpStatus eqpStateAtFailed = new Infos.EqpStatus();
                eqpStateAtFailed.setEquipmentStatusCode(eqpMonitorInfo.getMachineStateAtFailed());
                eqpMonitorDetailInfo.setEqpStateAtFailed(eqpStateAtFailed);
                eqpMonitorDetailInfo.setMonitorStatus(eqpMonitorInfo.getMonitorStatus());
                eqpMonitorDetailInfo.setWarningTime(eqpMonitorInfo.getWarningTimeStamp().toString());
                eqpMonitorDetailInfo.setScheduleBaseTimeStamp(
                        eqpMonitorInfo.getScheduleBaseTimeStamp().toString());
                eqpMonitorDetailInfo.setScheduleAdjustment(eqpMonitorInfo.getScheduleAdjustment());
                eqpMonitorDetailInfo.setLastMonitorTimeStamp(
                        eqpMonitorInfo.getLastMonitorTimeStamp().toString());
                eqpMonitorDetailInfo.setLastMonitorResult(eqpMonitorInfo.getLastMonitorResult());
                eqpMonitorDetailInfo.setLastMonitorPassedTimeStamp(
                        eqpMonitorInfo.getLastMonitorPassedTimeStamp());
                eqpMonitorDetailInfo.setLastClaimedTimeStamp(eqpMonitorInfo.getLastClaimedTimeStamp());
                eqpMonitorDetailInfo.setLastClaimedUser(eqpMonitorInfo.getLastClaimedUser());
                // Calculate nextExecutionTime
                Infos.EqpMonitorNextExecutionTimeCalculateIn eqpMonitorNextExecutionTimeCalculateIn =
                        new Infos.EqpMonitorNextExecutionTimeCalculateIn();
                eqpMonitorNextExecutionTimeCalculateIn.setCurrentScheduleBaseTime(
                        eqpMonitorInfo.getScheduleBaseTimeStamp());
                eqpMonitorNextExecutionTimeCalculateIn.setExecutionInterval(
                        eqpMonitorInfo.getExecutionInterval());
                eqpMonitorNextExecutionTimeCalculateIn.setScheduleAdjustment(
                        eqpMonitorInfo.getScheduleAdjustment());
                eqpMonitorNextExecutionTimeCalculateIn.setExpirationInterval(
                        eqpMonitorInfo.getExpirationInterval());
                eqpMonitorNextExecutionTimeCalculateIn.setFutureTimeRequireFlag(false);
                Results.EqpMonitorNextExecutionTimeCalculateResult nextExecutionTimeCalculate =
                        this.eqpMonitorNextExecutionTimeCalculate(
                                objCommon, eqpMonitorNextExecutionTimeCalculateIn);

                eqpMonitorDetailInfo.setNextExecutionTime(
                        nextExecutionTimeCalculate.getNextExecutionTime());
                eqpMonitorDetailInfo.setExpirationTime(nextExecutionTimeCalculate.getExpirationTime());

                List<Infos.EqpMonitorProductInfo> strEqpMonitorProductInfoSeq = new ArrayList<>();
                List<MachineDTO.EqpMonitorProductSpecificationInfo> monitorProductSpecAll =
                        eqpMonitorInfo.getEqpMonitorProdSpecs();
                int eqpMonitorProductInfoLen = CimArrayUtils.getSize(monitorProductSpecAll);
                for (int j = 0; j < eqpMonitorProductInfoLen; j++) {
                    MachineDTO.EqpMonitorProductSpecificationInfo monitorProductSpecDO =
                            monitorProductSpecAll.get(j);
                    Infos.EqpMonitorProductInfo eqpMonitorProductInfo = new Infos.EqpMonitorProductInfo();
                    eqpMonitorProductInfo.setProductID(monitorProductSpecDO.getProductSpecificationID());
                    eqpMonitorProductInfo.setRecipeID(monitorProductSpecDO.getRecipeID());
                    eqpMonitorProductInfo.setWaferCount(monitorProductSpecDO.getWaferCount());
                    eqpMonitorProductInfo.setStartSeqNo(monitorProductSpecDO.getStartSeqNo());
                    strEqpMonitorProductInfoSeq.add(eqpMonitorProductInfo);
                }
                eqpMonitorDetailInfo.setStrEqpMonitorProductInfoSeq(strEqpMonitorProductInfoSeq);

                List<Infos.EqpMonitorActionInfo> strEqpMonitorActionInfoSeq = new ArrayList<>();
                List<MachineDTO.EqpMonitorActionInfo> equipmentMonitorActionAll =
                        eqpMonitorInfo.getEqpMonitorActions();
                int eqpMonitorActionInfoLen = CimArrayUtils.getSize(equipmentMonitorActionAll);
                for (int j = 0; j < eqpMonitorActionInfoLen; j++) {
                    MachineDTO.EqpMonitorActionInfo equipmentMonitorActionDO =
                            equipmentMonitorActionAll.get(j);
                    Infos.EqpMonitorActionInfo eqpMonitorActionInfo = new Infos.EqpMonitorActionInfo();
                    eqpMonitorActionInfo.setEventType(equipmentMonitorActionDO.getEventType());
                    eqpMonitorActionInfo.setAction(equipmentMonitorActionDO.getAction());
                    eqpMonitorActionInfo.setReasonCodeID(equipmentMonitorActionDO.getReasonCodeID());
                    eqpMonitorActionInfo.setSysMessageCodeID(equipmentMonitorActionDO.getSysMessageCodeID());
                    eqpMonitorActionInfo.setCustomField(equipmentMonitorActionDO.getCustomField());
                    strEqpMonitorActionInfoSeq.add(eqpMonitorActionInfo);
                }
                eqpMonitorDetailInfo.setStrEqpMonitorActionInfoSeq(strEqpMonitorActionInfoSeq);

                eqpMonitorDetailInfos.add(eqpMonitorDetailInfo);
            }
        } else if (!ObjectIdentifier.isEmpty(eqpMonitorID)) {
            // ------------------------------------------------------------------------//
            //   Get eqpMonitor object                                                //
            // ------------------------------------------------------------------------//
            CimEqpMonitor aPosEqpMonitor = baseCoreFactory.getBO(CimEqpMonitor.class, eqpMonitorID);
            Validations.check(
                    null == aPosEqpMonitor, retCodeConfig.getNotFoundEqpMonitor(), eqpMonitorID);
            MachineDTO.EqpMonitorInfo aPosEqpMonitorInfo = aPosEqpMonitor.getEqpMonitorInfo();

            Infos.EqpMonitorDetailInfo eqpMonitorDetailInfo = new Infos.EqpMonitorDetailInfo();
            eqpMonitorDetailInfo.setEqpMonitorID(aPosEqpMonitorInfo.getEqpMonitorID());
            eqpMonitorDetailInfo.setEquipmentID(aPosEqpMonitorInfo.getMachineID());
            eqpMonitorDetailInfo.setChamberID(aPosEqpMonitorInfo.getChamberID());
            eqpMonitorDetailInfo.setDescription(aPosEqpMonitorInfo.getDescription());
            eqpMonitorDetailInfo.setMonitorType(aPosEqpMonitorInfo.getMonitorType());
            eqpMonitorDetailInfo.setScheduleType(aPosEqpMonitorInfo.getScheduleType());
            eqpMonitorDetailInfo.setStartTimeStamp(aPosEqpMonitorInfo.getStartTimeStamp());
            eqpMonitorDetailInfo.setExecutionInterval(aPosEqpMonitorInfo.getExecutionInterval());
            eqpMonitorDetailInfo.setWarningInterval(aPosEqpMonitorInfo.getWarningInterval());
            eqpMonitorDetailInfo.setStandAloneFlag(aPosEqpMonitorInfo.isStandAloneFlag());
            eqpMonitorDetailInfo.setKitFlag(aPosEqpMonitorInfo.isKitFlag());
            eqpMonitorDetailInfo.setMaxRetryCount(aPosEqpMonitorInfo.getMaxRetryCount());
            Infos.EqpStatus eqpStatus = new Infos.EqpStatus();
            eqpStatus.setEquipmentStatusCode(aPosEqpMonitorInfo.getMachineStateAtStart());
            eqpMonitorDetailInfo.setEqpStateAtStart(eqpStatus);
            Infos.EqpStatus eqpStateAtPassed = new Infos.EqpStatus();
            eqpMonitorDetailInfo.setEqpStateAtPassed(eqpStateAtPassed);
            eqpStateAtPassed.setEquipmentStatusCode(aPosEqpMonitorInfo.getMachineStateAtPassed());
            Infos.EqpStatus eqpStateAtFailed = new Infos.EqpStatus();
            eqpStateAtFailed.setEquipmentStatusCode(aPosEqpMonitorInfo.getMachineStateAtFailed());
            eqpMonitorDetailInfo.setEqpStateAtFailed(eqpStateAtFailed);
            eqpMonitorDetailInfo.setMonitorStatus(aPosEqpMonitorInfo.getMonitorStatus());
            if (null != aPosEqpMonitorInfo.getWarningTimeStamp()) {
                eqpMonitorDetailInfo.setWarningTime(aPosEqpMonitorInfo.getWarningTimeStamp().toString());
            }
            eqpMonitorDetailInfo.setScheduleBaseTimeStamp(
                    aPosEqpMonitorInfo.getScheduleBaseTimeStamp().toString());
            eqpMonitorDetailInfo.setScheduleAdjustment(aPosEqpMonitorInfo.getScheduleAdjustment());
            eqpMonitorDetailInfo.setLastMonitorTimeStamp(
                    aPosEqpMonitorInfo.getLastMonitorTimeStamp().toString());
            eqpMonitorDetailInfo.setLastMonitorResult(aPosEqpMonitorInfo.getLastMonitorResult());
            eqpMonitorDetailInfo.setLastMonitorPassedTimeStamp(
                    aPosEqpMonitorInfo.getLastMonitorPassedTimeStamp());
            eqpMonitorDetailInfo.setLastClaimedTimeStamp(aPosEqpMonitorInfo.getLastClaimedTimeStamp());
            eqpMonitorDetailInfo.setLastClaimedUser(aPosEqpMonitorInfo.getLastClaimedUser());
            // Calculate nextExecutionTime
            Infos.EqpMonitorNextExecutionTimeCalculateIn eqpMonitorNextExecutionTimeCalculateIn =
                    new Infos.EqpMonitorNextExecutionTimeCalculateIn();
            eqpMonitorNextExecutionTimeCalculateIn.setCurrentScheduleBaseTime(
                    aPosEqpMonitorInfo.getScheduleBaseTimeStamp());
            eqpMonitorNextExecutionTimeCalculateIn.setExecutionInterval(
                    aPosEqpMonitorInfo.getExecutionInterval());
            eqpMonitorNextExecutionTimeCalculateIn.setScheduleAdjustment(
                    aPosEqpMonitorInfo.getScheduleAdjustment());
            eqpMonitorNextExecutionTimeCalculateIn.setExpirationInterval(
                    aPosEqpMonitorInfo.getExpirationInterval());
            eqpMonitorNextExecutionTimeCalculateIn.setFutureTimeRequireFlag(false);
            Results.EqpMonitorNextExecutionTimeCalculateResult
                    eqpMonitorNextExecutionTimeCalculateResult =
                    this.eqpMonitorNextExecutionTimeCalculate(
                            objCommon, eqpMonitorNextExecutionTimeCalculateIn);

            Results.EqpMonitorNextExecutionTimeCalculateResult nextExecutionTimeCalculate =
                    eqpMonitorNextExecutionTimeCalculateResult;
            eqpMonitorDetailInfo.setNextExecutionTime(nextExecutionTimeCalculate.getNextExecutionTime());
            eqpMonitorDetailInfo.setExpirationTime(nextExecutionTimeCalculate.getExpirationTime());

            List<Infos.EqpMonitorProductInfo> strEqpMonitorProductInfoSeq = new ArrayList<>();
            List<MachineDTO.EqpMonitorProductSpecificationInfo> monitorProductSpecAll =
                    aPosEqpMonitorInfo.getEqpMonitorProdSpecs();
            int eqpMonitorProductInfoLen = CimArrayUtils.getSize(monitorProductSpecAll);
            for (int j = 0; j < eqpMonitorProductInfoLen; j++) {
                MachineDTO.EqpMonitorProductSpecificationInfo monitorProductSpecDO =
                        monitorProductSpecAll.get(j);
                Infos.EqpMonitorProductInfo eqpMonitorProductInfo = new Infos.EqpMonitorProductInfo();
                eqpMonitorProductInfo.setProductID(monitorProductSpecDO.getProductSpecificationID());
                eqpMonitorProductInfo.setRecipeID(monitorProductSpecDO.getRecipeID());
                eqpMonitorProductInfo.setWaferCount(monitorProductSpecDO.getWaferCount());
                eqpMonitorProductInfo.setStartSeqNo(monitorProductSpecDO.getStartSeqNo());
                strEqpMonitorProductInfoSeq.add(eqpMonitorProductInfo);
            }
            eqpMonitorDetailInfo.setStrEqpMonitorProductInfoSeq(strEqpMonitorProductInfoSeq);

            List<Infos.EqpMonitorActionInfo> strEqpMonitorActionInfoSeq = new ArrayList<>();
            List<MachineDTO.EqpMonitorActionInfo> equipmentMonitorActionAll =
                    aPosEqpMonitorInfo.getEqpMonitorActions();
            int eqpMonitorActionInfoLen = CimArrayUtils.getSize(equipmentMonitorActionAll);
            for (int j = 0; j < eqpMonitorActionInfoLen; j++) {
                MachineDTO.EqpMonitorActionInfo equipmentMonitorActionDO = equipmentMonitorActionAll.get(j);
                Infos.EqpMonitorActionInfo eqpMonitorActionInfo = new Infos.EqpMonitorActionInfo();
                eqpMonitorActionInfo.setEventType(equipmentMonitorActionDO.getEventType());
                eqpMonitorActionInfo.setAction(equipmentMonitorActionDO.getAction());
                eqpMonitorActionInfo.setReasonCodeID(equipmentMonitorActionDO.getReasonCodeID());
                eqpMonitorActionInfo.setSysMessageCodeID(equipmentMonitorActionDO.getSysMessageCodeID());
                eqpMonitorActionInfo.setCustomField(equipmentMonitorActionDO.getCustomField());
                strEqpMonitorActionInfoSeq.add(eqpMonitorActionInfo);
            }
            eqpMonitorDetailInfo.setStrEqpMonitorActionInfoSeq(strEqpMonitorActionInfoSeq);
            eqpMonitorDetailInfos.add(eqpMonitorDetailInfo);
        }
        return eqpMonitorDetailInfos;
    }

    @Override
    public Results.EqpMonitorNextExecutionTimeCalculateResult eqpMonitorNextExecutionTimeCalculate(
            Infos.ObjCommon objCommon,
            Infos.EqpMonitorNextExecutionTimeCalculateIn eqpMonitorNextExecutionTimeCalculateIn) {
        Results.EqpMonitorNextExecutionTimeCalculateResult eqpMonitorNextExecutionTimeCalculateResult =
                new Results.EqpMonitorNextExecutionTimeCalculateResult();
        String nextExecutionTime = null;
        Integer minutes = 0;
        if (eqpMonitorNextExecutionTimeCalculateIn.getFutureTimeRequireFlag()) {
            String targetTimeStamp =
                    timeStampMethod.timeStampDoCalculation(
                            objCommon,
                            eqpMonitorNextExecutionTimeCalculateIn.getCurrentScheduleBaseTime().toString(),
                            0,
                            0,
                            eqpMonitorNextExecutionTimeCalculateIn.getExecutionInterval(),
                            0,
                            0);
            nextExecutionTime = targetTimeStamp;
            while (CimDateUtils.compare(
                    nextExecutionTime, objCommon.getTimeStamp().getReportTimeStamp().toString())
                    == 0) {
                String tmpTargetTimeStamp =
                        timeStampMethod.timeStampDoCalculation(
                                objCommon,
                                targetTimeStamp,
                                0,
                                0,
                                eqpMonitorNextExecutionTimeCalculateIn.getExecutionInterval(),
                                0,
                                0);
                nextExecutionTime = tmpTargetTimeStamp;
            }
        } else {
            minutes =
                    eqpMonitorNextExecutionTimeCalculateIn.getExecutionInterval()
                            + eqpMonitorNextExecutionTimeCalculateIn.getScheduleAdjustment();
            String targetTimeStamp =
                    timeStampMethod.timeStampDoCalculation(
                            objCommon,
                            eqpMonitorNextExecutionTimeCalculateIn.getCurrentScheduleBaseTime().toString(),
                            0,
                            0,
                            minutes,
                            0,
                            0);

            nextExecutionTime = targetTimeStamp;
        }
        eqpMonitorNextExecutionTimeCalculateResult.setNextExecutionTime(nextExecutionTime);
        minutes =
                0
                        - eqpMonitorNextExecutionTimeCalculateIn.getExecutionInterval()
                        + eqpMonitorNextExecutionTimeCalculateIn.getScheduleAdjustment();
        String targetTimeStamp =
                timeStampMethod.timeStampDoCalculation(objCommon, nextExecutionTime, 0, 0, minutes, 0, 0);

        eqpMonitorNextExecutionTimeCalculateResult.setNextScheduleBaseTime(targetTimeStamp);
        if (null != eqpMonitorNextExecutionTimeCalculateIn.getLastMonitorPassedTime()) {
            String expirationTime =
                    timeStampMethod.timeStampDoCalculation(
                            objCommon,
                            eqpMonitorNextExecutionTimeCalculateIn.getLastMonitorPassedTime().toString(),
                            0,
                            0,
                            eqpMonitorNextExecutionTimeCalculateIn.getExpirationInterval(),
                            0,
                            0);

            eqpMonitorNextExecutionTimeCalculateResult.setExpirationTime(expirationTime);
            Validations.check(
                    CimDateUtils.isGreaterThan(Timestamp.valueOf(nextExecutionTime), expirationTime),
                    eqpMonitorNextExecutionTimeCalculateResult,
                    retCodeConfig.getExceedExpirationTime());
        }
        return eqpMonitorNextExecutionTimeCalculateResult;
    }

    /**
     * equipment_FillInTxEQQ003DR
     *
     * @param objCommon
     * @param eqpListByBayInqInParm
     * @return
     * @author ho
     */
    @Override
    public Results.EqpListByBayInqResult equipmentFillInTxEQQ003DR(
            Infos.ObjCommon objCommon, Params.EqpListByBayInqInParm eqpListByBayInqInParm) {
        Results.EqpListByBayInqResult eqpListByBayInqResult = new Results.EqpListByBayInqResult();
        //        if (StringUtils.isEmpty(eqpListByBayInqInParm.getEquipmentID()) &&
        //                StringUtils.isEmpty(eqpListByBayInqInParm.getWorkArea()) &&
        //                StringUtils.isEmpty(eqpListByBayInqInParm.getEquipmentCategory())) {
        //            throw new ServiceException(retCodeConfig.getInvalidParameter());
        //        }

        if (!ObjectIdentifier.isEmpty(eqpListByBayInqInParm.getWorkArea())) {
            CimStockerDO example = new CimStockerDO();
            example.setAreaID(eqpListByBayInqInParm.getWorkArea().getValue());
            List<CimStockerDO> stockers = cimJpaRepository.findAll(Example.of(example));
            List<Infos.AreaStocker> areaStockers = new ArrayList<>();
            eqpListByBayInqResult.setStrAreaStocker(areaStockers);
            eqpListByBayInqResult.setWorkArea(eqpListByBayInqInParm.getWorkArea());
            for (CimStockerDO stocker : stockers) {
                Infos.AreaStocker areaStocker = new Infos.AreaStocker();
                areaStockers.add(areaStocker);
                areaStocker.setStockerID(
                        ObjectIdentifier.build(stocker.getStockerID(), stocker.getId()));
                areaStocker.setDescription(stocker.getDescription());
                areaStocker.setStockerType(stocker.getStockerType());
                areaStocker.setStockerStatus(
                        ObjectIdentifier.build(
                                stocker.getCurStateId(), stocker.getCurStateObj()));
                areaStocker.setDisplayPositionX(0);
                areaStocker.setDisplayPositionY(0);
                areaStocker.setUtsFlag(stocker.getUtsFlag());
                areaStocker.setMaxUTSCapacity(stocker.getMaxUtsCapacity());
                CimMachineState equipmentState =
                        baseCoreFactory.getBO(CimMachineState.class, areaStocker.getStockerStatus());
                Validations.check(equipmentState == null, retCodeConfig.getNotFoundEqpState());
                if (!CimObjectUtils.isEmpty(equipmentState.getE10State())) {
                    ObjectIdentifier e10State =
                            ObjectIdentifier.build(
                                    equipmentState.getE10State().getIdentifier(),
                                    equipmentState.getE10State().getPrimaryKey());
                    areaStocker.setE10Status(e10State);
                }
            }
        }

        String sql =
                "SELECT OMEQP.BAY_ID, OMEQP.EQP_ID, OMEQP.DESCRIPTION, OMEQP.CUR_OPE_MODE, OMEQP.EQP_STATE_ID, OMEQP.E10_STATE_ID, OMEQP.LAST_STATE_CHG_TIME, "
                        + "OMEQP.LAST_STATE_CHG_USER_ID, OMEQP.ACTUAL_STATE_ID, OMEQP.ACTUAL_STATE_CHG_TIME, OMEQP.EQP_CATEGORY, OMEQPST.EQP_AVAIL_FLAG, OMEQP.TEMP_MODE_FLAG, OMEQP.MULTI_RECIPE_CAPABLE "
                        + "FROM OMEQP,OMEQPST WHERE OMEQP.EQP_STATE_ID = OMEQPST.EQP_STATE_ID";
        if (!ObjectIdentifier.isEmptyWithValue(eqpListByBayInqInParm.getWorkArea())) {
            sql +=
                    String.format(" AND OMEQP.BAY_ID = '%s'", eqpListByBayInqInParm.getWorkArea().getValue());
        }

        if (!ObjectIdentifier.isEmptyWithValue(eqpListByBayInqInParm.getEquipmentID())) {
            sql +=
                    String.format(
                            " AND  OMEQP.EQP_ID LIKE '%s'", eqpListByBayInqInParm.getEquipmentID().getValue());
        }

        if (!CimStringUtils.isEmpty(eqpListByBayInqInParm.getEquipmentCategory())) {
            sql +=
                    String.format(
                            " AND  OMEQP.EQP_CATEGORY = '%s'", eqpListByBayInqInParm.getEquipmentCategory());
        }

        if (!CimStringUtils.isEmpty(eqpListByBayInqInParm.getWhiteDefSearchCriteria())) {
            if (CimStringUtils.equals(
                    eqpListByBayInqInParm.getWhiteDefSearchCriteria(),
                    BizConstant.SP_WHITEDEF_SEARCHCRITERIA_WHITE)) {
                sql += " AND OMEQP.TEMP_MODE_FLAG = 1";
            } else if (CimStringUtils.equals(
                    eqpListByBayInqInParm.getWhiteDefSearchCriteria(),
                    BizConstant.SP_WHITEDEF_SEARCHCRITERIA_NONWHITE)) {
                sql += " AND OMEQP.TEMP_MODE_FLAG = 0";
            } else if (CimStringUtils.equals(
                    eqpListByBayInqInParm.getWhiteDefSearchCriteria(),
                    BizConstant.SP_WHITEDEF_SEARCHCRITERIA_ALL)) {
            } else {
                throw new ServiceException(retCodeConfig.getInvalidParameter());
            }
        }

        List<Object[]> allObject = cimJpaRepository.query(sql);

        List<Infos.AreaEqp> areaEqps = new ArrayList<>();

        eqpListByBayInqResult.setStrAreaEqp(areaEqps);

        eqpListByBayInqResult.setWorkArea(eqpListByBayInqInParm.getWorkArea());

        for (Object[] object : allObject) {

            boolean matchFlag = false;

            List<CimEquipmentFPCCategoryDO> equipmentFPCCategories =
                    cimJpaRepository.query(
                            "SELECT DOC_CATEGORY FROM OMEQP_DOCCATEGORY WHERE REFKEY = (SELECT ID FROM OMEQP where EQP_ID = ?1)",
                            CimEquipmentFPCCategoryDO.class,
                            (String) object[1]);
            if (!CimArrayUtils.isEmpty(equipmentFPCCategories)
                    && !CimArrayUtils.isEmpty(eqpListByBayInqInParm.getFpcCategories())) {
                TAGSF:
                for (String fpcCategory : eqpListByBayInqInParm.getFpcCategories()) {
                    for (CimEquipmentFPCCategoryDO equipmentFPCCategory : equipmentFPCCategories) {
                        if (CimStringUtils.equals(fpcCategory, equipmentFPCCategory.getFpcCategory())) {
                            matchFlag = true;
                            break TAGSF;
                        }
                    }
                }
            } else {
                matchFlag = true;
            }

            if (!matchFlag) {
                continue;
            }

            Infos.AreaEqp areaEqp = new Infos.AreaEqp();
            areaEqps.add(areaEqp);

            areaEqp.setEquipmentID(ObjectIdentifier.buildWithValue((String) object[1]));
            areaEqp.setDescription((String) object[2]);
            areaEqp.setEquipmentMode((String) object[3]);
            areaEqp.setDisplayPositionX(0);
            areaEqp.setDisplayPositionY(0);
            areaEqp.setEquipmentStatusCode(ObjectIdentifier.buildWithValue((String) object[4]));
            areaEqp.setE10Status(ObjectIdentifier.buildWithValue((String) object[5]));
            areaEqp.setChangeTimeStamp((Timestamp) object[6]);
            areaEqp.setChangeUser((String) object[7]);
            areaEqp.setActualStatus(ObjectIdentifier.buildWithValue((String) object[8]));
            areaEqp.setActualChangeTimeStamp((Timestamp) object[9]);
            areaEqp.setEquipmentCategory((String) object[10]);
            areaEqp.setAvailableStateFlag(CimBooleanUtils.convert(object[11]));
            areaEqp.setMultiRecipeCapa((String) object[13]);
            areaEqp.setWhiteDefFlag(CimBooleanUtils.convert(object[12]));
            List<String> _equipmentFPCCategories = new ArrayList<>();
            for (CimEquipmentFPCCategoryDO equipmentFPCCategory : equipmentFPCCategories) {
                _equipmentFPCCategories.add(equipmentFPCCategory.getFpcCategory());
            }
            areaEqp.setFpcCategories(_equipmentFPCCategories);

            sql =
                    "SELECT COUNT(OMLOT_EQP.REFKEY) FROM OMLOT,OMLOT_EQP WHERE OMLOT_EQP.EQP_ID=? AND OMLOT.ID=OMLOT_EQP.REFKEY AND OMLOT.LOT_HOLD_STATE=? AND OMLOT.LOT_PROCESS_STATE=? AND OMLOT.DISPATCH_RSV_FLAG=0";

            areaEqp.setWipLotCount(
                    Integer.valueOf(
                            String.valueOf(
                                    cimJpaRepository.count(
                                            sql,
                                            ObjectIdentifier.fetchValue(areaEqp.getEquipmentID()),
                                            BizConstant.CIMFW_LOT_HOLDSTATE_ONHOLD,
                                            BizConstant.SP_POSTPROCESS_STATE_WAITING))));
        }

        return eqpListByBayInqResult;
    }

    /**
     * equipment_state_GetDR
     *
     * @param objCommon
     * @param equipmentID
     * @return
     * @author ho
     */
    @Override
    public ObjectIdentifier equipmentStateGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        CimMachine equipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == equipment,
                new OmCode(retCodeConfig.getNotFoundEqp(), ObjectIdentifier.fetchValue(equipmentID)));
        return equipment.getCurrentMachineStateID();
    }

    @Override
    public Outputs.ObjEquipmentContainerInfoGetOut equipmentContainerInfoGet(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        Outputs.ObjEquipmentContainerInfoGetOut objEquipmentContainerInfoGetDROut =
                new Outputs.ObjEquipmentContainerInfoGetOut();

        // Get Machine Object
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(CimObjectUtils.isEmpty(aMachine), retCodeConfig.getNotFoundMachine());

        List<CimMachineContainer> eqpCtnList = aMachine.allMachineContainers();
        if (CimArrayUtils.getSize(eqpCtnList) == 0) {
            return objEquipmentContainerInfoGetDROut;
        }

        // Equipment Container
        List<Infos.EqpContainer> eqpContainersList = new ArrayList<Infos.EqpContainer>();
        for (int i = 0; i < CimArrayUtils.getSize(eqpCtnList); i++) {
            Infos.EqpContainer eqpContainer = new Infos.EqpContainer();
            // Equipment Container Position
            List<CimMachineContainerPosition> eqpctnpstList =
                    eqpCtnList.get(i).allMachineContainerPositions();
            List<Infos.EqpContainerPosition> eqpContainerPositionsList =
                    new ArrayList<Infos.EqpContainerPosition>();

            if (CimArrayUtils.getSize(eqpctnpstList) == 0) {
                continue;
            }
            for (int j = 0; j < CimArrayUtils.getSize(eqpctnpstList); j++) {
                CimMachineContainerPosition eqpctnpst = eqpctnpstList.get(i);
                // ---------------------
                // Set Posision Info
                // ---------------------
                com.fa.cim.newcore.bo.product.CimWafer wafer = eqpctnpst.getWafer();
                if (CimObjectUtils.isEmpty(wafer)) {
                    continue;
                }
                Lot lot = wafer.getLot();
                ObjectIdentifier tmpLotID = new ObjectIdentifier();
                if (!CimObjectUtils.isEmpty(wafer)) {
                    tmpLotID = new ObjectIdentifier(lot.getIdentifier(), lot.getPrimaryKey());
                }
                MachineDTO.MachineContainerPositionInfo machineContainerPositionInfo =
                        eqpctnpst.getMachineContainerPositionInfo();
                Infos.EqpContainerPosition eqpContainerPosition = new Infos.EqpContainerPosition();
                eqpContainerPosition.setContainerPositionID(
                        machineContainerPositionInfo.getMachineContainerPosition());
                eqpContainerPosition.setControlJobID(machineContainerPositionInfo.getControlJob());
                eqpContainerPosition.setProcessJobID(machineContainerPositionInfo.getProcessJob());
                eqpContainerPosition.setLotID(tmpLotID);
                eqpContainerPosition.setWaferID(machineContainerPositionInfo.getWafer());
                eqpContainerPosition.setSrcCassetteID(machineContainerPositionInfo.getSrcCassette());
                eqpContainerPosition.setSrcPortID(machineContainerPositionInfo.getSrcPort());
                eqpContainerPosition.setSrcSlotNo(
                        CimNumberUtils.intValue(machineContainerPositionInfo.getSrcSlotNo()));
                eqpContainerPosition.setFmcState(machineContainerPositionInfo.getSLMState());
                eqpContainerPosition.setDestCassetteID(machineContainerPositionInfo.getDestCassette());
                eqpContainerPosition.setDestPortID(machineContainerPositionInfo.getDestPort());
                eqpContainerPosition.setDestSlotNo(
                        CimNumberUtils.intValue(machineContainerPositionInfo.getDestSlotNo()));
                eqpContainerPosition.setProcessStartTime(
                        CimDateUtils.convertToOrInitialTime(
                                machineContainerPositionInfo.getProcessStartTimeStamp()));
                eqpContainerPosition.setEstimatedProcessEndTime(
                        CimDateUtils.convertToOrInitialTime(
                                machineContainerPositionInfo.getEstimatedEndTimeStamp()));
                eqpContainerPosition.setLastClaimedTimeStamp(
                        CimDateUtils.convertToOrInitialTime(
                                machineContainerPositionInfo.getLastClaimedTimeStamp()));
                eqpContainerPosition.setLastClaimedUserID(
                        machineContainerPositionInfo.getLastClaimedUser());
                eqpContainerPositionsList.add(eqpContainerPosition);
            }
            // -----------------------------
            // Set Container Info
            // -----------------------------
            MachineDTO.MachineContainerInfo machineContainerInfo =
                    eqpCtnList.get(i).getMachineContainerInfo();
            eqpContainer.setEqpContainerPosition(eqpContainerPositionsList);
            eqpContainer.setEquipmentContainerID(machineContainerInfo.getMachineContainer());
            eqpContainer.setChamberID(machineContainerInfo.getChamber());
            eqpContainer.setMaxCapacity(machineContainerInfo.getMaxCapacity());
            eqpContainer.setMaxRsvCount(machineContainerInfo.getMaxReserveCount());
            eqpContainer.setCurrentCapacity(Long.valueOf(CimArrayUtils.getSize(eqpctnpstList)));
            eqpContainersList.add(eqpContainer);
        }
        Infos.EqpContainerInfo eqpContainerInfo = new Infos.EqpContainerInfo();
        eqpContainerInfo.setEqpContainerList(eqpContainersList);
        objEquipmentContainerInfoGetDROut.setStrEqpContainerInfo(eqpContainerInfo);
        return objEquipmentContainerInfoGetDROut;
    }

    @Override
    public Infos.EqpContainerInfo equipmentContainerInfoGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        CimEquipmentContainerDO example = new CimEquipmentContainerDO();
        example.setEquipmentID(ObjectIdentifier.fetchValue(equipmentID));
        List<CimEquipmentContainerDO> eqpCtnList = cimJpaRepository.findAll(Example.of(example));
        List<Infos.EqpContainer> eqpContainersList = new ArrayList<Infos.EqpContainer>();
        for (int i = 0; i < CimArrayUtils.getSize(eqpCtnList); i++) {
            Infos.EqpContainer eqpContainer = new Infos.EqpContainer();

            List<CimEquipmentContainerPositionDO> eqpctnpstList =
                    cimJpaRepository.query(
                            "SELECT * FROM OMEQPCTNRPOS WHERE EQPCTNR_ID = ?1",
                            CimEquipmentContainerPositionDO.class,
                            eqpCtnList.get(i).getEquipmentContainerID());

            List<Infos.EqpContainerPosition> eqpContainerPositionsList =
                    new ArrayList<Infos.EqpContainerPosition>();
            for (int j = 0; j < eqpctnpstList.size(); j++) {
                CimEquipmentContainerPositionDO eqpctnpst = eqpctnpstList.get(j);
                if (!CimStringUtils.isEmpty(eqpctnpst.getWaferID())) {
                    CimWaferDO cimWaferExample = new CimWaferDO();
                    cimWaferExample.setWaferID(eqpctnpst.getWaferID());
                    CimWaferDO wafer = cimJpaRepository.findOne(Example.of(cimWaferExample)).orElse(null);
                    if (null != wafer) {
                        Infos.EqpContainerPosition eqpContainerPosition = new Infos.EqpContainerPosition();
                        eqpContainerPosition.setContainerPositionID(
                                new ObjectIdentifier(
                                        eqpctnpst.getEquipmentContainerPositionID(), eqpctnpst.getId()));
                        eqpContainerPosition.setControlJobID(
                                new ObjectIdentifier(eqpctnpst.getControlJobID(), eqpctnpst.getControlJobObj()));
                        eqpContainerPosition.setProcessJobID(eqpctnpst.getProcessJobID());
                        eqpContainerPosition.setLotID(
                                new ObjectIdentifier(wafer.getLotID(), wafer.getLotObj()));
                        eqpContainerPosition.setWaferID(
                                new ObjectIdentifier(eqpctnpst.getWaferID(), eqpctnpst.getWaferObj()));
                        eqpContainerPosition.setSrcCassetteID(
                                new ObjectIdentifier(
                                        eqpctnpst.getSourceCassetteID(), eqpctnpst.getSourceCassetteObj()));
                        eqpContainerPosition.setSrcPortID(
                                new ObjectIdentifier(eqpctnpst.getSourcePortID(), eqpctnpst.getSourcePortObj()));
                        eqpContainerPosition.setSrcSlotNo(eqpctnpst.getSourceSlotNumber());
                        eqpContainerPosition.setFmcState(eqpctnpst.getSlmState());
                        eqpContainerPosition.setDestCassetteID(
                                new ObjectIdentifier(
                                        eqpctnpst.getDestinationCassetteID(), eqpctnpst.getDestinationCassetteObj()));
                        eqpContainerPosition.setDestPortID(
                                new ObjectIdentifier(
                                        eqpctnpst.getDestinationPortID(), eqpctnpst.getDestinationPortObj()));
                        eqpContainerPosition.setDestSlotNo(eqpctnpst.getSourceSlotNumber());
                        eqpContainerPosition.setProcessStartTime(eqpctnpst.getProcessStartTime());
                        eqpContainerPosition.setEstimatedProcessEndTime(
                                eqpctnpst.getEstimatedProcessEndTimeStamp());
                        eqpContainerPosition.setLastClaimedTimeStamp(eqpctnpst.getLastClaimTime());
                        eqpContainerPosition.setLastClaimedUserID(
                                new ObjectIdentifier(
                                        eqpctnpst.getLastClaimUserID(), eqpctnpst.getLastClaimUserObj()));
                        eqpContainerPosition.setProcessCompleteTime(eqpctnpst.getProcessCompTimeStamp());
                        eqpContainerPositionsList.add(eqpContainerPosition);
                    }
                }
            }
            eqpContainerPositionsList.sort(
                    Comparator.comparing(
                            eqpContainerPosition -> eqpContainerPosition.getWaferID().getValue()));
            eqpContainer.setEqpContainerPosition(eqpContainerPositionsList);
            eqpContainer.setEquipmentContainerID(
                    new ObjectIdentifier(
                            eqpCtnList.get(i).getEquipmentContainerID(), eqpCtnList.get(i).getId()));
            eqpContainer.setChamberID(
                    new ObjectIdentifier(
                            eqpCtnList.get(i).getChamberID(), eqpCtnList.get(i).getChamberObj()));
            eqpContainer.setMaxCapacity(eqpCtnList.get(i).getMaxCapacity());
            eqpContainer.setMaxRsvCount(eqpCtnList.get(i).getMaxReservationCount());
            eqpContainer.setCurrentCapacity((long) CimArrayUtils.getSize(eqpctnpstList));
            eqpContainersList.add(eqpContainer);
        }
        Infos.EqpContainerInfo eqpContainerInfo = new Infos.EqpContainerInfo();
        eqpContainerInfo.setEqpContainerList(eqpContainersList);
        return eqpContainerInfo;
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param strObjCommonIn
     * @param strEquipmentListInfoGetDRIn
     * @return com.fa.cim.dto.RetCode<Infos.EquipmentListInfoGetDROut>
     * @author Ho
     * @date 2019/2/13 15:19:25
     */
    @Override
    public Infos.EquipmentListInfoGetDROut equipmentListInfoGetDR(
            Infos.ObjCommon strObjCommonIn, Infos.EquipmentListInfoGetDRIn strEquipmentListInfoGetDRIn) {

        Infos.EquipmentListInfoGetDROut strEquipmentListInfoGetDROut =
                new Infos.EquipmentListInfoGetDROut();

        ObjectIdentifier workArea = strEquipmentListInfoGetDRIn.getWorkArea();
        ObjectIdentifier equipmentID = strEquipmentListInfoGetDRIn.getEquipmentID();
        List<String> fpcCategories = strEquipmentListInfoGetDRIn.getFpcCategories();
        String equipmentCategory = strEquipmentListInfoGetDRIn.getStockerType();
        String whiteDefSearchCriteria = strEquipmentListInfoGetDRIn.getWhiteDefSearchCriteria();
        String specialControl = strEquipmentListInfoGetDRIn.getSpecialControl();

        String sqlca = null;

        Long wipLotCnt160 = 0l;
        long hvCountFreqpfpccategory = 0;

        if (CimStringUtils.isEmpty(specialControl)
                && ObjectIdentifier.isEmptyWithValue(workArea)
                && ObjectIdentifier.isEmptyWithValue(equipmentID)
                && CimStringUtils.isEmpty(equipmentCategory)) {
            throw new ServiceException(retCodeConfig.getInvalidParameter());
        }

        Boolean isFilled = false;

        int tLen = 100;
        int iterationCount = 0;

        if (0 < CimArrayUtils.getSize(fpcCategories)) {
            int nLen = CimArrayUtils.getSize(fpcCategories);
            for (int i = 0; i < nLen; i++) {
                // PPT_METHODTRACE_V3(""," fpcCategories[] = ", i, fpcCategories[i] );
            }
        }

        if (ObjectIdentifier.isNotEmptyWithValue(workArea)) {

            String hfrstkareaId = workArea.getValue();

            CimStockerDO example = new CimStockerDO();
            example.setAreaID(hfrstkareaId);
            List<CimStockerDO> query = cimJpaRepository.findAll(Example.of(example));

            tLen = 100;
            iterationCount = 0;
            isFilled = false;

            List<Infos.AreaStocker> strAreaStocker = new ArrayList<>();
            strEquipmentListInfoGetDROut.setStrAreaStocker(strAreaStocker);

            for (CimStockerDO obj : query) {
                String hfrstkareaObj = "",
                        hfrstkstkId = "",
                        hfrstkstkobj = "",
                        hfrstkdescription = "",
                        hfrstkstktype = "",
                        hfrstkcurstateid = "",
                        hfrstkcurstateobj = "";

                Boolean hfrstkutsflag = false, hfrstkuseforslmflag = false;
                Integer hfrstkmaxutscapacity = 0;

                hfrstkareaId = obj.getAreaID();
                hfrstkareaObj = obj.getAreaObj();
                hfrstkstkId = obj.getStockerID();
                hfrstkstkobj = obj.getId();
                hfrstkdescription = obj.getDescription();
                hfrstkstktype = obj.getStockerType();
                hfrstkcurstateid = obj.getCurStateId();
                hfrstkcurstateobj = obj.getCurStateObj();
                hfrstkutsflag = obj.getUtsFlag();
                hfrstkuseforslmflag = obj.getUseForSlmFlag();
                hfrstkmaxutscapacity = obj.getMaxUtsCapacity();

                if (iterationCount == 0) {
                    strEquipmentListInfoGetDROut.setWorkArea(
                            ObjectIdentifier.build(hfrstkareaId, hfrstkareaObj));
                    isFilled = true;
                }

                if (iterationCount >= tLen) {
                    tLen = tLen + 100;
                }
                Infos.AreaStocker areaStocker = new Infos.AreaStocker();
                strAreaStocker.add(areaStocker);
                areaStocker.setStockerID(ObjectIdentifier.build(hfrstkstkId, hfrstkstkobj));
                areaStocker.setDescription(hfrstkdescription);
                areaStocker.setStockerType(hfrstkstktype);
                areaStocker.setStockerStatus(
                        ObjectIdentifier.build(hfrstkcurstateid, hfrstkcurstateobj));
                areaStocker.setDisplayPositionX(0);
                areaStocker.setDisplayPositionY(0);
                areaStocker.setUtsFlag(hfrstkutsflag);
                areaStocker.setSlmUTSFlag(hfrstkuseforslmflag);
                areaStocker.setMaxUTSCapacity(hfrstkmaxutscapacity);

                Object anObject = null;

                CimMachineState aMachineState =
                        baseCoreFactory.getBO(CimMachineState.class, areaStocker.getStockerStatus());

                Validations.check(aMachineState == null, retCodeConfig.getNotFoundEqpState());
                CimE10State anE10State = aMachineState.getE10State();

                if (anE10State != null) {
                    areaStocker.setE10Status(
                            new ObjectIdentifier(anE10State.getIdentifier(), anE10State.getPrimaryKey()));
                }
                iterationCount++;
            }

        } else {
            isFilled = true;
        }

        String hvbuffer = "";
        String hvTmpbuffer = "";

        String searchCondition = "";

        if (CimStringUtils.equals(specialControl, BizConstant.SP_MC_SPECIALEQUIPMENTCONTROL_DURABLE)) {
            hvbuffer += "SELECT DISTINCT OMEQP.ID ";
        } else {
            hvbuffer = "SELECT OMEQP.ID ";
        }
        hvbuffer +=
                ", OMEQP.BAY_ID, OMEQP.BAY_RKEY, OMEQP.EQP_ID, OMEQP.ID AS EQP_RKEY, "
                        + "       OMEQP.DESCRIPTION, OMEQP.CUR_OPE_MODE, OMEQP.EQP_STATE_ID, "
                        + "       OMEQP.EQP_STATE_RKEY, OMEQP.E10_STATE_ID, OMEQP.LAST_STATE_CHG_TIME, "
                        + "       OMEQP.LAST_STATE_CHG_USER_ID, OMEQP.ACTUAL_STATE_ID, OMEQP.ACTUAL_STATE_RKEY, "
                        + "       OMEQP.ACTUAL_STATE_CHG_TIME, OMEQP.EQP_CATEGORY, OMEQPST.EQP_AVAIL_FLAG, "
                        + "       OMEQP.TEMP_MODE_FLAG, OMEQP.MULTI_RECIPE_CAPABLE, OMEQP.FMC_CAPABILITY, OMEQP.FMC_SWITCH "
                        + "FROM OMEQP, OMEQPST ";
        if (0 != CimStringUtils.length(specialControl)) {
            hvbuffer += ", OMEQP_SPECIALEQPFN ";
        }
        hvbuffer += "WHERE OMEQP.EQP_STATE_ID = OMEQPST.EQP_STATE_ID AND ";

        List<Object> args = new ArrayList<>();

        if (!ObjectIdentifier.isEmpty(workArea)) {
            searchCondition = " OMEQP.BAY_ID = ?";
            args.add(workArea.getValue());
            hvbuffer += searchCondition;
        }

        if (ObjectIdentifier.isNotEmptyWithValue(equipmentID)) {
            if (0 < CimStringUtils.length(hvTmpbuffer)) {
                hvTmpbuffer += " AND ";
            }
            searchCondition = " OMEQP.EQP_ID LIKE ?";
            args.add(equipmentID.getValue());
            hvTmpbuffer += searchCondition;
        }

        if (0 != CimStringUtils.length(equipmentCategory)) {
            if (0 < CimStringUtils.length(hvTmpbuffer)) {
                hvTmpbuffer += " AND ";
            }
            searchCondition = " OMEQP.EQP_CATEGORY = ?";
            args.add(equipmentCategory);
            hvTmpbuffer += searchCondition;
        }

        if (0 != CimStringUtils.length(specialControl)) {
            if (0 < CimStringUtils.length(hvTmpbuffer)) {
                hvTmpbuffer += " AND ";
            }
            hvTmpbuffer += " OMEQP.ID = OMEQP_SPECIALEQPFN.REFKEY";

            if (CimStringUtils.equals(
                    specialControl, BizConstant.SP_MC_SPECIALEQUIPMENTCONTROL_DURABLE)) {
                searchCondition = " AND (OMEQP_SPECIALEQPFN.VALUE = ?";
                args.add(BizConstant.SP_MC_SPECIALEQUIPMENTCONTROL_DURABLECARRIER);
                hvTmpbuffer += searchCondition;
                searchCondition = " OR OMEQP_SPECIALEQPFN.VALUE = ?";
                args.add(BizConstant.SP_MC_SPECIALEQUIPMENTCONTROL_DURABLERETICLE);
                hvTmpbuffer += searchCondition;
                searchCondition = " OR OMEQP_SPECIALEQPFN.VALUE = ? )";
                args.add(BizConstant.SP_MC_SPECIALEQUIPMENTCONTROL_DURABLERETICLEPOD);
                hvTmpbuffer += searchCondition;
            } else {
                searchCondition = " AND OMEQP_SPECIALEQPFN.VALUE = ?";
                args.add(specialControl);
                hvTmpbuffer += searchCondition;
            }
        }
        if (0 != CimStringUtils.length(whiteDefSearchCriteria)) {
            if (CimStringUtils.equals(
                    whiteDefSearchCriteria, BizConstant.SP_WHITEDEF_SEARCHCRITERIA_WHITE)) {
                if (0 < CimStringUtils.length(hvTmpbuffer)) {
                    hvTmpbuffer += " AND ";
                }
                searchCondition = " OMEQP.TEMP_MODE_FLAG = ?";
                args.add(true);
                hvTmpbuffer += searchCondition;
            } else if (CimStringUtils.equals(
                    whiteDefSearchCriteria, BizConstant.SP_WHITEDEF_SEARCHCRITERIA_NONWHITE)) {
                if (0 < CimStringUtils.length(hvTmpbuffer)) {
                    hvTmpbuffer += " AND ";
                }
                searchCondition = " OMEQP.TEMP_MODE_FLAG = ?";
                args.add(false);
                hvTmpbuffer += searchCondition;
            } else if (CimStringUtils.equals(
                    whiteDefSearchCriteria, BizConstant.SP_WHITEDEF_SEARCHCRITERIA_ALL)) {
            } else {
                throw new ServiceException(retCodeConfig.getInvalidParameter());
            }
        }
        hvbuffer += hvTmpbuffer;

        List<Object[]> objects = cimJpaRepository.query(hvbuffer, args.toArray());

        tLen = 100;
        iterationCount = 0;
        List<Infos.AreaEqp> strAreaEqp = new ArrayList<>();
        strEquipmentListInfoGetDROut.setStrAreaEqp(strAreaEqp);

        for (Object[] obj : objects) {
            String hFREQPdtheSystemKey = "";
            String hfreqpslmSwitch = "OFF";
            Integer hfreqpslmCapability = 0;

            hFREQPdtheSystemKey = (String) obj[0];
            Object hFREQPAREA_ID = obj[1],
                    hFREQPAREA_OBJ = obj[2],
                    hFREQPEQP_ID = obj[3],
                    hFREQPEQP_OBJ = obj[4],
                    hFREQPDESCRIPTION = obj[5],
                    hFREQPCUR_OPE_MODE = obj[6],
                    hFREQPCUR_STATE_ID = obj[7],
                    hFREQPCUR_STATE_OBJ = obj[8],
                    hFREQPE10_STATE = obj[9],
                    hFREQPSTATE_CHG_TIME = obj[10],
                    hFREQPSTATE_CHG_USER_ID = obj[11],
                    hFREQPCUR_ACT_STATE_ID = obj[12],
                    hFREQPCUR_ACT_STATE_OBJ = obj[13],
                    hFREQPACT_STATE_CHG_TIME = obj[14],
                    hFREQPEQP_CATEGORY = obj[15],
                    hFREQPAVAIL_STATE_FLAG = obj[16],
                    hFREQPWHITE_FLAG = obj[17],
                    hFREQPMLTRCP_CAPA = obj[18];
            hfreqpslmCapability = CimNumberUtils.intValue((Number) obj[19]);
            hfreqpslmSwitch = obj[20].toString();

            List<String> tmpfpcCategories = new ArrayList<>();
            hvCountFreqpfpccategory = 0;
            int tmpFPCCategorycount = 0;

            sqlca =
                    "SELECT COUNT(DOC_CATEGORY) \n" + "            FROM OMEQP_DOCCATEGORY WHERE REFKEY = ?";

            hvCountFreqpfpccategory = cimJpaRepository.count(sqlca, hFREQPdtheSystemKey);

            if (hvCountFreqpfpccategory > 0) {
                sqlca =
                        "SELECT DOC_CATEGORY\n"
                                + "                FROM OMEQP_DOCCATEGORY\n"
                                + "                WHERE REFKEY = ?";
                List<CimEquipmentFPCCategoryDO> equipmentFPCCategories =
                        cimJpaRepository.query(sqlca, CimEquipmentFPCCategoryDO.class, hFREQPdtheSystemKey);

                for (CimEquipmentFPCCategoryDO equipmentFPCCategory : equipmentFPCCategories) {

                    int len = CimArrayUtils.getSize(tmpfpcCategories);
                    if (tmpFPCCategorycount >= len) {
                    }
                    tmpfpcCategories.add(equipmentFPCCategory.getFpcCategory());
                    tmpFPCCategorycount++;
                }
            }

            int nLen = CimArrayUtils.getSize(fpcCategories);
            int nLen2 = CimArrayUtils.getSize(tmpfpcCategories);
            Boolean MatchFlag = false;
            if (nLen != 0) {
                if(nLen2 != 0) {
                    for (int i = 0; i < nLen; i++) {
                        for (int j = 0; j < nLen2; j++) {
                            if (CimStringUtils.equals(fpcCategories.get(i), tmpfpcCategories.get(j))) {
                                MatchFlag = true;
                                j = nLen2;
                                i = nLen;
                                break;
                            }
                        }
                    }
                }
            } else {
                MatchFlag = true;
            }
            if (!CimBooleanUtils.isTrue(MatchFlag)) {
                continue;
            }

            if (iterationCount >= tLen) {
                tLen = tLen + 100;
            }

            if ((iterationCount == 0) && (CimBooleanUtils.isFalse(isFilled))) {
                strEquipmentListInfoGetDROut.setWorkArea(
                        ObjectIdentifier.build((String) hFREQPAREA_ID, (String) hFREQPAREA_OBJ));
            }

            Infos.AreaEqp areaEqp = new Infos.AreaEqp();
            strAreaEqp.add(areaEqp);
            areaEqp.setEquipmentID(
                    ObjectIdentifier.build((String) hFREQPEQP_ID, (String) hFREQPEQP_OBJ));
            areaEqp.setDescription((String) hFREQPDESCRIPTION);
            areaEqp.setEquipmentMode((String) hFREQPCUR_OPE_MODE);
            areaEqp.setDisplayPositionX(0);
            areaEqp.setDisplayPositionY(0);
            areaEqp.setEquipmentStatusCode(
                    ObjectIdentifier.build(
                            (String) hFREQPCUR_STATE_ID, (String) hFREQPCUR_STATE_OBJ));
            areaEqp.setE10Status(ObjectIdentifier.buildWithValue((String) hFREQPE10_STATE));
            areaEqp.setChangeTimeStamp((Timestamp) hFREQPSTATE_CHG_TIME);
            areaEqp.setChangeUser((String) hFREQPSTATE_CHG_USER_ID);
            areaEqp.setActualStatus(
                    ObjectIdentifier.build(
                            (String) hFREQPCUR_ACT_STATE_ID, (String) hFREQPCUR_ACT_STATE_OBJ));
            areaEqp.setActualChangeTimeStamp((Timestamp) hFREQPACT_STATE_CHG_TIME);
            areaEqp.setEquipmentCategory((String) hFREQPEQP_CATEGORY);
            areaEqp.setAvailableStateFlag(CimBooleanUtils.convert(hFREQPAVAIL_STATE_FLAG));
            areaEqp.setMultiRecipeCapa((String) hFREQPMLTRCP_CAPA);
            areaEqp.setWhiteDefFlag(CimBooleanUtils.convert(hFREQPWHITE_FLAG));
            areaEqp.setFpcCategories(tmpfpcCategories);
            areaEqp.setSlmCapabilityFlag(CimBooleanUtils.convert(hfreqpslmCapability));
            areaEqp.setSlmSwitch(hfreqpslmSwitch);

            String hFRLOTLOT_PROCESS_STATE = BizConstant.SP_LOT_PROCSTATE_WAITING;
            String hFRLOTLOT_HOLD_STATE = CIMStateConst.CIM_LOT_HOLD_STATE_NOTONHOLD;

            sqlca =
                    "SELECT COUNT(OMLOT_EQP.REFKEY)\n"
                            + "            FROM  OMLOT, OMLOT_EQP\n"
                            + "            WHERE OMLOT_EQP.EQP_ID        = ?\n"
                            + "            AND  OMLOT.ID    = OMLOT_EQP.REFKEY\n"
                            + "            AND  OMLOT.LOT_HOLD_STATE    = ?\n"
                            + "            AND  OMLOT.LOT_PROCESS_STATE = ?\n"
                            + "            AND  OMLOT.LOT_FINISHED_STATE IS NULL \n"
                            + "            AND  OMLOT.DISPATCH_RSV_FLAG     = 0";
            wipLotCnt160 =
                    cimJpaRepository.count(
                            sqlca, hFREQPEQP_ID, hFRLOTLOT_HOLD_STATE, hFRLOTLOT_PROCESS_STATE);

            areaEqp.setWipLotCount(CimNumberUtils.intValue(wipLotCnt160));

            iterationCount++;
        }
        return strEquipmentListInfoGetDROut;
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param theTblName
     * @param theSelectItemDefinition
     * @param strTableRecordInfoSeq
     * @param recordInfCount
     * @return int
     * @throws
     * @author Ho
     * @date 2019/5/7 17:03
     */
    private int SET_RECORD_INFO(
            String theTblName,
            String[][] theSelectItemDefinition,
            List<Infos.TableRecordInfo> strTableRecordInfoSeq,
            int recordInfCount) {
        int columnCnt = 0;
        Infos.TableRecordInfo strTableRecordInfo = new Infos.TableRecordInfo();
        if (CimArrayUtils.getSize(strTableRecordInfoSeq) > recordInfCount) {
            strTableRecordInfo = strTableRecordInfoSeq.get(recordInfCount);
        } else {
            strTableRecordInfoSeq.add(strTableRecordInfo);
        }
        strTableRecordInfo.setTableName(theTblName);
        List<String> columnNames = new ArrayList<>();
        strTableRecordInfo.setColumnNames(columnNames);

        for (int defIndex = 0; defIndex < SELECT_ITEM_MAX; defIndex++) {
            if (theSelectItemDefinition[defIndex][1] != null) {
                columnNames.add(theSelectItemDefinition[defIndex][1]);
                columnCnt++;
            }
        }

        recordInfCount++;
        return recordInfCount;
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param theTblName
     * @param theInParamTblIndex
     * @param theSelectItemDefinition
     * @param theParamKeyDefinition
     * @param strTargetTableInfoSeq
     * @param selectCnt
     * @param HV_BUFFER
     * @param HV_TMPBUFFER
     * @param HV_WHERETIMESTAMP
     * @return java.lang.Object[]
     * @throws
     * @author Ho
     * @date 2019/5/7 17:49
     */
    private Object[] GET_SELECT_SQL(
            String theTblName,
            int theInParamTblIndex,
            String[][] theSelectItemDefinition,
            String[][] theParamKeyDefinition,
            List<Infos.TargetTableInfo> strTargetTableInfoSeq,
            int selectCnt,
            String HV_BUFFER,
            String HV_TMPBUFFER,
            String HV_WHERETIMESTAMP) {
        if (theInParamTblIndex != -1) {
            if (selectCnt == 0) {
                HV_BUFFER = "SELECT ";
            } else {
                HV_BUFFER += " UNION ALL SELECT ";
            }
            selectCnt++;

            StringBuilder HV_BUFFERBuilder = new StringBuilder(HV_BUFFER);
            for (int defIndex = 0; defIndex < SELECT_ITEM_MAX; defIndex++) {
                if (defIndex > 0) {
                    HV_BUFFERBuilder.append(",");
                }
                HV_BUFFERBuilder.append(theSelectItemDefinition[defIndex][0]);
            }
            HV_BUFFER = HV_BUFFERBuilder.toString();
            HV_TMPBUFFER = String.format(" FROM %s ", theTblName);
            HV_BUFFER += HV_TMPBUFFER;

            Boolean bFirstCondition = true;

            if (CimStringUtils.length(HV_WHERETIMESTAMP) > 0) {
                bFirstCondition = false;
                HV_BUFFER += HV_WHERETIMESTAMP;
            }

            Boolean bExistMandatoryKey = false;
            List<Infos.HashedInfo> strHashedInfoSeq =
                    strTargetTableInfoSeq.get(theInParamTblIndex).getStrHashedInfoSeq();
            StringBuilder HV_BUFFERBuilder1 = new StringBuilder(HV_BUFFER);
            for (int paramIndex = 0; paramIndex < CimArrayUtils.getSize(strHashedInfoSeq); paramIndex++) {
                Boolean bExistKey = false;
                int defIndex = 0;
                while (theParamKeyDefinition[defIndex][0] != null) {
                    if (CimStringUtils.equals(
                            theParamKeyDefinition[defIndex][0], strHashedInfoSeq.get(paramIndex).getHashKey())) {

                        bExistKey = true;

                        if (CimStringUtils.length(strHashedInfoSeq.get(paramIndex).getHashData()) > 0) {
                            if (bFirstCondition == true) {
                                bFirstCondition = false;
                                HV_BUFFERBuilder1.append(" WHERE ");
                            } else {
                                HV_BUFFERBuilder1.append(" AND ");
                            }
                            HV_BUFFERBuilder1.append(theParamKeyDefinition[defIndex][1]);
                            if ((CimStringUtils.equals(
                                    theParamKeyDefinition[defIndex][1], BizConstant.SP_HASHDATA_RECIPE_ID)
                                    || CimStringUtils.equals(
                                    theParamKeyDefinition[defIndex][1], BizConstant.SP_HASHDATA_PRODSPEC_ID)
                                    || CimStringUtils.equals(
                                    theParamKeyDefinition[defIndex][1], BizConstant.SP_HASHDATA_EQPMON_ID)
                                    || CimStringUtils.equals(
                                    theParamKeyDefinition[defIndex][1], BizConstant.SP_HASHDATA_PORT_ID))
                                    && BaseStaticMethod.strrchr(strHashedInfoSeq.get(paramIndex).getHashData(), "%")
                                    != null) {
                                HV_TMPBUFFER =
                                        String.format(" LIKE '%s' ", (strHashedInfoSeq.get(paramIndex).getHashData()));
                            } else {
                                HV_TMPBUFFER =
                                        String.format(" = '%s' ", (strHashedInfoSeq.get(paramIndex).getHashData()));
                            }
                            HV_BUFFERBuilder1.append(HV_TMPBUFFER);

                            if (CimStringUtils.equals(
                                    MANDATORY_HASH_KEY, strHashedInfoSeq.get(paramIndex).getHashKey())) {
                                bExistMandatoryKey = true;
                            }
                        }
                        break;
                    }
                    defIndex++;
                }
                if (!bExistKey) {
                    return new Object[]{
                            selectCnt,
                            HV_BUFFERBuilder1.toString(),
                            HV_TMPBUFFER,
                            HV_WHERETIMESTAMP,
                            retCodeConfig.getInvalidParameterWithMsg()
                    };
                }
            }
            HV_BUFFER = HV_BUFFERBuilder1.toString();
            if (!bExistMandatoryKey) {
                return new Object[]{
                        selectCnt,
                        HV_BUFFER,
                        HV_TMPBUFFER,
                        HV_WHERETIMESTAMP,
                        retCodeConfig.getInvalidParameterWithMsg()
                };
            }
        }
        return new Object[]{
                selectCnt, HV_BUFFER, HV_TMPBUFFER, HV_WHERETIMESTAMP, retCodeConfig.getSucc()
        };
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param strObjCommonIn
     * @param strEquipmentHistory_GetDR_in
     * @return com.fa.cim.common.support.RetCode<com.fa.cim.dto.Infos.EquipmentHistoryGetDROut>
     * @throws
     * @author Ho
     * @date 2019/4/29 15:55
     */
    @Override
    public Infos.EquipmentHistoryGetDROut equipmentHistoryGetDR(
            Infos.ObjCommon strObjCommonIn, Infos.EquipmentHistoryGetDRIn strEquipmentHistory_GetDR_in) {
        String HV_BUFFER;
        String HV_WHERETIMESTAMP;
        String HV_TMPBUFFER;

        String hEVENT_CREATE_TIME;
        String hHISTORY_NAME;
        String hPORT_ID;
        String hPROCRSC_ID;
        String hOPE_CATEGORY;
        String hOPE_MODE;
        String hLC_RECIPE_ID;
        String hRECIPE_ID;
        String hPH_RECIPE_ID;
        String hCTRL_JOB;
        String hE10_STATE;
        String hEQP_STATE;
        String hPR_STATE;
        String hNEW_E10_STATE;
        String hNEW_EQP_STATE;
        String hNEW_CHAMBER_STATE;
        String hACT_E10_STATE;
        String hACT_EUIPMENT_STATE;
        String hACT_CHAMBER_STATE;
        String hNEW_ACT_E10_STATE;
        String hNEW_ACT_EQPMENT_ST;
        String hNEW_ACT_CHMBR_ST;
        String hEQP_OPE_MODE;
        String hNEW_EQP_OPE_MODE;
        String hSTART_TIME;
        Double hSTART_SHOP_DATE;
        String hEND_TIME;
        Double hEND_SHOP_DATE;
        String hPORT_OPE_MODE;
        String hONLINE_MODE;
        String hDISP_MODE;
        String hACCESS_MODE;
        String hOPE_START_MODE;
        String hOPE_COMP_MODE;
        String hDESCRIPTION;
        String hEQPMON_ID;
        String hMONITOR_TYPE;
        String hMON_STATUS;
        String hPREV_MON_STATUS;
        String hEQPMONJOB_ID;
        String hMONJOB_STATUS;
        String hPREV_MONJOB_STATUS;
        Integer hRETRY_COUNT;
        Integer hSMCAPACITY;
        Integer hDYNAMICCAPACITY;
        String hBUFFRSC_CATEGORY;
        String hPORT_TYPE;
        String hPORT_USAGE;
        String hPORT_STATE;
        String hDISP_STATE;
        String hDISP_TIME;
        String hDISP_DRBL_ID;
        String hCLAIM_TIME;
        Double hCLAIM_SHOP_DATE;
        String hCLAIM_USER_ID;
        String hCLAIM_MEMO;
        String hSTORE_TIME;

        HV_TMPBUFFER = "";
        HV_WHERETIMESTAMP = "";
        HV_BUFFER = "";

        int extend_len = 500;
        int t_len = extend_len;
        int recordInfCount = 0;
        int recordValCount = 0;

        List<Infos.TableRecordInfo> strTableRecordInfoSeq = new ArrayList<>();

        List<Infos.TableRecordValue> strTableRecordValueSeq = new ArrayList<>();

        String fromTimeStamp = strEquipmentHistory_GetDR_in.getFromTimeStamp();
        String toTimeStamp = strEquipmentHistory_GetDR_in.getToTimeStamp();
        Long maxRecordCount = strEquipmentHistory_GetDR_in.getMaxRecordCount();
        List<Infos.TargetTableInfo> strTargetTableInfoSeq =
                strEquipmentHistory_GetDR_in.getStrTargetTableInfoSeq();
        Validations.check(
                CimArrayUtils.getSize(strTargetTableInfoSeq) == 0,
                retCodeConfig.getInvalidParameterWithMsg());

        int fhcschs_index = -1;
        int fheschs_index = -1;
        int fhemchs_index = -1;
        int fhopehs_index = -1;
        int fheqpmonhs_index = -1;
        int ohseason_index = -1;
        int fheqpmonjobhs_index = -1;
        int ohseasonjob_index = -1;
        int fhbuffrscchs_index = -1;
        int fheqpportschs_index = -1;

        for (int paramIndex = 0;
             paramIndex < CimArrayUtils.getSize(strTargetTableInfoSeq);
             paramIndex++) {
            if (fhcschs_index == -1
                    && CimStringUtils.equals(
                    BizConstant.SP_HISTORYTABLENAME_FHCSCHS,
                    strTargetTableInfoSeq.get(paramIndex).getTableName())) {
                fhcschs_index = paramIndex;
                recordInfCount =
                        SET_RECORD_INFO(
                                BizConstant.SP_HISTORYTABLENAME_FHCSCHS,
                                selectItemFHCSCHS,
                                strTableRecordInfoSeq,
                                recordInfCount);
            } else if (fheschs_index == -1
                    && CimStringUtils.equals(
                    BizConstant.SP_HISTORYTABLENAME_FHESCHS,
                    strTargetTableInfoSeq.get(paramIndex).getTableName())) {
                fheschs_index = paramIndex;
                recordInfCount =
                        SET_RECORD_INFO(
                                BizConstant.SP_HISTORYTABLENAME_FHESCHS,
                                selectItemFHESCHS,
                                strTableRecordInfoSeq,
                                recordInfCount);
            } else if (fhemchs_index == -1
                    && CimStringUtils.equals(
                    BizConstant.SP_HISTORYTABLENAME_FHEMCHS,
                    strTargetTableInfoSeq.get(paramIndex).getTableName())) {
                fhemchs_index = paramIndex;
                recordInfCount =
                        SET_RECORD_INFO(
                                BizConstant.SP_HISTORYTABLENAME_FHEMCHS,
                                selectItemFHEMCHS,
                                strTableRecordInfoSeq,
                                recordInfCount);
            } else if (fhopehs_index == -1
                    && CimStringUtils.equals(
                    BizConstant.SP_HISTORYTABLENAME_FHOPEHS,
                    strTargetTableInfoSeq.get(paramIndex).getTableName())) {
                fhopehs_index = paramIndex;
                recordInfCount =
                        SET_RECORD_INFO(
                                BizConstant.SP_HISTORYTABLENAME_FHOPEHS,
                                selectItemFHOPEHS,
                                strTableRecordInfoSeq,
                                recordInfCount);
            } else if (fheqpmonhs_index == -1
                    && CimStringUtils.equals(
                    BizConstant.SP_HISTORYTABLENAME_FHEQPMONHS,
                    strTargetTableInfoSeq.get(paramIndex).getTableName())) {
                fheqpmonhs_index = paramIndex;
                recordInfCount =
                        SET_RECORD_INFO(
                                BizConstant.SP_HISTORYTABLENAME_FHEQPMONHS,
                                selectItemFHEQPMONHS,
                                strTableRecordInfoSeq,
                                recordInfCount);
            } else if (ohseason_index == -1
                    && CimStringUtils.equals(
                    BizConstant.SP_HISTORYTABLENAME_OHSEASON,
                    strTargetTableInfoSeq.get(paramIndex).getTableName())) {
                ohseason_index = paramIndex;
                recordInfCount =
                        SET_RECORD_INFO(
                                BizConstant.SP_HISTORYTABLENAME_OHSEASON,
                                selectItemOHSEASON,
                                strTableRecordInfoSeq,
                                recordInfCount);
            } else if (ohseasonjob_index == -1
                    && CimStringUtils.equals(
                    BizConstant.SP_HISTORYTABLENAME_OHSEASONJOB,
                    strTargetTableInfoSeq.get(paramIndex).getTableName())) {
                ohseasonjob_index = paramIndex;
                recordInfCount =
                        SET_RECORD_INFO(
                                BizConstant.SP_HISTORYTABLENAME_OHSEASONJOB,
                                selectItemOHSEASONJOB,
                                strTableRecordInfoSeq,
                                recordInfCount);
            } else if (fheqpmonjobhs_index == -1
                    && CimStringUtils.equals(
                    BizConstant.SP_HISTORYTABLENAME_FHEQPMONJOBHS,
                    strTargetTableInfoSeq.get(paramIndex).getTableName())) {
                fheqpmonjobhs_index = paramIndex;
                recordInfCount =
                        SET_RECORD_INFO(
                                BizConstant.SP_HISTORYTABLENAME_FHEQPMONJOBHS,
                                selectItemFHEQPMONJOBHS,
                                strTableRecordInfoSeq,
                                recordInfCount);
            } else if (fhbuffrscchs_index == -1
                    && CimStringUtils.equals(
                    BizConstant.SP_HISTORYTABLENAME_FHBUFFRSCCHS,
                    strTargetTableInfoSeq.get(paramIndex).getTableName())) {
                fhbuffrscchs_index = paramIndex;
                recordInfCount =
                        SET_RECORD_INFO(
                                BizConstant.SP_HISTORYTABLENAME_FHBUFFRSCCHS,
                                selectItemFHBUFFRSCCHS,
                                strTableRecordInfoSeq,
                                recordInfCount);
            } else if (fheqpportschs_index == -1
                    && CimStringUtils.equals(
                    BizConstant.SP_HISTORYTABLENAME_FHEQPPORTSCHS,
                    strTargetTableInfoSeq.get(paramIndex).getTableName())) {
                fheqpportschs_index = paramIndex;
                recordInfCount =
                        SET_RECORD_INFO(
                                BizConstant.SP_HISTORYTABLENAME_FHEQPPORTSCHS,
                                selectItemFHEQPPORTSCHS,
                                strTableRecordInfoSeq,
                                recordInfCount);
            } else {
                throw new ServiceException(retCodeConfig.getInvalidParameterWithMsg());
            }
        }

        Infos.EquipmentHistoryGetDROut strEquipmentHistory_GetDR_out =
                new Infos.EquipmentHistoryGetDROut();
        strEquipmentHistory_GetDR_out.setStrTableRecordInfoSeq(strTableRecordInfoSeq);

        if (CimStringUtils.length(fromTimeStamp) > 0) {
            HV_TMPBUFFER =
                    String.format(
                            " WHERE EVENT_CREATE_TIME >= TO_TIMESTAMP('%s', 'yyyy-mm-dd hh24:mi:ss.ff')",
                            fromTimeStamp);
            HV_WHERETIMESTAMP = HV_TMPBUFFER;
        }
        if (CimStringUtils.length(toTimeStamp) > 0) {
            if (CimStringUtils.length(HV_WHERETIMESTAMP) == 0) {
                HV_WHERETIMESTAMP = " WHERE";
            } else {
                HV_WHERETIMESTAMP += " AND";
            }
            HV_TMPBUFFER =
                    String.format(
                            " EVENT_CREATE_TIME <= TO_TIMESTAMP('%s', 'yyyy-mm-dd hh24:mi:ss.ff')", toTimeStamp);
            HV_WHERETIMESTAMP += HV_TMPBUFFER;
        }

        int selectCnt = 0;

        Object[] getResult =
                GET_SELECT_SQL(
                        BizConstant.SP_HISTORYTABLENAME_FHCSCHS,
                        fhcschs_index,
                        selectItemFHCSCHS,
                        paramKeyFHCSCHS,
                        strTargetTableInfoSeq,
                        selectCnt,
                        HV_BUFFER,
                        HV_TMPBUFFER,
                        HV_WHERETIMESTAMP);
        selectCnt = (int) getResult[0];
        HV_BUFFER = (String) getResult[1];
        HV_TMPBUFFER = (String) getResult[2];
        HV_WHERETIMESTAMP = (String) getResult[3];
        getResult =
                GET_SELECT_SQL(
                        BizConstant.SP_HISTORYTABLENAME_FHESCHS,
                        fheschs_index,
                        selectItemFHESCHS,
                        paramKeyFHESCHS,
                        strTargetTableInfoSeq,
                        selectCnt,
                        HV_BUFFER,
                        HV_TMPBUFFER,
                        HV_WHERETIMESTAMP);
        selectCnt = (int) getResult[0];
        HV_BUFFER = (String) getResult[1];
        HV_TMPBUFFER = (String) getResult[2];
        HV_WHERETIMESTAMP = (String) getResult[3];
        getResult =
                GET_SELECT_SQL(
                        BizConstant.SP_HISTORYTABLENAME_FHEMCHS,
                        fhemchs_index,
                        selectItemFHEMCHS,
                        paramKeyFHEMCHS,
                        strTargetTableInfoSeq,
                        selectCnt,
                        HV_BUFFER,
                        HV_TMPBUFFER,
                        HV_WHERETIMESTAMP);
        selectCnt = (int) getResult[0];
        HV_BUFFER = (String) getResult[1];
        HV_TMPBUFFER = (String) getResult[2];
        HV_WHERETIMESTAMP = (String) getResult[3];
        getResult =
                GET_SELECT_SQL(
                        BizConstant.SP_HISTORYTABLENAME_FHOPEHS,
                        fhopehs_index,
                        selectItemFHOPEHS,
                        paramKeyFHOPEHS,
                        strTargetTableInfoSeq,
                        selectCnt,
                        HV_BUFFER,
                        HV_TMPBUFFER,
                        HV_WHERETIMESTAMP);
        selectCnt = (int) getResult[0];
        HV_BUFFER = (String) getResult[1];
        HV_TMPBUFFER = (String) getResult[2];
        HV_WHERETIMESTAMP = (String) getResult[3];
        getResult =
                GET_SELECT_SQL(
                        BizConstant.SP_HISTORYTABLENAME_FHEQPMONHS,
                        fheqpmonhs_index,
                        selectItemFHEQPMONHS,
                        paramKeyFHEQPMONHS,
                        strTargetTableInfoSeq,
                        selectCnt,
                        HV_BUFFER,
                        HV_TMPBUFFER,
                        HV_WHERETIMESTAMP);
        selectCnt = (int) getResult[0];
        HV_BUFFER = (String) getResult[1];
        HV_TMPBUFFER = (String) getResult[2];
        HV_WHERETIMESTAMP = (String) getResult[3];
        getResult =
                GET_SELECT_SQL(
                        BizConstant.SP_HISTORYTABLENAME_OHSEASON,
                        ohseason_index,
                        selectItemOHSEASON,
                        paramKeyOHSEASON,
                        strTargetTableInfoSeq,
                        selectCnt,
                        HV_BUFFER,
                        HV_TMPBUFFER,
                        HV_WHERETIMESTAMP);
        selectCnt = (int) getResult[0];
        HV_BUFFER = (String) getResult[1];
        HV_TMPBUFFER = (String) getResult[2];
        HV_WHERETIMESTAMP = (String) getResult[3];
        getResult =
                GET_SELECT_SQL(
                        BizConstant.SP_HISTORYTABLENAME_FHEQPMONJOBHS,
                        fheqpmonjobhs_index,
                        selectItemFHEQPMONJOBHS,
                        paramKeyFHEQPMONJOBHS,
                        strTargetTableInfoSeq,
                        selectCnt,
                        HV_BUFFER,
                        HV_TMPBUFFER,
                        HV_WHERETIMESTAMP);
        selectCnt = (int) getResult[0];
        HV_BUFFER = (String) getResult[1];
        HV_TMPBUFFER = (String) getResult[2];
        HV_WHERETIMESTAMP = (String) getResult[3];
        getResult =
                GET_SELECT_SQL(
                        BizConstant.SP_HISTORYTABLENAME_OHSEASONJOB,
                        ohseasonjob_index,
                        selectItemOHSEASONJOB,
                        paramKeyOHSEASONJOB,
                        strTargetTableInfoSeq,
                        selectCnt,
                        HV_BUFFER,
                        HV_TMPBUFFER,
                        HV_WHERETIMESTAMP);
        selectCnt = (int) getResult[0];
        HV_BUFFER = (String) getResult[1];
        HV_TMPBUFFER = (String) getResult[2];
        HV_WHERETIMESTAMP = (String) getResult[3];
        getResult =
                GET_SELECT_SQL(
                        BizConstant.SP_HISTORYTABLENAME_FHBUFFRSCCHS,
                        fhbuffrscchs_index,
                        selectItemFHBUFFRSCCHS,
                        paramKeyFHBUFFRSCCHS,
                        strTargetTableInfoSeq,
                        selectCnt,
                        HV_BUFFER,
                        HV_TMPBUFFER,
                        HV_WHERETIMESTAMP);
        selectCnt = (int) getResult[0];
        HV_BUFFER = (String) getResult[1];
        HV_TMPBUFFER = (String) getResult[2];
        HV_WHERETIMESTAMP = (String) getResult[3];
        getResult =
                GET_SELECT_SQL(
                        BizConstant.SP_HISTORYTABLENAME_FHEQPPORTSCHS,
                        fheqpportschs_index,
                        selectItemFHEQPPORTSCHS,
                        paramKeyFHEQPPORTSCHS,
                        strTargetTableInfoSeq,
                        selectCnt,
                        HV_BUFFER,
                        HV_TMPBUFFER,
                        HV_WHERETIMESTAMP);
        selectCnt = (int) getResult[0];
        HV_BUFFER = (String) getResult[1];
        HV_TMPBUFFER = (String) getResult[2];
        HV_WHERETIMESTAMP = (String) getResult[3];

        if ((CimStringUtils.length(toTimeStamp) > 0 && CimStringUtils.length(fromTimeStamp) == 0)
                || (CimStringUtils.length(toTimeStamp) == 0 && CimStringUtils.length(fromTimeStamp) == 0)) {
            HV_BUFFER += " ORDER BY EVENT_CREATE_TIME DESC";
        } else {
            HV_BUFFER += " ORDER BY EVENT_CREATE_TIME ASC";
        }

        Boolean bConvertFlag = false;
        String originalSQL = "";
        originalSQL = HV_BUFFER;

        SearchCondition searchCondition = strEquipmentHistory_GetDR_in.getSearchCondition();
        List<Object[]> EQPHISGET_C1 = null;
        Page<Object[]> queryPage = null;

        if (searchCondition != null) {
            queryPage = cimJpaRepository.query(HV_BUFFER, searchCondition);
            EQPHISGET_C1 = queryPage.getContent();
        } else {
            EQPHISGET_C1 = cimJpaRepository.query(HV_BUFFER);
        }

        int entValMaxCount = StandardProperties.OM_EQP_EXTLEN_IN_EQP_HIST_INQ.getIntValue();

        int limitCount = 0;
        if (maxRecordCount < 1 || maxRecordCount > entValMaxCount) {
            limitCount = 100;
        } else {
            limitCount = maxRecordCount.intValue();
        }

        if (EQPHISGET_C1 != null)
            for (Object[] obj : EQPHISGET_C1) {
                hEVENT_CREATE_TIME = "";
                hHISTORY_NAME = "";
                hPORT_ID = "";
                hPROCRSC_ID = "";
                hOPE_CATEGORY = "";
                hOPE_MODE = "";
                hLC_RECIPE_ID = "";
                hRECIPE_ID = "";
                hPH_RECIPE_ID = "";
                hCTRL_JOB = "";
                hE10_STATE = "";
                hEQP_STATE = "";
                hPR_STATE = "";
                hNEW_E10_STATE = "";
                hNEW_EQP_STATE = "";
                hNEW_CHAMBER_STATE = "";
                hACT_E10_STATE = "";
                hACT_EUIPMENT_STATE = "";
                hACT_CHAMBER_STATE = "";
                hNEW_ACT_E10_STATE = "";
                hNEW_ACT_EQPMENT_ST = "";
                hNEW_ACT_CHMBR_ST = "";
                hEQP_OPE_MODE = "";
                hNEW_EQP_OPE_MODE = "";
                hSTART_TIME = "";
                hSTART_SHOP_DATE = null;
                hEND_TIME = "";
                hEND_SHOP_DATE = null;
                hPORT_OPE_MODE = "";
                hONLINE_MODE = "";
                hDISP_MODE = "";
                hACCESS_MODE = "";
                hOPE_START_MODE = "";
                hOPE_COMP_MODE = "";
                hDESCRIPTION = "";
                hEQPMON_ID = "";
                hMONITOR_TYPE = "";
                hMON_STATUS = "";
                hPREV_MON_STATUS = "";
                hEQPMONJOB_ID = "";
                hMONJOB_STATUS = "";
                hPREV_MONJOB_STATUS = "";
                hRETRY_COUNT = 0;
                hSMCAPACITY = 0;
                hDYNAMICCAPACITY = 0;
                hBUFFRSC_CATEGORY = "";
                hPORT_TYPE = "";
                hPORT_USAGE = "";
                hPORT_STATE = "";
                hDISP_STATE = "";
                hDISP_TIME = "";
                hDISP_DRBL_ID = "";
                hCLAIM_TIME = "";
                hCLAIM_SHOP_DATE = null;
                hCLAIM_USER_ID = "";
                hCLAIM_MEMO = "";
                hSTORE_TIME = "";

                hEVENT_CREATE_TIME = String.valueOf(obj[0]);
                hHISTORY_NAME = (String) obj[1];
                hPORT_ID = (String) obj[2];
                hPROCRSC_ID = (String) obj[3];
                hOPE_CATEGORY = (String) obj[4];
                hOPE_MODE = (String) obj[5];
                hLC_RECIPE_ID = (String) obj[6];
                hRECIPE_ID = (String) obj[7];
                hPH_RECIPE_ID = (String) obj[8];
                hCTRL_JOB = (String) obj[9];
                hE10_STATE = (String) obj[10];
                hEQP_STATE = (String) obj[11];
                hPR_STATE = (String) obj[12];
                hNEW_E10_STATE = (String) obj[13];
                hNEW_EQP_STATE = (String) obj[14];
                hNEW_CHAMBER_STATE = (String) obj[15];
                hACT_E10_STATE = (String) obj[16];
                hACT_EUIPMENT_STATE = (String) obj[17];
                hACT_CHAMBER_STATE = (String) obj[18];
                hNEW_ACT_E10_STATE = (String) obj[19];
                hNEW_ACT_EQPMENT_ST = (String) obj[20];
                hNEW_ACT_CHMBR_ST = (String) obj[21];
                hEQP_OPE_MODE = (String) obj[22];
                hNEW_EQP_OPE_MODE = (String) obj[23];
                hSTART_TIME = String.valueOf(obj[24]);
                hSTART_SHOP_DATE = CimDoubleUtils.doubleValue(obj[25]);
                hEND_TIME = String.valueOf(obj[26]);
                hEND_SHOP_DATE = CimDoubleUtils.doubleValue(obj[27]);
                hPORT_OPE_MODE = (String) obj[28];
                hONLINE_MODE = (String) obj[29];
                hDISP_MODE = (String) obj[30];
                hACCESS_MODE = (String) obj[31];
                hOPE_START_MODE = (String) obj[32];
                hOPE_COMP_MODE = (String) obj[33];
                hDESCRIPTION = (String) obj[34];
                hEQPMON_ID = (String) obj[35];
                hMONITOR_TYPE = (String) obj[36];
                hMON_STATUS = (String) obj[37];
                hPREV_MON_STATUS = (String) obj[38];
                hEQPMONJOB_ID = (String) obj[39];
                hMONJOB_STATUS = (String) obj[40];
                hPREV_MONJOB_STATUS = (String) obj[41];
                hRETRY_COUNT = CimNumberUtils.intValue(obj[42]);
                hBUFFRSC_CATEGORY = (String) obj[43];
                hSMCAPACITY = CimNumberUtils.intValue(obj[44]);
                hDYNAMICCAPACITY = CimNumberUtils.intValue(obj[45]);
                hPORT_TYPE = (String) obj[46];
                hPORT_USAGE = (String) obj[47];
                hPORT_STATE = (String) obj[48];
                hDISP_STATE = (String) obj[49];
                hDISP_TIME = String.valueOf(obj[50]);
                hDISP_DRBL_ID = (String) obj[51];
                hCLAIM_TIME = String.valueOf(obj[52]);
                hCLAIM_SHOP_DATE = CimDoubleUtils.doubleValue(obj[53]);
                hCLAIM_USER_ID = (String) obj[54];
                hCLAIM_MEMO = (String) obj[55];
                hSTORE_TIME = String.valueOf(obj[56]);

                if (recordValCount >= t_len) {
                    t_len += extend_len;
                }

                recordValCount =
                        SET_RECORD_VALUE(
                                BizConstant.SP_HISTORYTABLENAME_FHCSCHS,
                                selectItemFHCSCHS,
                                strTableRecordValueSeq,
                                hHISTORY_NAME,
                                recordValCount,
                                hEVENT_CREATE_TIME,
                                hPORT_ID,
                                hPROCRSC_ID,
                                hOPE_CATEGORY,
                                hOPE_MODE,
                                hLC_RECIPE_ID,
                                hRECIPE_ID,
                                hPH_RECIPE_ID,
                                hCTRL_JOB,
                                hE10_STATE,
                                hEQP_STATE,
                                hPR_STATE,
                                hNEW_E10_STATE,
                                hNEW_EQP_STATE,
                                hNEW_CHAMBER_STATE,
                                hACT_E10_STATE,
                                hACT_EUIPMENT_STATE,
                                hACT_CHAMBER_STATE,
                                hNEW_ACT_E10_STATE,
                                hNEW_ACT_EQPMENT_ST,
                                hNEW_ACT_CHMBR_ST,
                                hEQP_OPE_MODE,
                                hNEW_EQP_OPE_MODE,
                                hSTART_TIME,
                                hEND_TIME,
                                hPORT_OPE_MODE,
                                hONLINE_MODE,
                                hDISP_MODE,
                                hACCESS_MODE,
                                hOPE_START_MODE,
                                hOPE_COMP_MODE,
                                hDESCRIPTION,
                                hEQPMON_ID,
                                hMONITOR_TYPE,
                                hMON_STATUS,
                                hPREV_MON_STATUS,
                                hEQPMONJOB_ID,
                                hMONJOB_STATUS,
                                hPREV_MONJOB_STATUS,
                                hBUFFRSC_CATEGORY,
                                hPORT_TYPE,
                                hPORT_USAGE,
                                hPORT_STATE,
                                hDISP_STATE,
                                hDISP_TIME,
                                hDISP_DRBL_ID,
                                hCLAIM_TIME,
                                hCLAIM_USER_ID,
                                hCLAIM_MEMO,
                                hSTORE_TIME,
                                hSTART_SHOP_DATE,
                                hEND_SHOP_DATE,
                                hRETRY_COUNT,
                                hSMCAPACITY,
                                hDYNAMICCAPACITY,
                                hCLAIM_SHOP_DATE);
                recordValCount =
                        SET_RECORD_VALUE(
                                BizConstant.SP_HISTORYTABLENAME_FHESCHS,
                                selectItemFHESCHS,
                                strTableRecordValueSeq,
                                hHISTORY_NAME,
                                recordValCount,
                                hEVENT_CREATE_TIME,
                                hPORT_ID,
                                hPROCRSC_ID,
                                hOPE_CATEGORY,
                                hOPE_MODE,
                                hLC_RECIPE_ID,
                                hRECIPE_ID,
                                hPH_RECIPE_ID,
                                hCTRL_JOB,
                                hE10_STATE,
                                hEQP_STATE,
                                hPR_STATE,
                                hNEW_E10_STATE,
                                hNEW_EQP_STATE,
                                hNEW_CHAMBER_STATE,
                                hACT_E10_STATE,
                                hACT_EUIPMENT_STATE,
                                hACT_CHAMBER_STATE,
                                hNEW_ACT_E10_STATE,
                                hNEW_ACT_EQPMENT_ST,
                                hNEW_ACT_CHMBR_ST,
                                hEQP_OPE_MODE,
                                hNEW_EQP_OPE_MODE,
                                hSTART_TIME,
                                hEND_TIME,
                                hPORT_OPE_MODE,
                                hONLINE_MODE,
                                hDISP_MODE,
                                hACCESS_MODE,
                                hOPE_START_MODE,
                                hOPE_COMP_MODE,
                                hDESCRIPTION,
                                hEQPMON_ID,
                                hMONITOR_TYPE,
                                hMON_STATUS,
                                hPREV_MON_STATUS,
                                hEQPMONJOB_ID,
                                hMONJOB_STATUS,
                                hPREV_MONJOB_STATUS,
                                hBUFFRSC_CATEGORY,
                                hPORT_TYPE,
                                hPORT_USAGE,
                                hPORT_STATE,
                                hDISP_STATE,
                                hDISP_TIME,
                                hDISP_DRBL_ID,
                                hCLAIM_TIME,
                                hCLAIM_USER_ID,
                                hCLAIM_MEMO,
                                hSTORE_TIME,
                                hSTART_SHOP_DATE,
                                hEND_SHOP_DATE,
                                hRETRY_COUNT,
                                hSMCAPACITY,
                                hDYNAMICCAPACITY,
                                hCLAIM_SHOP_DATE);
                recordValCount =
                        SET_RECORD_VALUE(
                                BizConstant.SP_HISTORYTABLENAME_FHEMCHS,
                                selectItemFHEMCHS,
                                strTableRecordValueSeq,
                                hHISTORY_NAME,
                                recordValCount,
                                hEVENT_CREATE_TIME,
                                hPORT_ID,
                                hPROCRSC_ID,
                                hOPE_CATEGORY,
                                hOPE_MODE,
                                hLC_RECIPE_ID,
                                hRECIPE_ID,
                                hPH_RECIPE_ID,
                                hCTRL_JOB,
                                hE10_STATE,
                                hEQP_STATE,
                                hPR_STATE,
                                hNEW_E10_STATE,
                                hNEW_EQP_STATE,
                                hNEW_CHAMBER_STATE,
                                hACT_E10_STATE,
                                hACT_EUIPMENT_STATE,
                                hACT_CHAMBER_STATE,
                                hNEW_ACT_E10_STATE,
                                hNEW_ACT_EQPMENT_ST,
                                hNEW_ACT_CHMBR_ST,
                                hEQP_OPE_MODE,
                                hNEW_EQP_OPE_MODE,
                                hSTART_TIME,
                                hEND_TIME,
                                hPORT_OPE_MODE,
                                hONLINE_MODE,
                                hDISP_MODE,
                                hACCESS_MODE,
                                hOPE_START_MODE,
                                hOPE_COMP_MODE,
                                hDESCRIPTION,
                                hEQPMON_ID,
                                hMONITOR_TYPE,
                                hMON_STATUS,
                                hPREV_MON_STATUS,
                                hEQPMONJOB_ID,
                                hMONJOB_STATUS,
                                hPREV_MONJOB_STATUS,
                                hBUFFRSC_CATEGORY,
                                hPORT_TYPE,
                                hPORT_USAGE,
                                hPORT_STATE,
                                hDISP_STATE,
                                hDISP_TIME,
                                hDISP_DRBL_ID,
                                hCLAIM_TIME,
                                hCLAIM_USER_ID,
                                hCLAIM_MEMO,
                                hSTORE_TIME,
                                hSTART_SHOP_DATE,
                                hEND_SHOP_DATE,
                                hRETRY_COUNT,
                                hSMCAPACITY,
                                hDYNAMICCAPACITY,
                                hCLAIM_SHOP_DATE);
                recordValCount =
                        SET_RECORD_VALUE(
                                BizConstant.SP_HISTORYTABLENAME_FHOPEHS,
                                selectItemFHOPEHS,
                                strTableRecordValueSeq,
                                hHISTORY_NAME,
                                recordValCount,
                                hEVENT_CREATE_TIME,
                                hPORT_ID,
                                hPROCRSC_ID,
                                hOPE_CATEGORY,
                                hOPE_MODE,
                                hLC_RECIPE_ID,
                                hRECIPE_ID,
                                hPH_RECIPE_ID,
                                hCTRL_JOB,
                                hE10_STATE,
                                hEQP_STATE,
                                hPR_STATE,
                                hNEW_E10_STATE,
                                hNEW_EQP_STATE,
                                hNEW_CHAMBER_STATE,
                                hACT_E10_STATE,
                                hACT_EUIPMENT_STATE,
                                hACT_CHAMBER_STATE,
                                hNEW_ACT_E10_STATE,
                                hNEW_ACT_EQPMENT_ST,
                                hNEW_ACT_CHMBR_ST,
                                hEQP_OPE_MODE,
                                hNEW_EQP_OPE_MODE,
                                hSTART_TIME,
                                hEND_TIME,
                                hPORT_OPE_MODE,
                                hONLINE_MODE,
                                hDISP_MODE,
                                hACCESS_MODE,
                                hOPE_START_MODE,
                                hOPE_COMP_MODE,
                                hDESCRIPTION,
                                hEQPMON_ID,
                                hMONITOR_TYPE,
                                hMON_STATUS,
                                hPREV_MON_STATUS,
                                hEQPMONJOB_ID,
                                hMONJOB_STATUS,
                                hPREV_MONJOB_STATUS,
                                hBUFFRSC_CATEGORY,
                                hPORT_TYPE,
                                hPORT_USAGE,
                                hPORT_STATE,
                                hDISP_STATE,
                                hDISP_TIME,
                                hDISP_DRBL_ID,
                                hCLAIM_TIME,
                                hCLAIM_USER_ID,
                                hCLAIM_MEMO,
                                hSTORE_TIME,
                                hSTART_SHOP_DATE,
                                hEND_SHOP_DATE,
                                hRETRY_COUNT,
                                hSMCAPACITY,
                                hDYNAMICCAPACITY,
                                hCLAIM_SHOP_DATE);
                recordValCount =
                        SET_RECORD_VALUE(
                                BizConstant.SP_HISTORYTABLENAME_FHEQPMONHS,
                                selectItemFHEQPMONHS,
                                strTableRecordValueSeq,
                                hHISTORY_NAME,
                                recordValCount,
                                hEVENT_CREATE_TIME,
                                hPORT_ID,
                                hPROCRSC_ID,
                                hOPE_CATEGORY,
                                hOPE_MODE,
                                hLC_RECIPE_ID,
                                hRECIPE_ID,
                                hPH_RECIPE_ID,
                                hCTRL_JOB,
                                hE10_STATE,
                                hEQP_STATE,
                                hPR_STATE,
                                hNEW_E10_STATE,
                                hNEW_EQP_STATE,
                                hNEW_CHAMBER_STATE,
                                hACT_E10_STATE,
                                hACT_EUIPMENT_STATE,
                                hACT_CHAMBER_STATE,
                                hNEW_ACT_E10_STATE,
                                hNEW_ACT_EQPMENT_ST,
                                hNEW_ACT_CHMBR_ST,
                                hEQP_OPE_MODE,
                                hNEW_EQP_OPE_MODE,
                                hSTART_TIME,
                                hEND_TIME,
                                hPORT_OPE_MODE,
                                hONLINE_MODE,
                                hDISP_MODE,
                                hACCESS_MODE,
                                hOPE_START_MODE,
                                hOPE_COMP_MODE,
                                hDESCRIPTION,
                                hEQPMON_ID,
                                hMONITOR_TYPE,
                                hMON_STATUS,
                                hPREV_MON_STATUS,
                                hEQPMONJOB_ID,
                                hMONJOB_STATUS,
                                hPREV_MONJOB_STATUS,
                                hBUFFRSC_CATEGORY,
                                hPORT_TYPE,
                                hPORT_USAGE,
                                hPORT_STATE,
                                hDISP_STATE,
                                hDISP_TIME,
                                hDISP_DRBL_ID,
                                hCLAIM_TIME,
                                hCLAIM_USER_ID,
                                hCLAIM_MEMO,
                                hSTORE_TIME,
                                hSTART_SHOP_DATE,
                                hEND_SHOP_DATE,
                                hRETRY_COUNT,
                                hSMCAPACITY,
                                hDYNAMICCAPACITY,
                                hCLAIM_SHOP_DATE);
                recordValCount =
                        SET_RECORD_VALUE(
                                BizConstant.SP_HISTORYTABLENAME_OHSEASON,
                                selectItemOHSEASON,
                                strTableRecordValueSeq,
                                hHISTORY_NAME,
                                recordValCount,
                                hEVENT_CREATE_TIME,
                                hPORT_ID,
                                hPROCRSC_ID,
                                hOPE_CATEGORY,
                                hOPE_MODE,
                                hLC_RECIPE_ID,
                                hRECIPE_ID,
                                hPH_RECIPE_ID,
                                hCTRL_JOB,
                                hE10_STATE,
                                hEQP_STATE,
                                hPR_STATE,
                                hNEW_E10_STATE,
                                hNEW_EQP_STATE,
                                hNEW_CHAMBER_STATE,
                                hACT_E10_STATE,
                                hACT_EUIPMENT_STATE,
                                hACT_CHAMBER_STATE,
                                hNEW_ACT_E10_STATE,
                                hNEW_ACT_EQPMENT_ST,
                                hNEW_ACT_CHMBR_ST,
                                hEQP_OPE_MODE,
                                hNEW_EQP_OPE_MODE,
                                hSTART_TIME,
                                hEND_TIME,
                                hPORT_OPE_MODE,
                                hONLINE_MODE,
                                hDISP_MODE,
                                hACCESS_MODE,
                                hOPE_START_MODE,
                                hOPE_COMP_MODE,
                                hDESCRIPTION,
                                hEQPMON_ID,
                                hMONITOR_TYPE,
                                hMON_STATUS,
                                hPREV_MON_STATUS,
                                hEQPMONJOB_ID,
                                hMONJOB_STATUS,
                                hPREV_MONJOB_STATUS,
                                hBUFFRSC_CATEGORY,
                                hPORT_TYPE,
                                hPORT_USAGE,
                                hPORT_STATE,
                                hDISP_STATE,
                                hDISP_TIME,
                                hDISP_DRBL_ID,
                                hCLAIM_TIME,
                                hCLAIM_USER_ID,
                                hCLAIM_MEMO,
                                hSTORE_TIME,
                                hSTART_SHOP_DATE,
                                hEND_SHOP_DATE,
                                hRETRY_COUNT,
                                hSMCAPACITY,
                                hDYNAMICCAPACITY,
                                hCLAIM_SHOP_DATE);
                recordValCount =
                        SET_RECORD_VALUE(
                                BizConstant.SP_HISTORYTABLENAME_FHEQPMONJOBHS,
                                selectItemFHEQPMONJOBHS,
                                strTableRecordValueSeq,
                                hHISTORY_NAME,
                                recordValCount,
                                hEVENT_CREATE_TIME,
                                hPORT_ID,
                                hPROCRSC_ID,
                                hOPE_CATEGORY,
                                hOPE_MODE,
                                hLC_RECIPE_ID,
                                hRECIPE_ID,
                                hPH_RECIPE_ID,
                                hCTRL_JOB,
                                hE10_STATE,
                                hEQP_STATE,
                                hPR_STATE,
                                hNEW_E10_STATE,
                                hNEW_EQP_STATE,
                                hNEW_CHAMBER_STATE,
                                hACT_E10_STATE,
                                hACT_EUIPMENT_STATE,
                                hACT_CHAMBER_STATE,
                                hNEW_ACT_E10_STATE,
                                hNEW_ACT_EQPMENT_ST,
                                hNEW_ACT_CHMBR_ST,
                                hEQP_OPE_MODE,
                                hNEW_EQP_OPE_MODE,
                                hSTART_TIME,
                                hEND_TIME,
                                hPORT_OPE_MODE,
                                hONLINE_MODE,
                                hDISP_MODE,
                                hACCESS_MODE,
                                hOPE_START_MODE,
                                hOPE_COMP_MODE,
                                hDESCRIPTION,
                                hEQPMON_ID,
                                hMONITOR_TYPE,
                                hMON_STATUS,
                                hPREV_MON_STATUS,
                                hEQPMONJOB_ID,
                                hMONJOB_STATUS,
                                hPREV_MONJOB_STATUS,
                                hBUFFRSC_CATEGORY,
                                hPORT_TYPE,
                                hPORT_USAGE,
                                hPORT_STATE,
                                hDISP_STATE,
                                hDISP_TIME,
                                hDISP_DRBL_ID,
                                hCLAIM_TIME,
                                hCLAIM_USER_ID,
                                hCLAIM_MEMO,
                                hSTORE_TIME,
                                hSTART_SHOP_DATE,
                                hEND_SHOP_DATE,
                                hRETRY_COUNT,
                                hSMCAPACITY,
                                hDYNAMICCAPACITY,
                                hCLAIM_SHOP_DATE);
                recordValCount =
                        SET_RECORD_VALUE(
                                BizConstant.SP_HISTORYTABLENAME_OHSEASONJOB,
                                selectItemOHSEASONJOB,
                                strTableRecordValueSeq,
                                hHISTORY_NAME,
                                recordValCount,
                                hEVENT_CREATE_TIME,
                                hPORT_ID,
                                hPROCRSC_ID,
                                hOPE_CATEGORY,
                                hOPE_MODE,
                                hLC_RECIPE_ID,
                                hRECIPE_ID,
                                hPH_RECIPE_ID,
                                hCTRL_JOB,
                                hE10_STATE,
                                hEQP_STATE,
                                hPR_STATE,
                                hNEW_E10_STATE,
                                hNEW_EQP_STATE,
                                hNEW_CHAMBER_STATE,
                                hACT_E10_STATE,
                                hACT_EUIPMENT_STATE,
                                hACT_CHAMBER_STATE,
                                hNEW_ACT_E10_STATE,
                                hNEW_ACT_EQPMENT_ST,
                                hNEW_ACT_CHMBR_ST,
                                hEQP_OPE_MODE,
                                hNEW_EQP_OPE_MODE,
                                hSTART_TIME,
                                hEND_TIME,
                                hPORT_OPE_MODE,
                                hONLINE_MODE,
                                hDISP_MODE,
                                hACCESS_MODE,
                                hOPE_START_MODE,
                                hOPE_COMP_MODE,
                                hDESCRIPTION,
                                hEQPMON_ID,
                                hMONITOR_TYPE,
                                hMON_STATUS,
                                hPREV_MON_STATUS,
                                hEQPMONJOB_ID,
                                hMONJOB_STATUS,
                                hPREV_MONJOB_STATUS,
                                hBUFFRSC_CATEGORY,
                                hPORT_TYPE,
                                hPORT_USAGE,
                                hPORT_STATE,
                                hDISP_STATE,
                                hDISP_TIME,
                                hDISP_DRBL_ID,
                                hCLAIM_TIME,
                                hCLAIM_USER_ID,
                                hCLAIM_MEMO,
                                hSTORE_TIME,
                                hSTART_SHOP_DATE,
                                hEND_SHOP_DATE,
                                hRETRY_COUNT,
                                hSMCAPACITY,
                                hDYNAMICCAPACITY,
                                hCLAIM_SHOP_DATE);
                recordValCount =
                        SET_RECORD_VALUE(
                                BizConstant.SP_HISTORYTABLENAME_FHBUFFRSCCHS,
                                selectItemFHBUFFRSCCHS,
                                strTableRecordValueSeq,
                                hHISTORY_NAME,
                                recordValCount,
                                hEVENT_CREATE_TIME,
                                hPORT_ID,
                                hPROCRSC_ID,
                                hOPE_CATEGORY,
                                hOPE_MODE,
                                hLC_RECIPE_ID,
                                hRECIPE_ID,
                                hPH_RECIPE_ID,
                                hCTRL_JOB,
                                hE10_STATE,
                                hEQP_STATE,
                                hPR_STATE,
                                hNEW_E10_STATE,
                                hNEW_EQP_STATE,
                                hNEW_CHAMBER_STATE,
                                hACT_E10_STATE,
                                hACT_EUIPMENT_STATE,
                                hACT_CHAMBER_STATE,
                                hNEW_ACT_E10_STATE,
                                hNEW_ACT_EQPMENT_ST,
                                hNEW_ACT_CHMBR_ST,
                                hEQP_OPE_MODE,
                                hNEW_EQP_OPE_MODE,
                                hSTART_TIME,
                                hEND_TIME,
                                hPORT_OPE_MODE,
                                hONLINE_MODE,
                                hDISP_MODE,
                                hACCESS_MODE,
                                hOPE_START_MODE,
                                hOPE_COMP_MODE,
                                hDESCRIPTION,
                                hEQPMON_ID,
                                hMONITOR_TYPE,
                                hMON_STATUS,
                                hPREV_MON_STATUS,
                                hEQPMONJOB_ID,
                                hMONJOB_STATUS,
                                hPREV_MONJOB_STATUS,
                                hBUFFRSC_CATEGORY,
                                hPORT_TYPE,
                                hPORT_USAGE,
                                hPORT_STATE,
                                hDISP_STATE,
                                hDISP_TIME,
                                hDISP_DRBL_ID,
                                hCLAIM_TIME,
                                hCLAIM_USER_ID,
                                hCLAIM_MEMO,
                                hSTORE_TIME,
                                hSTART_SHOP_DATE,
                                hEND_SHOP_DATE,
                                hRETRY_COUNT,
                                hSMCAPACITY,
                                hDYNAMICCAPACITY,
                                hCLAIM_SHOP_DATE);
                recordValCount =
                        SET_RECORD_VALUE(
                                BizConstant.SP_HISTORYTABLENAME_FHEQPPORTSCHS,
                                selectItemFHEQPPORTSCHS,
                                strTableRecordValueSeq,
                                hHISTORY_NAME,
                                recordValCount,
                                hEVENT_CREATE_TIME,
                                hPORT_ID,
                                hPROCRSC_ID,
                                hOPE_CATEGORY,
                                hOPE_MODE,
                                hLC_RECIPE_ID,
                                hRECIPE_ID,
                                hPH_RECIPE_ID,
                                hCTRL_JOB,
                                hE10_STATE,
                                hEQP_STATE,
                                hPR_STATE,
                                hNEW_E10_STATE,
                                hNEW_EQP_STATE,
                                hNEW_CHAMBER_STATE,
                                hACT_E10_STATE,
                                hACT_EUIPMENT_STATE,
                                hACT_CHAMBER_STATE,
                                hNEW_ACT_E10_STATE,
                                hNEW_ACT_EQPMENT_ST,
                                hNEW_ACT_CHMBR_ST,
                                hEQP_OPE_MODE,
                                hNEW_EQP_OPE_MODE,
                                hSTART_TIME,
                                hEND_TIME,
                                hPORT_OPE_MODE,
                                hONLINE_MODE,
                                hDISP_MODE,
                                hACCESS_MODE,
                                hOPE_START_MODE,
                                hOPE_COMP_MODE,
                                hDESCRIPTION,
                                hEQPMON_ID,
                                hMONITOR_TYPE,
                                hMON_STATUS,
                                hPREV_MON_STATUS,
                                hEQPMONJOB_ID,
                                hMONJOB_STATUS,
                                hPREV_MONJOB_STATUS,
                                hBUFFRSC_CATEGORY,
                                hPORT_TYPE,
                                hPORT_USAGE,
                                hPORT_STATE,
                                hDISP_STATE,
                                hDISP_TIME,
                                hDISP_DRBL_ID,
                                hCLAIM_TIME,
                                hCLAIM_USER_ID,
                                hCLAIM_MEMO,
                                hSTORE_TIME,
                                hSTART_SHOP_DATE,
                                hEND_SHOP_DATE,
                                hRETRY_COUNT,
                                hSMCAPACITY,
                                hDYNAMICCAPACITY,
                                hCLAIM_SHOP_DATE);

                if (searchCondition == null)
                    if (recordValCount >= limitCount) {
                        recordValCount = limitCount;
                        break;
                    }
            }

        strEquipmentHistory_GetDR_out.setStrTableRecordValueSeq(strTableRecordValueSeq);
        if (searchCondition != null) {
            strEquipmentHistory_GetDR_out.setStrTableRecordValuePage(
                    CimPageUtils.convertListToPage(
                            strTableRecordValueSeq,
                            searchCondition.getPage(),
                            searchCondition.getSize(),
                            queryPage.getTotalElements()));
        }
        return strEquipmentHistory_GetDR_out;
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param theTblName
     * @param theSelectItemDefinition
     * @param strTableRecordValueSeq
     * @param hHISTORY_NAME
     * @param recordValCount
     * @param hEVENT_CREATE_TIME
     * @param hPORT_ID
     * @param hPROCRSC_ID
     * @param hOPE_CATEGORY
     * @param hOPE_MODE
     * @param hLC_RECIPE_ID
     * @param hRECIPE_ID
     * @param hPH_RECIPE_ID
     * @param hCTRL_JOB
     * @param hE10_STATE
     * @param hEQP_STATE
     * @param hPR_STATE
     * @param hNEW_E10_STATE
     * @param hNEW_EQP_STATE
     * @param hNEW_CHAMBER_STATE
     * @param hACT_E10_STATE
     * @param hACT_EUIPMENT_STATE
     * @param hACT_CHAMBER_STATE
     * @param hNEW_ACT_E10_STATE
     * @param hNEW_ACT_EQPMENT_ST
     * @param hNEW_ACT_CHMBR_ST
     * @param hEQP_OPE_MODE
     * @param hNEW_EQP_OPE_MODE
     * @param hSTART_TIME
     * @param hEND_TIME
     * @param hPORT_OPE_MODE
     * @param hONLINE_MODE
     * @param hDISP_MODE
     * @param hACCESS_MODE
     * @param hOPE_START_MODE
     * @param hOPE_COMP_MODE
     * @param hDESCRIPTION
     * @param hEQPMON_ID
     * @param hMONITOR_TYPE
     * @param hMON_STATUS
     * @param hPREV_MON_STATUS
     * @param hEQPMONJOB_ID
     * @param hMONJOB_STATUS
     * @param hPREV_MONJOB_STATUS
     * @param hBUFFRSC_CATEGORY
     * @param hPORT_TYPE
     * @param hPORT_USAGE
     * @param hPORT_STATE
     * @param hDISP_STATE
     * @param hDISP_TIME
     * @param hDISP_DRBL_ID
     * @param hCLAIM_TIME
     * @param hCLAIM_USER_ID
     * @param hCLAIM_MEMO
     * @param hSTORE_TIME
     * @param hSTART_SHOP_DATE
     * @param hEND_SHOP_DATE
     * @param hRETRY_COUNT
     * @param hSMCAPACITY
     * @param hDYNAMICCAPACITY
     * @param hCLAIM_SHOP_DATE
     * @return int
     * @throws
     * @author Ho
     * @date 2019/5/8 10:30
     */
    private int SET_RECORD_VALUE(
            String theTblName,
            String[][] theSelectItemDefinition,
            List<Infos.TableRecordValue> strTableRecordValueSeq,
            String hHISTORY_NAME,
            int recordValCount,
            String hEVENT_CREATE_TIME,
            String hPORT_ID,
            String hPROCRSC_ID,
            String hOPE_CATEGORY,
            String hOPE_MODE,
            String hLC_RECIPE_ID,
            String hRECIPE_ID,
            String hPH_RECIPE_ID,
            String hCTRL_JOB,
            String hE10_STATE,
            String hEQP_STATE,
            String hPR_STATE,
            String hNEW_E10_STATE,
            String hNEW_EQP_STATE,
            String hNEW_CHAMBER_STATE,
            String hACT_E10_STATE,
            String hACT_EUIPMENT_STATE,
            String hACT_CHAMBER_STATE,
            String hNEW_ACT_E10_STATE,
            String hNEW_ACT_EQPMENT_ST,
            String hNEW_ACT_CHMBR_ST,
            String hEQP_OPE_MODE,
            String hNEW_EQP_OPE_MODE,
            String hSTART_TIME,
            String hEND_TIME,
            String hPORT_OPE_MODE,
            String hONLINE_MODE,
            String hDISP_MODE,
            String hACCESS_MODE,
            String hOPE_START_MODE,
            String hOPE_COMP_MODE,
            String hDESCRIPTION,
            String hEQPMON_ID,
            String hMONITOR_TYPE,
            String hMON_STATUS,
            String hPREV_MON_STATUS,
            String hEQPMONJOB_ID,
            String hMONJOB_STATUS,
            String hPREV_MONJOB_STATUS,
            String hBUFFRSC_CATEGORY,
            String hPORT_TYPE,
            String hPORT_USAGE,
            String hPORT_STATE,
            String hDISP_STATE,
            String hDISP_TIME,
            String hDISP_DRBL_ID,
            String hCLAIM_TIME,
            String hCLAIM_USER_ID,
            String hCLAIM_MEMO,
            String hSTORE_TIME,
            Double hSTART_SHOP_DATE,
            Double hEND_SHOP_DATE,
            Number hRETRY_COUNT,
            Number hSMCAPACITY,
            Number hDYNAMICCAPACITY,
            Double hCLAIM_SHOP_DATE) {
        if (CimStringUtils.equals(theTblName, hHISTORY_NAME)) {
            String stringBuffer;
            int defIndex = 0;
            int columnCnt = 0;
            Infos.TableRecordValue strTableRecordValue = new Infos.TableRecordValue();
            if (CimArrayUtils.getSize(strTableRecordValueSeq) > recordValCount) {
                strTableRecordValue = strTableRecordValueSeq.get(recordValCount);
            } else {
                strTableRecordValueSeq.add(strTableRecordValue);
            }
            List<Object> columnValues = new ArrayList<>();
            strTableRecordValue.setColumnValues(columnValues);

            if (theSelectItemDefinition[defIndex++][1] != null) {
                strTableRecordValue.setReportTimeStamp(hEVENT_CREATE_TIME);
                columnValues.add(hEVENT_CREATE_TIME);
                columnCnt++;
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                strTableRecordValue.setTableName(hHISTORY_NAME);
                columnValues.add(hHISTORY_NAME);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hPORT_ID);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hPROCRSC_ID);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hOPE_CATEGORY);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hOPE_MODE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hLC_RECIPE_ID);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hRECIPE_ID);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hPH_RECIPE_ID);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hCTRL_JOB);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hE10_STATE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hEQP_STATE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hPR_STATE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hNEW_E10_STATE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hNEW_EQP_STATE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hNEW_CHAMBER_STATE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hACT_E10_STATE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hACT_EUIPMENT_STATE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hACT_CHAMBER_STATE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hNEW_ACT_E10_STATE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hNEW_ACT_EQPMENT_ST);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hNEW_ACT_CHMBR_ST);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hEQP_OPE_MODE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hNEW_EQP_OPE_MODE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hSTART_TIME);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                stringBuffer = String.valueOf(hSTART_SHOP_DATE);
                columnValues.add(stringBuffer);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hEND_TIME);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                stringBuffer = String.valueOf(hEND_SHOP_DATE);
                columnValues.add(stringBuffer);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hPORT_OPE_MODE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hONLINE_MODE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hDISP_MODE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hACCESS_MODE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hOPE_START_MODE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hOPE_COMP_MODE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hDESCRIPTION);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hEQPMON_ID);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hMONITOR_TYPE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hMON_STATUS);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hPREV_MON_STATUS);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hEQPMONJOB_ID);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hMONJOB_STATUS);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hPREV_MONJOB_STATUS);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                stringBuffer = CimObjectUtils.toString(hRETRY_COUNT);
                columnValues.add(stringBuffer);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hBUFFRSC_CATEGORY);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                stringBuffer = CimObjectUtils.toString(hSMCAPACITY);
                columnValues.add(stringBuffer);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                stringBuffer = CimObjectUtils.toString(hDYNAMICCAPACITY);
                columnValues.add(stringBuffer);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hPORT_TYPE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hPORT_USAGE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hPORT_STATE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hDISP_STATE);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hDISP_TIME);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hDISP_DRBL_ID);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hCLAIM_TIME);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                stringBuffer = String.valueOf(hCLAIM_SHOP_DATE);
                columnValues.add(stringBuffer);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hCLAIM_USER_ID);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hCLAIM_MEMO);
            }
            if (theSelectItemDefinition[defIndex++][1] != null) {
                columnValues.add(hSTORE_TIME);
            }

            recordValCount++;
        }
        return recordValCount;
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param strObjCommonIn
     * @param strEquipmentMonitorJobLotHistory_GetDR_in
     * @return com.fa.cim.common.support.RetCode<com.fa.cim.dto.Infos.EquipmentMonitorJobLotHistoryGetDROut>
     * @throws
     * @author Ho
     * @date 2019/4/29 17:23
     */
    @Override
    public Infos.EquipmentMonitorJobLotHistoryGetDROut equipmentMonitorJobLotHistoryGetDR(
            Infos.ObjCommon strObjCommonIn,
            Infos.EquipmentMonitorJobLotHistoryGetDRIn strEquipmentMonitorJobLotHistory_GetDR_in) {
        if (!CimStringUtils.equals(
                strEquipmentMonitorJobLotHistory_GetDR_in.getHistoryCategory(),
                BizConstant.SP_HISTORYCATEGORY_EQPMONITORJOB)) {
            throw new ServiceException(retCodeConfig.getInvalidParameterWithMsg());
        }

        if (1
                != CimArrayUtils.getSize(
                strEquipmentMonitorJobLotHistory_GetDR_in.getStrTargetTableInfoSeq())) {
            throw new ServiceException(retCodeConfig.getInvalidParameterWithMsg());
        }

        Infos.TargetTableInfo strTargetTableInfo =
                strEquipmentMonitorJobLotHistory_GetDR_in.getStrTargetTableInfoSeq().get(0);
        if (1 != CimArrayUtils.getSize(strTargetTableInfo.getStrHashedInfoSeq())) {
            throw new ServiceException(retCodeConfig.getInvalidParameterWithMsg());
        }

        SearchCondition searchCondition =
                strEquipmentMonitorJobLotHistory_GetDR_in.getSearchCondition();

        String eqpMonitorJobID = ("");
        if (CimStringUtils.equals(
                strTargetTableInfo.getStrHashedInfoSeq().get(0).getHashKey(),
                BizConstant.SP_HISTORYCOLUMNNAME_EQPMONJOBID)) {
            eqpMonitorJobID = strTargetTableInfo.getStrHashedInfoSeq().get(0).getHashData();
        }

        if (0 == CimStringUtils.length(eqpMonitorJobID)) {
            throw new ServiceException(retCodeConfig.getInvalidParameterWithMsg());
        }

        Infos.EquipmentMonitorJobLotHistoryGetDROut strEquipmentMonitorJobLotHistory_GetDR_out =
                new Infos.EquipmentMonitorJobLotHistoryGetDROut();
        List<Infos.TableRecordInfo> strTableRecordInfoSeq = new ArrayList<>();
        strEquipmentMonitorJobLotHistory_GetDR_out.setStrTableRecordInfoSeq(strTableRecordInfoSeq);
        Infos.TableRecordInfo strTableRecordInfo = new Infos.TableRecordInfo();
        strTableRecordInfoSeq.add(strTableRecordInfo);
        strTableRecordInfo.setTableName(BizConstant.SP_HISTORYTABLENAME_FHEQPMONJOBHS);
        List<String> columnNames = new ArrayList<>();
        strTableRecordInfo.setColumnNames(columnNames);
        int columnCount = 0;
        columnNames.add(BizConstant.SP_HISTORYCOLUMNNAME_EQPMONITORJOBLOTID);
        columnCount++;

        String hFHEQPMONJOBHS_LOTEQPMONJOB_ID = eqpMonitorJobID;

        String sql =
                "SELECT DISTINCT LOT_ID,AM_JOB_ID\n"
                        + "        FROM   OHAMONJOB_LOT\n"
                        + "        WHERE  OHAMONJOB_LOT.AM_JOB_ID = ?";
        Page<Object[]> queryPage = null;
        List<Object[]> EMJLC = null;
        if (searchCondition != null) {
            queryPage = cimJpaRepository.query(sql, searchCondition, hFHEQPMONJOBHS_LOTEQPMONJOB_ID);
            EMJLC = queryPage.getContent();
        } else {
            EMJLC = cimJpaRepository.query(sql, hFHEQPMONJOBHS_LOTEQPMONJOB_ID);
        }

        int count = 0;
        int increasedDataLen = 10;
        List<Infos.TableRecordValue> strTableRecordValueSeq = new ArrayList<>();
        strEquipmentMonitorJobLotHistory_GetDR_out.setStrTableRecordValueSeq(strTableRecordValueSeq);

        if (EMJLC != null)
            for (Object[] obj : EMJLC) {
                String hFHEQPMONJOBHS_LOTLOT_ID = (String) obj[0];

                if (count >= increasedDataLen) {
                    increasedDataLen += 10;
                }

                Infos.TableRecordValue strTableRecordValue = new Infos.TableRecordValue();
                strTableRecordValueSeq.add(strTableRecordValue);
                strTableRecordValue.setTableName(BizConstant.SP_HISTORYTABLENAME_FHEQPMONJOBHS);

                List<Object> columnValues = new ArrayList<>();
                strTableRecordValue.setColumnValues(columnValues);
                columnCount = 0;
                columnValues.add(hFHEQPMONJOBHS_LOTLOT_ID);
                columnCount++;
                count++;
            }
        if (searchCondition != null) {
            strEquipmentMonitorJobLotHistory_GetDR_out.setStrTableRecordValuePage(
                    CimPageUtils.convertListToPage(
                            strTableRecordValueSeq,
                            searchCondition.getPage(),
                            searchCondition.getSize(),
                            queryPage.getTotalElements()));
        }
        return strEquipmentMonitorJobLotHistory_GetDR_out;
    }

    @Override
    public Infos.EqpStatusInfo equipmentStatusInfoGet(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        Machine baseMachine = getMachine(equipmentID);
        if (CimBooleanUtils.isTrue(baseMachine.isStorageMachine())) {
            throw new ServiceException(
                    new OmCode(retCodeConfig.getNotFoundEqp(), baseMachine.getIdentifier()));
        }

        Infos.EqpStatusInfo info = new Infos.EqpStatusInfo();
        info.setStorageBool(false);

        CimMachine machine = (CimMachine) baseMachine;

        CimMachineState currentState = machine.getCurrentMachineState();
        Validations.check(CimObjectUtils.isEmpty(currentState), retCodeConfig.getNotFoundEqpState());

        // CimE10State currentE10 = currentState.getE10State();
        // Validations.check(CimObjectUtils.isEmpty(currentE10), retCodeConfig.getNotFoundE10State());

        info.setEquipmentStatusCode(
                ObjectIdentifier.build(currentState.getIdentifier(), currentState.getPrimaryKey()));
        info.setE10Status(machine.getCurE10State());
        info.setEquipmentStatusName(currentState.getMachineStateName());
        info.setEquipmentStatusDescription(currentState.getMachineStateDescription());
        info.setChangeTimeStamp(String.valueOf(machine.getLastStatusChangeTimeStamp()));
        info.setChangeUserID(machine.getLastStatusChangePersonID());
        info.setActualChangeTimeStamp(String.valueOf(machine.getLastActualStatusChangeTimeStamp()));
        info.setEquipmentAvailableFlag(machine.isAvailableState());
        info.setMaxCountForFlowBatch(machine.getFlowBatchMaxCount());

        CimMachineState actualState = machine.getActualMachineState();
        if (actualState != null) {
            CimE10State actualE10 = actualState.getE10State();
            Validations.check(CimObjectUtils.isEmpty(actualE10), retCodeConfig.getNotFoundE10State());

            info.setActualStatusCode(
                    ObjectIdentifier.build(actualState.getIdentifier(), actualState.getPrimaryKey()));
            info.setActualE10Status(actualE10.getIdentifier());
            info.setActualStatusName(actualState.getMachineStateName());
            info.setActualStatusDescription(actualState.getMachineStateDescription());
        }

        if (StandardProperties.OM_UPDATE_LAST_USED_RECIPE.getIntValue() != 0) {
            CimMachineRecipe machineRecipe = machine.latestMachineRecipe();
            if (machineRecipe != null) {
                info.setLastRecipeID(ObjectIdentifier.buildWithValue(machineRecipe.getPhysicalRecipeId()));
            }
        }

        List<CimFlowBatch> flowBatches = machine.allFlowBatches();
        if (CimArrayUtils.isNotEmpty(flowBatches)) {
            info.setReservedFlowBatchIDs(
                    flowBatches.stream()
                            .map(flow -> ObjectIdentifier.build(flow.getIdentifier(), flow.getPrimaryKey()))
                            .collect(Collectors.toList()));
            info.setReservedFlowBatchID(info.getReservedFlowBatchIDs().get(0));
        }

        return info;
    }

    @Override
    public List<Infos.EqpMonitorJobInfo> eqpMonitorJobInfoGet(
            Infos.ObjCommon objCommon, ObjectIdentifier eqpMonitorID, ObjectIdentifier eqpMonitorJobID) {
        CimEqpMonitor equipmentMonitor = baseCoreFactory.getBO(CimEqpMonitor.class, eqpMonitorID);
        Validations.check(
                null == equipmentMonitor,
                new OmCode(
                        retCodeConfig.getNotFoundEqpMonitor(), ObjectIdentifier.fetchValue(eqpMonitorID)));

        List<Infos.EqpMonitorJobInfo> eqpMonitorJobInfos = new ArrayList<>();
        if (!ObjectIdentifier.isEmptyWithValue(eqpMonitorJobID)) {
            CimEqpMonitorJob equipmentMonitorJob =
                    baseCoreFactory.getBO(CimEqpMonitorJob.class, eqpMonitorJobID);
            Validations.check(
                    null == equipmentMonitorJob,
                    new OmCode(
                            retCodeConfig.getNotFoundEqpMonitorJob(),
                            ObjectIdentifier.fetchValue(eqpMonitorJobID)));
            MachineDTO.EqpMonitorJobInfo eqpMonitorJobInfo = equipmentMonitorJob.getEqpMonitorJobInfo();

            List<MachineDTO.EqpMonitorLotInfo> eqpMonitorLotInfoList =
                    equipmentMonitorJob.allEqpMonitorLots();
            if (CimArrayUtils.isNotEmpty(eqpMonitorLotInfoList)) {
                for (MachineDTO.EqpMonitorLotInfo eqpMonitorLotInfo : eqpMonitorLotInfoList) {
                    Map<String, String> map =
                            BaseStaticMethod.convertMonopekeyToRouteOpeForHostvariable(
                                    eqpMonitorLotInfo.getMonitorOpeKey());
                    if (CimObjectUtils.isEmpty(map)) {
                        return eqpMonitorJobInfos;
                    }
                    eqpMonitorLotInfo.setMonitorRouteID(map.get("routeID"));
                    eqpMonitorLotInfo.setMonitorOpeNo(map.get("monitorOpeNo"));
                }
            }
            eqpMonitorJobInfo.setStrEqpMonitorLotInfoSeq(eqpMonitorLotInfoList);

            eqpMonitorJobInfos.add(new Infos.EqpMonitorJobInfo(eqpMonitorJobInfo));
        } else {
            List<CimEqpMonitorJob> equipmentMonitorJobs = equipmentMonitor.allEqpMonitorJobs();
            if (CimArrayUtils.isNotEmpty(equipmentMonitorJobs)) {
                for (CimEqpMonitorJob equipmentMonitorJob : equipmentMonitorJobs) {
                    MachineDTO.EqpMonitorJobInfo eqpMonitorJobInfo =
                            equipmentMonitorJob.getEqpMonitorJobInfo();
                    List<MachineDTO.EqpMonitorLotInfo> eqpMonitorLotInfoList =
                            equipmentMonitorJob.allEqpMonitorLots();
                    if (CimArrayUtils.isNotEmpty(eqpMonitorLotInfoList)) {
                        for (MachineDTO.EqpMonitorLotInfo eqpMonitorLotInfo : eqpMonitorLotInfoList) {
                            Map<String, String> map =
                                    BaseStaticMethod.convertMonopekeyToRouteOpeForHostvariable(
                                            eqpMonitorLotInfo.getMonitorOpeKey());
                            if (CimObjectUtils.isEmpty(map)) {
                                return eqpMonitorJobInfos;
                            }
                            eqpMonitorLotInfo.setMonitorRouteID(map.get("routeID"));
                            eqpMonitorLotInfo.setMonitorOpeNo(map.get("monitorOpeNo"));
                        }
                    }
                    eqpMonitorJobInfo.setStrEqpMonitorLotInfoSeq(eqpMonitorLotInfoList);
                    eqpMonitorJobInfos.add(new Infos.EqpMonitorJobInfo(eqpMonitorJobInfo));
                }
            }
        }
        return eqpMonitorJobInfos;
    }

    @Override
    public List<ObjectIdentifier> equipmentInProcessingControlJobGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentId) {
        log.debug("getEquipmentInProcessingControlJob(): enter getEquipmentInProcessingControlJob");
        List<ObjectIdentifier> inProcessingControlJobIds = new ArrayList<>();
        String querySql =
                String.format(
                        " SELECT  CTRLJOB_ID\n"
                                + "        FROM    OMCJ\n"
                                + "        WHERE   EQP_ID = '%s' \n"
                                + "        AND     (STATUS = '%s' OR  STATUS = '%s') ",
                        equipmentId.getValue(),
                        BizConstant.SP_CONTROLJOBSTATUS_QUEUED,
                        BizConstant.SP_CONTROLJOBSTATUS_EXECUTING);
        List<CimControlJob> controlJobList =
                baseCoreFactory.getBOListByCustom(CimControlJob.class, querySql);
        Validations.check(CimObjectUtils.isEmpty(controlJobList), retCodeConfig.getSqlNotFound());
        for (CimControlJob controlJob : controlJobList) {
            inProcessingControlJobIds.add(
                    new ObjectIdentifier(controlJob.getIdentifier(), controlJob.getPrimaryKey()));
        }
        return inProcessingControlJobIds;
    }

    @Override
    public void equipmentBackupStateUpdate(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentId,
            ObjectIdentifier equipmentStatusCode) {
        if (log.isInfoEnabled()) log.info("PPTManager_i::equipment_backupState_Update");

        /*----------------*/
        /*   Initialize   */
        /*----------------*/
        if (log.isInfoEnabled()) log.info("in Parameter equipmentID ={}", equipmentId.getValue());
        if (log.isInfoEnabled())
            log.info("in Parameter equipmentID ={}", equipmentStatusCode.getValue());

        /*------------------------*/
        /*   Get Machine Object   */
        /*------------------------*/
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentId);

        // Generate backup equipment status
        CimMachineState aMachineState = null;

        if (CimStringUtils.isNotEmpty(equipmentStatusCode.getValue())) {
            aMachineState = baseCoreFactory.getBO(CimMachineState.class, equipmentStatusCode);
        }

        aMachine.setBackupMachineState(aMachineState);

        if (log.isInfoEnabled()) log.info("PPTManager_i::equipment_backupState_Update");
    }

    @Override
    public Infos.EqpBackupState equipmentBackupStateGet(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentId) {
        log.debug("getEquipmentBackupState(): enter getEquipmentBackupState");
        Infos.EqpBackupState eqpBackupState = new Infos.EqpBackupState();
        Validations.check(
                ObjectIdentifier.isEmptyWithValue(equipmentId), new ErrorCode("equipmentID is empty !"));
        /*------------------------*/
        /*   Get Machine Object   */
        /*------------------------*/
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentId);

        // Get backup equipment status
        CimMachineState aBackupState = aMachine.getBackupMachineState();
        // if aBackupState is NIL, backupEquipmentStatus will be set as ""
        if (aBackupState != null) {
            eqpBackupState.setBackupEquipmentStatus(
                    ObjectIdentifier.build(aBackupState.getIdentifier(), aBackupState.getPrimaryKey()));
        }

        if (eqpBackupState.getBackupEquipmentStatus() != null
                && eqpBackupState.getBackupEquipmentStatus().getValue().length() > 0) {
            // Get backup equipment status E10
            CimE10State aBackupE10 = aBackupState == null ? null : aBackupState.getE10State();
            Validations.check(aBackupE10 == null, retCodeConfig.getNotFoundE10State());
            eqpBackupState.setBackupE10Status(
                    new ObjectIdentifier(aBackupE10.getIdentifier(), aBackupE10.getPrimaryKey()));
        }

        return eqpBackupState;
    }

    @Override
    public Outputs.ObjEquipmentStateConvertOut equipmentStateConvert(
            Infos.ObjCommon objCommonIn,
            ObjectIdentifier equipmentId,
            ObjectIdentifier equipmentStatusCode) {
        log.debug("convertEquipmentState(): enter convertEquipmentState");
        Outputs.ObjEquipmentStateConvertOut eqpStateConvert = new Outputs.ObjEquipmentStateConvertOut();
        if (ObjectIdentifier.isEmpty(equipmentId) || ObjectIdentifier.isEmpty(equipmentStatusCode)) {
            throw new ServiceException(new ErrorCode("equipmentID or equipmentStatusCode is empty !"));
        }
        CimMachine aPosMachine = baseCoreFactory.getBO(CimMachine.class, equipmentId);
        if (aPosMachine == null) {
            eqpStateConvert.setStateConverted(false);
            eqpStateConvert.setConvertedStatusCode(equipmentStatusCode);
            return eqpStateConvert;
        }

        // find eqp state
        CimMachineState equipmentState =
                baseCoreFactory.getBO(CimMachineState.class, equipmentStatusCode);

        // Collecting Latest OpeComp Time Stamp
        List<MachineDTO.MachineLot> processingLots = aPosMachine.allProcessingLots();
        Timestamp latestOpeStartTimeStamp = null;
        int processingLotsLength = CimArrayUtils.getSize(processingLots);
        for (int i = 0; i < processingLotsLength; i++) {
            MachineDTO.MachineLot machineLot = processingLots.get(i);

            CimLot lot = baseCoreFactory.getBO(CimLot.class, machineLot.getLotID());
            Validations.check(null == lot, retCodeConfig.getNotFoundLot());
            com.fa.cim.newcore.bo.pd.CimProcessOperation po = lot.getProcessOperation();
            Validations.check(null == po, retCodeConfig.getNotFoundProcessOperation());

            // Judgement of Latest Time Stamp
            Timestamp actualStartTime = po.getActualStartTimeStamp();

            // put current lot id and actualStartTime to map
            if (latestOpeStartTimeStamp == null
                    || latestOpeStartTimeStamp.compareTo(actualStartTime) < 0) {
                latestOpeStartTimeStamp = actualStartTime;
            }
        }

        log.debug("convertEquipmentState(): Latest OpeStartTime is : {}", latestOpeStartTimeStamp);
        // Collecting LotIDs which has latestOpeStartTimeStamp
        List<ObjectIdentifier> latestOpeStartLots = new ArrayList<>();
        processingLotsLength = CimArrayUtils.getSize(processingLots);
        for (int i = 0; i < processingLotsLength; i++) {
            MachineDTO.MachineLot machineLot = processingLots.get(i);
            CimLot aLot = baseCoreFactory.getBO(CimLot.class, machineLot.getLotID());
            com.fa.cim.newcore.bo.pd.CimProcessOperation aPosPO = aLot.getProcessOperation();

            String opeStartTimeStamp = aPosPO.getActualStartTimeStamp().toString();

            // ---------------------------------------------------
            // Judgement of Lot has Latest OpeStart Time Stamp or
            // ---------------------------------------------------
            if (CimDateUtils.compare(latestOpeStartTimeStamp, opeStartTimeStamp) == 0) {
                latestOpeStartLots.add(machineLot.getLotID());
            }
        }

        List<CodeDTO.MachineStateConvertCondition> strConvertConditions =
                equipmentState.allConvertConditions(aPosMachine.getEqpModel());
        int CCLength = CimArrayUtils.getSize(strConvertConditions);

        log.debug("convertEquipmentState(): Collected LotID Quantity: {}", CCLength);
        CimLot aLot = null;
        for (int i = 0; i < CCLength; i++) {
            CodeDTO.MachineStateConvertCondition machineStateConvertCondition =
                    strConvertConditions.get(i);
            if (CimStringUtils.equals(
                    machineStateConvertCondition.getConvertLogic(),
                    BizConstant.SP_EQPSTATECONVERTTYPE_BYSTARTLOT)) {
                int LLength = CimArrayUtils.getSize(latestOpeStartLots);
                for (int j = 0; j < LLength; j++) {
                    // ----------------------------------------------------------------
                    // Convert LotIDs which has Latest OpeStartTimeStamp to Lot Object
                    // ----------------------------------------------------------------
                    aLot = baseCoreFactory.getBO(CimLot.class, latestOpeStartLots.get(j));

                    String aLotAttribute = aLot.getLotType();

                    if (CimStringUtils.equals(
                            aLotAttribute, strConvertConditions.get(i).getAttributeValue())) {
                        eqpStateConvert.setStateConverted(true);
                        eqpStateConvert.setConvertedStatusCode(
                                strConvertConditions.get(i).getToMachineStateCode());
                        return eqpStateConvert;
                    }
                }
            } else if (CimStringUtils.equals(
                    strConvertConditions.get(i).getConvertLogic(),
                    BizConstant.SP_EQPSTATECONVERTTYPE_BYSTARTSUBLOT)) {

                int LLength = CimArrayUtils.getSize(latestOpeStartLots);
                for (int j = 0; j < LLength; j++) {
                    // ----------------------------------------------------------------
                    // Convert LotIDs which has Latest OpeStartTimeStamp to Lot Object
                    // ----------------------------------------------------------------
                    aLot = baseCoreFactory.getBO(CimLot.class, latestOpeStartLots.get(j));

                    String aLotAttribute = aLot.getSubLotType();

                    if (CimStringUtils.equals(
                            aLotAttribute, strConvertConditions.get(i).getAttributeValue())) {
                        eqpStateConvert.setStateConverted(true);
                        eqpStateConvert.setConvertedStatusCode(
                                strConvertConditions.get(i).getToMachineStateCode());
                        return eqpStateConvert;
                    }
                }
            } else if (CimStringUtils.equals(
                    strConvertConditions.get(i).getConvertLogic(),
                    BizConstant.SP_EQPSTATECONVERTTYPE_BYSTARTROUTE)) {
                com.fa.cim.newcore.bo.pd.CimProcessDefinition aProcessDefinition;

                int LLength = CimArrayUtils.getSize(latestOpeStartLots);

                for (int j = 0; j < LLength; j++) {
                    // ----------------------------------------------------------------
                    // Convert LotIDs which has Latest OpeStartTimeStamp to Lot Object
                    // ----------------------------------------------------------------
                    aLot = baseCoreFactory.getBO(CimLot.class, latestOpeStartLots.get(j));

                    aProcessDefinition = aLot.getMainProcessDefinition();

                    Validations.check(
                            null == aProcessDefinition, retCodeConfig.getNotFoundProcessDefinition());

                    String aLotAttribute = aProcessDefinition.getProcessDefinitionType();

                    if (CimStringUtils.equals(
                            aLotAttribute, strConvertConditions.get(i).getAttributeValue())) {
                        eqpStateConvert.setStateConverted(true);
                        eqpStateConvert.setConvertedStatusCode(
                                strConvertConditions.get(i).getToMachineStateCode());
                        return eqpStateConvert;
                    }
                }
            } else if (CimStringUtils.equals(
                    strConvertConditions.get(i).getConvertLogic(),
                    BizConstant.SP_EQPSTATECONVERTTYPE_BYINPROCESSLOT)) {
                int LLength = CimArrayUtils.getSize(latestOpeStartLots);

                for (int k = 0; k < LLength; k++) {
                    // ----------------------------------------------------------------
                    // Convert Processing All LotIDs to Lot Object
                    // ----------------------------------------------------------------
                    aLot = baseCoreFactory.getBO(CimLot.class, latestOpeStartLots.get(k));

                    String aLotAttribute = aLot.getLotType();

                    if (CimStringUtils.equals(
                            aLotAttribute, strConvertConditions.get(i).getAttributeValue())) {
                        eqpStateConvert.setStateConverted(true);
                        eqpStateConvert.setConvertedStatusCode(
                                strConvertConditions.get(i).getToMachineStateCode());
                        return eqpStateConvert;
                    }
                }
            } else if (CimStringUtils.equals(
                    strConvertConditions.get(i).getConvertLogic(),
                    BizConstant.SP_EQPSTATECONVERTTYPE_BYINPROCESSSUBLOT)) {
                int LLength = CimArrayUtils.getSize(latestOpeStartLots);

                for (int k = 0; k < LLength; k++) {
                    // ----------------------------------------------------------------
                    // Convert Processing All LotIDs to Lot Object
                    // ----------------------------------------------------------------
                    aLot = baseCoreFactory.getBO(CimLot.class, latestOpeStartLots.get(k));

                    String aLotAttribute = aLot.getSubLotType();

                    if (CimStringUtils.equals(
                            aLotAttribute, strConvertConditions.get(i).getAttributeValue())) {
                        eqpStateConvert.setStateConverted(true);
                        eqpStateConvert.setConvertedStatusCode(
                                strConvertConditions.get(i).getToMachineStateCode());
                        return eqpStateConvert;
                    }
                }
            } else if (CimStringUtils.equals(
                    strConvertConditions.get(i).getConvertLogic(),
                    BizConstant.SP_EQPSTATECONVERTTYPE_BYINPROCESSROUTE)) {
                int LLength = CimArrayUtils.getSize(latestOpeStartLots);

                for (int k = 0; k < LLength; k++) {
                    // ----------------------------------------------------------------
                    // Convert Processing All LotIDs to Lot Object
                    // ----------------------------------------------------------------
                    aLot = baseCoreFactory.getBO(CimLot.class, latestOpeStartLots.get(k));

                    com.fa.cim.newcore.bo.pd.CimProcessDefinition aProcessDefinition =
                            aLot.getMainProcessDefinition();

                    Validations.check(
                            null == aProcessDefinition, retCodeConfig.getNotFoundProcessDefinition());

                    String aLotAttribute = aProcessDefinition.getProcessDefinitionType();

                    if (CimStringUtils.equals(
                            aLotAttribute, strConvertConditions.get(i).getAttributeValue())) {
                        eqpStateConvert.setStateConverted(true);
                        eqpStateConvert.setConvertedStatusCode(
                                strConvertConditions.get(i).getToMachineStateCode());
                        return eqpStateConvert;
                    }
                }
            }
        }

        eqpStateConvert.setStateConverted(false);
        eqpStateConvert.setConvertedStatusCode(equipmentStatusCode);
        return eqpStateConvert;
    }

    @Override
    public Outputs.ObjEquipmentStateConvertOut equipmentStateConvertV2(
            ObjectIdentifier equipmentID, ObjectIdentifier eqpStatusCode) {
        if (ObjectIdentifier.isEmpty(equipmentID) || ObjectIdentifier.isEmpty(eqpStatusCode)) {
            throw new ServiceException(new OmCode(retCodeConfig.getInvalidInputParam()));
        }

        Outputs.ObjEquipmentStateConvertOut convertOut = new Outputs.ObjEquipmentStateConvertOut();
        CimMachine machine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        if (machine == null) {
            convertOut.setStateConverted(false);
            convertOut.setConvertedStatusCode(eqpStatusCode);
            return convertOut;
        }

        CimMachineState eqpState = baseCoreFactory.getBO(CimMachineState.class, eqpStatusCode);

        // Collecting Latest OpeComp TimeStamp, and find the Lot which is latestOpeStartTime
        AtomicReference<Timestamp> latestOpeStartTime = new AtomicReference<>();
        List<MachineDTO.MachineLot> processingLots = machine.allProcessingLots();
        Map<String, CimProcessOperation> processOpeMap = Maps.newHashMap();
        List<CimLot> lots = processingLots.stream().map(lot -> {
            CimLot cimLot = baseCoreFactory.getBO(CimLot.class, lot.getLotID());
            Validations.check(cimLot == null, retCodeConfig.getNotFoundLot());
            CimProcessOperation operation = cimLot.getProcessOperation();
            Validations.check(operation == null, retCodeConfig.getNotFoundProcessOperation());
            processOpeMap.put(cimLot.getPrimaryKey(), operation);
            Timestamp actualStartTime = operation.getActualStartTimeStamp();
            if (latestOpeStartTime.get() == null || latestOpeStartTime.get().compareTo(actualStartTime) < 0) {
                latestOpeStartTime.set(actualStartTime);
            }
            return cimLot;
        }).collect(Collectors.toList());
        List<CimLot> latestLots = lots.stream().filter(lot -> {
            CimProcessOperation operation = processOpeMap.get(lot.getPrimaryKey());
            return operation != null && CimDateUtils.compare(latestOpeStartTime.get(),
                    operation.getActualStartTimeStamp().toString()) == 0;
        }).collect(Collectors.toList());

        List<CodeDTO.MachineStateConvertCondition> conditions = eqpState.allConvertConditions(machine.getEqpModel());
        conditions.sort(Comparator.comparingInt(o ->
                Integer.parseInt(CimStringUtils.isEmpty(o.getCheckSequence()) ? "0" : o.getCheckSequence())));
        int type;
        String tmpAttr;
        List<CimLot> tmpLots;
        CimProcessDefinition definition;
        for (CodeDTO.MachineStateConvertCondition condition : conditions) {
            switch (nullToEmpty(condition.getConvertLogic())) {
                case BizConstant.SP_EQPSTATECONVERTTYPE_BYSTARTLOT:
                    type = 1; // Logic: STLT
                    break;
                case BizConstant.SP_EQPSTATECONVERTTYPE_BYSTARTSUBLOT:
                    type = 2; // Logic: STSL
                    break;
                case BizConstant.SP_EQPSTATECONVERTTYPE_BYSTARTROUTE:
                    type = 3; // Logic: STRT
                    break;
                case BizConstant.SP_EQPSTATECONVERTTYPE_BYINPROCESSLOT:
                    type = 4; // Logic: IPLT
                    break;
                case BizConstant.SP_EQPSTATECONVERTTYPE_BYINPROCESSSUBLOT:
                    type = 5; // Logic: IPSL
                    break;
                case BizConstant.SP_EQPSTATECONVERTTYPE_BYINPROCESSROUTE:
                    type = 6; // Logic: IPRT
                    break;
                default:
                    continue;
            }
            tmpLots = (type < 4 ? latestLots : lots);
            for (CimLot lot : tmpLots) {
                if (type == 3 || type == 6) {
                    definition = lot.getMainProcessDefinition();
                    Validations.check(definition == null, retCodeConfig.getNotFoundProcessDefinition());
                    tmpAttr = definition.getProcessDefinitionType();
                } else if (type == 2 || type == 5) {
                    tmpAttr = lot.getSubLotType();
                } else {
                    tmpAttr = lot.getLotType();
                }
                if (CimStringUtils.equals(tmpAttr, condition.getAttributeValue())) {
                    convertOut.setStateConverted(true);
                    convertOut.setConvertedStatusCode(condition.getToMachineStateCode());
                    return convertOut;
                }
            }
        }

        convertOut.setStateConverted(false);
        convertOut.setConvertedStatusCode(eqpStatusCode);
        return convertOut;
    }

    @Override
    public Infos.EqpBrInfo equipmentBRInfoGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        Infos.EqpBrInfo eqpBrInfo = new Infos.EqpBrInfo();
        // SELECT SQL FOR FREQP
        List<CimEquipmentDO> equipments =
                cimJpaRepository.query(
                        "SELECT * FROM OMEQP WHERE EQP_ID = ?1",
                        CimEquipmentDO.class,
                        ObjectIdentifier.fetchValue(equipmentID));
        Validations.check(CimObjectUtils.isEmpty(equipments), retCodeConfig.getNotFoundLot());
        CimEquipmentDO equipment = equipments.get(0);
        CimMachine cimMachine = null;
        eqpBrInfo.setEquipmentName(equipment.getDescription());
        eqpBrInfo.setWorkBay(ObjectIdentifier.build(equipment.getAreaID(), equipment.getAreaObj()));
        eqpBrInfo.setEquipmentOwner(equipment.getOwnerID());
        eqpBrInfo.setEapResourceName(equipment.getServerName());
        eqpBrInfo.setEquipmentCategory(equipment.getEquipmentCategory());
        eqpBrInfo.setEquipmentGroup(equipment.getEquipmentType());
        eqpBrInfo.setEquipmentModelNo(equipment.getModelNumber());
        eqpBrInfo.setReticleUseFlag(CimBooleanUtils.isTrue(equipment.getReticleRequired()));
        eqpBrInfo.setFixtureUseFlag(CimBooleanUtils.isTrue(equipment.getFixtureRequired()));
        eqpBrInfo.setCassetteChangeFlag(CimBooleanUtils.isTrue(equipment.getCassetteChangeRequired()));
        eqpBrInfo.setStartLotsNotifyRequiredFlag(
                CimBooleanUtils.isTrue(equipment.getStartLotNotifyRequired()));
        eqpBrInfo.setMonitorCreationFlag(CimBooleanUtils.isTrue(equipment.getMonitorCreation()));
        eqpBrInfo.setEqpToEqpTransferFlag(
                CimBooleanUtils.isTrue(equipment.getEquipmentToEquipmentTransfer()));
        eqpBrInfo.setTakeInOutTransferFlag(CimBooleanUtils.isTrue(equipment.getOutInTransferFlag()));
        eqpBrInfo.setMultiRecipeCapability(equipment.getMultiRecipeCapability());
        eqpBrInfo.setFmcSwitch(equipment.getSlmSwitch());
        eqpBrInfo.setFmcCapabilityFlag(equipment.getSlmCapabilityFlag());
        eqpBrInfo.setMinWaferCount(equipment.getMinWaferCount());
        eqpBrInfo.setMaxBatchSize(equipment.getBatchSizeMax());
        eqpBrInfo.setMinBatchSize(equipment.getBatchSizeMin());
        eqpBrInfo.setProcessJobLevelCtrl(CimBooleanUtils.isTrue(equipment.getProcessJobControlFlag()));
        Boolean tmpEmptyCassetteReqFlag = equipment.getMonitorCreation();
        eqpBrInfo.setEmptyCassetteRequireFlag(
                CimBooleanUtils.isTrue(tmpEmptyCassetteReqFlag)
                        ? tmpEmptyCassetteReqFlag
                        : eqpBrInfo.isCassetteChangeFlag());
        eqpBrInfo.setPrControl(equipment.getPrControl());
        // SELECT SQL FOR OMEQP_SPECIALEQPFN
        List<CimEquipmentSpecialControlDO> equipmentSpecialControls =
                cimJpaRepository.query(
                        "SELECT VALUE FROM OMEQP_SPECIALEQPFN WHERE REFKEY = ?1 ORDER BY IDX_NO",
                        CimEquipmentSpecialControlDO.class,
                        equipment.getId());
        if (!CimObjectUtils.isEmpty(equipmentSpecialControls)) {
            eqpBrInfo.setSpecialControl(
                    equipmentSpecialControls.stream()
                            .map(SequentialValueEntity::getValue)
                            .collect(Collectors.toList()));
        }
        List<CimEquipmentContaminationDO> eqpContaminationByEqp =
                contaminationMethod.getEqpContaminationByEqp(equipmentID);
        List<String> contaminationList = new ArrayList<>();
        for (CimEquipmentContaminationDO equipmentContamination : eqpContaminationByEqp) {
            contaminationList.add(equipmentContamination.getContaminationLevel());
        }
        contaminationList = contaminationList.stream().distinct().collect(Collectors.toList());
        eqpBrInfo.setContaminationList(contaminationList);

        // SELECT SQL FOR OMEQP_NPWBANK
        List<CimEquipmentControlLotBankDO> equipmentControlLotBanks =
                cimJpaRepository.query(
                        "SELECT NPW_LOT_TYPE, BANK_ID, BANK_RKEY FROM OMEQP_NPWBANK WHERE REFKEY = ?1",
                        CimEquipmentControlLotBankDO.class,
                        equipment.getId());
        for (CimEquipmentControlLotBankDO equipmentControlLotBank : equipmentControlLotBanks) {
            String controlLotType = equipmentControlLotBank.getControlLotType();
            if (CimStringUtils.equals(
                    controlLotType, BizConstant.SP_CONTROLLOTTYPE_WAITINGMONITORLOT)) {
                eqpBrInfo.setMonitorBank(
                        new ObjectIdentifier(
                                equipmentControlLotBank.getBankId(), equipmentControlLotBank.getBankObj()));
            } else if (CimStringUtils.equals(
                    controlLotType, BizConstant.SP_CONTROLLOTTYPE_FILLERDUMMY)) {
                eqpBrInfo.setDummyBank(
                        new ObjectIdentifier(
                                equipmentControlLotBank.getBankId(), equipmentControlLotBank.getBankObj()));
            } else if (CimStringUtils.equals(
                    controlLotType, BizConstant.SP_CONTROLLOTTYPE_SIDEDUMMYLOT)) {

            } else {
                Validations.check(true, retCodeConfig.getInvalidBankType());
            }
        }
        return eqpBrInfo;
    }

    @Override
    public void equipmentCurrentStateCheckTransition(
            Infos.ObjCommon objCommonIn,
            ObjectIdentifier equipmentId,
            ObjectIdentifier convertedStatusCode,
            boolean checkManufacturingFlag) {
        // PosMachine_var aMachine
        Boolean isStorageBool = false;
        CimMachine aPosMachine = null;
        CimStorageMachine aStorageMachine = null;
        Validations.check(
                ObjectIdentifier.isEmptyWithValue(equipmentId),
                new OmCode(retCodeConfig.getNotFoundEqp(), "*****"));
        Machine aBaseMachine = newMachineManager.findMachineNamed(equipmentId.getValue());
        if (aBaseMachine == null) {
            aBaseMachine = newMachineManager.findStorageMachineNamed(equipmentId.getValue());
            Validations.check(
                    aBaseMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentId.getValue()));
        }
        isStorageBool = aBaseMachine.isStorageMachine();
        CimMachineState aNewMachineState = null;
        if (CimStringUtils.isEmpty(convertedStatusCode.getReferenceKey())) {
            Validations.check(
                    ObjectIdentifier.isEmptyWithValue(convertedStatusCode),
                    retCodeConfig.getNotFoundEqpState());
            List<CimE10State> anE10StateSeq = codeManager.allE10States();
            int _nLen_ = CimArrayUtils.getSize(anE10StateSeq);
            for (int _nCnt_ = 0; _nCnt_ < _nLen_; _nCnt_++) {
                CimE10State cimE10State = anE10StateSeq.get(_nCnt_);
                aNewMachineState = cimE10State.findMachineStateNamed(convertedStatusCode.getValue());
                if (aNewMachineState != null) {
                    break;
                }
            }
        } else {
            aNewMachineState =
                    baseCoreFactory.getBO(CimMachineState.class, convertedStatusCode.getReferenceKey());
        }
        Validations.check(aNewMachineState == null, retCodeConfig.getNotFoundEqpState());
        CimMachineState aCurrentMachineState = null;
        String currentOpMode = null;
        if (isStorageBool) {
            aStorageMachine = (CimStorageMachine) aBaseMachine;
            aCurrentMachineState = aStorageMachine.getCurrentMachineState();
        } else {
            aPosMachine = (CimMachine) aBaseMachine;
            aCurrentMachineState = aPosMachine.getCurrentMachineState();
            currentOpMode = aPosMachine.getOperationMode();
        }
        Validations.check(aCurrentMachineState == null, retCodeConfig.getNotFoundEqpState());
        String tmpNewMachineState = aNewMachineState.getIdentifier();
        String tmpCurMachineState = aCurrentMachineState.getIdentifier();
        Validations.check(
                CimStringUtils.equals(tmpCurMachineState, tmpNewMachineState),
                retCodeConfig.getCurrentStateSame());
        String tmpCurEqpState = aCurrentMachineState.getIdentifier();
        String tmpNextEqpState = aNewMachineState.getIdentifier();
        log.info("Operation Mode {}", currentOpMode);
        log.info("Next Equipment State {}", tmpNextEqpState);
        log.info("Current Equipment State {}", tmpCurEqpState);
        CimE10State currentE10 = aCurrentMachineState.getE10State();
        Validations.check(currentE10 == null, new OmCode(retCodeConfig.getNotFoundE10State(), ""));
        String currentE10Id = currentE10.getIdentifier();
        CimE10State newE10 = aNewMachineState.getE10State();
        Validations.check(newE10 == null, new OmCode(retCodeConfig.getNotFoundE10State(), ""));
        String newE10Id = newE10.getIdentifier();
        if (!CimStringUtils.equals(currentE10Id, newE10Id)) {
            String envEqpStatusLimit = StandardProperties.OM_EQP_STATUS_CHG_LIMIT.getValue();
            if (CimStringUtils.equals(envEqpStatusLimit, "1")) {
                List<ObjectIdentifier> nextTransitionStateSeq =
                        aCurrentMachineState.allMachineStateTransitions();
                int lenNextTranState = CimArrayUtils.getSize(nextTransitionStateSeq);
                if (lenNextTranState > 0) {
                    String newMachineState = aNewMachineState.getIdentifier();
                    boolean bMachineStateCheck = false;
                    for (int nStateCnt = 0; nStateCnt < lenNextTranState; nStateCnt++) {
                        if (ObjectIdentifier.equalsWithValue(
                                newMachineState, nextTransitionStateSeq.get(nStateCnt))) {
                            bMachineStateCheck = true;
                            break;
                        }
                    }
                    Validations.check(!bMachineStateCheck, retCodeConfig.getInvalidStateTransition());
                }
            }
            Validations.check(
                    CimBooleanUtils.isFalse(aCurrentMachineState.isChangeToOtherE10()),
                    retCodeConfig.getInvalidStateTransition());
            Validations.check(
                    CimBooleanUtils.isFalse(aNewMachineState.isChangeFromOtherE10()),
                    retCodeConfig.getInvalidStateTransition());
        }
        if (checkManufacturingFlag) {
            if (CimStringUtils.equals(newE10Id, CIMStateConst.CIM_E10_PRODUCTIVE)
                    || CimStringUtils.equals(newE10Id, CIMStateConst.CIM_E10_STANDBY)) {
                Validations.check(
                        CimBooleanUtils.isFalse(aCurrentMachineState.isManufacturingStateChangeable()),
                        retCodeConfig.getInvalidStateTransition());
            }
        }
        if (CimStringUtils.equals(currentE10Id, newE10Id)) {
            List<ObjectIdentifier> nextTransitionStateSeq =
                    aCurrentMachineState.allMachineStateTransitions();
            boolean checkFlag = false;
            int NTSLength = CimArrayUtils.getSize(nextTransitionStateSeq);
            for (int i = 0; i < NTSLength; i++) {
                String tmpNewMachineState2 = aNewMachineState.getIdentifier();
                if (ObjectIdentifier.equalsWithValue(tmpNewMachineState2, nextTransitionStateSeq.get(i))) {
                    checkFlag = true;
                    break;
                }
            }
            if (NTSLength == 0) {
                checkFlag = true;
            }
            Validations.check(!checkFlag, retCodeConfig.getInvalidStateTransition());
        }
    }

    @Override
    public void equipmentCurrentStateCheckTransitionV2(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            ObjectIdentifier eqpToState,
            boolean checkManufacturingFlag) {
        Validations.check(ObjectIdentifier.isEmptyWithValue(equipmentID), retCodeConfig.getNotFoundEqp());

        Machine baseMachine = getMachine(equipmentID);
        CimMachineState newState = getMachineState(eqpToState);

        CimMachine machine;
        CimStorageMachine storage;
        CimMachineState currentState;
        String eqpModel = null;
        if (CimBooleanUtils.isTrue(baseMachine.isStorageMachine())) {
            storage = (CimStorageMachine) baseMachine;
            currentState = storage.getCurrentMachineState();
        } else {
            machine = (CimMachine) baseMachine;
            currentState = machine.getCurrentMachineState();
            eqpModel = machine.getEqpModel();
        }
        Validations.check(currentState == null, retCodeConfig.getNotFoundEqpState());
        Validations.check(
                CimStringUtils.equals(currentState.getIdentifier(), newState.getIdentifier()),
                retCodeConfig.getCurrentStateSame());

        CimE10State currentE10 = currentState.getE10State();
        Validations.check(currentE10 == null, retCodeConfig.getNotFoundE10State());

        CimE10State newE10 = newState.getE10State();
        Validations.check(newE10 == null, retCodeConfig.getNotFoundE10State());

        if (checkManufacturingFlag
                && CimStringUtils.equalsIn(
                newE10.getIdentifier(),
                CIMStateConst.CIM_E10_PRODUCTIVE,
                CIMStateConst.CIM_E10_STANDBY)) {
            Validations.check(
                    CimBooleanUtils.isFalse(currentState.isManufacturingStateChangeable()),
                    retCodeConfig.getInvalidStateTransition());
        }

        boolean checkTransitionRule = true;
        if (CimStringUtils.unEqual(currentE10.getIdentifier(), newE10.getIdentifier())) {
            // get environment value with OM_EQP_STATUS_CHG_LIMIT,
            // this environment indicate whether need to check eqp status change rule limited.
            // if OM_EQP_STATUS_CHG_LIMIT = 1 ; then need to check ; else don't neet to check.
            if (CimStringUtils.unEqual(StandardProperties.OM_EQP_STATUS_CHG_LIMIT.getValue(), "1")) {
                checkTransitionRule = false;
            }
            Validations.check(
                    CimBooleanUtils.isFalse(currentState.isChangeToOtherE10()),
                    retCodeConfig.getInvalidStateTransition());
            Validations.check(
                    CimBooleanUtils.isFalse(newState.isChangeFromOtherE10()),
                    retCodeConfig.getInvalidStateTransition());
        }

        if (!checkTransitionRule) {
            return;
        }

        ObjectIdentifier nextTransition =
                currentState.getStateNextTransition(eqpModel, newState.getIdentifier());
        Validations.check(
                ObjectIdentifier.isEmptyWithValue(nextTransition), retCodeConfig.getInvalidStateTransition());

        CimPerson person = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());
        Validations.check(person == null, retCodeConfig.getNotFoundPerson());

        if (CimStringUtils.equals(eqpModel, BizConstant.SP_EQP_MODEL_ASSIST_NON_PROCESS)) {
            // 如果当前设备是辅助设备(非加工产品), 则定制化为: 仅ME(设备/工艺工程师手动切换)权限可以操作
            List<String> userGroups = person.getUserGroups();
            Validations.check(
                    !userGroups.contains("ME"),
                    retCodeConfigEx.getDepartmentEqpStateNotAuthority(),
                    equipmentID.getValue(),
                    newState.getIdentifier());
        } else {
            List<CodeDTO.BrEquipmentStateUserGroupData> userGroupLimits =
                    currentState.findUserGroupsForNextEquipmentState(eqpModel, nextTransition.getValue());
            if (CimArrayUtils.isEmpty(userGroupLimits)) {
                // 无权限卡控时表示Auto操作, 允许手动和自动执行
                return;
            }

            // 有权限限制, 非Auto, 限制只能拥有指定权限的用户执行
            List<String> userGroups = person.getUserGroups();
            Validations.check(
                    userGroupLimits.stream().noneMatch(group -> userGroups.contains(group.getUserGroupId())),
                    retCodeConfigEx.getDepartmentEqpStateNotAuthority(),
                    equipmentID.getValue(),
                    newState.getIdentifier());
        }
    }

    private Machine getMachine(ObjectIdentifier equipmentID) {
        Machine machine;
        if (ObjectIdentifier.isEmptyWithRefKey(equipmentID)) {
            Validations.check(ObjectIdentifier.isEmptyWithValue(equipmentID), retCodeConfig.getNotFoundEqp());
            machine = newMachineManager.findMachineNamed(equipmentID.getValue());
            if (machine == null) {
                machine = newMachineManager.findStorageMachineNamed(equipmentID.getValue());
                Validations.check(machine == null, retCodeConfig.getNotFoundEqp(), equipmentID.getValue());
            }
        } else {
            machine = baseCoreFactory.getBO(CimMachine.class, equipmentID.getReferenceKey());
            if (machine == null) {
                machine = baseCoreFactory.getBO(CimStorageMachine.class, equipmentID.getReferenceKey());
                Validations.check(
                        machine == null, retCodeConfig.getNotFoundEqp(), equipmentID.getReferenceKey());
            }
        }
        return machine;
    }

    private CimMachineState getMachineState(ObjectIdentifier eqpState) {
        CimMachineState newState = baseCoreFactory.getBO(CimMachineState.class, eqpState);
        Validations.check(newState == null, retCodeConfig.getNotFoundEqpState());
        return newState;
    }

    @Override
    public Outputs.ObjEquipmentCurrentStateChangeOut equipmentCurrentStateChange(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, ObjectIdentifier eqpToState) {
        Validations.check(ObjectIdentifier.isEmptyWithValue(eqpToState), retCodeConfig.getNotFoundEqpState());

        Machine baseMachine = getMachine(equipmentID);
        CimMachineState newState = getMachineState(eqpToState);

        Outputs.ObjEquipmentCurrentStateChangeOut out = new Outputs.ObjEquipmentCurrentStateChangeOut();
        out.setEquipmentID(equipmentID);

        CimMachine machine = null;
        CimStorageMachine storage = null;
        CimMachineState currentState, currentActualState;
        if (CimBooleanUtils.isTrue(baseMachine.isStorageMachine())) {
            storage = (CimStorageMachine) baseMachine;
            currentState = storage.getCurrentMachineState();
            currentActualState = storage.getActualMachineState();
            out.getEquipmentID().setReferenceKey(storage.getPrimaryKey());
        } else {
            machine = (CimMachine) baseMachine;
            currentState = machine.getCurrentMachineState();
            currentActualState = machine.getActualMachineState();
            out.getEquipmentID().setReferenceKey(machine.getPrimaryKey());
        }
        Validations.check(currentState == null, retCodeConfig.getNotFoundEqpState());

        out.setEquipmentStatusCode(
                ObjectIdentifier.build(newState.getIdentifier(), newState.getPrimaryKey()));
        Optional.ofNullable(newState.getE10State())
                .ifPresent(
                        state ->
                                out.setE10Status(
                                        ObjectIdentifier.build(state.getIdentifier(), state.getPrimaryKey())));

        out.setPreviousStatus(
                ObjectIdentifier.build(currentState.getIdentifier(), currentState.getPrimaryKey()));
        Optional.ofNullable(currentState.getE10State())
                .ifPresent(
                        state ->
                                out.setPreviousE10Status(
                                        ObjectIdentifier.build(state.getIdentifier(), state.getPrimaryKey())));

        if (currentActualState != null) {
            out.setActualStatus(
                    ObjectIdentifier.build(
                            currentActualState.getIdentifier(), currentActualState.getPrimaryKey()));
            out.setPreviousActualStatus(
                    ObjectIdentifier.build(
                            currentActualState.getIdentifier(), currentActualState.getPrimaryKey()));

            Optional.ofNullable(currentActualState.getE10State())
                    .ifPresent(
                            state -> {
                                out.setActualE10Status(
                                        ObjectIdentifier.build(state.getIdentifier(), state.getPrimaryKey()));
                                out.setPreviousActualE10Status(
                                        ObjectIdentifier.build(state.getIdentifier(), state.getPrimaryKey()));
                            });
        }

        CimPerson person = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());
        Timestamp opeTime = objCommon.getTimeStamp().getReportTimeStamp();
        if (CimBooleanUtils.isTrue(baseMachine.isStorageMachine()) && storage != null) {
            out.setPrevStateStartTime(
                    CimDateUtils.getTimestampAsString(storage.getLastStatusHistoryTimeStamp()));

            storage.setCurrentMachineState(newState);
            storage.setLastClaimedPerson(person);
            storage.setLastClaimedTimeStamp(opeTime);
            storage.setLastStatusChangePerson(person);
            storage.setLastStatusChangeTimeStamp(opeTime);
            storage.setAvailableFlag(newState.isMachineAvailable());
            storage.setLastStatusHistoryTimeStamp(opeTime);
        } else if (machine != null) {
            out.setOperationMode(machine.getOperationMode());
            out.setPreviousOpeMode(machine.getOperationMode());
            out.setPrevStateStartTime(
                    CimDateUtils.getTimestampAsString(machine.getLastStatusHistoryTimeStamp()));
            Timestamp prevStateChangeTime = machine.getLastStatusChangeTimeStamp();

            machine.setCurrentMachineState(newState);
            machine.setLastClaimedPerson(person);
            machine.setLastClaimedTimeStamp(opeTime);
            machine.setLastStatusChangePerson(person);
            machine.setLastStatusChangeTimeStamp(opeTime);
            machine.setAvailableFlag(newState.isMachineAvailable());
            machine.setLastStatusHistoryTimeStamp(opeTime);

            if (CimStringUtils.equals(
                    out.getPreviousE10Status().getValue(), BizConstant.SP_E10STATE_PRODUCTIVE)) {
                long duration =
                        CimDateUtils.substractTimeStamp(opeTime.getTime(), prevStateChangeTime.getTime());
                machine.addRunTime((int) (duration / (1000 * 60)));
            }
        }

        return out;
    }

    @Override
    public void equipmentCategoryVsTxIDCheckCombination(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        log.debug("equipmentCategoryVsTxIDCheckCombination start");
        String transactionID = objCommon.getTransactionID();

        log.debug("step1 - get eqp object by equipmentID");
        CimMachine aPosMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                aPosMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        String equipmentCategory = aPosMachine.getCategory();

        log.trace("equipment {} category is {}", equipmentID, equipmentCategory);
        if (CimStringUtils.equals(BizConstant.SP_MC_CATEGORY_INTERNALBUFFER, equipmentCategory)) {
            switch (TransactionIDEnum.get(transactionID)) {
                case OPERATION_START_REQ:
                case OPERATION_START_CANCEL_REQ:
                case OPERATION_COMP_WITH_DATA_REQ:
                case PARTIAL_OPERATION_COMP_WITH_DATA_REQ:
                case START_LOTS_RESERVATION_REQ:
                case START_LOTS_RESERVATION_FOR_TAKE_OUT_IN_REQ:
                case START_LOTS_RESERVATION_CANCEL_REQ:
                case CASSETTE_DELIVERY_REQ:
                case LOT_CASSETTE_TAKE_OUT_IN_INQ:
                case EQP_INFO_INQ:
                case LOTS_INFO_FOR_OPERATION_START_INQ:
                case LOTS_INFO_FOR_START_RESERVATION_INQ:
                case LOADING_LOT_RPT:
                case UN_LOADING_LOT_RPT:
                    Validations.check(
                            true,
                            new OmCode(
                                    retCodeConfig.getEquipmentCategoryTransactionIdMismatch(),
                                    transactionID,
                                    equipmentCategory));
                    break;
                default:
                    break;
            }
        } else {
            switch (TransactionIDEnum.get(transactionID)) {
                case EQP_INFO_FOR_INTERNAL_BUFFER_INQ:
                case OPERATION_START_FOR_INTERNAL_BUFFER_REQ:
                case OPERATION_COMP_FOR_INTERNAL_BUFFER_REQ:
                case PARTIAL_OPERATION_COMP_FOR_INTERNAL_BUFFER_REQ:
                case START_LOTS_RESERVATION_FOR_INTERNAL_BUFFER_REQ:

                case START_LOTS_RESERVATION_CANCEL_FOR_INTERNAL_BUFFER_REQ:
                case UN_LOADING_LOTS_RESERVATION_FOR_INTERNAL_BUFFER_RPT:
                case CASSETTE_OUT_FROM_INTERNAL_BUFFER_REQ:
                case UN_LOADING_LOTS_RESERVATION_CANCEL_FOR_INTERNAL_BUFFER_REQ:
                case LOADING_LOT_FOR_INTERNAL_BUFFER_RPT:

                case LOTS_INFO_FOR_OPERATION_START_FOR_INTERNAL_BUFFER_INQ:
                case LOTS_INFO_FOR_START_RESERVATION_FOR_INTERNAL_BUFFER_INQ:
                case UN_LOADING_LOT_FOR_INTERNAL_BUFFER_RPT:
                case MOVE_CASSETTE_TO_INTERNAL_BUFFER_RPT:
                case MOVE_CASSETTE_FROM_INTERNAL_BUFFER_RPT:

                case CASSETTE_DELIVERY_FOR_INTERNAL_BUFFER_REQ:
                case WHAT_NEXT_LOT_LIST_FOR_INTERNAL_BUFFER_INQ:
                    Validations.check(
                            true,
                            new OmCode(
                                    retCodeConfig.getEquipmentCategoryTransactionIdMismatch(),
                                    transactionID,
                                    equipmentCategory));
                    break;
                default:
                    break;
            }
        }

        log.debug("these transactionIDs must be done by pmcmg category 'WaferSourter'");
        switch (TransactionIDEnum.get(transactionID)) {
            case WAFER_SORTER_ACTION_LIST_INQ:
            case WAFER_SORTER_ON_EQP_REQ:
            case WAFER_SORT_ACTION_REGISTER_REQ:
            case WAFER_SORTER_DATA_INQ:
            case WAFER_SORTER_ON_EQP_RPT:

            case VENDOR_LOT_PREPARATION_AND_PREPARE_REQ:
            case WAFER_SORTER_ON_EQP_CANCEL_REQ:
            case WAFER_SORTER_DATA_COMPARE_REQ:
            case WAFER_SORTER_SCRAP_WAFER_INQ:
                Validations.check(
                        !CimStringUtils.equals(BizConstant.SP_MC_CATEGORY_WAFERSORTER, equipmentCategory),
                        new OmCode(
                                retCodeConfig.getEquipmentCategoryTransactionIdMismatch(),
                                transactionID,
                                equipmentCategory));
                break;
            default:
                break;
        }

        log.debug("these TransactionIDs must be done by pmcmg category 'waferBonding'");
        switch (TransactionIDEnum.get(transactionID)) {
            case BONDING_LOT_LIST_IINQ:
            case BONDING_GROUP_LIST_INQ:
            case BONDING_GROUP_MODIFY_REQ:
            case LOT_LIST_BY_BONDING_FLOW_INQ:
            case BONDING_MAP_RPT:
                Validations.check(
                        !CimStringUtils.equals(BizConstant.SP_MC_CATEGORY_WAFERBONDING, equipmentCategory),
                        new OmCode(
                                retCodeConfig.getEquipmentCategoryTransactionIdMismatch(),
                                transactionID,
                                equipmentCategory));
                break;
            default:
                break;
        }
    }

    @Override
    public Infos.EqpPortInfo equipmentPortInfoForInternalBufferGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        log.debug("equipmentPortInfoForInternalBufferGetDR start");
        Infos.EqpPortInfo eqpPortInfo = new Infos.EqpPortInfo();
        List<Infos.EqpPortStatus> eqpPortStatusList = new ArrayList<>();
        eqpPortInfo.setEqpPortStatuses(eqpPortStatusList);
        String sql = "select * from OMPORT where EQP_ID = '%s'";

        List<CimPortResource> portList =
                baseCoreFactory.getBOListByCustom(
                        CimPortResource.class, String.format(sql, equipmentID.getValue()));
        Validations.check(CimArrayUtils.isEmpty(portList), retCodeConfig.getNotFoundCategory());

        // 【bear】find portID info by equipmentID (line: 210 - 462)
        List<ObjectIdentifier> operationIDList = new ArrayList<>();
        List<ObjectIdentifier> associatedPortIDList = new ArrayList<>();
        List<Infos.PortID> portIDList = new ArrayList<>();
        List<String> portGroupList = new ArrayList<>();
        for (CimPortResource port : portList) {
            Infos.PortID portID = new Infos.PortID();
            portID.setLoadSequenceNoInPortGroup(port.getLoadSeqInPortGroup());
            portID.setPortUsage(port.getPortUsage());
            portID.setLoadPurposeType(port.getLoadPurposeType());
            portID.setPortState(port.getPortState());
            portID.setDispatchState(port.getDispatchState());
            portID.setDispatchStateTimeStamp(CimDateUtils.getTimestampAsString(port.getLastDispatchRequiredTimeStamp()));
            portID.setDispatchLoadCassetteID(port.getDispatchLoadCassetteID());
            portID.setDispatchUnloadCassetteID(port.getDispatchUnLoadCassetteID());
            portID.setPortID(new ObjectIdentifier(port.getIdentifier(), port.getPrimaryKey()));
            operationIDList.add(port.getMachineOperationModeID());
            associatedPortIDList.add(port.getAssociatePortID());
            portGroupList.add(port.getPortGroup());
            List<String> categoryCapabilityList = port.getCassetteCategoryCapability();
            portID.setCategoryCapability(categoryCapabilityList);
            portIDList.add(portID);
        }

        // 【step2】get control job ID from FRCTRLJOB(line: 509 - 554)
        boolean noData = false;
        log.debug("【step2】get control job ID from OMCJ");
        sql = "select * from OMCJ where EQP_ID = '%s' and RSV_FLAG = 1";
        List<CimControlJob> controlJobList =
                baseCoreFactory.getBOListByCustom(
                        CimControlJob.class, String.format(sql, equipmentID.getValue()));
        if (CimArrayUtils.isEmpty(controlJobList)) {
            noData = true;
        }

        // 【step3】fetch data from FREQP_CTRLJOB  (line: 565 - 791)
        log.debug("【step3】fetch data from FREQP_CTRLJOB");
        List<ProductDTO.PosStartCassetteInfo> startCassetteInfoList = new ArrayList<>();
        if (CimBooleanUtils.isFalse(noData)) {
            for (CimControlJob controlJob : controlJobList) {
                if (CimObjectUtils.isEmpty(controlJob)) {
                    break;
                }
                List<ProductDTO.PosStartCassetteInfo> tmpStartCassetteInfoList =
                        controlJob.getStartCassetteInfo();
                if (CimArrayUtils.isNotEmpty(tmpStartCassetteInfoList)) {
                    startCassetteInfoList.addAll(tmpStartCassetteInfoList);
                }
            }
        }

        // 【bear】get the primaryKey for equipment object
        CimMachine equipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == equipment,
                new OmCode(retCodeConfig.getNotFoundEqp(), ObjectIdentifier.fetchValue(equipmentID)));
        equipmentID = new ObjectIdentifier(equipment.getIdentifier(), equipment.getPrimaryKey());

        // 【step4】get CAST_ID,LOAD_PURPOSE_TYPE, LOAD_PORT_ID from FREQP_CAST by eqp ID (line:796 - )
        log.debug("【step4】get CAST_ID,LOAD_PURPOSE_TYPE, LOAD_PORT_ID from OMEQP_CARRIER by eqp ID");
        sql = "select * from OMEQP_CARRIER where REFKEY = ?1";
        List<CimEquipmentCassetteDO> equipmentCassetteList =
                cimJpaRepository.query(sql, CimEquipmentCassetteDO.class, equipmentID.getReferenceKey());

        // --  Check the cassette OnPort or InShelf -------------
        /*--------------------------------*/
        /* SELECT SQL FROM FRMTRLLOC      */
        /*--------------------------------*/
    /*
    EXEC SQL DECLARE ibss3 CURSOR FOR
        SELECT  MTRLLOC_ID
    FROM    FRMTRLLOC
        WHERE CONTAINED_MTRL_ID =:hFREQP_CASTCAST_ID
        AND   (MTRLLOC_ID LIKE 'Empty%'
        OR MTRLLOC_ID LIKE 'Filler%'
        OR MTRLLOC_ID LIKE 'Process%'
        OR MTRLLOC_ID LIKE 'Side%'
        OR MTRLLOC_ID LIKE 'Waiting%') FOR READ ONLY ;
    */

        List<Infos.EqpPortStatus> tmpEqpPortStatusList = new ArrayList<>();
        List<ObjectIdentifier> tmpLoadPortID = new ArrayList<>();
        if (!CimArrayUtils.isEmpty(equipmentCassetteList)) {
            for (CimEquipmentCassetteDO equipmentCassette : equipmentCassetteList) {
                sql =
                        "select * from OMMATLOC c where c.RESIDING_MTRL_ID = ?1 and c.ENTITY_MGR in (select b.ID from OMEQPBUFFRES b where b.EQP_ID =?2)";
                List<CimMaterialLocationDO> materialLocations =
                        cimJpaRepository.query(
                                sql,
                                CimMaterialLocationDO.class,
                                equipmentCassette.getCassetteID(),
                                equipmentID.getValue());
                if (!CimArrayUtils.isEmpty(materialLocations)) {
                    log.debug("The cassette is already in Shelf.");
                    continue;
                }
                Infos.EqpPortStatus eqpPortStatus = new Infos.EqpPortStatus();
                eqpPortStatus.setLoadedCassetteID(
                        new ObjectIdentifier(
                                equipmentCassette.getCassetteID(), equipmentCassette.getCassetteObj()));
                eqpPortStatus.setCassetteLoadPurposeType(equipmentCassette.getLoadPurposeType());

                tmpLoadPortID.add(
                        new ObjectIdentifier(
                                equipmentCassette.getLoadPortID(), equipmentCassette.getLoadPortObj()));
                tmpEqpPortStatusList.add(eqpPortStatus);
            }
        }

        // 【step5】loop for port resource - (line:1061 - )
        for (int i = 0; i < portIDList.size(); i++) {
            Infos.PortID portID = portIDList.get(i);

            Outputs.ObjPortResourceCurrentOperationModeGetOut modeGetOut =
                    portMethod.portResourceCurrentOperationModeGet(
                            objCommon, equipmentID, portID.getPortID());

            // data set - (line: 1085 - 1120)
            Infos.OperationMode operationMode = modeGetOut.getOperationMode();
            Infos.EqpPortStatus eqpPortStatus = new Infos.EqpPortStatus();
            int portIDlen = 0;
            for (int j = 0; j < portIDList.size(); j++) {
                if (ObjectIdentifier.equalsWithValue(portID.getPortID(), portIDList.get(j).getPortID())) {
                    portIDlen = j;
                    break;
                }
            }
            // portIDList[i]、associatedPortIDList[i]、operationIDList[i]、portGroupList[i]中的数据一一对应，
            eqpPortStatus.setPortID(
                    portID.getPortID()); // result.eqpPortInfo.eqpPortStatus[i] = PortIDSeq[i].portID;

            eqpPortStatus.setAssociatedPortID(associatedPortIDList.get(portIDlen));
            eqpPortStatus.setPortGroup(portGroupList.get(portIDlen));
            eqpPortStatus.setLoadSequenceNumber(portIDList.get(portIDlen).getLoadSequenceNoInPortGroup());
            eqpPortStatus.setPortUsage(portIDList.get(portIDlen).getPortUsage());
            eqpPortStatus.setLoadPurposeType(portIDList.get(portIDlen).getLoadPurposeType());
            eqpPortStatus.setOperationModeID(operationIDList.get(portIDlen));
            eqpPortStatus.setPortState(portIDList.get(portIDlen).getPortState());
            eqpPortStatus.setCassetteCategoryCapability(
                    portIDList.get(portIDlen).getCategoryCapability());

            // loop for start cassette length (line: 1126 - 1150)
            String loadPortID = null;
            if (!noData) {
                log.debug("find data(loadResrvedCassetteID)");
                for (ProductDTO.PosStartCassetteInfo startCassette : startCassetteInfoList) {
                    if (ObjectIdentifier.equalsWithValue(
                            startCassette.getLoadPortID(), eqpPortStatus.getPortID())) {
                        eqpPortStatus.setLoadResrvedCassetteID(startCassette.getCassetteID());
                        break;
                    }
                }
            }

            eqpPortStatus.setDispatchState(portIDList.get(portIDlen).getDispatchState());
            eqpPortStatus.setDispatchStateTimeStamp(
                    portIDList.get(portIDlen).getDispatchStateTimeStamp());
            eqpPortStatus.setDispatchLoadCassetteID(
                    portIDList.get(portIDlen).getDispatchLoadCassetteID());
            eqpPortStatus.setDispatchUnloadCassetteID(
                    portIDList.get(portIDlen).getDispatchUnloadCassetteID());

            // 【bear】yes, it not be setted by operationMode.getOperationModeID();
            eqpPortStatus.setOperationModeID(new ObjectIdentifier(operationMode.getDescription()));
            eqpPortStatus.setOnlineMode(operationMode.getOnlineMode());
            eqpPortStatus.setDispatchMode(operationMode.getDispatchMode());
            eqpPortStatus.setAccessMode(operationMode.getAccessMode());
            eqpPortStatus.setMoveInMode(operationMode.getMoveInMode());
            eqpPortStatus.setMoveOutMode(operationMode.getMoveOutMode());

            // loop for pmcmg cassette sequence length - (line: 1174 - )
            for (int j = 0; j < tmpEqpPortStatusList.size(); j++) {
                Infos.EqpPortStatus tmpEqpPortStatus = tmpEqpPortStatusList.get(j);
                if (ObjectIdentifier.equalsWithValue(eqpPortStatus.getPortID(), tmpLoadPortID.get(j))) {
                    eqpPortStatus.setLoadedCassetteID(tmpEqpPortStatus.getLoadedCassetteID());
                    eqpPortStatus.setCassetteLoadPurposeType(tmpEqpPortStatus.getCassetteLoadPurposeType());

                    CimCassette cassette =
                            baseCoreFactory.getBO(CimCassette.class, tmpEqpPortStatus.getLoadedCassetteID());
                    Validations.check(null == cassette, retCodeConfig.getNotFoundCassette());

                    eqpPortStatus.setCassetteControlJobID(cassette.getControlJobID());

                    // loop for pmcmg cassette lot sequence length
                    CimCassetteLotDO cimCassetteLotExample = new CimCassetteLotDO();
                    cimCassetteLotExample.setReferenceKey(cassette.getPrimaryKey());
                    List<CimCassetteLotDO> cassetteLotList = cimJpaRepository.findAll(Example.of(cimCassetteLotExample));
                    if (CimArrayUtils.isEmpty(cassetteLotList)) {
                        log.debug("There is no data");
                        break;
                    }

                    List<Infos.LotOnPort> lotOnPortList = new ArrayList<>();
                    eqpPortStatus.setLotOnPorts(lotOnPortList);
                    for (CimCassetteLotDO cassetteLot : cassetteLotList) {
                        sql = "select * from OMEQP_CARRIER_LOT where LOT_ID = ?1";
                        CimEquipmentCassetteLotDO equipmentCassetteLot =
                                cimJpaRepository.queryOne(
                                        sql, CimEquipmentCassetteLotDO.class, cassetteLot.getLotID());
                        if (null == equipmentCassetteLot) {
                            log.debug("There is no data");
                            continue;
                        }
                        Infos.LotOnPort lotOnPort = new Infos.LotOnPort();
                        lotOnPort.setMoveInFlag(equipmentCassetteLot.getOperationStateFlag());
                        lotOnPort.setMonitorLotFlag(equipmentCassetteLot.getMonitorLotFlag());
                        lotOnPort.setLotID(
                                new ObjectIdentifier(
                                        equipmentCassetteLot.getLotID(), equipmentCassetteLot.getLotObj()));

                        CimLotDO example = new CimLotDO();
                        example.setLotID(cassetteLot.getLotID());
                        CimLotDO lot = cimJpaRepository.findOne(Example.of(example)).orElse(null);
                        Validations.check(null == lot, retCodeConfig.getNotFoundLot());

                        lotOnPort.setLotType(lot.getLotType());
                        lotOnPort.setSubLotType(lot.getSubLotType());
                        lotOnPortList.add(lotOnPort);
                    }
                }
            }
            eqpPortStatusList.add(eqpPortStatus);
        }
        if (!CimArrayUtils.isEmpty(eqpPortStatusList)) {
            eqpPortStatusList.sort((e1, e2) -> {
                if (null == e1.getPortID() || null == e2.getPortID()) {
                    return 0;
                }
                return e1.getPortID().getValue().hashCode() - e2.getPortID().getValue().hashCode();
            });
        }
        return eqpPortInfo;
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param strObjCommonIn
     * @param equipmentID
     * @param loadedPortID
     * @param cassetteID
     * @return com.fa.cim.dto.RetCode<java.lang.Object>
     * @author Ho
     * @date 2018/11/16 12:10:14
     */
    @Override
    public void equipmentContainedMaterialAdd(
            Infos.ObjCommon strObjCommonIn,
            ObjectIdentifier equipmentID,
            ObjectIdentifier loadedPortID,
            ObjectIdentifier cassetteID) {
        CimCassette aCassette = baseCoreFactory.getBO(CimCassette.class, cassetteID);
        Validations.check(
                null == aCassette,
                new OmCode(retCodeConfig.getNotFoundCassette(), ObjectIdentifier.fetchValue(cassetteID)));
        com.fa.cim.newcore.bo.product.CimControlJob aCassetteControlJob = aCassette.getControlJob();
        boolean isControlJob = (null != aCassetteControlJob);

        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == aMachine,
                new OmCode(retCodeConfig.getNotFoundEqp(), ObjectIdentifier.fetchValue(equipmentID)));

        List<BufferResource> aBufferResourceSeq = aMachine.allBufferResources();
        int lenBufferResource = CimArrayUtils.getSize(aBufferResourceSeq);
        Validations.check(0 == lenBufferResource, retCodeConfig.getNotFoundBufferResource());
        // BufferResource aBufferResource;
        Boolean foundTarget = false;
        ObjectIdentifier controlJobIdent = null;
        for (int i = 0; i < lenBufferResource; i++) {
            BufferResource aBufferResource = aBufferResourceSeq.get(i);
            Validations.check(aBufferResource == null, retCodeConfig.getNotFoundBufferResource());
            List<MaterialLocation> aMaterialLocationSeq = aBufferResource.allMaterialLocations();
            for (int j = 0; j < CimArrayUtils.getSize(aMaterialLocationSeq); j++) {
                CimMaterialLocation aMaterialLocation = (CimMaterialLocation) aMaterialLocationSeq.get(j);
                Validations.check(aMaterialLocation == null, retCodeConfig.getNotFoundMaterialLocation());
                if (CimBooleanUtils.isTrue(isControlJob)) {
                    controlJobIdent = aCassetteControlJob.getControlJobID();

                    com.fa.cim.newcore.bo.product.CimControlJob aMaterialLocationControlJob =
                            aMaterialLocation.getControlJob();
                    if (aMaterialLocationControlJob == null) {
                        continue;
                    }

                    ObjectIdentifier materialControlJobIdent = aMaterialLocationControlJob.getControlJobID();
                    if (!ObjectIdentifier.equalsWithValue(controlJobIdent, materialControlJobIdent)) {
                        continue;
                    }
                }
                CimCassette aLocatedCassette = (CimCassette) aMaterialLocation.getAllocatedMaterial();
                if (aLocatedCassette == null) {
                    continue;
                }

                if (!ObjectIdentifier.equalsWithValue(cassetteID, aLocatedCassette.getIdentifier())) {
                    continue;
                }

                CimPortResource aPortResource = aMaterialLocation.getReservedLoadPort();
                if (aPortResource == null) {
                    continue;
                }
                String portIdent = aPortResource.getIdentifier();
                if (ObjectIdentifier.equalsWithValue(loadedPortID, portIdent)) {
                    boolean occupiedFlag = aMaterialLocation.isOccupied();
                    Validations.check(
                            occupiedFlag,
                            new OmCode(
                                    retCodeConfig.getMaterialLocationNotAvailable(),
                                    ObjectIdentifier.fetchValue(loadedPortID)));

                    aMaterialLocation.materialReceived(aCassette);
                    aMaterialLocation.makeNotAllocated();

                    aMaterialLocation.setReservedLoadPort(null);
                    List<MaterialLocation> strPortMaterialLocations = aPortResource.allMaterialLocations();
                    int MLen = CimArrayUtils.getSize(strPortMaterialLocations);
                    Validations.check(
                            MLen == 0, new OmCode(retCodeConfig.getMaterialLocationNotAvailable(), portIdent));
                    Validations.check(
                            CimObjectUtils.isEmpty(strPortMaterialLocations.get(0)),
                            new OmCode(retCodeConfig.getMaterialLocationNotAvailable(), portIdent));
                    strPortMaterialLocations.get(0).materialSent();
                    foundTarget = true;
                    break;
                }
            }
            if (foundTarget) break;
        }
        Validations.check(!foundTarget, retCodeConfig.getMaterialLocationNotFound());
    }

    @Override
    public Infos.EqpStatusInfo equipmentStatusInfoGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        if (log.isDebugEnabled()) log.debug("equipmentStatusInfoGetDR start");
        Infos.EqpStatusInfo equipmentStatusInfo = new Infos.EqpStatusInfo();

        if (log.isDebugEnabled()) log.debug("step1 - check if equipment exists");
        CimMachine equipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == equipment,
                new OmCode(
                        retCodeConfig.getNotFoundEqp(),
                        CimStringUtils.getValueOrEmptyString(equipmentID.getValue())));

        if (log.isDebugEnabled()) log.debug("step2 - set params");
        equipmentStatusInfo.setEquipmentStatusCode(equipment.getCurrentMachineStateID());
        equipmentStatusInfo.setChangeTimeStamp(
                null != equipment.getLastStatusChangeTimeStamp()
                        ? equipment.getLastStatusChangeTimeStamp().toString()
                        : null);
        equipmentStatusInfo.setChangeUserID(equipment.getLastStatusChangePersonID());
        equipmentStatusInfo.setActualStatusCode(equipment.getActualMachineStateID());
        equipmentStatusInfo.setActualChangeTimeStamp(
                equipment.getLastActualStatusChangeTimeStamp() != null
                        ? equipment.getLastActualStatusChangeTimeStamp().toString()
                        : null);

        String environmentValue = StandardProperties.OM_UPDATE_LAST_USED_RECIPE.getValue();
        int updateRecipeFlag = null == environmentValue ? 0 : Integer.parseInt(environmentValue);
        if (log.isTraceEnabled()) log.trace("updateRecipeFlag is {}", updateRecipeFlag);
        if (updateRecipeFlag != 0) {
            equipmentStatusInfo.setLastRecipeID(equipment.getUsedMachineRecipeID());
        }
        equipmentStatusInfo.setReservedFlowBatchID(equipment.getFlowBatchID());
        if (ObjectIdentifier.isNotEmptyWithValue(equipment.getFlowBatchID())) {
            List<ObjectIdentifier> reservedFlowBatchIDs = new ArrayList<>();
            reservedFlowBatchIDs.add(equipment.getFlowBatchID());
            equipmentStatusInfo.setReservedFlowBatchIDs(reservedFlowBatchIDs);
        }
        equipmentStatusInfo.setMaxCountForFlowBatch(equipment.getFlowBatchMaxCount());

        if (log.isDebugEnabled())
            log.debug("step3 - query equipment current state from eqp {}", equipmentID);
        CimMachineState equipmentState = equipment.getCurrentMachineState();
        Validations.check(null == equipmentState, retCodeConfig.getNotFoundCategory());
        equipmentStatusInfo.setE10Status(
                (equipmentState.getE10State() == null)
                        ? null
                        : equipmentState.getE10State().getIdentifier());
        equipmentStatusInfo.setEquipmentStatusName(equipmentState.getMachineStateName());
        equipmentStatusInfo.setEquipmentStatusDescription(equipmentState.getMachineStateDescription());
        equipmentStatusInfo.setEquipmentAvailableFlag(equipmentState.isMachineAvailable());

        if (log.isDebugEnabled())
            log.debug("step4 - query equipment current actual state from eqp {}", equipmentID);
        if (log.isTraceEnabled())
            log.trace(
                    "equipment actual machine state is null:{}",
                    ObjectIdentifier.isEmpty(equipment.getActualMachineStateID()));
        if (!ObjectIdentifier.isEmpty(equipment.getActualMachineStateID())) {
            // 3.SELECT SQL FROM OMEQPST (ACT)
            CimMachineState equipmentState2 = equipment.getActualMachineState();
            Validations.check(null == equipmentState2, retCodeConfig.getNotFoundCategory());
      /*equipmentStatusInfo.setE10Status((equipmentState2.getE10State() == null) ? null : equipmentState2.getE10State().getIdentifier());
      equipmentStatusInfo.setEquipmentStatusName(equipmentState2.getMachineStateName());
      equipmentStatusInfo.setEquipmentStatusDescription(equipmentState2.getMachineStateDescription());*/
            equipmentStatusInfo.setActualE10Status(
                    (equipmentState2.getE10State() == null)
                            ? null
                            : equipmentState2.getE10State().getIdentifier());
            equipmentStatusInfo.setActualStatusName(equipmentState2.getMachineStateName());
            equipmentStatusInfo.setActualStatusDescription(equipmentState2.getMachineStateDescription());
        }

        if (log.isDebugEnabled()) log.debug("step5 - query control job from equipment {}", equipmentID);
        List<CimControlJobDO> controlJobs =
                cimJpaRepository.query(
                        "SELECT CTRLJOB_ID, ID FROM OMCJ WHERE EQP_ID = ?1 AND RSV_FLAG = 1",
                        CimControlJobDO.class,
                        equipment.getIdentifier());
        if (log.isDebugEnabled()) log.debug("controlJobs is {}", controlJobs);
        if (!CimObjectUtils.isEmpty(controlJobs)) {
            equipmentStatusInfo.setReservedControlJobID(
                    controlJobs.stream()
                            .map(x -> ObjectIdentifier.build(x.getControlJobID(), x.getId()))
                            .collect(Collectors.toList()));
        }

        if (log.isDebugEnabled()) log.debug("step6 - query flow batch from equipment {}", equipment);
        List<CimEquipmentFlowBatchDO> eqpFlowBatchMaxCountChanges =
                cimJpaRepository.query(
                        "SELECT FLOWB_ID, FLOWB_RKEY FROM OMEQP_FLOWBATCH WHERE REFKEY = ?1",
                        CimEquipmentFlowBatchDO.class,
                        equipment.getPrimaryKey());
        if (log.isDebugEnabled())
            log.debug("eqpFlowBatchMaxCountChanges is {}", eqpFlowBatchMaxCountChanges);
        if (!CimObjectUtils.isEmpty(eqpFlowBatchMaxCountChanges)) {
            equipmentStatusInfo.setReservedFlowBatchIDs(
                    eqpFlowBatchMaxCountChanges.stream()
                            .map(x -> ObjectIdentifier.build(x.getFlowBatchID(), x.getFlowBatchObj()))
                            .collect(Collectors.toList()));
        }

        return equipmentStatusInfo;
    }

    @Override
    public Infos.EqpPMInfo equipmentPMInfoGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        log.debug("equipmentPMInfoGetDR start");
        Infos.EqpPMInfo equipmentPMInfo = new Infos.EqpPMInfo();

        log.debug("step1 - query equipment from equipment id {}", equipmentID);
        List<CimEquipmentDO> equipments =
                cimJpaRepository.query(
                        "SELECT * FROM OMEQP WHERE EQP_ID=?1",
                        CimEquipmentDO.class,
                        ObjectIdentifier.fetchValue(equipmentID));
        Validations.check(CimObjectUtils.isEmpty(equipments), retCodeConfig.getNotFoundEquipment());
        CimEquipmentDO equipment = equipments.get(0);

        log.debug("step2 - set params");
        equipmentPMInfo.setRunWafer(equipment.getRunWaferCount());
        equipmentPMInfo.setMaximumRunWafer(equipment.getMaxRunWaferCount());
        equipmentPMInfo.setMaximumRunTime(CimObjectUtils.toString(equipment.getMaxRunTime()));

        log.debug(
                "step3 - query eqp state from equipment current state {}", equipment.getCurrentStateID());
        List<CimEquipmentStateDO> equipmentStates =
                cimJpaRepository.query(
                        "SELECT E10_STATE_RKEY FROM OMEQPST WHERE EQP_STATE_ID = ?1",
                        CimEquipmentStateDO.class,
                        equipment.getCurrentStateID());
        Validations.check(CimObjectUtils.isEmpty(equipmentStates), retCodeConfig.getNotFoundEqpState());

        log.debug("step4 - query e10 state from e10 id {}", equipmentStates.get(0).getE10StateObj());
        List<CimE10StateDO> e10States =
                cimJpaRepository.query(
                        "SELECT ID, E10_STATE_ID FROM OME10STATE WHERE ID = ?1",
                        CimE10StateDO.class,
                        equipmentStates.get(0).getE10StateObj());
        Validations.check(CimObjectUtils.isEmpty(e10States), retCodeConfig.getNotFoundE10State());
        CimE10StateDO e10State = e10States.get(0);
        log.trace("e10State is {}", e10State);
        if (e10State.getStateId().equals(BizConstant.SP_E10STATE_PRODUCTIVE)) {
            long currentTime = new Timestamp(System.currentTimeMillis()).getTime();
            long lastChangeTime =
                    (currentTime - equipment.getStateChangeTime().getTime()) / (1000 * 60); // minutes
            String runTime =
                    String.valueOf(lastChangeTime + CimNumberUtils.longValue(equipment.getRunTime()));
            equipmentPMInfo.setRunTime(runTime);
        } else {
            equipmentPMInfo.setRunTime(CimObjectUtils.toString(equipment.getRunTime()));
        }

        equipmentPMInfo.setMoveInCount(equipment.getOperationStartCount());
        equipmentPMInfo.setMaximumMoveInCount(equipment.getMaxOperationStartCount());
        equipmentPMInfo.setPmIntervalTime(equipment.getMaxIntervalTime());
        equipmentPMInfo.setLastMaintenanceTimeStamp(
                CimObjectUtils.toString(equipment.getMaintenanceTime()));

        return equipmentPMInfo;
    }

    /**
     * description: equipment_currentState_BecomeWhat
     *
     * <p><br>
     * change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     * this method replaced by this.getEquipmentStateByChambers()
     * @param objCommon
     * @param equipmentID
     * @param strEqpChamberStatus
     * @return com.fa.cim.dto.RetCode<com.fa.cim.pojo.ObjectIdentifier>
     * @author Ho
     * @date 2018/10/10 10:40:29
     */
    @Override
    @Deprecated
    public ObjectIdentifier equipmentCurrentStateBecomeWhat(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            List<Infos.EqpChamberStatus> strEqpChamberStatus) {
        CimMachine machine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        if (machine == null) {
            throw new ServiceException(
                    new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        }

        CimMachineState currentState = machine.getCurrentMachineState();
        Validations.check(currentState == null, retCodeConfig.getNotFoundEqpState());

        List<ProcessResource> resources = machine.allProcessResources();
        Validations.check(CimArrayUtils.isEmpty(resources), retCodeConfig.getNotFoundChamber());

        // 从环境变量中获取E10状态优先级规则, 如果未配置, 则取默认规则
        String e10Priority = StandardProperties.OM_E10_ORDER_FOR_STATUS_CHG.getValue();
        if (CimStringUtils.isEmpty(e10Priority)) {
            e10Priority = "PRD,SBY,ENG,UDT,SDT,NST";
        }
        List<String> prioritys = Arrays.asList(e10Priority.split(","));

        // 查询所有腔体的最新E10子状态
        List<CimMachineState> states = Lists.newArrayList();
        resources.forEach(resource -> {
            CimProcessResource chamber = (CimProcessResource) resource;
            Optional<Infos.EqpChamberStatus> optStatus = strEqpChamberStatus.stream().filter(status ->
                    CimStringUtils.equals(status.getChamberID().getValue(), chamber.getIdentifier())).findFirst();
            if (optStatus.isPresent()) {
                CimMachineState state =
                        baseCoreFactory.getBO(CimMachineState.class, optStatus.get().getChamberStatusCode());
                states.add(state);
            } else {
                states.add(chamber.getCurrentMachineState());
            }
        });

        // 找到优先级最高的E10状态
        int highestIdx = 99;
        CimMachineState highestState = null;
        for (CimMachineState state : states) {
            CimE10State e10 = state.getE10State();
            Validations.check(e10 == null, retCodeConfig.getNotFoundE10State());

            for (int i = 0; i < prioritys.size(); i++) {
                if (CimStringUtils.equals(e10.getIdentifier(), prioritys.get(i)) && i < highestIdx) {
                    highestIdx = i;
                    highestState = state;
                }
            }
        }
        Validations.check(highestState == null, retCodeConfig.getSystemError());

        return ObjectIdentifier.build(highestState.getIdentifier(), highestState.getPrimaryKey());
    }

    @Override
    public ObjectIdentifier getEquipmentStateByChambers(
            ObjectIdentifier equipmentID, List<Infos.EqpChamberStatus> chamberStatuses) {
        CimMachine machine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        if (machine == null) {
            throw new ServiceException(new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        }

        CimMachineState currentState = machine.getCurrentMachineState();
        Validations.check(currentState == null, retCodeConfig.getNotFoundEqpState());

        List<ProcessResource> resources = machine.allProcessResources();
        Validations.check(CimArrayUtils.isEmpty(resources), retCodeConfig.getNotFoundChamber());

        // 从环境变量中获取E10状态优先级规则, 如果未配置, 则取默认规则
        String e10Priority = StandardProperties.OM_E10_ORDER_FOR_STATUS_CHG.getValue();
        if (CimStringUtils.isEmpty(e10Priority)) {
            e10Priority = "PRD,ENG,UDT,SDT,NST";
        }
        List<String> prioritys = JSON.parseArray(JSON.toJSONString(e10Priority.replace(" ", "")
                .split(",")), String.class);
        prioritys.remove(BizConstant.SP_E10STATE_STANDBY);

        // 查询所有腔体的最新E10及其子状态
        Map<String, CimMachineState> chamberStates = Maps.newHashMap();
        Map<String, CimE10State> chamberE10States = Maps.newHashMap();
        resources.forEach(
                resource -> {
                    CimProcessResource chamber = (CimProcessResource) resource;
                    Optional<Infos.EqpChamberStatus> optStatus = chamberStatuses.stream()
                            .filter(status -> CimStringUtils.equals(status.getChamberID().getValue(),
                                    chamber.getIdentifier())).findFirst();
                    if (optStatus.isPresent()) {
                        CimMachineState state =
                                baseCoreFactory.getBO(CimMachineState.class, optStatus.get().getChamberStatusCode());
                        Validations.check(state == null, retCodeConfig.getNotFoundEqpState());
                        CimE10State e10 = state.getE10State();
                        Validations.check(e10 == null, retCodeConfig.getNotFoundE10State());
                        chamberStates.put(chamber.getPrimaryKey(), state);
                        chamberE10States.put(chamber.getPrimaryKey(), e10);
                    } else {
                        chamberStates.put(chamber.getPrimaryKey(), chamber.getCurrentMachineState());
                        CimE10State e10 = chamber.getCurrentMachineState().getE10State();
                        Validations.check(e10 == null, retCodeConfig.getNotFoundE10State());
                        chamberE10States.put(chamber.getPrimaryKey(), e10);
                    }
                });

        CimMachineState tmpState1 = null;
        // 如果所有chamber的E10状态都是SBY, 则当前设备的状态就应该是SBY的默认子状态
        if (chamberE10States.values().stream().allMatch(e10 ->
                e10.getIdentifier().equals(BizConstant.SP_E10STATE_STANDBY))) {
            tmpState1 = chamberE10States.values().iterator().next().getDefaultMachineState();
            Validations.check(tmpState1 == null, retCodeConfig.getSystemError());
            return ObjectIdentifier.build(tmpState1.getIdentifier(), tmpState1.getPrimaryKey());
        }

        // 得到所有的chamber分组信息
        MachineDTO.ChamberRelationData relationData = machine.getChamberRelation();
        Validations.check(relationData == null
                        || CimStringUtils.isEmpty(relationData.getGroupRelationship())
                        || CimStringUtils.isEmpty(relationData.getRelationship()),
                retCodeConfigEx.getChamberGroupConfigError(), machine.getIdentifier());

        // 得到每个分组的当前状态
        // serial: 串行; paralar: 并行
        // 规则: 串行(取多个chamber中优先级最低的), 并行(取多个chamber中优先级最高的)
        // 99和-1仅表示一个初始值, 用于初始判断使用
        int highestIdx1 = 99, lowestIdx1 = -1;
        for (MachineDTO.ChamberGroupData group : relationData.getGroups()) {
            int highestIdx2 = 99, lowestIdx2 = -1;
            CimMachineState tmpState2 = null;
            CimE10State tmpE102 = null;

            // chamber.getRelationship(): 决定同一个group内各chamber的关系
            // chamber.getGroupRelationship(): 决定所有group的关系
            // 先处理每个分组内的优先级状态
            for (ProcessResource resource : resources) {
                CimProcessResource chamber = (CimProcessResource) resource;
                if (!group.getChamberIds().contains(chamber.getIdentifier())) {
                    continue;
                }
                CimMachineState state = chamberStates.get(chamber.getPrimaryKey());
                if (state == null) {
                    continue;
                }
                CimE10State e10 = chamberE10States.get(chamber.getPrimaryKey());
                if (e10 == null) {
                    continue;
                }
                if (CimStringUtils.equalsIgnoreCase("serial", relationData.getRelationship())) {
                    for (int i = 0; i < prioritys.size(); i++) {
                        if (CimStringUtils.equals(e10.getIdentifier(), prioritys.get(i)) && i > lowestIdx2) {
                            lowestIdx2 = i;
                            tmpState2 = state;
                            tmpE102 = e10;
                        }
                    }
                } else {
                    for (int i = 0; i < prioritys.size(); i++) {
                        if (CimStringUtils.equals(e10.getIdentifier(), prioritys.get(i)) && i < highestIdx2) {
                            highestIdx2 = i;
                            tmpState2 = state;
                            tmpE102 = e10;
                        }
                    }
                }
            }
            if (tmpState2 == null || tmpE102 == null) {
                continue;
            }
            // 再处理所有分组的优先级
            if (CimStringUtils.equalsIgnoreCase("serial", relationData.getGroupRelationship())) {
                for (int i = 0; i < prioritys.size(); i++) {
                    if (CimStringUtils.equals(tmpE102.getIdentifier(), prioritys.get(i)) && i > lowestIdx1) {
                        lowestIdx1 = i;
                        tmpState1 = tmpState2;
                    }
                }
            } else {
                for (int i = 0; i < prioritys.size(); i++) {
                    if (CimStringUtils.equals(tmpE102.getIdentifier(), prioritys.get(i)) && i < highestIdx1) {
                        highestIdx1 = i;
                        tmpState1 = tmpState2;
                    }
                }
            }
        }
        Validations.check(tmpState1 == null, retCodeConfig.getSystemError());

        return ObjectIdentifier.build(tmpState1.getIdentifier(), tmpState1.getPrimaryKey());
    }

    /**
     * description:availableEquipment_GetForDeliveryReqDR
     *
     * <p><br>
     * change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param objCommon
     * @param equipmentID
     * @param lotID
     * @param cassetteID
     * @param durableID
     * @return com.fa.cim.dto.RetCode<com.fa.cim.dto.Results.EqpForAutoTransferInqResult>
     * @author Ho
     * @date 2018/10/11 14:24:19
     */
    @Override
    public List<ObjectIdentifier> availableEquipmentGetForDeliveryReqDR(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            ObjectIdentifier lotID,
            ObjectIdentifier cassetteID,
            ObjectIdentifier durableID) {
        List<ObjectIdentifier> equipmentIDs = new ArrayList<>();
        if (!ObjectIdentifier.isEmpty(equipmentID)) {
            // step1 - equipment_operationMode_GetDR
            equipmentOperationModeGetDR(objCommon, equipmentID);

            // step2 - equipment_portInfo_Get
            Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoGet(objCommon, equipmentID);
            List<Infos.EqpPortStatus> eqpPortStatusList = eqpPortInfo.getEqpPortStatuses();

            boolean deliverableFlag = false;

            for (Infos.EqpPortStatus eqpPortStatus : eqpPortStatusList) {

                if (CimStringUtils.equals(
                        eqpPortStatus.getDispatchMode(), BizConstant.SP_EQP_DISPATCHMODE_AUTO)
                        && CimStringUtils.equals(
                        eqpPortStatus.getAccessMode(), BizConstant.SP_EQP_ACCESSMODE_AUTO)
                        && CimStringUtils.equals(
                        eqpPortStatus.getDispatchState(), BizConstant.SP_PORTRSC_DISPATCHSTATE_REQUIRED)
                        && (CimStringUtils.equals(
                        eqpPortStatus.getPortState(), BizConstant.SP_PORTRSC_PORTSTATE_LOADAVAIL)
                        || CimStringUtils.equals(
                        eqpPortStatus.getPortState(), BizConstant.SP_PORTRSC_PORTSTATE_LOADREQ)
                        || CimStringUtils.equals(
                        eqpPortStatus.getPortState(), BizConstant.SP_PORTRSC_PORTSTATE_UNLOADREQ))) {
                    deliverableFlag = true;
                    break;
                } else if (CimStringUtils.equals(
                        eqpPortStatus.getDispatchMode(), BizConstant.SP_EQP_DISPATCHMODE_MANUAL)
                        && CimStringUtils.equals(
                        eqpPortStatus.getAccessMode(), BizConstant.SP_EQP_ACCESSMODE_AUTO)
                        && CimStringUtils.equals(
                        eqpPortStatus.getDispatchState(), BizConstant.SP_PORTRSC_DISPATCHSTATE_REQUIRED)
                        && CimStringUtils.equals(
                        eqpPortStatus.getPortState(), BizConstant.SP_PORTRSC_PORTSTATE_UNLOADREQ)) {
                    deliverableFlag = true;
                    break;
                }
            }

            if (!deliverableFlag) {
                return equipmentIDs;
            }

            String takeOutXferInNotAvailableState =
                    StandardProperties.OM_XFER_TAKEOUT_IN_NOT_AVAIL_STATE.getValue();
            if (!CimStringUtils.equals("1", takeOutXferInNotAvailableState)) {

                // step3 - equipment_CheckAvailDR
                try {
                    equipmentCheckAvailDR(objCommon, equipmentID);
                } catch (ServiceException e) {
                    if (Validations.isEquals(retCodeConfig.getEquipmentNotAvailableStat(), e.getCode())) {
                        return equipmentIDs;
                    } else {
                        throw new ServiceException(retCodeConfig.getSystemError());
                    }
                }
            }

            equipmentIDs.add(equipmentID);
            return equipmentIDs;
        } else if (!ObjectIdentifier.isEmpty(lotID) || !ObjectIdentifier.isEmpty(cassetteID)) {
            List<ObjectIdentifier> targetEqps = new ArrayList<>();

            if (!CimStringUtils.isEmpty(lotID.getValue())) {
                CimLot lot = baseCoreFactory.getBO(CimLot.class, lotID);
                Validations.check(lot == null, retCodeConfig.getNotFoundLot());
                List<CimMachine> equipmentList = lot.getQueuedMachines();

                for (CimMachine lotEquipment : equipmentList) {
                    ObjectIdentifier tempEquipmentID = new ObjectIdentifier();
                    tempEquipmentID.setValue(lotEquipment.getIdentifier());
                    tempEquipmentID.setReferenceKey(lotEquipment.getPrimaryKey());
                    targetEqps.add(tempEquipmentID);
                }
            } else if (!CimStringUtils.isEmpty(cassetteID.getValue())) {
                CimCassette cassette = baseCoreFactory.getBO(CimCassette.class, cassetteID);
                Validations.check(cassette == null, retCodeConfig.getNotFoundCassette());

                List<Lot> lotList = cassette.allLots();
                Validations.check(CimArrayUtils.isEmpty(lotList), retCodeConfig.getNotFoundLot());
                for (Lot plot : lotList) {
                    com.fa.cim.newcore.bo.product.CimLot lot = (com.fa.cim.newcore.bo.product.CimLot) plot;
                    Validations.check(lot == null, retCodeConfig.getNotFoundLot());
                    List<CimMachine> lotEquipments = lot.getQueuedMachines();
                    for (CimMachine lotEquipment : lotEquipments) {
                        ObjectIdentifier tempEquipmentID = new ObjectIdentifier();
                        tempEquipmentID.setValue(lotEquipment.getIdentifier());
                        tempEquipmentID.setReferenceKey(lotEquipment.getPrimaryKey());

                        boolean bExist = false;
                        for (ObjectIdentifier targetEqp : targetEqps) {
                            if (CimStringUtils.equals(tempEquipmentID.getValue(), targetEqp.getValue())) {
                                bExist = true;
                                break;
                            }
                        }

                        if (!bExist) {
                            targetEqps.add(tempEquipmentID);
                        }
                    }
                }
            }

            List<Infos.EqpOnePortGroupInfo> eqpOnePortGroupInfoList = new ArrayList<>();

            for (ObjectIdentifier targetEqp : targetEqps) {

                // step4 - equipment_portInfo_Get
                Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoGet(objCommon, targetEqp);

                // step5 - equipment_portInfo_SortByGroup
                Infos.EqpPortInfoOrderByGroup byGroupRetCode =
                        this.equipmentPortInfoSortByGroup(
                                objCommon, targetEqp, eqpPortInfo.getEqpPortStatuses());

                List<Infos.PortGroup> portGroupList = byGroupRetCode.getStrPortGroup();

                for (Infos.PortGroup portGroup : portGroupList) {
                    Infos.EqpOnePortGroupInfo eqpOnePortGroupInfo = new Infos.EqpOnePortGroupInfo();
                    eqpOnePortGroupInfoList.add(eqpOnePortGroupInfo);
                    eqpOnePortGroupInfo.setEquipmentID(byGroupRetCode.getEquipmentID());
                    eqpOnePortGroupInfo.setStrPortGroup(portGroup);
                }
            }

            for (Infos.EqpOnePortGroupInfo eqpOnePortGroupInfo : eqpOnePortGroupInfoList) {
                List<Infos.PortID> portIDList = eqpOnePortGroupInfo.getStrPortGroup().getStrPortID();
                // 循环打印PortID信息
            }

            Infos.EqpOnePortGroupInfo tmpEqpPortGroupInfoSeq;

            List<Integer> portNumSeq = new ArrayList<>();

            String tmpTime = null;

            for (Infos.EqpOnePortGroupInfo eqpOnePortGroupInfo : eqpOnePortGroupInfoList) {
                int portNum = 0;
                List<Infos.PortID> portIDList = eqpOnePortGroupInfo.getStrPortGroup().getStrPortID();
                tmpTime = portIDList.get(0).getDispatchStateTimeStamp();
                int j = 0;
                for (Infos.PortID portID : portIDList) {
                    if (CimDateUtils.compare(
                            CimDateUtils.convertToOrInitialTime(portID.getDispatchStateTimeStamp()),
                            CimDateUtils.convertToOrInitialTime(tmpTime))
                            > 0) {
                        tmpTime = portID.getDispatchStateTimeStamp();
                        portNum = j;
                    }

                    j++;
                }

                portNumSeq.add(portNum);
            }

            for (int i = 0, n = eqpOnePortGroupInfoList.size(); i < n; i++) {

                for (int j = i + 1; j < n; j++) {

                    if (CimDateUtils.compare(
                            CimDateUtils.convertToOrInitialTime(
                                    eqpOnePortGroupInfoList
                                            .get(i)
                                            .getStrPortGroup()
                                            .getStrPortID()
                                            .get(portNumSeq.get(i))
                                            .getDispatchStateTimeStamp()),
                            CimDateUtils.convertToOrInitialTime(
                                    eqpOnePortGroupInfoList
                                            .get(j)
                                            .getStrPortGroup()
                                            .getStrPortID()
                                            .get(portNumSeq.get(j))
                                            .getDispatchStateTimeStamp()))
                            > 0) {
                        BaseStaticMethod.change(eqpOnePortGroupInfoList, i, j);
                        BaseStaticMethod.change(portNumSeq, i, j);
                    }
                }
            }

            List<ObjectIdentifier> returnEqpSeq = new ArrayList<>();
            for (Infos.EqpOnePortGroupInfo eqpOnePortGroupInfo : eqpOnePortGroupInfoList) {

                // step6 - equipment_portInfo_Get
                Infos.EqpPortInfo eqpPortInfo =
                        this.equipmentPortInfoGet(objCommon, eqpOnePortGroupInfo.getEquipmentID());
                int nFoundPortGrpIdx = -1;
                List<Infos.EqpPortStatus> eqpPortStatuses = eqpPortInfo.getEqpPortStatuses();
                for (int i = 0, n = eqpPortStatuses.size(); i < n; i++) {

                    if (CimStringUtils.equals(
                            eqpOnePortGroupInfo.getStrPortGroup().getPortGroup(),
                            eqpPortStatuses.get(i).getPortGroup())) {
                        nFoundPortGrpIdx = i;
                        break;
                    }
                }

                if (nFoundPortGrpIdx < 0) {
                    continue;
                }

                if (!CimStringUtils.equals(
                        eqpPortStatuses.get(nFoundPortGrpIdx).getDispatchMode(),
                        BizConstant.SP_EQP_DISPATCHMODE_AUTO)
                        && !CimStringUtils.equals(
                        eqpPortStatuses.get(nFoundPortGrpIdx).getAccessMode(),
                        BizConstant.SP_EQP_ACCESSMODE_AUTO)) {
                    continue;
                }

                int lenPortID = eqpOnePortGroupInfo.getStrPortGroup().getStrPortID().size();
                for (int j = 0; j < lenPortID; j++) {
                    if ((CimStringUtils.equals(
                            eqpOnePortGroupInfo.getStrPortGroup().getStrPortID().get(j).getPortState(),
                            BizConstant.SP_PORTRSC_PORTSTATE_LOADAVAIL)
                            || CimStringUtils.equals(
                            eqpOnePortGroupInfo.getStrPortGroup().getStrPortID().get(j).getPortState(),
                            BizConstant.SP_PORTRSC_PORTSTATE_LOADREQ)
                            || CimStringUtils.equals(
                            eqpOnePortGroupInfo.getStrPortGroup().getStrPortID().get(j).getPortState(),
                            BizConstant.SP_PORTRSC_PORTSTATE_UNLOADREQ))
                            && CimStringUtils.equals(
                            eqpOnePortGroupInfo.getStrPortGroup().getStrPortID().get(j).getDispatchState(),
                            BizConstant.SP_PORTRSC_DISPATCHSTATE_REQUIRED)) {
                        // Omit LoadAvail of Semi2 and LoadReq [D4000251]
                        if (CimStringUtils.equals(
                                eqpPortStatuses.get(nFoundPortGrpIdx).getDispatchMode(),
                                BizConstant.SP_EQP_DISPATCHMODE_MANUAL)
                                && (CimStringUtils.equals(
                                eqpOnePortGroupInfo.getStrPortGroup().getStrPortID().get(j).getPortState(),
                                BizConstant.SP_PORTRSC_PORTSTATE_LOADAVAIL)
                                || CimStringUtils.equals(
                                eqpOnePortGroupInfo.getStrPortGroup().getStrPortID().get(j).getPortState(),
                                BizConstant.SP_PORTRSC_PORTSTATE_LOADREQ))) {
                            // Omit Semi-2
                        } else {
                            returnEqpSeq.add(eqpOnePortGroupInfo.getEquipmentID());
                            break;
                        }
                    }
                }
            }
            return returnEqpSeq;
        } else if (!ObjectIdentifier.isEmpty(durableID)) {

            CimProcessDurable aDurable = baseCoreFactory.getBO(CimProcessDurable.class, durableID);
            Validations.check(aDurable == null, retCodeConfig.getNotFoundDurable());

            if (aDurable.isEquipmentIn()) {
                Machine aMachine = aDurable.currentAssignedMachine();
                if (aMachine == null) {
                    return equipmentIDs;
                }

                ObjectIdentifier objectIdentifier = new ObjectIdentifier();
                objectIdentifier.setValue(aMachine.getIdentifier());
                objectIdentifier.setReferenceKey(aMachine.getPrimaryKey());
                equipmentIDs.add(objectIdentifier);

                return equipmentIDs;
            }
        }
        throw new ServiceException(retCodeConfig.getSystemError());
    }

    /**
     * description: equipment_portInfo_SortByGroup
     *
     * <p><br>
     * change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param objCommon
     * @param equipmentID
     * @param strEqpPortStatus
     * @return com.fa.cim.dto.RetCode<com.fa.cim.pojo.Infos.EqpPortInfoOrderByGroup>
     * @author Ho
     * @date 2018/10/12 10:36:03
     */
    @Override
    public Infos.EqpPortInfoOrderByGroup equipmentPortInfoSortByGroup(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            List<Infos.EqpPortStatus> strEqpPortStatus) {
        Infos.EqpPortInfoOrderByGroup eqpPortInfoOrderByGroup = new Infos.EqpPortInfoOrderByGroup();
        List<Infos.PortGroup> portGroupList = new ArrayList<>();
        eqpPortInfoOrderByGroup.setStrPortGroup(portGroupList);

        int nEqpPortStatusLen = strEqpPortStatus.size();
        Validations.check(nEqpPortStatusLen == 0, retCodeConfig.getNotFoundPort());

        // ---------------------------------------------------------
        //  Set eqp ID of Output Structure
        // ---------------------------------------------------------
        eqpPortInfoOrderByGroup.setEquipmentID(equipmentID);

        CimMachine equipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                equipment == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        for (int i = 0; i < nEqpPortStatusLen; i++) {

            boolean bPortAddFlg = false;

            int nOutPortGrpLen = CimArrayUtils.getSize(eqpPortInfoOrderByGroup.getStrPortGroup());

            // 由于没有portID不是ObjectIdentifier暂不使用ID去查询
            ObjectIdentifier portID = strEqpPortStatus.get(i).getPortID();

            PortResource aPosPortResource =
                    equipment.findPortResourceNamed(
                            ObjectIdentifier.fetchValue(strEqpPortStatus.get(i).getPortID()));
            CimPortResource port = (CimPortResource) aPosPortResource;
            Validations.check(port == null, retCodeConfig.getNotFoundPort());
            Long loadSequenceNoInPortGroup = CimNumberUtils.longValue(port.getLoadSeqInPortGroup());

            String strUsageType = port.getUsageType();

            CimLot aPosLoadLot = port.getDispatchLoadLot();
            // lotID.setReferenceKey(port.getLoadDispatchLotObj());   //【delete by bear】the port has no
            // LoadDispatchLotObj
            ObjectIdentifier dispatchLoadLotID = null;
            if (aPosLoadLot != null) {
                dispatchLoadLotID =
                        ObjectIdentifier.build(aPosLoadLot.getIdentifier(), aPosLoadLot.getPrimaryKey());
            }

            CimLot aPosUnLoadLot = port.getDispatchUnloadLot();
            // lotID.setReferenceKey(port.getUnloadDispatchLotObj());  //【delete by bear】the port has no
            // LoadDispatchLotObj
            ObjectIdentifier dispatchUnloadLotID = null;
            if (aPosUnLoadLot != null) {
                dispatchUnloadLotID =
                        ObjectIdentifier.build(aPosUnLoadLot.getIdentifier(), aPosUnLoadLot.getPrimaryKey());
            }

            int nEqpPortOnLotLen = CimArrayUtils.getSize(strEqpPortStatus.get(i).getLotOnPorts());

            for (int lotCnt = 0; lotCnt < nEqpPortOnLotLen; lotCnt++) {
                // 打印输入lotID信息
            }

            // ---------------------------------------------------------------
            //  For count port group of out structure,
            //  check whather port group of input structure is same or not
            // ---------------------------------------------------------------
            for (int j = 0; j < nOutPortGrpLen; j++) {
                // ---------------------------------------------------
                //  Check whather port Group is already exist
                //  in output structure or not
                // ---------------------------------------------------
                if (CimStringUtils.equals(
                        strEqpPortStatus.get(i).getPortGroup(),
                        eqpPortInfoOrderByGroup.getStrPortGroup().get(j).getPortGroup())) {
                    int nOutPortLen =
                            CimArrayUtils.getSize(
                                    eqpPortInfoOrderByGroup.getStrPortGroup().get(j).getStrPortID());

                    eqpPortInfoOrderByGroup.getStrPortGroup().get(j).getStrPortID().add(new Infos.PortID());

                    Infos.PortID[] portIDS =
                            eqpPortInfoOrderByGroup
                                    .getStrPortGroup()
                                    .get(j)
                                    .getStrPortID()
                                    .toArray(new Infos.PortID[]{});

                    // --------------------------------------------------------
                    //  Add port information into out structure
                    //  sort PortID by comparing loadSequenceNoInPortGroup
                    // --------------------------------------------------------
                    for (int k = 0; k < nOutPortLen; k++) {
                        if (strEqpPortStatus.get(i).getLoadSequenceNumber()
                                < eqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(j)
                                .getStrPortID()
                                .get(k)
                                .getLoadSequenceNoInPortGroup()) {

                            for (int l = nOutPortLen; l > k; l--) {
                                portIDS[l] = cloner.deepClone(portIDS[l - 1]);
                            }

                            portIDS[k].setPortID(strEqpPortStatus.get(i).getPortID());
                            portIDS[k].setLoadSequenceNoInPortGroup(loadSequenceNoInPortGroup);
                            portIDS[k].setPortUsage(strEqpPortStatus.get(i).getPortUsage());
                            portIDS[k].setUsageType(strUsageType);
                            portIDS[k].setLoadPurposeType(strEqpPortStatus.get(i).getLoadPurposeType());
                            portIDS[k].setPortState(strEqpPortStatus.get(i).getPortState());
                            portIDS[k].setCassetteID(strEqpPortStatus.get(i).getLoadedCassetteID());
                            portIDS[k].setDispatchState(strEqpPortStatus.get(i).getDispatchState());
                            portIDS[k].setDispatchStateTimeStamp(
                                    strEqpPortStatus.get(i).getDispatchStateTimeStamp());
                            // 实际为ObjectIdentifier
                            portIDS[k].setDispatchLoadLotID(dispatchLoadLotID);
                            portIDS[k].setDispatchLoadCassetteID(
                                    strEqpPortStatus.get(i).getDispatchLoadCassetteID());
                            // 实际为ObjectIdentifier
                            portIDS[k].setDispatchUnloadLotID(dispatchUnloadLotID);
                            portIDS[k].setDispatchUnloadCassetteID(
                                    strEqpPortStatus.get(i).getDispatchUnloadCassetteID());
                            portIDS[k].setCategoryCapability(
                                    strEqpPortStatus.get(i).getCassetteCategoryCapability());

                            portIDS[k].setLotInfoOnPortList(new ArrayList<>());
                            for (int lotCnt = 0; lotCnt < nEqpPortOnLotLen; lotCnt++) {
                                Infos.LotInfoOnPort lotInfoOnPort = new Infos.LotInfoOnPort();
                                portIDS[k].getLotInfoOnPortList().add(lotInfoOnPort);
                                lotInfoOnPort.setLotID(
                                        strEqpPortStatus.get(i).getLotOnPorts().get(lotCnt).getLotID());
                                lotInfoOnPort.setLotType(
                                        strEqpPortStatus.get(i).getLotOnPorts().get(lotCnt).getLotType());
                            }

                            bPortAddFlg = true;
                            eqpPortInfoOrderByGroup
                                    .getStrPortGroup()
                                    .get(j)
                                    .setStrPortID(new ArrayList<>(CimArrayUtils.generateList(portIDS)));

                            break;
                        }
                    }
                    if (CimBooleanUtils.isFalse(bPortAddFlg)) {

                        eqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(j)
                                .getStrPortID()
                                .get(nOutPortLen)
                                .setPortID(strEqpPortStatus.get(i).getPortID());
                        eqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(j)
                                .getStrPortID()
                                .get(nOutPortLen)
                                .setLoadSequenceNoInPortGroup(loadSequenceNoInPortGroup);
                        eqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(j)
                                .getStrPortID()
                                .get(nOutPortLen)
                                .setPortUsage(strEqpPortStatus.get(i).getPortUsage());
                        eqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(j)
                                .getStrPortID()
                                .get(nOutPortLen)
                                .setUsageType(strUsageType);
                        eqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(j)
                                .getStrPortID()
                                .get(nOutPortLen)
                                .setLoadPurposeType(strEqpPortStatus.get(i).getLoadPurposeType());
                        eqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(j)
                                .getStrPortID()
                                .get(nOutPortLen)
                                .setPortState(strEqpPortStatus.get(i).getPortState());
                        eqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(j)
                                .getStrPortID()
                                .get(nOutPortLen)
                                .setCassetteID(strEqpPortStatus.get(i).getLoadedCassetteID());
                        eqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(j)
                                .getStrPortID()
                                .get(nOutPortLen)
                                .setDispatchState(strEqpPortStatus.get(i).getDispatchState());
                        eqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(j)
                                .getStrPortID()
                                .get(nOutPortLen)
                                .setDispatchStateTimeStamp(strEqpPortStatus.get(i).getDispatchStateTimeStamp());
                        // 实际ObjectIdentifier
                        eqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(j)
                                .getStrPortID()
                                .get(nOutPortLen)
                                .setDispatchLoadLotID(dispatchLoadLotID);
                        eqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(j)
                                .getStrPortID()
                                .get(nOutPortLen)
                                .setDispatchLoadCassetteID(strEqpPortStatus.get(i).getDispatchLoadCassetteID());
                        // 实际ObjectIdentifier
                        eqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(j)
                                .getStrPortID()
                                .get(nOutPortLen)
                                .setDispatchUnloadLotID(dispatchUnloadLotID);
                        eqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(j)
                                .getStrPortID()
                                .get(nOutPortLen)
                                .setDispatchUnloadCassetteID(strEqpPortStatus.get(i).getDispatchUnloadCassetteID());

                        eqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(j)
                                .getStrPortID()
                                .get(nOutPortLen)
                                .setCategoryCapability(strEqpPortStatus.get(i).getCassetteCategoryCapability());

                        eqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(j)
                                .getStrPortID()
                                .get(nOutPortLen)
                                .setLotInfoOnPortList(new ArrayList<>());

                        for (int lotCnt = 0; lotCnt < nEqpPortOnLotLen; lotCnt++) {
                            Infos.LotInfoOnPort lotInfoOnPort = new Infos.LotInfoOnPort();
                            eqpPortInfoOrderByGroup
                                    .getStrPortGroup()
                                    .get(j)
                                    .getStrPortID()
                                    .get(nOutPortLen)
                                    .getLotInfoOnPortList()
                                    .add(lotInfoOnPort);
                            lotInfoOnPort.setLotID(
                                    strEqpPortStatus.get(i).getLotOnPorts().get(lotCnt).getLotID());
                            lotInfoOnPort.setLotType(
                                    strEqpPortStatus.get(i).getLotOnPorts().get(lotCnt).getLotType());
                        }
                        bPortAddFlg = true;
                    }
                }
                if (CimBooleanUtils.isTrue(bPortAddFlg)) {
                    break;
                }
            }

            // ---------------------------------------------------
            //  If port group of input structure is not found
            //  in port Group of out tructure
            // ---------------------------------------------------
            if (CimBooleanUtils.isFalse(bPortAddFlg)) {

                Infos.PortGroup portGroup = new Infos.PortGroup();
                eqpPortInfoOrderByGroup.getStrPortGroup().add(portGroup);

                portGroup.setPortGroup(strEqpPortStatus.get(i).getPortGroup());
                List<Infos.PortID> portIDList = new ArrayList<>();
                portGroup.setStrPortID(portIDList);

                Infos.PortID strPortID = new Infos.PortID();
                portIDList.add(strPortID);

                strPortID.setPortID(strEqpPortStatus.get(i).getPortID());
                strPortID.setLoadSequenceNoInPortGroup(loadSequenceNoInPortGroup);
                strPortID.setPortUsage(strEqpPortStatus.get(i).getPortUsage());
                strPortID.setUsageType(strUsageType);
                strPortID.setLoadPurposeType(strEqpPortStatus.get(i).getLoadPurposeType());
                strPortID.setPortState(strEqpPortStatus.get(i).getPortState());
                strPortID.setCassetteID(strEqpPortStatus.get(i).getLoadedCassetteID());
                strPortID.setDispatchState(strEqpPortStatus.get(i).getDispatchState());
                strPortID.setDispatchStateTimeStamp(strEqpPortStatus.get(i).getDispatchStateTimeStamp());
                // 实际ObjectIdentifier
                strPortID.setDispatchLoadLotID(dispatchLoadLotID);
                strPortID.setDispatchLoadCassetteID(strEqpPortStatus.get(i).getDispatchLoadCassetteID());
                strPortID.setDispatchUnloadLotID(dispatchUnloadLotID);
                strPortID.setDispatchUnloadCassetteID(
                        strEqpPortStatus.get(i).getDispatchUnloadCassetteID());
                strPortID.setCategoryCapability(strEqpPortStatus.get(i).getCassetteCategoryCapability());

                List<Infos.LotInfoOnPort> strLotOnPortList = new ArrayList<>();
                strPortID.setLotInfoOnPortList(strLotOnPortList);
                for (int lotCnt = 0; lotCnt < nEqpPortOnLotLen; lotCnt++) {
                    Infos.LotInfoOnPort lotOnPort = new Infos.LotInfoOnPort();
                    strLotOnPortList.add(lotOnPort);
                    lotOnPort.setLotID(strEqpPortStatus.get(i).getLotOnPorts().get(lotCnt).getLotID());
                    lotOnPort.setLotType(strEqpPortStatus.get(i).getLotOnPorts().get(lotCnt).getLotType());
                }
            }
        }

        int portLen = CimArrayUtils.getSize(eqpPortInfoOrderByGroup.getStrPortGroup());
        for (int i2 = 0; i2 < portLen; i2++) {

            Infos.PortID strPortID;
            int portIdLen =
                    CimArrayUtils.getSize(eqpPortInfoOrderByGroup.getStrPortGroup().get(i2).getStrPortID());
            for (int j2 = 0; j2 < portIdLen; j2++) {
                strPortID = eqpPortInfoOrderByGroup.getStrPortGroup().get(i2).getStrPortID().get(j2);

                int lotPortLen = CimArrayUtils.getSize(strPortID.getLotInfoOnPortList());
                for (int k2 = 0; k2 < lotPortLen; k2++) {
                    // 打印LotOnPort信息
                }
            }
        }
        return eqpPortInfoOrderByGroup;
    }

    /**
     * description: equipment_operationMode_GetDR
     *
     * <p><br>
     * change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param objCommon
     * @param equipmentID
     * @return com.fa.cim.dto.RetCode<java.lang.String>
     * @author Ho
     * @date 2018/10/11 15:05:40
     */
    @Override
    public String equipmentOperationModeGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        CimEquipmentDO equipment =
                cimJpaRepository.queryOne(
                        "SELECT CUR_OPE_MODE FROM OMEQP WHERE EQP_ID = ?1",
                        CimEquipmentDO.class,
                        ObjectIdentifier.fetchValue(equipmentID));
        Validations.check(CimObjectUtils.isEmpty(equipment), retCodeConfig.getNotFoundEqp());
        return equipment.getCapableOperationMode();
    }

    /**
     * description:
     *
     * <p><br>
     * change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param objCommon
     * @param equipmentID
     * @return com.fa.cim.dto.RetCode<java.lang.Object>
     * @author Ho
     * @date 2018/10/11 15:43:40
     */
    @Override
    public void equipmentCheckAvailDR(Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        CimEquipmentDO cimEquipmentDO =
                cimJpaRepository.queryOne(
                        "SELECT * FROM OMEQP WHERE EQP_ID = ?1",
                        CimEquipmentDO.class,
                        ObjectIdentifier.fetchValue(equipmentID));
        if (cimEquipmentDO == null) {
            throw new ServiceException(
                    new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        }
        Boolean eqpavailStateFlag = cimEquipmentDO.getAvailableStateFlag();
        if (!eqpavailStateFlag) {
            throw new ServiceException(retCodeConfig.getEquipmentNotAvailableStat());
        }
    }

    @Override
    public Infos.EqpPortInfo equipmentPortInfoGet(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        Infos.EqpPortInfo eqpPortInfo = new Infos.EqpPortInfo();
        List<Infos.EqpPortStatus> eqpPortStatuses = new ArrayList<>();
        eqpPortInfo.setEqpPortStatuses(eqpPortStatuses);
        CimMachine anEquipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(CimObjectUtils.isEmpty(anEquipment), retCodeConfig.getNotFoundEquipment());
        List<PortResource> portResourceList = anEquipment.allPortResources();
        List<MachineDTO.MachineCassette> posMachineCassetteList = anEquipment.allCassettes();
        int lenPortRes = CimArrayUtils.getSize(portResourceList);
        if (lenPortRes > 0) {
            for (PortResource portResource : portResourceList) {
                ObjectIdentifier portID =
                        new ObjectIdentifier(portResource.getIdentifier(), portResource.getPrimaryKey());
                // Note : null check is required before invoking method under here
                Outputs.ObjPortResourceCurrentOperationModeGetOut portResourceCurrentOperationModeResult =
                        portMethod.portResourceCurrentOperationModeGet(objCommon, equipmentID, portID);
                com.fa.cim.newcore.bo.machine.CimPortResource aPosPort =
                        (com.fa.cim.newcore.bo.machine.CimPortResource) portResource;
                Infos.OperationMode opeMode = portResourceCurrentOperationModeResult.getOperationMode();
                Infos.EqpPortStatus eqpPortStatus = new Infos.EqpPortStatus();
                eqpPortStatuses.add(eqpPortStatus);
                eqpPortStatus.setPortID(
                        new ObjectIdentifier(aPosPort.getIdentifier(), aPosPort.getPrimaryKey()));
                com.fa.cim.newcore.bo.machine.CimPortResource aPosAssociatedPort =
                        aPosPort.getAssociatedPort();
                eqpPortStatus.setAssociatedPortID(
                        new ObjectIdentifier(
                                aPosAssociatedPort.getIdentifier(), aPosAssociatedPort.getPrimaryKey()));
                eqpPortStatus.setPortGroup(aPosPort.getPortGroup());
                eqpPortStatus.setLoadSequenceNumber(
                        aPosPort.getLoadSeqInPortGroup() == null ? 0 : aPosPort.getLoadSeqInPortGroup());
                eqpPortStatus.setPortUsage(aPosPort.getPortUsage());
                eqpPortStatus.setLoadPurposeType(aPosPort.getLoadPurposeType());
                CimMachineOperationMode aMachineOperationMode = aPosPort.getMachineOperationMode();
                eqpPortStatus.setOperationModeID(
                        new ObjectIdentifier(
                                aMachineOperationMode.getIdentifier(), aMachineOperationMode.getPrimaryKey()));
                eqpPortStatus.setPortState(aPosPort.getPortState());
                List<com.fa.cim.newcore.bo.product.CimControlJob> controlJobList =
                        anEquipment.allStartReservedControlJobs();
                int ctrLen = CimArrayUtils.getSize(controlJobList);
                boolean bFindFlg = false;
                if (ctrLen > 0) {
                    for (com.fa.cim.newcore.bo.product.CimControlJob controlJob : controlJobList) {
                        List<ProductDTO.PosStartCassetteInfo> startCassetteInfo =
                                controlJob.getStartCassetteInfo();
                        for (ProductDTO.PosStartCassetteInfo startCassette : startCassetteInfo) {
                            ObjectIdentifier loadPortID = startCassette.getLoadPortID();
                            if (ObjectIdentifier.equalsWithValue(eqpPortStatus.getPortID(), loadPortID)) {
                                eqpPortStatus.setLoadResrvedCassetteID(startCassette.getCassetteID());
                                bFindFlg = true;
                                break;
                            }
                        }
                        if (CimBooleanUtils.isTrue(bFindFlg)) {
                            break;
                        }
                    }
                }
                List<com.fa.cim.newcore.bo.durable.CimDurableControlJob> durableControlJobList =
                        anEquipment.allStartReservedDurableControlJobs();
                boolean bDCJFindFlg = false;
                if (!CimObjectUtils.isEmpty(durableControlJobList)) {
                    for (com.fa.cim.newcore.bo.durable.CimDurableControlJob durableControlJob :
                            durableControlJobList) {
                        List<DurableDTO.StartDurableInfo> startDurableInfoList =
                                durableControlJob.getStartDurableInfo();
                        for (DurableDTO.StartDurableInfo startDurableInfo : startDurableInfoList) {
                            ObjectIdentifier loadPortID = startDurableInfo.getLoadPortID();
                            if (ObjectIdentifier.equalsWithValue(eqpPortStatus.getPortID(), loadPortID)) {
                                eqpPortStatus.setLoadResrvedCassetteID(startDurableInfo.getDurableID());
                                bDCJFindFlg = true;
                                break;
                            }
                        }
                        if (CimBooleanUtils.isTrue(bDCJFindFlg)) {
                            break;
                        }
                    }
                }
                eqpPortStatus.setDispatchState(aPosPort.getDispatchState());
                eqpPortStatus.setDispatchStateTimeStamp(
                        CimDateUtils.convertToSpecString(aPosPort.getLastDispatchRequiredTimeStamp()));
                com.fa.cim.newcore.bo.durable.CimCassette aPosCassette = aPosPort.getDispatchLoadCassette();
                if (aPosCassette != null) {
                    eqpPortStatus.setDispatchLoadCassetteID(
                            new ObjectIdentifier(aPosCassette.getIdentifier(), aPosCassette.getPrimaryKey()));
                }
                com.fa.cim.newcore.bo.durable.CimCassette aPosDPLoadCassette =
                        aPosPort.getDispatchUnloadCassette();
                if (aPosDPLoadCassette != null) {
                    eqpPortStatus.setDispatchUnloadCassetteID(
                            new ObjectIdentifier(
                                    aPosDPLoadCassette.getIdentifier(), aPosDPLoadCassette.getPrimaryKey()));
                }
                eqpPortStatus.setOperationMode(opeMode.getDescription());
                eqpPortStatus.setOnlineMode(opeMode.getOnlineMode());
                eqpPortStatus.setDispatchMode(opeMode.getDispatchMode());
                eqpPortStatus.setAccessMode(opeMode.getAccessMode());
                eqpPortStatus.setMoveInMode(opeMode.getMoveInMode());
                eqpPortStatus.setMoveOutMode(opeMode.getMoveOutMode());
                List<String> cassetteCategoryCapability = aPosPort.getCassetteCategoryCapability();
                eqpPortStatus.setCassetteCategoryCapability(cassetteCategoryCapability);
                for (MachineDTO.MachineCassette machineCassette : posMachineCassetteList) {
                    if (ObjectIdentifier.equalsWithValue(
                            eqpPortStatus.getPortID(), machineCassette.getLoadPortID())) {
                        // 0.03 add start
                        eqpPortStatus.setLoadedCassetteID(machineCassette.getCassetteID());
                        eqpPortStatus.setCassetteLoadPurposeType(machineCassette.getLoadPurposeType());
                        com.fa.cim.newcore.bo.durable.CimCassette aLoadedCassette =
                                baseCoreFactory.getBO(
                                        com.fa.cim.newcore.bo.durable.CimCassette.class,
                                        machineCassette.getCassetteID());
                        if (!SorterHandler.containsFOSB(machineCassette.getCassetteID())) {
                            com.fa.cim.newcore.bo.product.CimControlJob aCassetteControlJob =
                                    aLoadedCassette.getControlJob();
                            if (aCassetteControlJob == null) {
                                /*---------------------------------------*/
                                /*   Get DurableControlJobID             */
                                /*---------------------------------------*/
                                com.fa.cim.newcore.bo.durable.CimDurableControlJob aDurableControlJob =
                                        aLoadedCassette.getDurableControlJob();
                                if (aDurableControlJob != null) {
                                    eqpPortStatus.setCassetteControlJobID(
                                            new ObjectIdentifier(
                                                    aDurableControlJob.getIdentifier(), aDurableControlJob.getPrimaryKey()));
                                } else {
                                    eqpPortStatus.setCassetteControlJobID(new ObjectIdentifier());
                                }
                            } else {
                                eqpPortStatus.setCassetteControlJobID(
                                        new ObjectIdentifier(
                                                aCassetteControlJob.getIdentifier(), aCassetteControlJob.getPrimaryKey()));
                            }
                        } else {
                            eqpPortStatus.setCassetteControlJobID(new ObjectIdentifier());
                        }
                        List<Infos.LotOnPort> lotOnPorts = new ArrayList<>();
                        eqpPortStatus.setLotOnPorts(lotOnPorts);
                        List<MachineDTO.MachineCassetteLot> equipmentCassetteLots =
                                machineCassette.getMachineCassetteLots();
                        int lenMachineCasLot = CimArrayUtils.getSize(equipmentCassetteLots);
                        if (lenMachineCasLot > 0) {
                            for (MachineDTO.MachineCassetteLot machineCassetteLot : equipmentCassetteLots) {
                                Infos.LotOnPort lotOnPort = new Infos.LotOnPort();
                                lotOnPorts.add(lotOnPort);
                                lotOnPort.setMoveInFlag(machineCassetteLot.isOperationStartFlag());
                                lotOnPort.setMonitorLotFlag(machineCassetteLot.isMonitorLotFlag());
                                lotOnPort.setLotID(machineCassetteLot.getLotID());
                                CimLot aPosLot = baseCoreFactory.getBO(CimLot.class, machineCassetteLot.getLotID());
                                lotOnPort.setLotType(aPosLot.getLotType());
                                lotOnPort.setSubLotType(aPosLot.getSubLotType());
                            }
                            break;
                        }
                    }
                }

                // set wafer bonding (port top or base)
                eqpPortStatus.setWaferBondingPortType(
                        bondingGroupMethod.portWaferBodingTypeGetDR(objCommon, portID, equipmentID));
            }
        }
        return eqpPortInfo;
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param objCommon
     * @param equipmentID
     * @return com.fa.cim.dto.RetCode<java.util.List < com.fa.cim.pojo.Infos.PortID>>
     * @author Ho
     * @date 2018/11/14 14:00:42
     */
    @Override
    public List<Infos.PortID> equipmentAllCassetteOnPortForInternalBufferGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {

        List<Infos.PortID> tmpPortInfo = new ArrayList<>();

        String hFREQPEQP_ID = equipmentID.getValue();

        String sql =
                "SELECT\n"
                        + "	CARRIER_ID,\n"
                        + "	CARRIER_RKEY,\n"
                        + "	LOAD_PORT_ID\n"
                        + "FROM\n"
                        + "	OMEQP_CARRIER\n"
                        + "WHERE\n"
                        + "	REFKEY IN (\n"
                        + "		SELECT\n"
                        + "			ID\n"
                        + "		FROM\n"
                        + "			OMEQP\n"
                        + "		WHERE\n"
                        + "			EQP_ID = ?\n"
                        + "	)";

        List<Object[]> allObject = cimJpaRepository.query(sql, hFREQPEQP_ID);

        for (Object[] objects : allObject) {
            Object hFREQP_CASTCAST_ID = objects[0],
                    hFREQP_CASTCAST_OBJ = objects[1],
                    hFREQP_CASTLOAD_PORT_ID = objects[2];

            Infos.PortID portInfo = new Infos.PortID();
            tmpPortInfo.add(portInfo);
            portInfo.setPortID(new ObjectIdentifier((String) hFREQP_CASTLOAD_PORT_ID));
            portInfo.setCassetteID(
                    ObjectIdentifier.build(
                            (String) hFREQP_CASTCAST_ID, (String) hFREQP_CASTCAST_OBJ));
        }
        int lenTmpPortInfo = CimArrayUtils.getSize(tmpPortInfo);

        sql =
                "SELECT\n"
                        + "	RESIDING_MTRL_ID\n"
                        + "FROM\n"
                        + "	OMMATLOC\n"
                        + "WHERE\n"
                        + "	ENTITY_MGR IN (\n"
                        + "		SELECT\n"
                        + "			ID\n"
                        + "		FROM\n"
                        + "			OMEQPBUFFRES\n"
                        + "		WHERE\n"
                        + "			EQP_ID = ?\n"
                        + "	)";
        List<Object[]> objects1 = cimJpaRepository.query(sql, hFREQPEQP_ID);
        for (int i = 0; i < CimArrayUtils.getSize(objects1); i++) {
            String hFRMTRLLOCCONTAINED_MTRL_ID = (String) objects1.get(i)[0];
            if (CimStringUtils.isEmpty(hFRMTRLLOCCONTAINED_MTRL_ID)) {
                continue;
            }

            for (int j = 0; j < lenTmpPortInfo; j++) {
                if (CimStringUtils.equals(
                        ObjectIdentifier.fetchValue(tmpPortInfo.get(j).getCassetteID()),
                        hFRMTRLLOCCONTAINED_MTRL_ID)) {
                    tmpPortInfo.get(j).setPortID(null);
                    tmpPortInfo.get(j).setCassetteID(null);
                    break;
                }
            }
        }

        List<Infos.PortID> strPortInfo = new ArrayList<>();
        for (int i = 0; i < lenTmpPortInfo; i++) {
            if (!ObjectIdentifier.isEmpty(tmpPortInfo.get(i).getPortID())
                    || !ObjectIdentifier.isEmpty(tmpPortInfo.get(i).getCassetteID())) {
                Infos.PortID portInfo = new Infos.PortID();
                strPortInfo.add(portInfo);
                portInfo.setPortID(tmpPortInfo.get(i).getPortID());
                portInfo.setCassetteID(tmpPortInfo.get(i).getCassetteID());
            }
        }
        return strPortInfo;
    }

    @Override
    public Infos.EqpChamberInfo equipmentChamberInfoGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        log.debug("equipmentChamberInfoGetDR start");
        Infos.EqpChamberInfo eqpChamberInfo = new Infos.EqpChamberInfo();
        List<Infos.EqpChamberStatusInfo> eqpChamberStatusInfos = new ArrayList<>();
        eqpChamberInfo.setEqpChamberStatuses(eqpChamberStatusInfos);

        log.debug("step1 - query process resource from equipment {}", equipmentID);
        List<CimProcessResourceDO> processResources =
                cimJpaRepository.query(
                        "SELECT * FROM OMPROCRES WHERE EQP_ID = ?1 ORDER BY PROCRES_ID",
                        CimProcessResourceDO.class,
                        ObjectIdentifier.fetchValue(equipmentID));

        List<CimEquipmentContaminationDO> eqpContaminationByEqp =
                contaminationMethod.getEqpContaminationByEqp(equipmentID);

        log.debug("step2 - set params");
        log.trace("processResources is {}", processResources);
        if (!CimObjectUtils.isEmpty(processResources)) {
            for (CimProcessResourceDO processResource : processResources) {
                Infos.EqpChamberStatusInfo eqpChamberStatusInfo = new Infos.EqpChamberStatusInfo();
                eqpChamberStatusInfo.setChamberID(
                        new ObjectIdentifier(processResource.getProcessResourceId(), processResource.getId()));
                eqpChamberStatusInfo.setChamberStatusCode(
                        new ObjectIdentifier(
                                processResource.getEquipmentStateId(), processResource.getEquipmentStateobj()));
                eqpChamberStatusInfo.setChangeTimeStamp(
                        CimDateUtils.getTimestampAsString(processResource.getStateChangeTime()));
                eqpChamberStatusInfo.setChangeUserID(
                        new ObjectIdentifier(
                                processResource.getStateChangeUserId(), processResource.getStateChangeUserobj()));
                eqpChamberStatusInfo.setActualChangeTimeStamp(
                        CimDateUtils.getTimestampAsString(processResource.getActStateChangeTime()));
                StringBuilder contaminationList = new StringBuilder();
                boolean fisrtLoop = true;
                for (CimEquipmentContaminationDO equipmentContamination : eqpContaminationByEqp) {
                    if (CimStringUtils.equals(
                            equipmentContamination.getChamberID(), processResource.getProcessResourceId())) {
                        if (!fisrtLoop) {
                            contaminationList.append(", ");
                        }
                        contaminationList.append(equipmentContamination.getContaminationLevel());
                        fisrtLoop = false;
                    }
                }
                eqpChamberStatusInfo.setContaminationList(contaminationList.toString());
                List<CimEquipmentStateDO> equipmentStates =
                        cimJpaRepository.query(
                                "SELECT E10_STATE_ID, E10_STATE_RKEY, EQP_STATE_NAME, DESCRIPTION, EQP_AVAIL_FLAG FROM OMEQPST WHERE EQP_STATE_ID = ?1",
                                CimEquipmentStateDO.class,
                                processResource.getEquipmentStateId());
                Validations.check(
                        CimObjectUtils.isEmpty(equipmentStates), retCodeConfig.getNotFoundCategory());
                CimEquipmentStateDO equipmentState = equipmentStates.get(0);
                eqpChamberStatusInfo.setE10Status(
                        new ObjectIdentifier(equipmentState.getE10StateId(), equipmentState.getE10StateObj()));
                eqpChamberStatusInfo.setChamberStatusName(equipmentState.getEquipmentStateID());
                eqpChamberStatusInfo.setChamberStatusDescription(equipmentState.getDescription());
                eqpChamberStatusInfo.setChamberAvailableFlag(equipmentState.getAvailableFlag());

                List<CimEquipmentDO> equipments =
                        cimJpaRepository.query(
                                "SELECT ACTUAL_STATE_ID, ACTUAL_STATE_RKEY FROM OMEQP WHERE EQP_ID = ?1",
                                CimEquipmentDO.class,
                                ObjectIdentifier.fetchValue(equipmentID));
                if (!CimObjectUtils.isEmpty(equipments)) {
                    CimEquipmentDO equipment = equipments.get(0);
                    String lastEquipmentStateObj = equipment.getLastEquipmentStateObj();
                    if (!CimObjectUtils.isEmpty(lastEquipmentStateObj)) {
                        equipmentStates =
                                cimJpaRepository.query(
                                        "SELECT E10_STATE_ID, E10_STATE_RKEY, EQP_STATE_NAME, DESCRIPTION FROM OMEQPST WHERE ID = ?1",
                                        CimEquipmentStateDO.class,
                                        lastEquipmentStateObj);
                        if (!CimObjectUtils.isEmpty(equipmentStates)) {
                            eqpChamberStatusInfo.setActualStatusCode(
                                    new ObjectIdentifier(
                                            equipment.getLastEquipmentStateID(), equipment.getLastEquipmentStateObj()));
                            eqpChamberStatusInfo.setActualE10Status(
                                    new ObjectIdentifier(
                                            equipmentState.getE10StateId(), equipmentState.getE10StateObj()));
                            eqpChamberStatusInfo.setActualStatusName(equipmentState.getEquipmentStateID());
                            eqpChamberStatusInfo.setActualStatusDescription(equipmentState.getDescription());
                        }
                    }
                }
                eqpChamberStatusInfos.add(eqpChamberStatusInfo);
            }
        }
        return eqpChamberInfo;
    }

    @Override
    public Infos.EqpStockerInfo equipmentStockerInfoGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        List<Infos.EqpStockerStatus> eqpStockerStatuses = new ArrayList<>();
        if (CimStringUtils.isEmpty(ObjectIdentifier.fetchReferenceKey(equipmentID))) {
            CimMachine equipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
            equipmentID.setReferenceKey(equipment.getPrimaryKey());
        }
        List<CimEquipmentStockerDO> equipmentStockers =
                cimJpaRepository.query(
                        "SELECT STOCKER_RKEY, IDX_NO FROM OMEQP_STOCKER WHERE REFKEY = ?1 ORDER BY IDX_NO",
                        CimEquipmentStockerDO.class,
                        ObjectIdentifier.fetchReferenceKey(equipmentID));
        if (!CimObjectUtils.isEmpty(equipmentStockers)) {
            for (CimEquipmentStockerDO equipmentStocker : equipmentStockers) {
                // mos FRSTK table did not have STK_OBJ Column so we use stk_id fetch the StockerDo
                CimStockerDO exampleStk = new CimStockerDO();
                exampleStk.setStockerID(equipmentStocker.getStockerID());
                List<CimStockerDO> stockers = cimJpaRepository.findAll(Example.of(exampleStk));
                Validations.check(CimObjectUtils.isEmpty(stockers), retCodeConfig.getNotFoundStocker());
                Infos.EqpStockerStatus eqpStockerStatus = new Infos.EqpStockerStatus();
                CimStockerDO stocker = stockers.get(0);
                eqpStockerStatus.setStockerID(
                        new ObjectIdentifier(stocker.getStockerID(), stocker.getId()));
                eqpStockerStatus.setStockerType(stocker.getStockerType());
                eqpStockerStatus.setE10Status(stocker.getCurE10State());
                eqpStockerStatus.setStockerStatus(
                        new ObjectIdentifier(stocker.getCurStateId(), stocker.getCurStateObj()));
                eqpStockerStatus.setStockerPriority(equipmentStocker.getSequenceNumber().toString());
                eqpStockerStatus.setOhbFlag(false);
                eqpStockerStatus.setMaxOHBFlag(0);
                eqpStockerStatuses.add(eqpStockerStatus);
            }
        }
        Infos.EqpStockerInfo eqpStockerInfo = new Infos.EqpStockerInfo();
        eqpStockerInfo.setEqpStockerStatusList(eqpStockerStatuses);
        return eqpStockerInfo;
    }

    @Override
    public List<Infos.EqpInprocessingControlJob> equipmentInprocessingControlJobInfoGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        List<Infos.EqpInprocessingControlJob> eqpInprocessingControlJobs = new ArrayList<>();
        List<CimEquipmentDO> equipments =
                cimJpaRepository.query(
                        "SELECT ID FROM OMEQP WHERE EQP_ID=?1",
                        CimEquipmentDO.class,
                        ObjectIdentifier.fetchValue(equipmentID));
        Validations.check(CimObjectUtils.isEmpty(equipments), retCodeConfig.getNotFoundEquipment());

        CimEquipmentLotDO exapmle = new CimEquipmentLotDO();
        exapmle.setReferenceKey(equipments.get(0).getId());
        List<CimEquipmentLotDO> equipmentLots = cimJpaRepository.findAll(Example.of(exapmle));

        Map<String, Integer> controlJobMap = new HashMap<>();
        for (CimEquipmentLotDO equipmentLot : equipmentLots) {
            Infos.EqpInprocessingControlJob eqpInprocessingControlJob;
            String controlJobId = equipmentLot.getControlJobObj();
            String controlJobID = equipmentLot.getControlJobID();
            if (!controlJobMap.containsKey(controlJobId)) {
                controlJobMap.put(controlJobId, controlJobMap.size());
                eqpInprocessingControlJob = new Infos.EqpInprocessingControlJob();
                eqpInprocessingControlJob.setControlJobID(
                        ObjectIdentifier.build(controlJobID, controlJobId));
                eqpInprocessingControlJob.setEqpInprocessingLotList(new ArrayList<>());
                eqpInprocessingControlJobs.add(eqpInprocessingControlJob);
            } else {
                eqpInprocessingControlJob = eqpInprocessingControlJobs.get(controlJobMap.get(controlJobId));
            }

            Infos.EqpInprocessingLot eqpInprocessingLot = new Infos.EqpInprocessingLot();
            eqpInprocessingLot.setLotID(
                    ObjectIdentifier.build(
                            equipmentLot.getLotID(), equipmentLot.getLotObj()));
            eqpInprocessingLot.setUnloadPortID(
                    ObjectIdentifier.build(
                            equipmentLot.getUnloadPortID(), equipmentLot.getUnloadPortObj()));
            eqpInprocessingLot.setCassetteID(
                    ObjectIdentifier.build(
                            equipmentLot.getCassetteID(), equipmentLot.getCassetteObj()));
            eqpInprocessingLot.setEdcRequiredFlag(equipmentLot.getDataCollectionRequirementFlag());

            eqpInprocessingLot.setUnloadSequenceNumber(equipmentLot.getLoadSequenceNumber());

            CimLotDO example = new CimLotDO();
            example.setLotID(equipmentLot.getLotID());
            CimLotDO lot = cimJpaRepository.findOne(Example.of(example)).orElse(null);
            if (lot != null) {
                eqpInprocessingLot.setHoldState(lot.getLotHoldState());
            }

            String unloadPortID = equipmentLot.getUnloadPortID();
            if (!CimObjectUtils.isEmpty(unloadPortID)) {
                List<CimPortDO> ports =
                        cimJpaRepository.query(
                                "SELECT ASSOCIATED_PORT_ID, ASSOCIATED_PORT_RKEY FROM OMPORT WHERE EQP_ID = ?1 AND PORT_ID = ?2",
                                CimPortDO.class,
                                ObjectIdentifier.fetchValue(equipmentID),
                                unloadPortID);
                if (!CimObjectUtils.isEmpty(ports)) {
                    eqpInprocessingLot.setLoadPortID(
                            new ObjectIdentifier(
                                    ports.get(0).getAssociatedPortID(), ports.get(0).getAssociatedPortObj()));
                }
            }
            eqpInprocessingControlJob.getEqpInprocessingLotList().add(eqpInprocessingLot);
        }
        return eqpInprocessingControlJobs;
    }

    @Override
    public List<Infos.StartReservedControlJobInfo> equipmentReservedControlJobIDGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        List<Infos.StartReservedControlJobInfo> startReservedControlJobInfos = new ArrayList<>();
        CimControlJobDO cimControlJobExample = new CimControlJobDO();
        cimControlJobExample.setEquipmentID(ObjectIdentifier.fetchValue(equipmentID));
        cimControlJobExample.setReservedFlag(true);
        List<CimControlJobDO> controlJobs = cimJpaRepository.findAll(Example.of(cimControlJobExample));
        for (CimControlJobDO controlJob : controlJobs) {
            Infos.StartReservedControlJobInfo startReservedControlJobInfo =
                    new Infos.StartReservedControlJobInfo();
            startReservedControlJobInfo.setControlJobID(
                    new ObjectIdentifier(controlJob.getControlJobID(), controlJob.getId()));
            startReservedControlJobInfo.setPortGroupID(controlJob.getPortGroup());
            startReservedControlJobInfos.add(startReservedControlJobInfo);
        }
        return startReservedControlJobInfos;
    }

    @Override
    public List<Infos.StartReservedControlJobInfo> equipmentReservedControlJobIDGet(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        /*------------------------*/
        /*   Get Machine Object   */
        /*------------------------*/
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                aMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        /*-----------------------------------*/
        /*   Get Start Reserved ControlJob   */
        /*-----------------------------------*/
        List<com.fa.cim.newcore.bo.product.CimControlJob> controlJobList =
                aMachine.allStartReservedControlJobs();
        /*----------------------------------------------*/
        /*   Set Control Job Info to Return Structure   */
        /*----------------------------------------------*/
        int cjLen = CimArrayUtils.getSize(controlJobList);
        List<Infos.StartReservedControlJobInfo> startReservedControlJobInfoList = new ArrayList<>();
        if (cjLen > 0) {
            for (com.fa.cim.newcore.bo.product.CimControlJob cimControlJob : controlJobList) {
                Validations.check(cimControlJob == null, retCodeConfig.getNotFoundControlJob());
                Infos.StartReservedControlJobInfo startReservedControlJobInfo =
                        new Infos.StartReservedControlJobInfo();
                startReservedControlJobInfoList.add(startReservedControlJobInfo);
                startReservedControlJobInfo.setControlJobID(
                        new ObjectIdentifier(cimControlJob.getIdentifier(), cimControlJob.getPrimaryKey()));
                startReservedControlJobInfo.setPortGroupID(cimControlJob.getPortGroup());
            }
        }
        return startReservedControlJobInfoList;
    }

    @Override
    public List<Infos.EntityInhibitAttributes> equipmentFillInTxEQQ004(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, List<ObjectIdentifier> chamberIDs) {
        Infos.EntityInhibitAttributes entityInhibitAttributes = new Infos.EntityInhibitAttributes();
        List<Infos.EntityIdentifier> entityIdentifiers = new ArrayList<>();

        Infos.EntityIdentifier entityIdentifier =
                new Infos.EntityIdentifier(BizConstant.SP_INHIBITCLASSID_EQUIPMENT, equipmentID, "");
        entityIdentifiers.add(entityIdentifier);
        int chamberLen = CimArrayUtils.getSize(chamberIDs);
        for (int i = 0; i < chamberLen; i++) {
            ObjectIdentifier chamberID = chamberIDs.get(i);
            Infos.EntityIdentifier tempEntityIdentifier =
                    new Infos.EntityIdentifier(
                            BizConstant.SP_INHIBITCLASSID_CHAMBER,
                            equipmentID,
                            ObjectIdentifier.fetchValue(chamberID));
            entityIdentifiers.add(tempEntityIdentifier);
        }
        entityInhibitAttributes.setEntities(entityIdentifiers);

        // step1 - entityInhibit_CheckForEntities
        Infos.EntityInhibitCheckForEntitiesOut strEntityInhibitCheckForEntitiesOut =
                constraintMethod.constraintCheckForEntities(objCommon, entityInhibitAttributes);

        int eLen = CimArrayUtils.getSize(strEntityInhibitCheckForEntitiesOut.getEntityInhibitInfo());

        List<Infos.EntityInhibitAttributes> entityInhibitions = new ArrayList<>();
        for (int i = 0; i < eLen; i++) {
            entityInhibitions.add(
                    strEntityInhibitCheckForEntitiesOut
                            .getEntityInhibitInfo()
                            .get(i)
                            .getEntityInhibitAttributes());
        }
        return entityInhibitions;
    }

    @Override
    public List<Infos.EqpMonitorDetailInfo> eqpMonitorListGetDR(
            Inputs.ObjEqpMonitorListGetDRIn objEqpMonitorListGetDRIn, Infos.ObjCommon objCommon) {
        if (null == objEqpMonitorListGetDRIn) return Collections.emptyList();
        String sql = "select * from OMAMPLAN where 1=1";
        if (!ObjectIdentifier.isEmpty(objEqpMonitorListGetDRIn.getEquipmentID())) {
            sql =
                    String.format(
                            sql + " and  EQP_ID = '%s'",
                            ObjectIdentifier.fetchValue(objEqpMonitorListGetDRIn.getEquipmentID()));
        }
        if (!ObjectIdentifier.isEmpty(objEqpMonitorListGetDRIn.getChamberID())) {
            sql =
                    String.format(
                            sql + " and  CHAMBER_ID = '%s'",
                            ObjectIdentifier.fetchValue(objEqpMonitorListGetDRIn.getChamberID()));
        }
        if (!ObjectIdentifier.isEmpty(objEqpMonitorListGetDRIn.getEqpMonitorID())) {
            sql =
                    String.format(
                            sql + " and  AM_PLAN_ID = '%s'",
                            ObjectIdentifier.fetchValue(objEqpMonitorListGetDRIn.getEqpMonitorID()));
        }
        List<CimEquipmentMonitorDO> list = cimJpaRepository.query(sql, CimEquipmentMonitorDO.class);
        List<Infos.EqpMonitorDetailInfo> eqpMonitorDetailInfos = new ArrayList<>();
        if (CimArrayUtils.isNotEmpty(list)) {
            for (CimEquipmentMonitorDO m : list) {
                Infos.EqpMonitorDetailInfo eqpMonitorDetailInfo = new Infos.EqpMonitorDetailInfo();
                eqpMonitorDetailInfo.setEqpMonitorID(
                        new ObjectIdentifier(m.getEquipmentMonitorID(), m.getId()));
                eqpMonitorDetailInfo.setEquipmentID(
                        new ObjectIdentifier(m.getEquipmentID(), m.getEquipmentObj()));
                eqpMonitorDetailInfo.setChamberID(
                        new ObjectIdentifier(m.getChamberID(), m.getChamberObj()));
                eqpMonitorDetailInfo.setDescription(m.getDescription());
                eqpMonitorDetailInfo.setMonitorType(m.getMonitorType());
                eqpMonitorDetailInfo.setScheduleType(m.getMonitorType());
                eqpMonitorDetailInfo.setStartTimeStamp(m.getStartTime());
                eqpMonitorDetailInfo.setExecutionInterval(m.getExecutionInterval());
                eqpMonitorDetailInfo.setWarningInterval(m.getWarningInterval());
                eqpMonitorDetailInfo.setExpirationInterval(m.getExpirationInterval());
                eqpMonitorDetailInfo.setKitFlag(m.getKitFlag());
                eqpMonitorDetailInfo.setMaxRetryCount(m.getMaxRetryCount());
                eqpMonitorDetailInfo.setMonitorStatus(m.getMonitorStatus());
                eqpMonitorDetailInfo.setWarningTime(m.getWarningTime());
                eqpMonitorDetailInfo.setScheduleBaseTimeStamp(
                        CimDateUtils.getTimestampAsString(m.getScheduleBaseTime()));
                eqpMonitorDetailInfo.setScheduleAdjustment(m.getScheduleAdjustment());
                eqpMonitorDetailInfo.setLastMonitorTimeStamp(m.getLastMonitorTime().toString());
                eqpMonitorDetailInfo.setLastMonitorResult(m.getLastMonitorResult());
                eqpMonitorDetailInfo.setLastMonitorPassedTimeStamp(m.getLastMonitorPassedTime());
                eqpMonitorDetailInfo.setLastClaimedTimeStamp(m.getClaimTime());
                eqpMonitorDetailInfo.setLastClaimedUser(
                        new ObjectIdentifier(m.getClaimUserId(), m.getClaimUserObj()));
                if (!CimStringUtils.isEmpty(m.getStartEquipmentStateID())) {
                    CimEquipmentStateDO equipmentState =
                            cimJpaRepository.queryOne(
                                    "SELECT * FROM OMEQPST WHERE EQP_STATE_ID = ?1",
                                    CimEquipmentStateDO.class,
                                    m.getStartEquipmentStateID());
                    Validations.check(null == equipmentState, retCodeConfig.getNotFoundEqpState());
                    Infos.EqpStatus eqpStatus = new Infos.EqpStatus();
                    eqpStatus.setEquipmentStatusCode(
                            new ObjectIdentifier(m.getStartEquipmentStateID(), m.getStartEquipmentStateObj()));
                    eqpStatus.setE10Status(
                            new ObjectIdentifier(
                                    equipmentState.getE10StateId(), equipmentState.getE10StateObj()));
                    eqpMonitorDetailInfo.setEqpStateAtStart(eqpStatus);
                }
                if (!CimStringUtils.isEmpty(m.getPassEquipmentStateID())) {
                    CimEquipmentStateDO equipmentState =
                            cimJpaRepository.queryOne(
                                    "SELECT * FROM OMEQPST WHERE EQP_STATE_ID = ?1",
                                    CimEquipmentStateDO.class,
                                    m.getPassEquipmentStateID());
                    Validations.check(null == equipmentState, retCodeConfig.getNotFoundEqpState());
                    Infos.EqpStatus eqpStatus = new Infos.EqpStatus();
                    eqpStatus.setEquipmentStatusCode(
                            new ObjectIdentifier(m.getPassEquipmentStateID(), m.getPassEquipmentStateObj()));
                    eqpStatus.setE10Status(
                            new ObjectIdentifier(
                                    equipmentState.getE10StateId(), equipmentState.getE10StateObj()));
                    eqpMonitorDetailInfo.setEqpStateAtPassed(eqpStatus);
                }
                if (!CimStringUtils.isEmpty(m.getFailEquipmentStateID())) {
                    CimEquipmentStateDO equipmentState =
                            cimJpaRepository.queryOne(
                                    "SELECT * FROM OMEQPST WHERE EQP_STATE_ID = ?1",
                                    CimEquipmentStateDO.class,
                                    m.getFailEquipmentStateID());
                    Validations.check(null == equipmentState, retCodeConfig.getNotFoundEqpState());
                    Infos.EqpStatus eqpStatus = new Infos.EqpStatus();
                    eqpStatus.setEquipmentStatusCode(
                            new ObjectIdentifier(m.getFailEquipmentStateID(), m.getFailEquipmentStateObj()));
                    eqpStatus.setE10Status(
                            new ObjectIdentifier(
                                    equipmentState.getE10StateId(), equipmentState.getE10StateObj()));
                    eqpMonitorDetailInfo.setEqpStateAtFailed(eqpStatus);
                }
                // ---------------------------------------------------------------------------------
                //   Get product list of EqpMonitor Information.
                // ---------------------------------------------------------------------------------
                CimEquipmentMonitorProductSpecDO example = new CimEquipmentMonitorProductSpecDO();
                example.setReferenceKey(m.getId());
                List<CimEquipmentMonitorProductSpecDO> equipmentMonitorProductSpecs =
                        cimJpaRepository.findAll(Example.of(example));
                int eqpMonitorProdSpecSize = CimArrayUtils.getSize(equipmentMonitorProductSpecs);
                List<Infos.EqpMonitorProductInfo> eqpMonitorProductInfos = new ArrayList<>();
                for (int i = 0; i < eqpMonitorProdSpecSize; i++) {
                    CimEquipmentMonitorProductSpecDO e = equipmentMonitorProductSpecs.get(i);
                    Infos.EqpMonitorProductInfo eqpMonitorProductInfo = new Infos.EqpMonitorProductInfo();
                    eqpMonitorProductInfo.setProductID(
                            new ObjectIdentifier(e.getProdspecID(), e.getProdspecObj()));
                    eqpMonitorProductInfo.setRecipeID(
                            new ObjectIdentifier(e.getRecipeID(), e.getRecipeObj()));
                    eqpMonitorProductInfo.setWaferCount(e.getWaferCount());
                    eqpMonitorProductInfo.setStartSeqNo(e.getStartSequenceNumber());
                    eqpMonitorProductInfos.add(eqpMonitorProductInfo);
                }
                eqpMonitorDetailInfo.setStrEqpMonitorProductInfoSeq(eqpMonitorProductInfos);

                // ---------------------------------------------------------------------------------
                //   Get action list of EqpMonitor Information.
                // ---------------------------------------------------------------------------------
                CimEquipmentMonitorActionDO exampleAC = new CimEquipmentMonitorActionDO();
                exampleAC.setReferenceKey(m.getId());
                List<CimEquipmentMonitorActionDO> equipmentMonitorActions =
                        cimJpaRepository.findAll(Example.of(exampleAC));
                int eqpMonitorActionSize = CimArrayUtils.getSize(equipmentMonitorActions);
                List<Infos.EqpMonitorActionInfo> eqpMonitorActionInfos = new ArrayList<>();
                for (int i = 0; i < eqpMonitorActionSize; i++) {
                    CimEquipmentMonitorActionDO e = equipmentMonitorActions.get(i);
                    Infos.EqpMonitorActionInfo eqpMonitorActionInfo = new Infos.EqpMonitorActionInfo();
                    eqpMonitorActionInfo.setEventType(e.getEventType());
                    eqpMonitorActionInfo.setAction(e.getAction());
                    eqpMonitorActionInfo.setReasonCodeID(
                            new ObjectIdentifier(e.getReasonCode(), e.getReasonCodeObj()));
                    eqpMonitorActionInfo.setSysMessageCodeID(
                            new ObjectIdentifier(e.getSysmessageID(), e.getSysmessageObj()));
                    eqpMonitorActionInfos.add(eqpMonitorActionInfo);
                }
                eqpMonitorDetailInfo.setStrEqpMonitorActionInfoSeq(eqpMonitorActionInfos);
                eqpMonitorDetailInfos.add(eqpMonitorDetailInfo);
            }
        }

        // --------------------------
        // Return to Caller
        // --------------------------
        return eqpMonitorDetailInfos;
    }

    @Override
    public Outputs.ObjEquipmentBankIDGetOut equipmentBankIDGet(
            Infos.ObjCommon objCommon, ObjectIdentifier eqpID) {
        Outputs.ObjEquipmentBankIDGetOut result = new Outputs.ObjEquipmentBankIDGetOut();

        // 【step1】get pmcmg object
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, eqpID);
        Validations.check(
                null == aMachine, new OmCode(retCodeConfig.getNotFoundEqp(), eqpID.getValue()));
        List<MachineDTO.ControlLotBank> equipmentControlLotBanks = aMachine.allControlLotBanks();
        int size =
                CimArrayUtils.isEmpty(equipmentControlLotBanks) ? 0 : equipmentControlLotBanks.size();
        for (int i = 0; i < size; i++) {
            MachineDTO.ControlLotBank equipmentControlLotBank = equipmentControlLotBanks.get(i);
            if (CimStringUtils.equals(
                    BizConstant.SP_CONTROLLOTTYPE_FILLERDUMMY, equipmentControlLotBank.getControlLotType())) {
                result.setFillerDummyBankID(equipmentControlLotBank.getBankID());
            }
            if (CimStringUtils.equals(
                    BizConstant.SP_CONTROLLOTTYPE_SIDEDUMMYLOT,
                    equipmentControlLotBank.getControlLotType())) {
                result.setSideDummyBankID(equipmentControlLotBank.getBankID());
            }
            if (CimStringUtils.equals(
                    BizConstant.SP_CONTROLLOTTYPE_WAITINGMONITORLOT,
                    equipmentControlLotBank.getControlLotType())) {
                result.setMonitorBankID(equipmentControlLotBank.getBankID());
            }
        }
        return result;
    }

    @Override
    public void equipmentLoadLotAdd(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            ObjectIdentifier cassetteID,
            ObjectIdentifier portID,
            String loadPurposeType,
            List<Infos.LoadingVerifiedLot> loadingVerifiedLots) {
        com.fa.cim.newcore.bo.durable.CimCassette aCassette =
                baseCoreFactory.getBO(com.fa.cim.newcore.bo.durable.CimCassette.class, cassetteID);
        if (!SorterHandler.containsFOSB(cassetteID)) {
            Validations.check(
                    aCassette == null,
                    new OmCode(retCodeConfig.getNotFoundCassette(), cassetteID.getValue()));
        }
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                aMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        PortResource aTmpPortResource = null;
        if (CimStringUtils.isEmpty(portID.getReferenceKey())) {
            if (CimStringUtils.isEmpty(portID.getValue())) {
                throw new ServiceException(new OmCode(retCodeConfig.getNotFoundPort(), "*****"));
            } else {
                aTmpPortResource = aMachine.findPortResourceNamed(portID.getValue());
            }
        } else {
            aTmpPortResource = baseCoreFactory.getBO(CimPortResource.class, portID.getReferenceKey());
        }
        Validations.check(
                aTmpPortResource == null, new OmCode(retCodeConfig.getNotFoundPort(), portID.getValue()));
        CimPortResource aPortResource = (CimPortResource) aTmpPortResource;
        Validations.check(
                aPortResource == null,
                new OmCode(retCodeConfig.getNotFoundPortResource(), equipmentID.getValue()));
        List<MaterialLocation> strMaterialLocations = aPortResource.allMaterialLocations();
        int MLen = CimArrayUtils.getSize(strMaterialLocations);
        boolean isNotOccupiedFlag = false;
        boolean materialLocationFound = false;
        for (int i = 0; i < MLen; i++) {
            MaterialLocation materialLocation = strMaterialLocations.get(i);
            isNotOccupiedFlag = materialLocation.isNotOccupied();
            if (isNotOccupiedFlag) {
                materialLocation.materialReceived(aCassette);
                materialLocationFound = true;
                break;
            }
        }
        Validations.check(
                !materialLocationFound,
                new OmCode(retCodeConfig.getMaterialLocationNotAvailable(), portID.getValue()));
        // create a posMachineCassette record
        MachineDTO.MachineCassette aMachineCassette = new MachineDTO.MachineCassette();
        aMachineCassette.setLoadPortID(
                new ObjectIdentifier(portID.getValue(), aPortResource.getPrimaryKey()));
        if (!SorterHandler.containsFOSB(cassetteID)) {
            aMachineCassette.setCassetteID(
                    new ObjectIdentifier(cassetteID.getValue(), aCassette.getPrimaryKey()));
        } else {
            aMachineCassette.setCassetteID(new ObjectIdentifier(cassetteID.getValue(), null));
        }
        CimPortResource aUnloadPortResource = aPortResource.getAssociatedPort();
        aMachineCassette.setUnloadPortID(
                new ObjectIdentifier(
                        aUnloadPortResource.getIdentifier(), aUnloadPortResource.getPrimaryKey()));
        aMachineCassette.setStatus(BizConstant.SP_MC_LOT_LOADED);
        aMachineCassette.setLoadPurposeType(loadPurposeType);
        int LotLen = CimArrayUtils.getSize(loadingVerifiedLots);
        List<MachineDTO.MachineCassetteLot> machineCassetteLots = new ArrayList<>();
        aMachineCassette.setMachineCassetteLots(machineCassetteLots);
        for (int cCnt = 0; cCnt < LotLen; cCnt++) {
            MachineDTO.MachineCassetteLot machineCassetteLot = new MachineDTO.MachineCassetteLot();
            machineCassetteLots.add(machineCassetteLot);
            machineCassetteLot.setLotID(loadingVerifiedLots.get(cCnt).getLotID());
            machineCassetteLot.setOperationStartFlag(loadingVerifiedLots.get(cCnt).getMoveInFlag());
            machineCassetteLot.setMonitorLotFlag(loadingVerifiedLots.get(cCnt).getMonitorLotFlag());
        }
        aMachine.addCassette(aMachineCassette);
        if (CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_FILLERDUMMY)
                || CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_SIDEDUMMYLOT)
                || CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_WAITINGMONITORLOT)
                || CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_INTERNALBUFFER)) {
            int seqLen = CimArrayUtils.getSize(loadingVerifiedLots);
            for (int j = 0; j < seqLen; j++) {
                Infos.LoadingVerifiedLot loadingVerifiedLot = loadingVerifiedLots.get(j);
                if (!ObjectIdentifier.isEmptyWithValue(loadingVerifiedLot.getLotID())) {
                    CimLot aLot = baseCoreFactory.getBO(CimLot.class, loadingVerifiedLot.getLotID());
                    Validations.check(
                            aLot == null,
                            new OmCode(retCodeConfig.getNotFoundLot(), loadingVerifiedLot.getLotID().getValue()));
                    boolean bInBank = true;
                    if (CimStringUtils.equals(
                            loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_INTERNALBUFFER)) {
                        bInBank = aLot.isInBank();
                    }
                    if (bInBank) {
                        aLot.makeInUse();
                    }
                }
            }
        }
        com.fa.cim.newcore.bo.durable.CimCassette aDummyCassette = null;
        /*------------------------------*/
        /*       Get Equipment Mode     */
        /*------------------------------*/
        Outputs.ObjPortResourceCurrentOperationModeGetOut objPortResourceCurrentOperationModeGetOut =
                portMethod.portResourceCurrentOperationModeGet(objCommon, equipmentID, portID);
        if (CimStringUtils.equals(
                BizConstant.SP_EQP_ONLINEMODE_OFFLINE,
                objPortResourceCurrentOperationModeGetOut.getOperationMode().getOnlineMode())) {
            /*--------------------------------------*/
            /*       Get Port Resource Object       */
            /*--------------------------------------*/
            aPortResource.setDispatchLoadCassette(aDummyCassette);
        }
    }

    @Override
    public void equipmentCheckAvail(Infos.ObjCommon objCommon, ObjectIdentifier eqpID) {
        boolean isStorageBool = false;
        Machine aBaseMachine = null;
        if (ObjectIdentifier.isEmptyWithRefKey(eqpID)) {
            Validations.check(
                    ObjectIdentifier.isEmptyWithValue(eqpID),
                    new OmCode(retCodeConfig.getNotFoundEqp(), "*****"));
            aBaseMachine = newMachineManager.findMachineNamed(eqpID.getValue());
            if (aBaseMachine == null) {
                aBaseMachine = newMachineManager.findStorageMachineNamed(eqpID.getValue());
                Validations.check(
                        aBaseMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), eqpID.getValue()));
                isStorageBool = aBaseMachine.isStorageMachine();
            }
        } else {
            aBaseMachine = baseCoreFactory.getBO(CimMachine.class, eqpID.getReferenceKey());
            if (aBaseMachine == null) {
                aBaseMachine = baseCoreFactory.getBO(CimStorageMachine.class, eqpID.getReferenceKey());
            }
            Validations.check(
                    aBaseMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), eqpID.getValue()));
            isStorageBool = aBaseMachine.isStorageMachine();
        }
        CimMachine aPosMachine = null;
        CimStorageMachine aStorageMachine = null;
        if (isStorageBool) {
            aStorageMachine = (CimStorageMachine) aBaseMachine;
            if (aStorageMachine.isAvailableState()) {
                return;
            } else {
                throw new ServiceException(retCodeConfig.getEquipmentNotAvailableStat());
            }
        } else {
            aPosMachine = (CimMachine) aBaseMachine;
            if (aPosMachine.isAvailableState()) {
                return;
            } else {
                throw new ServiceException(retCodeConfig.getEquipmentNotAvailableStat());
            }
        }
    }

    @Override
    public Outputs.ObjEquipmentProcessBatchConditionGetOut equipmentProcessBatchConditionGet(
            Infos.ObjCommon objCommon, ObjectIdentifier eqpID) {
        Outputs.ObjEquipmentProcessBatchConditionGetOut objEquipmentProcessBatchConditionGetOut =
                new Outputs.ObjEquipmentProcessBatchConditionGetOut();
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, eqpID);
        Validations.check(
                null == aMachine, new OmCode(retCodeConfig.getNotFoundEqp(), eqpID.getValue()));
        objEquipmentProcessBatchConditionGetOut.setMaxBatchSize(
                CimNumberUtils.longValue(aMachine.getProcessRunSizeMaximum()));
        objEquipmentProcessBatchConditionGetOut.setMinBatchSize(
                CimNumberUtils.longValue(aMachine.getProcessRunSizeMinimum()));
        objEquipmentProcessBatchConditionGetOut.setMinWaferSize(
                CimNumberUtils.longValue(aMachine.getMinimumWaferCount()));
        objEquipmentProcessBatchConditionGetOut.setCassetteExchangeFlag(
                CimBooleanUtils.isTrue(aMachine.isCassetteChangeRequired()));
        objEquipmentProcessBatchConditionGetOut.setMonitorCreationFlag(
                CimBooleanUtils.isTrue(aMachine.isMonitorCreation()));
        return objEquipmentProcessBatchConditionGetOut;
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param strObjCommonIn
     * @param equipmentID
     * @param strStartCassette
     * @return com.fa.cim.dto.RetCode<java.lang.Object>
     * @author Ho
     * @date 2018/10/31 15:52:40
     */
    @Override
    public void equipmentPortStateCheckForOpeStartForInternalBuffer(
            Infos.ObjCommon strObjCommonIn,
            ObjectIdentifier equipmentID,
            List<Infos.StartCassette> strStartCassette) {
        // ---------------------------------
        //  Get Eqp Internal Buffer Info
        // ---------------------------------
        // step1 - equipment_internalBufferInfo_Get
        List<Infos.EqpInternalBufferInfo> equipmentInternalBufferInfoList =
                this.equipmentInternalBufferInfoGet(strObjCommonIn, equipmentID);
        int SCLength = CimArrayUtils.getSize(strStartCassette);
        for (int i = 0; i < SCLength; i++) {
            Infos.StartCassette startCassette = strStartCassette.get(i);
            String eqpInfoLoadPurposeType = null;
            boolean bCassetteFoundInBuffer = false;
            int nBufferCategoryLen = CimArrayUtils.getSize(equipmentInternalBufferInfoList);
            for (int bi = 0; bi < nBufferCategoryLen; bi++) {
                List<Infos.ShelfInBuffer> strShelfInBuffer =
                        equipmentInternalBufferInfoList.get(bi).getShelfInBufferList();
                int nShelfLen = CimArrayUtils.getSize(strShelfInBuffer);
                for (int bj = 0; bj < nShelfLen; bj++) {
                    if (ObjectIdentifier.equalsWithValue(
                            startCassette.getCassetteID(), strShelfInBuffer.get(bj).getLoadedCarrierID())) {
                        bCassetteFoundInBuffer = true;
                        eqpInfoLoadPurposeType = equipmentInternalBufferInfoList.get(bi).getBufferCategory();
                        break;
                    }
                }
            }
            Validations.check(!bCassetteFoundInBuffer, retCodeConfig.getInvalidCassettePortCombination());

            if (CimStringUtils.equals(eqpInfoLoadPurposeType, BizConstant.SP_LOADPURPOSETYPE_OTHER)) {
            } else if (CimStringUtils.equals(
                    eqpInfoLoadPurposeType, BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT)) {
                if (!CimStringUtils.equals(
                        startCassette.getLoadPurposeType(), BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT)
                        && !CimStringUtils.equals(
                        startCassette.getLoadPurposeType(),
                        BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT)) {
                    throw new ServiceException(
                            new OmCode(
                                    retCodeConfig.getNotSameLoadPurpose(),
                                    ObjectIdentifier.fetchValue(startCassette.getCassetteID()),
                                    startCassette.getLoadPurposeType(),
                                    ObjectIdentifier.fetchValue(startCassette.getLoadPortID()),
                                    eqpInfoLoadPurposeType));
                }
            } else if (CimStringUtils.equals(
                    eqpInfoLoadPurposeType, BizConstant.SP_LOADPURPOSETYPE_ANY)) {
                if (CimStringUtils.equals(
                        startCassette.getLoadPurposeType(), BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT)
                        || CimStringUtils.equals(
                        startCassette.getLoadPurposeType(),
                        BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT)
                        || CimStringUtils.equals(
                        startCassette.getLoadPurposeType(), BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE)) {
                } else {
                    throw new ServiceException(
                            new OmCode(
                                    retCodeConfig.getNotSameLoadPurpose(),
                                    ObjectIdentifier.fetchValue(startCassette.getCassetteID()),
                                    startCassette.getLoadPurposeType(),
                                    ObjectIdentifier.fetchValue(startCassette.getLoadPortID()),
                                    eqpInfoLoadPurposeType));
                }
            } else if (CimStringUtils.equals(
                    eqpInfoLoadPurposeType, startCassette.getLoadPurposeType())) {
            } else {
                throw new ServiceException(
                        new OmCode(
                                retCodeConfig.getNotSameLoadPurpose(),
                                ObjectIdentifier.fetchValue(startCassette.getCassetteID()),
                                startCassette.getLoadPurposeType(),
                                ObjectIdentifier.fetchValue(startCassette.getLoadPortID()),
                                eqpInfoLoadPurposeType));
            }
        }

        // step2 - equipment_bankID_Get
        Outputs.ObjEquipmentBankIDGetOut strEquipment_bankID_Get_out =
                this.equipmentBankIDGet(strObjCommonIn, equipmentID);
        String fillerDummyBankIdentifier =
                ObjectIdentifier.fetchValue(strEquipment_bankID_Get_out.getFillerDummyBankID());
        String sideDummyBankIdentifier =
                ObjectIdentifier.fetchValue(strEquipment_bankID_Get_out.getSideDummyBankID());
        String monitorBankIdentifier =
                ObjectIdentifier.fetchValue(strEquipment_bankID_Get_out.getMonitorBankID());

        int nILen = CimArrayUtils.getSize(strStartCassette);
        for (int i = 0; i < nILen; i++) {
            Infos.StartCassette startCassette = strStartCassette.get(i);
            if (CimStringUtils.equals(
                    startCassette.getLoadPurposeType(), BizConstant.SP_LOADPURPOSETYPE_FILLERDUMMY)
                    || CimStringUtils.equals(
                    startCassette.getLoadPurposeType(), BizConstant.SP_LOADPURPOSETYPE_SIDEDUMMYLOT)
                    || CimStringUtils.equals(
                    startCassette.getLoadPurposeType(),
                    BizConstant.SP_LOADPURPOSETYPE_WAITINGMONITORLOT)) {
                List<Infos.LotInCassette> strLotInCassette = startCassette.getLotInCassetteList();
                int nJLen = CimArrayUtils.getSize(strLotInCassette);
                for (int j = 0; j < nJLen; j++) {
                    Infos.LotInCassette lotInCassette = strLotInCassette.get(j);
                    CimLot aLot = baseCoreFactory.getBO(CimLot.class, lotInCassette.getLotID());
                    Validations.check(
                            null == aLot,
                            new OmCode(
                                    retCodeConfig.getNotFoundLot(),
                                    ObjectIdentifier.fetchValue(lotInCassette.getLotID())));

                    String holdState = aLot.getLotHoldState();
                    String inventoryState = aLot.getLotInventoryState();
                    String lotType = aLot.getLotType();

                    com.fa.cim.newcore.bo.factory.CimBank aLotBank = aLot.getBank();
                    Validations.check(
                            aLotBank == null,
                            new OmCode(
                                    retCodeConfig.getLotNotInBank(),
                                    ObjectIdentifier.fetchValue(lotInCassette.getLotID())));
                    String lotBankIdentifier = aLotBank.getIdentifier();
                    if (!CimStringUtils.equals(holdState, BizConstant.CIMFW_LOT_HOLDSTATE_NOTONHOLD)) {
                        throw new ServiceException(
                                new OmCode(
                                        retCodeConfig.getInvalidLotHoldStat(),
                                        ObjectIdentifier.fetchValue(lotInCassette.getLotID())));
                    }

                    if (!CimStringUtils.equals(inventoryState, BizConstant.SP_LOT_INVENTORYSTATE_INBANK)) {
                        Validations.check(
                                retCodeConfig.getInvalidLotInventoryStat(),
                                ObjectIdentifier.fetchValue(lotInCassette.getLotID()),
                                inventoryState);
                    }

                    if (CimStringUtils.equals(
                            startCassette.getLoadPurposeType(), BizConstant.SP_LOADPURPOSETYPE_FILLERDUMMY)) {
                        Validations.check(
                                !CimStringUtils.equals(lotBankIdentifier, fillerDummyBankIdentifier),
                                new OmCode(
                                        retCodeConfig.getLotBankDifferent(),
                                        lotBankIdentifier,
                                        fillerDummyBankIdentifier));
                    }

                    if (CimStringUtils.equals(
                            startCassette.getLoadPurposeType(), BizConstant.SP_LOADPURPOSETYPE_SIDEDUMMYLOT)) {
                        Validations.check(
                                !CimStringUtils.equals(lotBankIdentifier, sideDummyBankIdentifier),
                                new OmCode(
                                        retCodeConfig.getLotBankDifferent(),
                                        lotBankIdentifier,
                                        sideDummyBankIdentifier));
                    }

                    if (CimStringUtils.equals(
                            startCassette.getLoadPurposeType(),
                            BizConstant.SP_LOADPURPOSETYPE_WAITINGMONITORLOT)) {
                        Validations.check(
                                !CimStringUtils.equals(lotBankIdentifier, monitorBankIdentifier),
                                new OmCode(
                                        retCodeConfig.getLotBankDifferent(), lotBankIdentifier, monitorBankIdentifier));
                        Validations.check(
                                !CimStringUtils.equals(lotType, BizConstant.SP_LOT_TYPE_PRODUCTIONMONITORLOT),
                                new OmCode(
                                        retCodeConfig.getInvalidLotType(),
                                        lotType,
                                        ObjectIdentifier.fetchValue(lotInCassette.getLotID())));
                    }
                }
            }
        }
    }

    /**
     * [Function Description]: Change dispatch state, dispatch lot, dispatch cast.
     *
     * @param objCommon        objCommon
     * @param equipmentID      equipmentID
     * @param portID           portID
     * @param dispatchState    dispatchState
     * @param loadLotID        loadLotID
     * @param loadCassetteID   loadCassetteID
     * @param unloadLotID      unloadLotID
     * @param unloadCassetteID unloadCassetteID
     * @return
     * @author Ho
     */
    @Override
    public void equipmentDispatchStateChange(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            ObjectIdentifier portID,
            String dispatchState,
            ObjectIdentifier loadLotID,
            ObjectIdentifier loadCassetteID,
            ObjectIdentifier unloadLotID,
            ObjectIdentifier unloadCassetteID) {
        CimMachine anEquipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                anEquipment == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        PortResource aPort = anEquipment.findPortResourceNamed(portID.getValue());
        Validations.check(
                aPort == null, new OmCode(retCodeConfig.getNotFoundPort(), portID.getValue()));
        CimPortResource aPosPort = (CimPortResource) aPort;
        if (CimStringUtils.equals(dispatchState, BizConstant.SP_PORTRSC_DISPATCHSTATE_REQUIRED)) {
            aPosPort.makeDispatchStateRequired();
            aPosPort.setDispatchLoadLot(null);
            aPosPort.setDispatchLoadCassette(null);
            aPosPort.setDispatchUnloadLot(null);
            aPosPort.setDispatchUnloadCassette(null);
            aPosPort.setLastDispatchRequiredTimeStamp(objCommon.getTimeStamp().getReportTimeStamp());
        } else if (CimStringUtils.equals(
                dispatchState, BizConstant.SP_PORTRSC_DISPATCHSTATE_DISPATCHED)) {
            aPosPort.makeDispatchStateDispatched();
            if (!ObjectIdentifier.isEmpty(loadLotID)) {
                CimLot aPosLoadLot = baseCoreFactory.getBO(CimLot.class, loadLotID);
                Validations.check(
                        aPosLoadLot == null, new OmCode(retCodeConfig.getNotFoundLot(), loadLotID.getValue()));
                aPosPort.setDispatchLoadLot(aPosLoadLot);
            }
            if (!ObjectIdentifier.isEmpty(loadCassetteID)) {
                CimCassette aPosLoadCassette = baseCoreFactory.getBO(CimCassette.class, loadCassetteID);
                Validations.check(
                        aPosLoadCassette == null,
                        new OmCode(retCodeConfig.getNotFoundCassette(), loadCassetteID.getValue()));
                aPosPort.setDispatchLoadCassette(aPosLoadCassette);
            }
            if (!ObjectIdentifier.isEmpty(unloadLotID)) {
                CimLot aPosUnloadLot = baseCoreFactory.getBO(CimLot.class, unloadLotID);
                Validations.check(
                        aPosUnloadLot == null,
                        new OmCode(retCodeConfig.getNotFoundLot(), unloadLotID.getValue()));
                aPosPort.setDispatchUnloadLot(aPosUnloadLot);
            }
            if (!ObjectIdentifier.isEmpty(unloadCassetteID)) {
                CimCassette aPosUnloadCassette = baseCoreFactory.getBO(CimCassette.class, unloadCassetteID);
                Validations.check(
                        aPosUnloadCassette == null,
                        new OmCode(retCodeConfig.getNotFoundCassette(), unloadCassetteID.getValue()));
                aPosPort.setDispatchUnloadCassette(aPosUnloadCassette);
            }
        } else if (CimStringUtils.equals(
                dispatchState, BizConstant.SP_PORTRSC_DISPATCHSTATE_NOTDISPATCHED)) {
            aPosPort.makeDispatchStateNotDispatched();
            aPosPort.setDispatchLoadLot(null);
            aPosPort.setDispatchLoadCassette(null);
            aPosPort.setDispatchUnloadLot(null);
            aPosPort.setDispatchUnloadCassette(null);
        } else {
            throw new ServiceException(retCodeConfig.getInvalidInputParam());
        }
    }

    /**
     * @param objCommon    objCommon
     * @param equipmentID  equipmentID
     * @param controlJobID controlJobID
     * @param cassetteID   cassetteID
     * @param portID       portID
     * @return
     * @author Ho
     */
    @Override
    public void equipmentContainerPositionInfoUpdateForLoading(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            ObjectIdentifier controlJobID,
            ObjectIdentifier cassetteID,
            ObjectIdentifier portID) {
        Infos.EqpContainerInfo eqpContainerInfo =
                this.equipmentContainerInfoGetDR(objCommon, equipmentID);
        int lenEqpCont = CimArrayUtils.getSize(eqpContainerInfo.getEqpContainerList());
        Validations.check(lenEqpCont == 0, retCodeConfig.getNotFoundEquipmentContainer());
        // Clear source PortID of equipment container position.
        List<Infos.EqpContainerPosition> eqpContainerPositions =
                eqpContainerInfo.getEqpContainerList().get(0).getEqpContainerPosition();
        int lenEqpContPos = CimArrayUtils.getSize(eqpContainerPositions);
        if (lenEqpContPos > 0) {
            for (Infos.EqpContainerPosition eqpContainerPosition : eqpContainerPositions) {
                if (ObjectIdentifier.equalsWithValue(eqpContainerPosition.getDestPortID(), portID)) {
                    CimMachineContainerPosition aEqpContPos =
                            baseCoreFactory.getBO(
                                    CimMachineContainerPosition.class, eqpContainerPosition.getContainerPositionID());
                    Validations.check(
                            aEqpContPos == null, retCodeConfig.getNotFoundEquipmentContainerPosition());
                    aEqpContPos.setDestPort(null);
                }
            }
        }
    }

    @Override
    public void equipmentPortStateCheckForUnloading(
            Infos.ObjCommon objCommonIn,
            ObjectIdentifier equipmentID,
            ObjectIdentifier portID,
            ObjectIdentifier cassetteID) {

        // -----------------------------------
        //   Get port Information
        // -----------------------------------
        Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoGet(objCommonIn, equipmentID);

        // -----------------------------------
        //   Find Specified port
        // -----------------------------------
        boolean findFlag = false;
        ObjectIdentifier loadedCassetteID = null;
        List<Infos.EqpPortStatus> eqpPortStatuses = eqpPortInfo.getEqpPortStatuses();
        if (CimArrayUtils.isNotEmpty(eqpPortStatuses)) {
            for (Infos.EqpPortStatus eqpPortStatus : eqpPortStatuses) {
                if (ObjectIdentifier.equalsWithValue(eqpPortStatus.getPortID(), portID)) {
                    findFlag = true;
                    loadedCassetteID = eqpPortStatus.getLoadedCassetteID();
                    break;
                }
            }
        }
        Validations.check(
                CimBooleanUtils.isFalse(findFlag),
                new OmCode(retCodeConfig.getNotFoundPort(), ObjectIdentifier.fetchValue(portID)));
        // -----------------------------------
        //   Compare CassetteID
        // -----------------------------------
        Validations.check(
                !ObjectIdentifier.equalsWithValue(loadedCassetteID, cassetteID),
                retCodeConfig.getInvalidCassettePortCombination());
    }

    @Override
    public void equipmentLoadLotDelete(
            Infos.ObjCommon objCommonIn,
            ObjectIdentifier equipmentID,
            ObjectIdentifier portID,
            ObjectIdentifier cassetteID) {
        /*------------------------*/
        /*   Get Machine Object   */
        /*------------------------*/
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                aMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        /*-------------------------*/
        /*   Get Cassette Object   */
        /*-------------------------*/
        com.fa.cim.newcore.bo.durable.CimCassette aCassette =
                baseCoreFactory.getBO(com.fa.cim.newcore.bo.durable.CimCassette.class, cassetteID);

        /*-------------------------*/
        /*   waferSorter设备支持可以unlaod FOSB   */
        /*-------------------------*/
        if (!SorterHandler.containsFOSB(cassetteID)) {
            Validations.check(
                    aCassette == null,
                    new OmCode(retCodeConfig.getNotFoundCassette(), cassetteID.getValue()));

            /*--------------------------------------*/
            /*   Get Cassette-On-Port information   */
            /*--------------------------------------*/

            MachineDTO.MachineCassette machineCassette =
                    aMachine.findCassetteNamed(cassetteID.getValue());
            Validations.check(machineCassette == null, retCodeConfig.getNotCassetteOnPort());

            /*----------------------------*/
            /*   Remove MachineCassette   */
            /*----------------------------*/
            aMachine.removeCassette(aCassette);

            /*---------------------------------------*/
            /*   Clear MaterialLocation's Cassette   */
            /*---------------------------------------*/
            MaterialLocation aMtrlLoc = aCassette.getLocation();
            if (aMtrlLoc != null) {
                aMtrlLoc.materialSent();
            }

        } else {
            aMachine.removeCassetteFosb(cassetteID);
        }
        /*-----------------------------------------*/
        /*   Clear does MaterialLocation of Port   */
        /*-----------------------------------------*/
        PortResource aTmpPortResource = null;
        if (CimStringUtils.isEmpty(portID.getReferenceKey())) {
            if (CimStringUtils.isEmpty(portID.getValue())) {
                throw new ServiceException(new OmCode(retCodeConfig.getNotFoundPort(), "*****"));
            } else {
                aTmpPortResource = aMachine.findPortResourceNamed(portID.getValue());
            }
        } else {
            aTmpPortResource = baseCoreFactory.getBO(CimPortResource.class, portID.getReferenceKey());
        }
        Validations.check(
                aTmpPortResource == null, new OmCode(retCodeConfig.getNotFoundPort(), portID.getValue()));
        CimPortResource aPosPortResource = (CimPortResource) aTmpPortResource;
        List<MaterialLocation> strMaterialLocations = aPosPortResource.allMaterialLocations();
        Validations.check(
                CimArrayUtils.isEmpty(strMaterialLocations),
                new OmCode(retCodeConfig.getMaterialLocationNotAvailable(), portID.getValue()));
        Validations.check(
                strMaterialLocations.get(0) == null,
                new OmCode(retCodeConfig.getMaterialLocationNotAvailable(), portID.getValue()));
        boolean occupiedFlag = strMaterialLocations.get(0).isOccupied();
        if (occupiedFlag) {
            strMaterialLocations.get(0).materialSent();
        }
        aPosPortResource.setDispatchUnloadCassette(null);
        // ------------------------------------------------------------------------------------------------
        //   Lot's ControlUseState Maintain Logic
        //   * This logic is enabled only for .....
        //     - Port's loadPurposeType is WaitingMonitor/SideDummy/FillerDummy/InternalBufferEqp
        //     - Lot's inventoryState is InBank
        //     - Lot's controlUseState is InUse
        // ------------------------------------------------------------------------------------------------
        // -------------------------------
        //   Get Port's LoadPurposeType
        // -------------------------------
        String loadPurposeType = aPosPortResource.getLoadPurposeType();
        if (CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_WAITINGMONITORLOT)
                || CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_SIDEDUMMYLOT)
                || CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_FILLERDUMMY)
                || CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_INTERNALBUFFER)) {
            // ------------------------------
            //   Get Lot in Cassette
            // ------------------------------
            List<Lot> aLotList = aCassette.allLots();
            int nLotLen = CimArrayUtils.getSize(aLotList);
            for (int i = 0; i < nLotLen; i++) {
                // -------------------------------
                //   Get Lot's InventoryState
                // -------------------------------
                com.fa.cim.newcore.bo.product.CimLot aPosLot =
                        (com.fa.cim.newcore.bo.product.CimLot) aLotList.get(i);
                boolean inBankFlag = aPosLot.isInBank();
                if (inBankFlag) {
                    // -------------------------------
                    //   Get Lot's ControlUseState
                    // -------------------------------
                    boolean inUseFlag = aPosLot.isInUse();
                    if (inUseFlag) {
                        com.fa.cim.newcore.bo.factory.CimBank aBank = aPosLot.getBank();
                        Validations.check(aBank == null, new OmCode(retCodeConfig.getNotFoundBank(), ""));
                        boolean isRecycleBank = aBank.isRecycleBank();
                        boolean isControlWaferBank = aBank.isControlWaferBank();
                        if (isRecycleBank) {
                            // ---------------------------------------------
                            //   Change Lot's ControlUseState to WaitRecycle
                            // ---------------------------------------------
                            aPosLot.makeWaitRecycle();
                        } else if (isControlWaferBank) {
                            // ---------------------------------------------
                            //   Change Lot's ControlUseState to WaitUse
                            // ---------------------------------------------
                            aPosLot.makeWaitUse();
                        }
                    }
                }
            }
        }
    }

    @Override
    public void equipmentCheckAvailForLot(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, List<ObjectIdentifier> lotIDList) {
        /*---------------------------*/
        /*   get PosMachine object   */
        /*---------------------------*/
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                aMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        /*--------------------------------*/
        /*   get PosMachineState object   */
        /*--------------------------------*/
        CimMachineState aMachineState = aMachine.getCurrentMachineState();
        Validations.check(null == aMachineState, retCodeConfig.getEquipmentNotAvailableStat());

        // check avail flag
        boolean availFlag = aMachineState.isMachineAvailable();
        Validations.check(!availFlag, retCodeConfig.getEquipmentNotAvailableStat());
        // check conditinal avail flag
        boolean condFlag = aMachineState.isConditionalAvailable();
        if (condFlag) {
            // check sub lot type
            for (ObjectIdentifier lotID : lotIDList) {
                CimLot aLot = baseCoreFactory.getBO(CimLot.class, lotID);
                Validations.check(
                        null == aLot, new OmCode(retCodeConfig.getNotFoundLot(), lotID.getValue()));
                String subLotType = aLot.getSubLotType();
                /*===== check subLotType =====*/
                boolean condLotFlag = aMachineState.isConditionalAvailableFor(subLotType);
                Validations.check(
                        !condLotFlag,
                        new OmCode(retCodeConfig.getEquipmentNotAvailableStatForLot(), lotID.getValue()));
            }
        }
    }

    @Override
    public void equipmentPortStateCheckForOpeStart(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            String portGroupID,
            List<Infos.StartCassette> startCassetteList) {
    /*
    author:PlayBoy
    */
        log.debug("checkEquipmentPortStateForOpeStart(): enter checkEquipmentPortStateForOpeStart");
        // get environment
        String sequenceCondition = StandardProperties.OM_CARRIER_LOAD_SEQ_CHK.getValue();
        // Get eqp's Operation Mode Info
        Validations.check(CimArrayUtils.isEmpty(startCassetteList), "startCassetteList is empty");
        ObjectIdentifier loadPortID = startCassetteList.get(0).getLoadPortID();
        Outputs.ObjPortResourceCurrentOperationModeGetOut portCurrentOperationModeResult =
                portMethod.portResourceCurrentOperationModeGet(objCommon, equipmentID, loadPortID);
        // Get and Check cassette on port
        Infos.EqpPortInfo eqpPortInfo = equipmentPortInfoGet(objCommon, equipmentID);
        // Get Machine Object
        CimMachine machine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        startCassetteList.forEach(
                startCassette -> {
                    PortResource portResource =
                            machine.findPortResourceNamed(startCassette.getLoadPortID().getValue());
                    Validations.check(
                            portResource == null,
                            retCodeConfig.getNotFoundPortResource(),
                            objCommon.getTransactionID());
                    CimPortResource loadPort = (CimPortResource) portResource;
                    // Get and Check port's LoadMode
                    String loadMode = loadPort.getPortUsage();
                    Validations.check(
                            !CimStringUtils.equals(CIMStateConst.CIM_PORT_RESOURCE_INPUT, loadMode)
                                    && !CimStringUtils.equals(CIMStateConst.CIM_PORT_RESOURCE_INPUTOUTPUT, loadMode),
                            retCodeConfig.getInvalidPortLoadMode(),
                            objCommon.getTransactionID());
                    // Get and Check port's port State
                    String onlineMode = portCurrentOperationModeResult.getOperationMode().getOnlineMode();
                    if (!CimStringUtils.equals(BizConstant.SP_EQP_ONLINEMODE_OFFLINE, onlineMode)) {
                        String portState = loadPort.getPortState();
                        Validations.check(
                                !CimStringUtils.equals(BizConstant.SP_PORTRSC_PORTSTATE_LOADCOMP, portState),
                                new OmCode(
                                        retCodeConfig.getInvalidPortState(), loadPort.getIdentifier(), portState),
                                objCommon.getTransactionID());
                    }
                    // Compare In-parm's cassette/LoadPort vs port's loadedCassette
                    boolean findFlag = false;
                    String eqpInfoPortGroup = null;
                    String eqpInfoLoadPurposeType = null;
                    Long eqpInfoLoadSeqNo = null;
                    List<Infos.EqpPortStatus> eqpPortStatusList = eqpPortInfo.getEqpPortStatuses();
                    for (Infos.EqpPortStatus portStatus : eqpPortStatusList) {
                        if (CimStringUtils.equals(
                                startCassette.getLoadPortID().getValue(), portStatus.getPortID().getValue())) {
                            if (ObjectIdentifier.equalsWithValue(
                                    startCassette.getCassetteID(), portStatus.getLoadedCassetteID())) {
                                findFlag = true;
                                eqpInfoPortGroup = portStatus.getPortGroup();
                                eqpInfoLoadPurposeType = portStatus.getCassetteLoadPurposeType();
                                eqpInfoLoadSeqNo = portStatus.getLoadSequenceNumber();
                            }
                            break;
                        }
                    }
                    Validations.check(
                            !findFlag,
                            retCodeConfig.getInvalidCassettePortCombination(),
                            objCommon.getTransactionID());
                    // Check LoadPort's PortGroup vs In-parm's PortGroup
                    Validations.check(
                            !portGroupID.equals(eqpInfoPortGroup),
                            retCodeConfig.getPortGroupMixed(),
                            portGroupID);
          /*
          Check Eqp port's LoadPurpose VS In-Parm's LoadPurpose
          */
                    Validations.check(
                            !CimArrayUtils.generateList(
                                    BizConstant.SP_LOADPURPOSETYPE_OTHER,
                                    BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT,
                                    BizConstant.SP_LOADPURPOSETYPE_ANY,
                                    startCassette.getLoadPurposeType())
                                    .contains(eqpInfoLoadPurposeType),
                            retCodeConfig.getNotSameLoadPurpose(),
                            objCommon.getTransactionID());
                    boolean isSameLoadPurpose = true;
                    // check for 'process lot'
                    if (CimStringUtils.equals(
                            BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT, eqpInfoLoadPurposeType)) {
                        isSameLoadPurpose =
                                CimStringUtils.equals(
                                        BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT,
                                        startCassette.getLoadPurposeType())
                                        || CimStringUtils.equals(
                                        BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT,
                                        startCassette.getLoadPurposeType());
                        Validations.check(
                                !isSameLoadPurpose,
                                retCodeConfig.getNotSameLoadPurpose(),
                                objCommon.getTransactionID());
                    } else if (CimStringUtils.equals(
                            BizConstant.SP_LOADPURPOSETYPE_ANY, eqpInfoLoadPurposeType)) {
                        // check for 'Any Purpose'
                        isSameLoadPurpose =
                                CimStringUtils.equals(
                                        BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT,
                                        startCassette.getLoadPurposeType())
                                        || CimStringUtils.equals(
                                        BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT,
                                        startCassette.getLoadPurposeType())
                                        || CimStringUtils.equals(
                                        BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE,
                                        startCassette.getLoadPurposeType());
                        Validations.check(
                                !isSameLoadPurpose,
                                retCodeConfig.getNotSameLoadPurpose(),
                                objCommon.getTransactionID());
                    }
          /*
          Check Eqp port's LoadSeqNo VS In-Parm's LoadSeqNo
          */
                    Validations.check(
                            BizConstant.CONSTANT_QUANTITY_ZERO.equals(sequenceCondition)
                                    && !eqpInfoLoadSeqNo.equals(startCassette.getLoadSequenceNumber()),
                            retCodeConfig.getInvalidLoadingSequence(),
                            objCommon.getTransactionID());
                });
        // Get Eqp's bank Information
        Outputs.ObjEquipmentBankIDGetOut objEquipmentBankIDOut =
                equipmentBankIDGet(objCommon, equipmentID);
        Predicate<Infos.StartCassette> bankIDOutFilter =
                startCassette ->
                        CimArrayUtils.generateList(
                                objEquipmentBankIDOut.getFillerDummyBankID(),
                                objEquipmentBankIDOut.getMonitorBankID(),
                                objEquipmentBankIDOut.getSideDummyBankID())
                                .contains(startCassette.getLoadPurposeType());
        startCassetteList.stream()
                .filter(bankIDOutFilter)
                .forEach(
                        startCassette ->
                                startCassette
                                        .getLotInCassetteList()
                                        .forEach(
                                                lotInCassette -> {
                                                    // Get lot Object
                                                    CimLot lot =
                                                            baseCoreFactory.getBO(CimLot.class, lotInCassette.getLotID());
                                                    // Get lot Related Information
                                                    String holdState = lot.getLotHoldState();
                                                    String inventoryState = lot.getLotInventoryState();
                                                    String lotType = lot.getLotType();
                                                    com.fa.cim.newcore.bo.factory.CimBank lotBank = lot.getBank();
                                                    Validations.check(
                                                            lotBank == null,
                                                            retCodeConfig.getLotNotInBank(),
                                                            objCommon.getTransactionID());
                                                    Validations.check(
                                                            !CimStringUtils.equals(
                                                                    CIMStateConst.CIM_LOT_HOLD_STATE_NOTONHOLD, holdState),
                                                            retCodeConfig.getInvalidLotHoldStat(),
                                                            objCommon.getTransactionID());
                                                    Validations.check(
                                                            !CimStringUtils.equals(
                                                                    CIMStateConst.CIM_LOT_INVENTORY_STATE_INBANK, inventoryState),
                                                            retCodeConfig.getInvalidLotInventoryStat(),
                                                            ObjectIdentifier.fetchValue(lot.getLotID()),
                                                            inventoryState);
                                                    // Check Condition for FillerDummy
                                                    Validations.check(
                                                            CimStringUtils.equals(
                                                                    BizConstant.SP_LOADPURPOSETYPE_FILLERDUMMY,
                                                                    startCassette.getLoadPurposeType())
                                                                    && !lotBank
                                                                    .getBankID()
                                                                    .equals(objEquipmentBankIDOut.getFillerDummyBankID()),
                                                            retCodeConfig.getLotBankDifferent(),
                                                            objCommon.getTransactionID());
                                                    // Check Condition for SideDummy
                                                    Validations.check(
                                                            CimStringUtils.equals(
                                                                    BizConstant.SP_LOADPURPOSETYPE_SIDEDUMMYLOT,
                                                                    startCassette.getLoadPurposeType())
                                                                    && !lotBank
                                                                    .getBankID()
                                                                    .equals(objEquipmentBankIDOut.getSideDummyBankID()),
                                                            retCodeConfig.getLotBankDifferent(),
                                                            objCommon.getTransactionID());
                                                    // Check Condition for WaitingMonitor
                                                    Validations.check(
                                                            CimStringUtils.equals(
                                                                    BizConstant.SP_LOADPURPOSETYPE_WAITINGMONITORLOT,
                                                                    startCassette.getLoadPurposeType())
                                                                    && !lotBank
                                                                    .getBankID()
                                                                    .equals(objEquipmentBankIDOut.getMonitorBankID()),
                                                            retCodeConfig.getLotBankDifferent(),
                                                            objCommon.getTransactionID());
                                                    Validations.check(
                                                            CimStringUtils.equals(
                                                                    BizConstant.SP_LOADPURPOSETYPE_WAITINGMONITORLOT,
                                                                    startCassette.getLoadPurposeType())
                                                                    && !CimStringUtils.equals(
                                                                    BizConstant.SP_LOT_TYPE_PRODUCTIONMONITORLOT, lotType),
                                                            retCodeConfig.getInvalidLotType(),
                                                            objCommon.getTransactionID());
                                                }));
    }

    @Override
    public void equipmentCheckInhibitForLotWithMachineRecipe(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            List<ObjectIdentifier> lotIDList,
            List<Infos.StartCassette> startCassetteList) {
        if (log.isDebugEnabled()) {
            log.debug("EquipmentMethod::checkEquipmentInhibitForLotWithMachineRecipe() run in...");
        }
        String transactionID = objCommon.getTransactionID();
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == aMachine, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        int lotIDSize = CimArrayUtils.getSize(lotIDList);
        for (int i = 0; i < lotIDSize; i++) {
            ObjectIdentifier lotID = lotIDList.get(i);
            if (ObjectIdentifier.isEmptyWithValue(lotID)) {
                continue;
            }
            List<Constrain.EntityIdentifier> entityIdentifierList = new ArrayList<>();
            CimLot aLot = baseCoreFactory.getBO(CimLot.class, lotID);
            Validations.check(null == aLot, new OmCode(retCodeConfig.getNotFoundLot(), lotID.getValue()));

            int startCassetteSize = CimArrayUtils.getSize(startCassetteList);
            for (int j = 0; j < startCassetteSize; j++) {
                Infos.StartCassette startCassette = startCassetteList.get(j);
                int lotInCassetteListSize = CimArrayUtils.getSize(startCassette.getLotInCassetteList());

                for (int k = 0; k < lotInCassetteListSize; k++) {
                    Infos.LotInCassette lotInCassette = startCassette.getLotInCassetteList().get(k);
                    if (!ObjectIdentifier.equalsWithValue(lotID, lotInCassette.getLotID())) {
                        continue;
                    }
                    // set recipe info to entites
                    if (log.isDebugEnabled()) {
                        log.debug("set recipe info to entites");
                    }
                    if (!ObjectIdentifier.isEmptyWithValue(
                            lotInCassette.getStartRecipe().getMachineRecipeID())) {
                        Constrain.EntityIdentifier entityIdentifier = new Constrain.EntityIdentifier();
                        entityIdentifier.setClassName(BizConstant.SP_INHIBITCLASSID_MACHINERECIPE);
                        entityIdentifier.setObjectId(
                                ObjectIdentifier.fetchValue(lotInCassette.getStartRecipe().getMachineRecipeID()));
                        entityIdentifierList.add(entityIdentifier);
                    }

                    // set reticle info to entities
                    if (log.isDebugEnabled()) {
                        log.debug("set reticle info to entities");
                    }
                    int startReticleSize =
                            CimArrayUtils.getSize(lotInCassette.getStartRecipe().getStartReticleList());
                    for (int l = 0; l < startReticleSize; l++) {
                        Infos.StartReticleInfo startReticleInfo =
                                lotInCassette.getStartRecipe().getStartReticleList().get(l);
                        Constrain.EntityIdentifier entityIdentifier = new Constrain.EntityIdentifier();
                        entityIdentifier.setClassName(BizConstant.SP_INHIBITCLASSID_RETICLE);
                        entityIdentifier.setObjectId(
                                ObjectIdentifier.fetchValue(startReticleInfo.getReticleID()));
                        entityIdentifierList.add(entityIdentifier);
                    }

                    // set fixture info to entities
                    if (log.isDebugEnabled()) {
                        log.debug("set reticle info to entities");
                    }
                    int startFixtureSize =
                            CimArrayUtils.getSize(lotInCassette.getStartRecipe().getStartFixtureList());
                    for (int l = 0; l < startFixtureSize; l++) {
                        Infos.StartFixtureInfo startFixtureInfo =
                                lotInCassette.getStartRecipe().getStartFixtureList().get(l);
                        Constrain.EntityIdentifier entityIdentifier = new Constrain.EntityIdentifier();
                        entityIdentifier.setClassName(BizConstant.SP_INHIBITCLASSID_FIXTURE);
                        entityIdentifier.setObjectId(
                                ObjectIdentifier.fetchValue(startFixtureInfo.getFixtureID()));
                        entityIdentifierList.add(entityIdentifier);
                    }

                    // set chamber info entities
                    if (log.isDebugEnabled()) {
                        log.debug("set chamber info entities");
                    }
                    if (!ObjectIdentifier.isEmptyWithValue(
                            lotInCassette.getStartRecipe().getMachineRecipeID())) {
                        List<Infos.Chamber> chamberList = new ArrayList<>();
                        CimLogicalRecipe aLogicalRecipe =
                                baseCoreFactory.getBO(
                                        CimLogicalRecipe.class, lotInCassette.getStartRecipe().getLogicalRecipeID());
                        Validations.check(null == aLogicalRecipe, retCodeConfig.getNotFoundLogicalRecipe());
                        Boolean multiChamberSupportedFlag = aLogicalRecipe.isMultipleChamberSupported();
                        if (CimBooleanUtils.isTrue(multiChamberSupportedFlag)) {
                            // get default recipe setting
                            if (log.isDebugEnabled()) {
                                log.debug("get default recipe setting");
                            }
                            Infos.DefaultRecipeSetting defaultRecipeSetting =
                                    logicalRecipeMethod.logicalRecipeDefaultRecipeSettingGet(
                                            objCommon,
                                            lotInCassette.getLotID(),
                                            equipmentID,
                                            lotInCassette.getStartRecipe().getLogicalRecipeID());

                            List<Infos.Chamber> tmpChamberList = new ArrayList<>();
                            if (!CimObjectUtils.isEmpty(defaultRecipeSetting.getProcessResourceStates())) {
                                tmpChamberList =
                                        defaultRecipeSetting.getProcessResourceStates().stream()
                                                .map(
                                                        processResourceState -> {
                                                            Infos.Chamber chamber = new Infos.Chamber();
                                                            chamber.setChamberID(
                                                                    new ObjectIdentifier(
                                                                            processResourceState.getProcessResourceName()));
                                                            chamber.setState(processResourceState.getState());
                                                            return chamber;
                                                        })
                                                .collect(Collectors.toList());
                            }
                            if (ObjectIdentifier.equalsWithValue(
                                    defaultRecipeSetting.getRecipe(),
                                    lotInCassette.getStartRecipe().getMachineRecipeID())) {
                                // set specified chamber
                                if (log.isDebugEnabled()) {
                                    log.debug("set specified chamber");
                                }
                                int chamberSize = CimArrayUtils.getSize(tmpChamberList);
                                if (chamberSize > 0) {
                                    chamberList = tmpChamberList;
                                }
                            } else {
                                if (log.isDebugEnabled()) {
                                    log.debug("machine recipe doesn't match");
                                }
                                String chamberCheckPolicy = StandardProperties.OM_CHAMBER_CHK_RULE.getValue();
                                if (CimStringUtils.equals(chamberCheckPolicy, "1")) {
                                    Inputs.ObjLogicalRecipeCandidateChamberInfoGetByMachineRecipeIn in =
                                            new Inputs.ObjLogicalRecipeCandidateChamberInfoGetByMachineRecipeIn();
                                    in.setLotID(lotInCassette.getLotID());
                                    in.setEquipmentID(equipmentID);
                                    in.setLogicalRecipeID(lotInCassette.getStartRecipe().getLogicalRecipeID());
                                    in.setMachineRecipeID(lotInCassette.getStartRecipe().getMachineRecipeID());
                                    in.setInhibitCheckFlag(true);
                                    Outputs.ObjLogicalRecipeCandidateChamberInfoGetByMachineRecipeOut
                                            machineRecipeOut =
                                            logicalRecipeMethod.logicalRecipeCandidateChamberInfoGetByMachineRecipe(
                                                    objCommon, in);

                                    int chamberSetSize =
                                            CimArrayUtils.getSize(machineRecipeOut.getCandidateChamberList());
                                    if (chamberSetSize > 0) {
                                        if (log.isDebugEnabled()) {
                                            log.debug("first chamber set is set for inhibit check with default");
                                        }
                                        chamberList =
                                                machineRecipeOut.getCandidateChamberList().get(0).getChamberList();
                                        for (int l = 0; l < chamberSetSize; l++) {
                                            Infos.CandidateChamber candidateChamber =
                                                    machineRecipeOut.getCandidateChamberList().get(l);
                                            if (CimBooleanUtils.isFalse(candidateChamber.isInhibitFlag())) {
                                                chamberList = candidateChamber.getChamberList();
                                                break;
                                            }
                                        }
                                    }
                                } else {
                                    if (log.isDebugEnabled()) {
                                        log.debug("OM_CHAMBER_CHK_RULE = ", chamberCheckPolicy);
                                    }
                                }
                            }
                        } else {
                            if (log.isDebugEnabled()) {
                                log.debug("not multi chamber");
                            }
                        }

                        int chamberListSize = CimArrayUtils.getSize(chamberList);
                        for (int l = 0; l < chamberListSize; l++) {
                            Infos.Chamber chamber = chamberList.get(l);
                            if (CimBooleanUtils.isFalse(chamber.getState())) {
                                continue;
                            }
                            Constrain.EntityIdentifier entityIdentifier = new Constrain.EntityIdentifier();
                            entityIdentifier.setClassName(BizConstant.SP_INHIBITCLASSID_CHAMBER);
                            entityIdentifier.setObjectId(ObjectIdentifier.fetchValue(equipmentID));
                            entityIdentifier.setAttrib(ObjectIdentifier.fetchValue(chamber.getChamberID()));
                            entityIdentifierList.add(entityIdentifier);
                        }
                    }
                }
            }

            Constrain.EntityInhibitResult entityInhibitResult =
                    entityInhibitManager.allEntityInhibitsForLotUsingSpecifiedEntity(
                            aLot, aMachine, entityIdentifierList);
            List<CimRestriction> entityInhibitList = entityInhibitResult.getCimRestrictions();
            List<String> exceptionEntiyList = entityInhibitResult.getExceptionEntiyList();
            int numOfInhibits = CimArrayUtils.getSize(entityInhibitList);
            if (numOfInhibits > 0) {
                List<Infos.EntityInhibitInfo> entityInhibitInfoList = new ArrayList<>();
                for (int nInhibit = 0; nInhibit < numOfInhibits; nInhibit++) {
                    CimRestriction cimEntityInhibit = entityInhibitList.get(nInhibit);
                    Constrain.EntityInhibitRecord entityInhibitRecord = cimEntityInhibit.getInhibitRecord();
                    Infos.EntityInhibitInfo entityInhibitInfo = new Infos.EntityInhibitInfo();
                    Infos.EntityInhibitAttributes entityInhibitAttributes =
                            new Infos.EntityInhibitAttributes();
                    List<Constrain.EntityIdentifier> entities = entityInhibitRecord.getEntities();
                    if (!CimObjectUtils.isEmpty(entities)) {
                        List<Infos.EntityIdentifier> entitys = new ArrayList<>();
                        for (Constrain.EntityIdentifier entity : entities) {
                            Infos.EntityIdentifier en = new Infos.EntityIdentifier();
                            en.setClassName(entity.getClassName());
                            en.setObjectID(new ObjectIdentifier(entity.getObjectId()));
                            en.setAttribution(entity.getAttrib());
                            entitys.add(en);
                        }
                        entityInhibitAttributes.setEntities(entitys);
                    }
                    entityInhibitInfo.setEntityInhibitID(
                            new ObjectIdentifier(
                                    entityInhibitRecord.getId(), entityInhibitRecord.getReferenceKey()));
                    entityInhibitAttributes.setSubLotTypes(entityInhibitRecord.getSubLotTypes());
                    entityInhibitAttributes.setStartTimeStamp(
                            CimDateUtils.getTimestampAsString(entityInhibitRecord.getStartTimeStamp()));
                    entityInhibitAttributes.setEndTimeStamp(
                            CimDateUtils.getTimestampAsString(entityInhibitRecord.getEndTimeStamp()));
                    entityInhibitAttributes.setClaimedTimeStamp(
                            CimDateUtils.getTimestampAsString(entityInhibitRecord.getChangedTimeStamp()));
                    entityInhibitAttributes.setReasonCode(
                            ObjectIdentifier.fetchValue(entityInhibitRecord.getReasonCode()));
                    entityInhibitAttributes.setOwnerID(entityInhibitRecord.getOwner());
                    entityInhibitAttributes.setMemo(entityInhibitRecord.getClaimMemo());
                    entityInhibitInfo.setEntityInhibitAttributes(entityInhibitAttributes);
                    entityInhibitInfoList.add(entityInhibitInfo);
                }
                List<Infos.EntityInhibitInfo> exceptionLotOut =
                        constraintMethod.constraintFilterExceptionLot(objCommon, lotID, entityInhibitInfoList);
                numOfInhibits = CimArrayUtils.getSize(exceptionLotOut);
                entityInhibitList = new ArrayList<>();
                for (int nInhibit = 0; nInhibit < numOfInhibits; nInhibit++) {
                    Infos.EntityInhibitInfo entityInhibitInfo = exceptionLotOut.get(nInhibit);
                    CimRestriction entityInhibit =
                            baseCoreFactory.getBO(
                                    CimRestriction.class, entityInhibitInfo.getEntityInhibitID().getReferenceKey());
                    if (null != entityInhibit) {
                        entityInhibitList.add(entityInhibit);
                    }
                }
                numOfInhibits = CimArrayUtils.getSize(entityInhibitList);
            }
            if (numOfInhibits > 0) {
                String inhibitList = constraintMethod.makeInhibitListFromEntityInhibits(entityInhibitList);
                throw new ServiceException(
                        new OmCode(retCodeConfig.getInhibitLot(), lotID.getValue(), inhibitList));
            }

            // Added whitelist check, only check move in reserve, and move in
            // String transactionID = objCommon.getTransactionID();
            if (CimStringUtils.equals(transactionID, TransactionIDEnum.OPERATION_START_REQ.getValue())
                    || CimStringUtils.equals(
                    transactionID, TransactionIDEnum.START_LOTS_RESERVATION_REQ.getValue())
                    || CimStringUtils.equals(
                    transactionID, TransactionIDEnum.OPERATION_START_FOR_INTERNAL_BUFFER_REQ.getValue())
                    || CimStringUtils.equals(
                    transactionID,
                    TransactionIDEnum.START_LOTS_RESERVATION_FOR_INTERNAL_BUFFER_REQ.getValue())) {

                // Query whether the device has a whitelist
                List<Constrain.EntityInhibitRecord> whitelist =
                        entityInhibitManager.findWhitelist(
                                ConstraintClassEnum.INHIBITCLASSID_EQUIPMENT.getValue(),
                                new ObjectIdentifier(aMachine.getIdentifier(), aMachine.getPrimaryKey()),
                                true,
                                true);
                if (!CimObjectUtils.isEmpty(whitelist)) {
                    // if so, check whether the device information can match the whitelist
                    entityInhibitList =
                            entityInhibitManager.allWhitelistForLotForMachineForSpecifiedEntities(
                                    aLot, aMachine, entityIdentifierList);
                    if (CimObjectUtils.isEmpty(entityInhibitList)) {
                        Validations.check(
                                new OmCode(
                                        retCodeConfig.getInhibitLot(),
                                        lotID.getValue(),
                                        aMachine.getIdentifier()
                                                + "+"
                                                + BizConstant.FUNCTION_RULE_WLIST
                                                + whitelist.stream()
                                                .map(Constrain.EntityInhibitRecord::getId)
                                                .collect(Collectors.toList())));
                    }
                }
            }
            // ------------------------------------------------------
            // just for move in and the tool constraint switch is on
            // ------------------------------------------------------
            if (exceptionEntiyList.size() > 0 && numOfInhibits == 0) {
                if (CimStringUtils.equals(transactionID, TransactionIDEnum.OPERATION_START_REQ.getValue())
                        && CimStringUtils.equals(
                        StandardProperties.OM_CONSTRAINT_ONETIME_EXCEPTION.getValue(),
                        BizConstant.CONSTRAINT_ONETIME_EXCEPTION_SWITCH_ON)) {
                    // -------------------------------------------------------------------------
                    // user this function the exps that passed and resaved the exps that did not|
                    // -------------------------------------------------------------------------
                    this.exceptionEntityFilter(aMachine, entityIdentifierList, aLot, exceptionEntiyList);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("EquipmentMethod::checkEquipmentInhibitForLotWithMachineRecipe() run out...");
        }
    }

    private void exceptionEntityFilter(
            CimMachine aMachine,
            List<Constrain.EntityIdentifier> entityIdentifierList,
            CimLot aLot,
            List<String> exceptionEntiyList) {
        List<Constrain.EntityIdentifier> finalEntities = new ArrayList<>();
        Constrain.WholeEntityIdentifier wholeEntityIdentifier =
                entityInhibitManager.makeEntityIdentifierList(aLot, aMachine);
        List<Constrain.EntityIdentifier> currentEntities = wholeEntityIdentifier.getCurrentEntities();
        List<Constrain.EntityIdentifier> targetEntities = wholeEntityIdentifier.getTargetEntities();
        // ---------------------------------------------//
        //     Replace original entities               //
        // ---------------------------------------------//
        log.trace("########## Replace original entities.");
        int entitiesLen = CimArrayUtils.getSize(entityIdentifierList);
        int curLen = CimArrayUtils.getSize(currentEntities);
        for (int s = 0; s < entitiesLen; s++) {
            log.trace("### input.entityType = {}", entityIdentifierList.get(s).getClassName());
            log.trace("### input.entityId = {}", entityIdentifierList.get(s).getObjectId());
            log.trace("### input.entityAttribute = {}", entityIdentifierList.get(s).getAttrib());
            log.trace(" ");
            for (int j = 0; j < curLen; j++) {
                log.trace("###### current.entityType = {}", currentEntities.get(j).getClassName());
                log.trace("###### current.entityId = {}", currentEntities.get(j).getObjectId());
                log.trace("###### current.entityAttribute = {}", currentEntities.get(j).getAttrib());

                log.trace(" ");
                if (!CimStringUtils.equals(
                        entityIdentifierList.get(s).getClassName(), currentEntities.get(j).getClassName())
                        && !CimStringUtils.equals(
                        currentEntities.get(j).getClassName(), BizConstant.SP_INHIBITCLASSID_CHAMBER)) {
                    log.trace("###### Need to retain.");
                    finalEntities.add(currentEntities.get(j));
                } else {
                    log.trace("###### Need to remove.");
                }
                log.trace(" ");
            }
        }
        // ---------------------------------
        finalEntities.addAll(targetEntities);
        finalEntities.addAll(entityIdentifierList);

        // -------------------------------------
        // fiter the expEntity that passed      |
        // -------------------------------------
        exceptionEntiyList.forEach(
                expEntity ->
                        Optional.ofNullable(baseCoreFactory.getBO(CimRestriction.class, expEntity))
                                .ifPresent(
                                        BO -> {
                                            List<Constrain.EntityIdentifier> exceptionEntities =
                                                    BO.getExceptionEntities();
                                            List<Constrain.EntityIdentifier> filterEntity =
                                                    exceptionEntities.stream()
                                                            .filter(
                                                                    exEntity -> {
                                                                        AtomicBoolean filter = new AtomicBoolean(true);
                                                                        finalEntities.forEach(
                                                                                finalEntity -> {
                                                                                    if (CimRegexUtils.matches(
                                                                                            CimRegexUtils.obtainRegex(exEntity.getObjectId()),
                                                                                            finalEntity.getObjectId())) {
                                                                                        filter.set(false);
                                                                                    }
                                                                                });
                                                                        return filter.get();
                                                                    })
                                                            .collect(Collectors.toList());
                                            // -----------------------------------------
                                            //  resave the not be passed exceptionEntiy |
                                            // -----------------------------------------
                                            BO.setExceptionEntities(filterEntity);
                                        }));
    }

    @Override
    public void equipmentProcessDurableRequiredFlagGet(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        CimMachine equipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                equipment == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        Boolean processDurableRequired = equipment.isFixtureRequired();
        Validations.check(
                processDurableRequired, new OmCode(retCodeConfig.getEquipmentProcessDurableFixtRequired()));
        processDurableRequired = equipment.isReticleRequired();
        Validations.check(
                processDurableRequired,
                new OmCode(retCodeConfig.getEquipmentProcessDurableReticleRequired()));
        throw new ServiceException(retCodeConfig.getEquipmentProcessDurableNotRequired());
    }

    @Override
    public void equipmentPortStateCheckForOpeComp(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentId,
            List<Infos.StartCassette> startCassettes) {

        Infos.EqpPortInfo eqpPortInfo = equipmentPortInfoGet(objCommon, equipmentId);
        List<Infos.EqpPortStatus> eqpPortStatuses = eqpPortInfo.getEqpPortStatuses();

        Infos.StartCassette tmpStartCassette = new Infos.StartCassette();
        Infos.EqpPortStatus tmpEqpPortStatus = new Infos.EqpPortStatus();

        for (Infos.StartCassette startCassette : startCassettes) {
            boolean findFlag = false;
            if (ObjectIdentifier.isEmpty(startCassette.getUnloadPortID())) {
                break;
            }
            for (Infos.EqpPortStatus eqpPortStatus : eqpPortStatuses) {
                // if (startCassette.getUnloadPortID().equals(eqpPortStatus.getPortID())) {
                if (CimStringUtils.equals(
                        startCassette.getUnloadPortID().getValue(), eqpPortStatus.getPortID().getValue())) {
                    findFlag = true;
                    tmpStartCassette = startCassette;
                    tmpEqpPortStatus = eqpPortStatus;
                    break;
                }
            }
            Validations.check(!findFlag, retCodeConfig.getNotFoundPort());

            Validations.check(
                    !ObjectIdentifier.equalsWithValue(
                            tmpStartCassette.getCassetteID(), tmpEqpPortStatus.getLoadedCassetteID()),
                    retCodeConfig.getInvalidCassettePortCombination());
        }
    }

    @Override
    public Outputs.ObjEquipmentUsageLimitationCheckOut equipmentUsageLimitationCheck(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentId) {
        Outputs.ObjEquipmentUsageLimitationCheckOut resultObj = new Outputs.ObjEquipmentUsageLimitationCheckOut();

        /*----------------*/
        /*   Initialize   */
        /*----------------*/
        resultObj.setUsageLimitOverFlag(false);
        resultObj.setRunWaferOverFlag(false);
        resultObj.setRunTimeOverFlag(false);
        resultObj.setStartCountOverFlag(false);
        resultObj.setIntervalTimeOverFlag(false);

        /*--------------------------*/
        /*   Get eqp Object   */
        /*--------------------------*/
        CimMachine equipment = baseCoreFactory.getBO(CimMachine.class, equipmentId);
        Validations.check(
                null == equipment, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentId.getValue()));

        /*--------------------------*/
        /*   Get Usage Limitation   */
        /*--------------------------*/
        resultObj.setMaxRunWafer(equipment.getMaxRunWafer() != null ? equipment.getMaxRunWafer() : 0);
        resultObj.setMaxRunTime(equipment.getMaxRunTime() != null ? equipment.getMaxRunTime() : 0);
        resultObj.setMaxStartCount(
                equipment.getMaxOperationStart() != null ? equipment.getMaxOperationStart() : 0);
        resultObj.setIntervalTimeBetweenPM(
                equipment.getMaxIntervalTime() != null ? equipment.getMaxIntervalTime() : 0);

        if (resultObj.getMaxRunWafer() == 0
                && resultObj.getMaxRunTime() == 0
                && resultObj.getMaxStartCount() == 0
                && resultObj.getIntervalTimeBetweenPM() == 0) {
            return resultObj;
        }

        resultObj.setRunWafer(equipment.getRunWafer() != null ? equipment.getRunWafer() : 0);
        resultObj.setRunTime(equipment.getRunTime() != null ? equipment.getRunTime() : 0);
        resultObj.setStartCount(
                equipment.getOperationStart() != null ? equipment.getOperationStart() : 0);

        resultObj.setElapsedTimeFromPM(
                equipment.getLastMaintenanceTimeStamp() != null
                        ? equipment.getLastMaintenanceTimeStamp().getTime() / (1000 * 60)
                        : 0); //// Unit:minutes

        /*--------------------------*/
        /*   Set Flag Information   */
        /*--------------------------*/
        if (resultObj.getRunWafer() >= resultObj.getMaxRunWafer()) {
            resultObj.setUsageLimitOverFlag(true);
            resultObj.setRunWaferOverFlag(true);
        }

        if (resultObj.getRunTime() >= resultObj.getMaxRunTime()) {
            resultObj.setUsageLimitOverFlag(true);
            resultObj.setRunTimeOverFlag(true);
        }

        if (resultObj.getStartCount() >= resultObj.getMaxStartCount()) {
            resultObj.setUsageLimitOverFlag(true);
            resultObj.setStartCountOverFlag(true);
        }

        if (resultObj.getElapsedTimeFromPM() >= resultObj.getIntervalTimeBetweenPM()) {
            resultObj.setUsageLimitOverFlag(true);
            resultObj.setIntervalTimeOverFlag(true);
        }

        /*-------------------------*/
        /*   Create Message Text   */
        /*-------------------------*/
        if (resultObj.isUsageLimitOverFlag()) {
            StringBuffer stringBuffer = new StringBuffer();
            stringBuffer
                    .append("<<< eqp Usage Limitation Over >>>")
                    .append("\n    eqp ID            : ")
                    .append(equipmentId)
                    .append("\n    Run wafer               : ")
                    .append(resultObj.getRunWafer())
                    .append("\n    Max Run wafer           : ")
                    .append(resultObj.getMaxRunWafer())
                    .append("\n    Run Time (min)          : ")
                    .append(resultObj.getRunTime())
                    .append("\n    Max Run Time (min)      : ")
                    .append(resultObj.getMaxRunTime())
                    .append("\n    Start Count             : ")
                    .append(resultObj.getStartCount())
                    .append("\n    Max Start Count         : ")
                    .append(resultObj.getMaxStartCount())
                    .append("\n    PM Elapsed Time (min)   : ")
                    .append(resultObj.getElapsedTimeFromPM())
                    .append("\n    PM Interval Time (min)  : ")
                    .append(resultObj.getIntervalTimeBetweenPM());
            resultObj.setMessageText(stringBuffer.toString());
        }

        return resultObj;
    }

    /**
     * availableEquipment_GetByModeAndStatusDR
     *
     * @param objCommon
     * @return
     * @author ho
     */
    @Override
    public List<ObjectIdentifier> availableEquipmentGetByModeAndStatusDR(Infos.ObjCommon objCommon) {
        List<ObjectIdentifier> equipmentIDs = new ArrayList<>();

        String hFROPEMODEONLINE_MODE = BizConstant.SP_EQP_ONLINEMODE_OFFLINE;
        String hFROPEMODEACCESS_MODE = BizConstant.SP_EQP_ACCESSMODE_AUTO;
        String hFRPORTPORT_STATE1 = BizConstant.SP_PORTRSC_PORTSTATE_LOADAVAIL;
        String hFRPORTPORT_STATE2 = BizConstant.SP_PORTRSC_PORTSTATE_LOADREQ;
        String hFRPORTPORT_STATE3 = BizConstant.SP_PORTRSC_PORTSTATE_UNLOADREQ;
        String hFRPORTPORT_DISP_STATE = BizConstant.SP_PORTRSC_DISPATCHSTATE_REQUIRED;

        String takeOutXferInNotAvailableState =
                StandardProperties.OM_XFER_TAKEOUT_IN_NOT_AVAIL_STATE.getValue();
        String sql =
                "SELECT DISTINCT\n"
                        + "	OMPORT.EQP_ID,\n"
                        + "	OMEQPOPEMODE.DISPATCH_MODE,\n"
                        + "	OMPORT.PORT_STATE,\n"
                        + "	OMEQP.AVAILABLE_FLAG\n"
                        + "FROM\n"
                        + "	OMEQP,\n"
                        + "	OMPORT,\n"
                        + "	OMEQPOPEMODE\n"
                        + "WHERE\n"
                        + "	OMEQPOPEMODE.OPE_MODE_ID = OMPORT.EQP_OPE_MODE_ID\n"
                        + "AND OMEQP.EQP_ID = OMPORT.EQP_ID\n"
                        + "AND OMEQPOPEMODE.ONLINE_MODE <> ?1 \n"
                        + "AND OMEQPOPEMODE.ACCESS_MODE = ?2 \n"
                        + "AND OMPORT.PORT_STATE IN (?3 ,?4 ,?5)\n"
                        + "AND PORT_DISPATCH_STATE = ?6 ";
        List<Object[]> allObject =
                cimJpaRepository.query(
                        sql,
                        hFROPEMODEONLINE_MODE,
                        hFROPEMODEACCESS_MODE,
                        hFRPORTPORT_STATE1,
                        hFRPORTPORT_STATE2,
                        hFRPORTPORT_STATE3,
                        hFRPORTPORT_DISP_STATE);
        if (CimArrayUtils.isEmpty(allObject)) {
            return equipmentIDs;
        }
        for (Object[] objects : allObject) {
            if (!CimStringUtils.equals("1", takeOutXferInNotAvailableState)
                    && 1 != CimLongUtils.longValue(objects[3])) {
                log.info(
                        "takeOutXferInNotAvailableState != 1 and hFREQPAVAIL_STATE_FLAG != 1...<<continue fetch>>");
                continue;
            }

            // Omit LoadAvail of Semi2 and LoadReq
            if (CimStringUtils.equals((String) objects[1], BizConstant.SP_EQP_DISPATCHMODE_MANUAL)) {
                if (CimStringUtils.equals(objects[2].toString(), hFRPORTPORT_STATE1)
                        || CimStringUtils.equals(objects[2].toString(), hFRPORTPORT_STATE2)) {
                    continue;
                }
            }
            equipmentIDs.add(ObjectIdentifier.buildWithValue((String) objects[0]));
        }

        Validations.check(CimArrayUtils.isEmpty(equipmentIDs), retCodeConfig.getNotFoundEqp());
        return equipmentIDs;
    }

    @Override
    public List<Infos.EqpContainerPosition> equipmentContainerPositionInfoGetByLotDR(
            Infos.ObjCommon objCommon, ObjectIdentifier lotID) {
        List<Infos.EqpContainerPosition> eqpContainerPositions = new ArrayList<>();

        String sql =
                "SELECT  EQPCTNRPOS_ID,   OMEQPCTNRPOS.ID,\n"
                        + "                    CJ_ID,     CJ_RKEY,    PJ_ID,\n"
                        + "                    OMEQPCTNRPOS.WAFER_ID,   OMEQPCTNRPOS.WAFER_RKEY,\n"
                        + "                    SRC_CARRIER_ID,    SRC_CARRIER_RKEY,\n"
                        + "                    SRC_PORT_ID,    SRC_PORT_RKEY,   SRC_SLOT_NO,    FMC_STATE,\n"
                        + "                    DEST_CARRIER_ID,   DEST_CARRIER_RKEY,\n"
                        + "                    DEST_PORT_ID,   DEST_PORT_RKEY,  DEST_SLOT_NO,\n"
                        + "                    PROCESS_START_TIME,PROCESS_END_TIME,     EST_PROCESS_COMP_TIME,\n"
                        + "                    OMEQPCTNRPOS.LAST_TRX_TIME,OMEQPCTNRPOS.LAST_TRX_USER_ID, OMEQPCTNRPOS.LAST_TRX_USER_RKEY,\n"
                        + "                    OMWAFER.LOT_RKEY\n"
                        + "            FROM    OMEQPCTNRPOS, OMWAFER\n"
                        + "            WHERE   OMEQPCTNRPOS.WAFER_ID = OMWAFER.WAFER_ID\n"
                        + "            AND     OMWAFER.LOT_ID = ?1";
        List<Object[]> queryResult = cimJpaRepository.query(sql, lotID.getValue());
        if (CimArrayUtils.getSize(queryResult) > 0) {
            for (Object[] objects : queryResult) {
                Infos.EqpContainerPosition eqpContainerPosition = new Infos.EqpContainerPosition();
                eqpContainerPosition.setContainerPositionID(
                        new ObjectIdentifier(String.valueOf(objects[0]), String.valueOf(objects[1])));
                eqpContainerPosition.setControlJobID(
                        new ObjectIdentifier(String.valueOf(objects[2]), String.valueOf(objects[3])));
                eqpContainerPosition.setProcessJobID(String.valueOf(objects[4]));
                eqpContainerPosition.setLotID(
                        new ObjectIdentifier(lotID.getValue(), String.valueOf(objects[24]))); // last
                eqpContainerPosition.setWaferID(
                        new ObjectIdentifier(String.valueOf(objects[5]), String.valueOf(objects[6])));
                eqpContainerPosition.setSrcCassetteID(
                        new ObjectIdentifier(String.valueOf(objects[7]), String.valueOf(objects[8])));
                eqpContainerPosition.setSrcPortID(
                        new ObjectIdentifier(String.valueOf(objects[9]), String.valueOf(objects[10])));
                eqpContainerPosition.setSrcSlotNo(Integer.valueOf(String.valueOf(objects[11])));
                eqpContainerPosition.setFmcState(String.valueOf(objects[12]));
                eqpContainerPosition.setDestCassetteID(
                        new ObjectIdentifier(String.valueOf(objects[13]), String.valueOf(objects[14])));
                eqpContainerPosition.setDestPortID(
                        new ObjectIdentifier(String.valueOf(objects[15]), String.valueOf(objects[16])));
                eqpContainerPosition.setDestSlotNo(Integer.valueOf(String.valueOf(objects[17])));
                eqpContainerPosition.setProcessStartTime(
                        CimDateUtils.convertToOrInitialTime(String.valueOf(objects[18])));
                eqpContainerPosition.setProcessCompleteTime(
                        CimDateUtils.convertToOrInitialTime(String.valueOf(objects[19])));
                eqpContainerPosition.setEstimatedProcessEndTime(
                        CimDateUtils.convertToOrInitialTime(String.valueOf(objects[20])));
                eqpContainerPosition.setLastClaimedTimeStamp(
                        CimDateUtils.convertToOrInitialTime(String.valueOf(objects[21])));
                eqpContainerPosition.setLastClaimedUserID(
                        new ObjectIdentifier(String.valueOf(objects[22]), String.valueOf(objects[23])));
                eqpContainerPositions.add(eqpContainerPosition);
            }
        }
        return eqpContainerPositions;
    }

    @Override
    public void equipmentRelatedInfoUpdateForLotSplitOnEqp(
            Infos.ObjCommon objCommon,
            Inputs.EquipmentRelatedInfoUpdateForLotSplitOnEqpIn
                    equipmentRelatedInfoUpdateForLotSplitOnEqpIn) {
        /*----------------*/
        /*   Initialize   */
        /*----------------*/
        ObjectIdentifier equipmentID = equipmentRelatedInfoUpdateForLotSplitOnEqpIn.getEquipmentID();
        ObjectIdentifier parentLotID = equipmentRelatedInfoUpdateForLotSplitOnEqpIn.getParentLotID();
        ObjectIdentifier childLotID = equipmentRelatedInfoUpdateForLotSplitOnEqpIn.getChildLotID();
        log.info("in-parm equipmentID   {}", equipmentID);
        log.info("in-parm parentLotID   {}", parentLotID);
        log.info("in-parm childLotID   {}", childLotID);
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(CimObjectUtils.isEmpty(aMachine), retCodeConfig.getNotFoundMachine());
        // update eqp cassette
        ObjectIdentifier objGetLotCassetteOut = null;
        try {
            objGetLotCassetteOut = lotMethod.lotCassetteGet(objCommon, parentLotID);
            // ok
            log.info("cassetteID,{}", objGetLotCassetteOut.getValue());
            MachineDTO.MachineCassette machineCassette =
                    aMachine.findCassetteNamed(objGetLotCassetteOut.getValue());
            int eqpCstLotLen = CimArrayUtils.getSize(machineCassette.getMachineCassetteLots());
            MachineDTO.MachineCassetteLot aChildMachineCassetteLot = null;
            // search for parent lot
            Boolean parentLotFoundFlag = false;
            for (int i = 0; i < eqpCstLotLen; i++) {
                log.info("loop to machineCassette->machineCassetteLots.length()");
                if (ObjectIdentifier.equalsWithValue(
                        machineCassette.getMachineCassetteLots().get(i).getLotID(), parentLotID)) {
                    aChildMachineCassetteLot = machineCassette.getMachineCassetteLots().get(i);
                    parentLotFoundFlag = true;
                    break;
                }
            }
            if (CimBooleanUtils.isTrue(parentLotFoundFlag)) {
                log.info("parentLotFoundFlag == TRUE");
                List<MachineDTO.MachineCassetteLot> equipmentCassetteLots = new ArrayList<>(machineCassette.getMachineCassetteLots());
                MachineDTO.MachineCassetteLot tmpMachineCassetteLot = new MachineDTO.MachineCassetteLot();
                BeanUtils.copyProperties(aChildMachineCassetteLot, tmpMachineCassetteLot);
                tmpMachineCassetteLot.setLotID(childLotID);
                equipmentCassetteLots.add(tmpMachineCassetteLot);
                machineCassette.setMachineCassetteLots(equipmentCassetteLots);
                aMachine.updateCassette(machineCassette);
            }
        } catch (ServiceException e) {
            if (!Validations.isEquals(retCodeConfig.getNotFoundCst(), e.getCode())) {
                throw e;
            }
        }

        // Add processingLot to eqp
        MachineDTO.MachineLot machineLot = aMachine.findProcessingLotNamed(parentLotID.getValue());
        if (!ObjectIdentifier.isEmpty(machineLot.getControlJobID())) {
            machineLot.setLotID(childLotID);
            aMachine.addProcessingLot(machineLot);
        }

        /*--------------------------------------*/
        /*   Get SLM Switch for the equipment   */
        /*--------------------------------------*/
        Boolean SLMCapabilityFlag = false;
        Infos.EqpBrInfo eqpBrInfo = this.equipmentBRInfoGetDR(objCommon, equipmentID);
        // Check SLM Capability
        if (CimBooleanUtils.isTrue(eqpBrInfo.isFmcCapabilityFlag())) {
            log.info("SLM Capability is TRUE. ");
            SLMCapabilityFlag = true;
        }
        log.info("SLMCapabilityFlag = {}", SLMCapabilityFlag);
        if (CimBooleanUtils.isTrue(SLMCapabilityFlag)) {
            ObjectIdentifier lotID;
            String nilStr = null;
            for (int i = 0; i < 2; i++) {
                if (0 == i) {
                    // ----------------------------------------------------------------
                    //  Parent lot
                    // ----------------------------------------------------------------
                    log.info("Parent Lot,{}", parentLotID.getValue());
                    lotID = parentLotID;
                } else {
                    // ----------------------------------------------------------------
                    //  Child lot
                    // ----------------------------------------------------------------
                    log.info("Child Lot,{}", childLotID.getValue());
                    lotID = childLotID;
                }
                //  Get equipmentContainer position objects by Lot
                Infos.EqpContainerPositionInfo containerPositionInfo =
                        this.equipmentContainerPositionInfoGet(
                                objCommon, equipmentID, lotID, BizConstant.SP_SLM_KEYCATEGORY_LOT);
                List<Infos.EqpContainerPosition> eqpContainerPositions =
                        containerPositionInfo.getEqpContainerPositionList();
                List<Infos.SlmSlotMap> slmSlotMaps = new ArrayList<>();
                Integer nStoredCnt = 0;
                Integer nRetrievedCnt = 0;
                int nContPosLen = CimArrayUtils.getSize(eqpContainerPositions);
                for (int j = 0; j < nContPosLen; j++) {
                    Infos.SlmSlotMap slmSlotMap = new Infos.SlmSlotMap();
                    slmSlotMap.setCassetteID(eqpContainerPositions.get(j).getDestCassetteID());
                    slmSlotMap.setWaferID(eqpContainerPositions.get(j).getWaferID());
                    slmSlotMap.setSlotNumber(eqpContainerPositions.get(j).getDestSlotNo());
                    slmSlotMaps.add(slmSlotMap);
                    if (CimStringUtils.equals(
                            BizConstant.SP_SLMSTATE_STORED, eqpContainerPositions.get(j).getFmcState())) {
                        log.info("SLMState == Stored");
                        nStoredCnt++;
                    } else if (CimStringUtils.equals(
                            BizConstant.SP_SLMSTATE_RETRIEVED, eqpContainerPositions.get(j).getFmcState())) {
                        log.info("SLMState == Retrieved");
                        nRetrievedCnt++;
                    } else if (CimStringUtils.equals(
                            BizConstant.SP_SLMSTATE_RESERVED, eqpContainerPositions.get(j).getFmcState())) {
                        log.info("SLMState == Reserved");
                        break;
                    }
                }
                Boolean bRetrieve = false;
                Boolean bStore = false;
                if (nRetrievedCnt == CimArrayUtils.getSize(eqpContainerPositions)) {
                    log.info("nRetrievedCnt == nContPosLen");
                    bRetrieve = true;
                } else if (nStoredCnt + nRetrievedCnt == CimArrayUtils.getSize(eqpContainerPositions)) {
                    log.info("( nStoredCnt + nRetrievedCnt ) == nContPosLen");
                    bStore = true;
                }
                if (CimBooleanUtils.isTrue(bRetrieve) || CimBooleanUtils.isTrue(bStore)) {
                    log.info("TRUE == bRetrieve || TRUE == bStore");
                    ObjectIdentifier strLotControlJobIDGetOut =
                            lotMethod.lotControlJobIDGet(objCommon, lotID);
                    // ------------------------------------------------------------------------//
                    // check if lot is connected with cassette
                    // ------------------------------------------------------------------------//
                    ObjectIdentifier strLotCassetteGetOut = null;
                    try {
                        strLotCassetteGetOut = lotMethod.lotCassetteGet(objCommon, lotID);
                    } catch (ServiceException e) {
                        if (!Validations.isEquals(retCodeConfig.getNotFoundCassette(), e.getCode())) {
                            throw e;
                        }
                        log.info("Lot is not in carrier.");
                        if (CimBooleanUtils.isTrue(bRetrieve)) {
                            log.info("TRUE == bRetrieve");
                            // ----------------------------------------------------------------
                            // Retrieve wafer in eqp Container
                            // ----------------------------------------------------------------
                            log.info("call equipmentContainer_wafer_Retrieve()");
                            this.equipmentContainerWaferRetrieve(
                                    objCommon,
                                    equipmentID,
                                    strLotControlJobIDGetOut,
                                    ObjectIdentifier.buildWithValue(nilStr),
                                    slmSlotMaps);
                        }
                    }
                    log.info("Lot is in carrier.");
                    if (CimBooleanUtils.isTrue(bStore)) {
                        log.info("TRUE == bStore");
                        // ----------------------------------------------------------------
                        // Store wafer in eqp Container
                        // ----------------------------------------------------------------
                        log.info("call equipmentContainer_wafer_Store()");
                        this.equipmentContainerWaferStore(
                                objCommon, equipmentID, strLotControlJobIDGetOut, nilStr, slmSlotMaps);
                    }
                }
            }
        }
    }

    @Override
    public Long equipmentTakeOutInModeCheck(Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        // 【step1】check environment variable
        log.debug("【step1】check environment variable");

        String envBuf = StandardProperties.OM_XFER_TOTI_ENABLE_FLAG.getValue();
        if (!CimStringUtils.equals(envBuf, "1")) {
            return 0L;
        }
        // 【step2】get eqp object
        log.debug("【step2】get eqp object");
        CimMachine aPosMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == aPosMachine, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));

        // 【step3】check eqp object
        log.debug("【step3】check eqp object");
        Boolean takeOutInFlag = aPosMachine.isTakeOutInTransferFlagOn();
        if (CimBooleanUtils.isFalse(takeOutInFlag)) {
            return 0L;
        }
        return 1L;
    }

    @Override
    public void equipmentCheckConditionForStartReserveCancel(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, ObjectIdentifier controlJobID) {
        // check condition for eqp
        // 【step1】get machine object
        log.debug("【step1】get machine object");
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == aMachine, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));

        // 【step2】get start reserved control job information by controlJob
        log.debug("【step2】get start reserved control job information by controlJob");
        CimControlJob aControlJob = baseCoreFactory.getBO(CimControlJob.class, controlJobID);
        Validations.check(null == aControlJob, new OmCode(retCodeConfig.getNotFoundControlJob()));
        Boolean reservedFlag = aControlJob.isReservedFlagOn();
        Validations.check(
                CimBooleanUtils.isFalse(reservedFlag),
                retCodeConfig.getEquipmentNotReservedForControlJob());

        // 【step3】Inpara EqpID and controljob's EqpID combination Check.
        log.debug("【step3】Inpara EqpID and controljob's EqpID combination Check.");
        aMachine = aControlJob.getMachine();
        Validations.check(null == aMachine, new OmCode(retCodeConfig.getNotFoundEqp(), "*****"));
        String machineID = aMachine.getIdentifier();
        Validations.check(
                !ObjectIdentifier.equalsWithValue(equipmentID, machineID),
                retCodeConfig.getEquipmentNotReservedForControlJob());
    }

    @Override
    public List<Infos.CandidateChamberStatusInfo> equipmentFillInTxEQQ015DR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        if (log.isDebugEnabled()) log.debug("equipmentFillInCandidateChamberStatusInfos(): enter here");
        List<Infos.CandidateChamberStatusInfo> candidateChamberStatusInfoList = new ArrayList<>();
        Machine aMachine =
                newMachineManager.findMachineNamed(ObjectIdentifier.fetchValue(equipmentID));
        Validations.check(null == aMachine, retCodeConfig.getNotFoundEqp());

        boolean isStorage = aMachine.isStorageMachine();
        Validations.check(
                CimBooleanUtils.isTrue(isStorage), retCodeConfig.getInvalidRequestForStocker());

        List<ProcessResource> processResources = aMachine.allProcessResources();
        if (CimArrayUtils.isEmpty(processResources)) {
            Validations.check(retCodeConfig.getNotFoundChamber());
        }
        int leq = CimArrayUtils.getSize(processResources);
        for (int i = 0; i < leq; i++) {
            CimProcessResource processResource = (CimProcessResource) processResources.get(i);
            Validations.check(null == processResource, retCodeConfig.getNotFoundChamber());

            CimMachineState aMachineState = processResource.getCurrentMachineState();
            Validations.check(null == aMachineState, retCodeConfig.getNotFoundEqpState());

            CimE10State anE10State = aMachineState.getE10State();
            Validations.check(null == anE10State, retCodeConfig.getNotFoundE10State());

            Infos.CandidateChamberStatusInfo chamberStatusInfo = new Infos.CandidateChamberStatusInfo();
            candidateChamberStatusInfoList.add(chamberStatusInfo);
            chamberStatusInfo.setChamberID(
                    ObjectIdentifier.build(processResource.getIdentifier(), processResource.getPrimaryKey()));
            chamberStatusInfo.setCurrentStatusCode(
                    ObjectIdentifier.build(aMachineState.getIdentifier(), aMachineState.getPrimaryKey()));
            chamberStatusInfo.setCurrentStatusName(aMachineState.getMachineStateName());
            chamberStatusInfo.setCurrentStatusDescription(aMachineState.getMachineStateDescription());
            chamberStatusInfo.setChamberAvailableFlag(aMachineState.isMachineAvailable());

            Infos.CandidateE10ChamberStatus candidateE10ChamberStatus =
                    new Infos.CandidateE10ChamberStatus();
            chamberStatusInfo.setCandidateCurrentE10(candidateE10ChamberStatus);
            candidateE10ChamberStatus.setE10StatusCode(
                    ObjectIdentifier.build(anE10State.getIdentifier(), anE10State.getPrimaryKey()));

            String anE10StateIdentifier = anE10State.getIdentifier();
            List<ObjectIdentifier> aMachineStateSeq = aMachineState.allMachineStateTransitions();
            int leq1 = CimArrayUtils.getSize(aMachineStateSeq);
            if (0 == leq1) {
                List<CimEquipmentStateDO> equipmentStates =
                        cimJpaRepository.query(
                                "SELECT * FROM OMEQPST WHERE E10_STATE_ID = ?1",
                                CimEquipmentStateDO.class,
                                anE10StateIdentifier);
                int eqpStateSize = CimArrayUtils.getSize(equipmentStates);
                List<Infos.CandidateChamberStatus> candidateChamberStatuses = new ArrayList<>();
                for (int j = 0; j < eqpStateSize; j++) {
                    CimEquipmentStateDO equipmentStateDO = equipmentStates.get(j);
                    Infos.CandidateChamberStatus candidateChamberStatus = new Infos.CandidateChamberStatus();
                    candidateChamberStatus.setChamberStatusCode(
                            ObjectIdentifier.build(
                                    equipmentStateDO.getEquipmentStateID(), equipmentStateDO.getId()));
                    candidateChamberStatus.setChamberStatusName(equipmentStateDO.getEquipmentStateName());
                    candidateChamberStatus.setChamberStatusDescription(equipmentStateDO.getDescription());
                    candidateChamberStatus.setAvailableFlag(equipmentStateDO.getAvailableFlag());
                    candidateChamberStatuses.add(candidateChamberStatus);
                }
                candidateE10ChamberStatus.setCandidateChamberStatusList(candidateChamberStatuses);
            } else {
                CimMachineState aPosMachineState = null;
                List<Infos.CandidateChamberStatus> candidateChamberStatuses = new ArrayList<>();
                for (int j = 0; j < leq1; j++) {
                    aPosMachineState = baseCoreFactory.getBO(CimMachineState.class, aMachineStateSeq.get(j));
                    CimE10State aE10State = aPosMachineState.getE10State();
                    Validations.check(null == aE10State, retCodeConfig.getNotFoundE10State());
                    ObjectIdentifier E10StateID =
                            ObjectIdentifier.build(aE10State.getIdentifier(), aE10State.getPrimaryKey());
                    if (ObjectIdentifier.equalsWithValue(E10StateID, anE10StateIdentifier)) {
                        Infos.CandidateChamberStatus candidateChamberStatus =
                                new Infos.CandidateChamberStatus();
                        candidateChamberStatus.setChamberStatusCode(
                                ObjectIdentifier.build(
                                        aPosMachineState.getIdentifier(), aPosMachineState.getPrimaryKey()));
                        candidateChamberStatus.setChamberStatusName(aPosMachineState.getMachineStateName());
                        candidateChamberStatus.setChamberStatusDescription(
                                aPosMachineState.getMachineStateDescription());
                        candidateChamberStatus.setAvailableFlag(aPosMachineState.isMachineAvailable());
                        candidateChamberStatuses.add(candidateChamberStatus);
                    }
                }
                candidateE10ChamberStatus.setCandidateChamberStatusList(candidateChamberStatuses);
                chamberStatusInfo.setCandidateCurrentE10(candidateE10ChamberStatus);

                List<Infos.CandidateE10ChamberStatus> candidateOtherE10List = new ArrayList<>();
                /*--------------------------*/
                /*   CIMFW_E10_Productive   */
                /*--------------------------*/
                for (int j = 0; j < leq1; j++) {
                    aPosMachineState = baseCoreFactory.getBO(CimMachineState.class, aMachineStateSeq.get(j));
                    CimE10State aE10State = aPosMachineState.getE10State();
                    Validations.check(null == aE10State, retCodeConfig.getNotFoundE10State());
                    ObjectIdentifier E10StateID =
                            ObjectIdentifier.build(aE10State.getIdentifier(), aE10State.getPrimaryKey());
                    if (ObjectIdentifier.equalsWithValue(E10StateID, anE10StateIdentifier)) {
                        continue;
                    }
                    if (ObjectIdentifier.equalsWithValue(E10StateID, BizConstant.SP_E10STATE_PRODUCTIVE)) {
                        anE10State = codeManager.findE10StateNamed(BizConstant.SP_E10STATE_PRODUCTIVE);
                        Infos.CandidateE10ChamberStatus strCandidateOtherE10 =
                                new Infos.CandidateE10ChamberStatus();
                        strCandidateOtherE10.setE10StatusCode(
                                ObjectIdentifier.build(aE10State.getIdentifier(), aE10State.getPrimaryKey()));
                        List<Infos.CandidateChamberStatus> chamberStatuses = new ArrayList<>();
                        Infos.CandidateChamberStatus candidateChamberStatus =
                                new Infos.CandidateChamberStatus();

                        candidateChamberStatus.setChamberStatusCode(
                                ObjectIdentifier.build(
                                        aPosMachineState.getIdentifier(), aPosMachineState.getPrimaryKey()));
                        candidateChamberStatus.setChamberStatusName(aPosMachineState.getMachineStateName());
                        candidateChamberStatus.setChamberStatusDescription(
                                aPosMachineState.getMachineStateDescription());
                        candidateChamberStatus.setAvailableFlag(aPosMachineState.isMachineAvailable());

                        chamberStatuses.add(candidateChamberStatus);
                        strCandidateOtherE10.setCandidateChamberStatusList(chamberStatuses);
                        candidateOtherE10List.add(strCandidateOtherE10);
                    }
                }
                /*-----------------------*/
                /*   CIMFW_E10_Standby   */
                /*-----------------------*/
                Infos.CandidateE10ChamberStatus strCandidateOtherE10 =
                        new Infos.CandidateE10ChamberStatus();
                List<Infos.CandidateChamberStatus> chamberStatuses = new ArrayList<>();
                strCandidateOtherE10.setCandidateChamberStatusList(chamberStatuses);
                for (int j = 0; j < leq1; j++) {
                    aPosMachineState = baseCoreFactory.getBO(CimMachineState.class, aMachineStateSeq.get(j));
                    CimE10State aE10State = aPosMachineState.getE10State();
                    Validations.check(null == aE10State, retCodeConfig.getNotFoundE10State());
                    ObjectIdentifier E10StateID =
                            ObjectIdentifier.build(aE10State.getIdentifier(), aE10State.getPrimaryKey());
                    if (ObjectIdentifier.equalsWithValue(E10StateID, anE10StateIdentifier)) {
                        continue;
                    }
                    if (ObjectIdentifier.equalsWithValue(E10StateID, BizConstant.SP_E10STATE_STANDBY)) {
                        anE10State = codeManager.findE10StateNamed(BizConstant.SP_E10STATE_STANDBY);
                        strCandidateOtherE10.setE10StatusCode(
                                ObjectIdentifier.build(aE10State.getIdentifier(), aE10State.getPrimaryKey()));
                        Infos.CandidateChamberStatus candidateChamberStatus =
                                new Infos.CandidateChamberStatus();

                        candidateChamberStatus.setChamberStatusCode(
                                ObjectIdentifier.build(
                                        aPosMachineState.getIdentifier(), aPosMachineState.getPrimaryKey()));
                        candidateChamberStatus.setChamberStatusName(aPosMachineState.getMachineStateName());
                        candidateChamberStatus.setChamberStatusDescription(
                                aPosMachineState.getMachineStateDescription());
                        candidateChamberStatus.setAvailableFlag(aPosMachineState.isMachineAvailable());
                        chamberStatuses.add(candidateChamberStatus);
                    }
                }
                if (!CimObjectUtils.isEmpty(chamberStatuses)) {
                    candidateOtherE10List.add(strCandidateOtherE10);
                }
                /*---------------------------*/
                /*   CIMFW_E10_Engineering   */
                /*---------------------------*/
                strCandidateOtherE10 = new Infos.CandidateE10ChamberStatus();
                chamberStatuses = new ArrayList<>();
                strCandidateOtherE10.setCandidateChamberStatusList(chamberStatuses);
                for (int j = 0; j < leq1; j++) {
                    aPosMachineState = baseCoreFactory.getBO(CimMachineState.class, aMachineStateSeq.get(j));
                    CimE10State aE10State = aPosMachineState.getE10State();
                    Validations.check(null == aE10State, retCodeConfig.getNotFoundE10State());
                    ObjectIdentifier E10StateID =
                            ObjectIdentifier.build(aE10State.getIdentifier(), aE10State.getPrimaryKey());
                    if (ObjectIdentifier.equalsWithValue(E10StateID, anE10StateIdentifier)) {
                        continue;
                    }
                    if (ObjectIdentifier.equalsWithValue(E10StateID, BizConstant.SP_E10STATE_ENGINEERING)) {
                        anE10State = codeManager.findE10StateNamed(BizConstant.SP_E10STATE_ENGINEERING);
                        strCandidateOtherE10.setE10StatusCode(
                                ObjectIdentifier.build(aE10State.getIdentifier(), aE10State.getPrimaryKey()));
                        Infos.CandidateChamberStatus candidateChamberStatus =
                                new Infos.CandidateChamberStatus();
                        candidateChamberStatus.setChamberStatusCode(
                                ObjectIdentifier.build(
                                        aPosMachineState.getIdentifier(), aPosMachineState.getPrimaryKey()));
                        candidateChamberStatus.setChamberStatusName(aPosMachineState.getMachineStateName());
                        candidateChamberStatus.setChamberStatusDescription(
                                aPosMachineState.getMachineStateDescription());
                        candidateChamberStatus.setAvailableFlag(aPosMachineState.isMachineAvailable());
                        chamberStatuses.add(candidateChamberStatus);
                    }
                }
                if (!CimObjectUtils.isEmpty(chamberStatuses)) {
                    candidateOtherE10List.add(strCandidateOtherE10);
                }
                /*---------------------------------*/
                /*   CIMFW_E10_ScheduledDownTime   */
                /*---------------------------------*/
                strCandidateOtherE10 = new Infos.CandidateE10ChamberStatus();
                chamberStatuses = new ArrayList<>();
                strCandidateOtherE10.setCandidateChamberStatusList(chamberStatuses);
                for (int j = 0; j < leq1; j++) {
                    aPosMachineState = baseCoreFactory.getBO(CimMachineState.class, aMachineStateSeq.get(j));
                    CimE10State aE10State = aPosMachineState.getE10State();
                    Validations.check(null == aE10State, retCodeConfig.getNotFoundE10State());
                    ObjectIdentifier E10StateID =
                            ObjectIdentifier.build(aE10State.getIdentifier(), aE10State.getPrimaryKey());
                    if (ObjectIdentifier.equalsWithValue(E10StateID, anE10StateIdentifier)) {
                        continue;
                    }
                    if (ObjectIdentifier.equalsWithValue(
                            E10StateID, BizConstant.SP_E10STATE_SCHEDULEDDOWNTIME)) {
                        anE10State = codeManager.findE10StateNamed(BizConstant.SP_E10STATE_SCHEDULEDDOWNTIME);
                        strCandidateOtherE10.setE10StatusCode(
                                ObjectIdentifier.build(aE10State.getIdentifier(), aE10State.getPrimaryKey()));
                        Infos.CandidateChamberStatus candidateChamberStatus =
                                new Infos.CandidateChamberStatus();

                        candidateChamberStatus.setChamberStatusCode(
                                ObjectIdentifier.build(
                                        aPosMachineState.getIdentifier(), aPosMachineState.getPrimaryKey()));
                        candidateChamberStatus.setChamberStatusName(aPosMachineState.getMachineStateName());
                        candidateChamberStatus.setChamberStatusDescription(
                                aPosMachineState.getMachineStateDescription());
                        candidateChamberStatus.setAvailableFlag(aPosMachineState.isMachineAvailable());
                        chamberStatuses.add(candidateChamberStatus);
                    }
                }
                if (!CimObjectUtils.isEmpty(chamberStatuses)) {
                    candidateOtherE10List.add(strCandidateOtherE10);
                }
                /*-----------------------------------*/
                /*   CIMFW_E10_UnScheduledDownTime   */
                /*-----------------------------------*/
                strCandidateOtherE10 = new Infos.CandidateE10ChamberStatus();
                chamberStatuses = new ArrayList<>();
                strCandidateOtherE10.setCandidateChamberStatusList(chamberStatuses);
                for (int j = 0; j < leq1; j++) {
                    aPosMachineState = baseCoreFactory.getBO(CimMachineState.class, aMachineStateSeq.get(j));
                    CimE10State aE10State = aPosMachineState.getE10State();
                    Validations.check(null == aE10State, retCodeConfig.getNotFoundE10State());
                    ObjectIdentifier E10StateID =
                            ObjectIdentifier.build(aE10State.getIdentifier(), aE10State.getPrimaryKey());
                    if (ObjectIdentifier.equalsWithValue(E10StateID, anE10StateIdentifier)) {
                        continue;
                    }
                    if (ObjectIdentifier.equalsWithValue(
                            E10StateID, BizConstant.SP_E10STATE_UNSCHEDULEDDOWNTIME)) {
                        anE10State = codeManager.findE10StateNamed(BizConstant.SP_E10STATE_UNSCHEDULEDDOWNTIME);
                        strCandidateOtherE10.setE10StatusCode(
                                ObjectIdentifier.build(aE10State.getIdentifier(), aE10State.getPrimaryKey()));
                        Infos.CandidateChamberStatus candidateChamberStatus =
                                new Infos.CandidateChamberStatus();

                        candidateChamberStatus.setChamberStatusCode(
                                ObjectIdentifier.build(
                                        aPosMachineState.getIdentifier(), aPosMachineState.getPrimaryKey()));
                        candidateChamberStatus.setChamberStatusName(aPosMachineState.getMachineStateName());
                        candidateChamberStatus.setChamberStatusDescription(
                                aPosMachineState.getMachineStateDescription());
                        candidateChamberStatus.setAvailableFlag(aPosMachineState.isMachineAvailable());

                        chamberStatuses.add(candidateChamberStatus);
                    }
                }
                if (!CimObjectUtils.isEmpty(chamberStatuses)) {
                    candidateOtherE10List.add(strCandidateOtherE10);
                }
                /*----------------------------*/
                /*   CIMFW_E10_NonScheduled   */
                /*----------------------------*/
                strCandidateOtherE10 = new Infos.CandidateE10ChamberStatus();
                chamberStatuses = new ArrayList<>();
                strCandidateOtherE10.setCandidateChamberStatusList(chamberStatuses);
                for (int j = 0; j < leq1; j++) {
                    aPosMachineState = baseCoreFactory.getBO(CimMachineState.class, aMachineStateSeq.get(j));
                    CimE10State aE10State = aPosMachineState.getE10State();
                    Validations.check(null == aE10State, retCodeConfig.getNotFoundE10State());
                    ObjectIdentifier E10StateID =
                            ObjectIdentifier.build(aE10State.getIdentifier(), aE10State.getPrimaryKey());
                    if (ObjectIdentifier.equalsWithValue(E10StateID, anE10StateIdentifier)) {
                        continue;
                    }
                    if (ObjectIdentifier.equalsWithValue(
                            E10StateID, BizConstant.SP_E10STATE_NONSCHEDULEDTIME)) {
                        anE10State = codeManager.findE10StateNamed(BizConstant.SP_E10STATE_NONSCHEDULEDTIME);
                        strCandidateOtherE10.setE10StatusCode(
                                ObjectIdentifier.build(aE10State.getIdentifier(), aE10State.getPrimaryKey()));
                        Infos.CandidateChamberStatus candidateChamberStatus =
                                new Infos.CandidateChamberStatus();

                        candidateChamberStatus.setChamberStatusCode(
                                ObjectIdentifier.build(
                                        aPosMachineState.getIdentifier(), aPosMachineState.getPrimaryKey()));
                        candidateChamberStatus.setChamberStatusName(aPosMachineState.getMachineStateName());
                        candidateChamberStatus.setChamberStatusDescription(
                                aPosMachineState.getMachineStateDescription());
                        candidateChamberStatus.setAvailableFlag(aPosMachineState.isMachineAvailable());

                        chamberStatuses.add(candidateChamberStatus);
                    }
                }
                if (!CimObjectUtils.isEmpty(chamberStatuses)) {
                    candidateOtherE10List.add(strCandidateOtherE10);
                }
                chamberStatusInfo.setCandidateOtherE10List(candidateOtherE10List);
                continue;
            }

            Boolean changeToOtherFlag = aMachineState.isChangeToOtherE10();
            if (CimBooleanUtils.isFalse(changeToOtherFlag)) {
                continue;
            }

            // 为当前状态赋值
            List<Infos.CandidateE10ChamberStatus> candidateOtherE10List = new ArrayList<>();
            chamberStatusInfo.setCandidateOtherE10List(candidateOtherE10List);

            List<String> E10typeList =
                    CimArrayUtils.generateList(
                            CIMStateConst.CIM_E10_PRODUCTIVE,
                            CIMStateConst.CIM_E10_STANDBY,
                            CIMStateConst.CIM_E10_ENGINEERING,
                            CIMStateConst.CIM_E10_SCHEDULED_DOWN_TIME,
                            CIMStateConst.CIM_E10_UN_SCHEDULED_DOWN_TIME,
                            CIMStateConst.CIM_E10_NON_SCHEDULED);
            for (String tempE10State : E10typeList) {
                if (CimStringUtils.equals(tempE10State, anE10StateIdentifier)) {
                    continue;
                }
                anE10State = codeManager.findE10StateNamed(tempE10State);
                List<CimEquipmentStateDO> equipmentStates =
                        cimJpaRepository.query(
                                "SELECT * FROM OMEQPST WHERE E10_STATE_ID = ?1 AND FROM_FLAG = ?2",
                                CimEquipmentStateDO.class,
                                tempE10State,
                                true);
                Infos.CandidateE10ChamberStatus strCandidateOtherE10 =
                        new Infos.CandidateE10ChamberStatus();
                strCandidateOtherE10.setE10StatusCode(
                        ObjectIdentifier.build(anE10State.getIdentifier(), anE10State.getPrimaryKey()));

                List<Infos.CandidateChamberStatus> chamberStatuses = new ArrayList<>();
                int equipmentStateSize = CimArrayUtils.getSize(equipmentStates);
                for (int j = 0; j < equipmentStateSize; j++) {
                    CimEquipmentStateDO equipmentStateDO = equipmentStates.get(j);
                    Infos.CandidateChamberStatus candidateChamberStatus = new Infos.CandidateChamberStatus();
                    candidateChamberStatus.setChamberStatusCode(
                            ObjectIdentifier.build(
                                    equipmentStateDO.getEquipmentStateID(), equipmentStateDO.getId()));
                    candidateChamberStatus.setChamberStatusName(equipmentStateDO.getEquipmentStateName());
                    candidateChamberStatus.setChamberStatusDescription(equipmentStateDO.getDescription());
                    candidateChamberStatus.setAvailableFlag(equipmentStateDO.getAvailableFlag());
                    chamberStatuses.add(candidateChamberStatus);
                }
                strCandidateOtherE10.setCandidateChamberStatusList(chamberStatuses);
                candidateOtherE10List.add(strCandidateOtherE10);
            }
        }
        return candidateChamberStatusInfoList;
    }

    @Override
    public List<Infos.CandidateChamberStatusInfo> equipmentFillInTxEQQ015DRV2(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        CimMachine machine = newMachineManager.findMachineNamed(equipmentID.getValue());
        Validations.check(machine == null, retCodeConfig.getNotFoundEqp());
        Validations.check(
                CimBooleanUtils.isTrue(machine.isStorageMachine()),
                retCodeConfig.getInvalidRequestForStocker());

        List<ProcessResource> processResources = machine.allProcessResources();
        Validations.check(CimArrayUtils.isEmpty(processResources), retCodeConfig.getNotFoundChamber(),ObjectIdentifier.fetchValue(equipmentID));

        CimPerson person = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());
        Validations.check(person == null, retCodeConfig.getNotFoundPerson());
        List<String> userGroups = person.getUserGroups();

        List<Infos.CandidateChamberStatusInfo> out = Lists.newArrayList();
        for (ProcessResource resource : processResources) {
            CimProcessResource chamber = (CimProcessResource) resource;
            Validations.check(chamber == null, retCodeConfig.getNotFoundChamber());

            CimMachineState currentState = chamber.getCurrentMachineState();
            Validations.check(currentState == null, retCodeConfig.getNotFoundEqpState());

            CimE10State currentE10 = currentState.getE10State();
            Validations.check(currentE10 == null, retCodeConfig.getNotFoundE10State());

            Infos.CandidateChamberStatusInfo info = new Infos.CandidateChamberStatusInfo();
            info.setChamberID(ObjectIdentifier.build(chamber.getIdentifier(), chamber.getPrimaryKey()));
            info.setCurrentStatusCode(
                    ObjectIdentifier.build(currentState.getIdentifier(), currentState.getPrimaryKey()));
            info.setCurrentStatusName(currentState.getMachineStateName());
            info.setCurrentStatusDescription(currentState.getMachineStateDescription());
            info.setChamberAvailableFlag(currentState.isMachineAvailable());

            List<Infos.CandidateChamberStatus> candidateStatuses = Lists.newArrayList();
            Infos.CandidateE10ChamberStatus chamberE10 = new Infos.CandidateE10ChamberStatus();
            chamberE10.setE10StatusCode(
                    ObjectIdentifier.build(currentE10.getIdentifier(), currentE10.getPrimaryKey()));
            chamberE10.setCandidateChamberStatusList(candidateStatuses);
            info.setCandidateCurrentE10(chamberE10);
            out.add(info);

            List<ObjectIdentifier> transitions =
                    currentState.allMachineStateTransitions(machine.getEqpModel());
            if (CimArrayUtils.isEmpty(transitions)) {
                List<CimEquipmentStateDO> states =
                        cimJpaRepository.query(
                                "SELECT * FROM OMEQPST WHERE E10_STATE_ID = ?1",
                                CimEquipmentStateDO.class,
                                currentE10.getIdentifier());
                if (CimArrayUtils.isNotEmpty(states)) {
                    states.forEach(state -> candidateStatuses.add(setCandidateChamberStatus(state)));
                }
            } else {
                List<Infos.CandidateE10ChamberStatus> chamberE10Others = Lists.newArrayList();

                Infos.CandidateE10ChamberStatus candidateE10Other1 = new Infos.CandidateE10ChamberStatus();
                List<Infos.CandidateChamberStatus> chamberStatuses1 = Lists.newArrayList();

                Infos.CandidateE10ChamberStatus candidateE10Other2 = new Infos.CandidateE10ChamberStatus();
                List<Infos.CandidateChamberStatus> chamberStatuses2 = Lists.newArrayList();
                candidateE10Other2.setCandidateChamberStatusList(chamberStatuses2);

                Infos.CandidateE10ChamberStatus candidateE10Other3 = new Infos.CandidateE10ChamberStatus();
                List<Infos.CandidateChamberStatus> chamberStatuses3 = Lists.newArrayList();
                candidateE10Other3.setCandidateChamberStatusList(chamberStatuses3);

                Infos.CandidateE10ChamberStatus candidateE10Other4 = new Infos.CandidateE10ChamberStatus();
                List<Infos.CandidateChamberStatus> chamberStatuses4 = Lists.newArrayList();
                candidateE10Other4.setCandidateChamberStatusList(chamberStatuses4);

                Infos.CandidateE10ChamberStatus candidateE10Other5 = new Infos.CandidateE10ChamberStatus();
                List<Infos.CandidateChamberStatus> chamberStatuses5 = Lists.newArrayList();
                candidateE10Other5.setCandidateChamberStatusList(chamberStatuses5);

                transitions.forEach(
                        stateID -> {
                            CimMachineState state = baseCoreFactory.getBO(CimMachineState.class, stateID);
                            CimE10State e10State = state.getE10State();
                            Validations.check(e10State == null, retCodeConfig.getNotFoundE10State());

                            List<CodeDTO.BrEquipmentStateUserGroupData> userGroupLimits =
                                    currentState.findUserGroupsForNextEquipmentState(
                                            machine.getEqpModel(), stateID.getValue());
                            if (CimArrayUtils.isNotEmpty(userGroupLimits)
                                    && userGroupLimits.stream()
                                    .noneMatch(group -> userGroups.contains(group.getUserGroupId()))) {
                                return;
                            }

                            if (CimStringUtils.equals(e10State.getIdentifier(), currentE10.getIdentifier())) {
                                // Current E10
                                candidateStatuses.add(setCandidateChamberStatus(state));
                            } else {
                                ObjectIdentifier e10StateID =
                                        ObjectIdentifier.build(e10State.getIdentifier(), e10State.getPrimaryKey());
                                switch (e10State.getIdentifier()) {
                                    case BizConstant.SP_E10STATE_PRODUCTIVE:
                                        // CIMFW_E10_Productive
                                        Infos.CandidateE10ChamberStatus candidateE10Other =
                                                new Infos.CandidateE10ChamberStatus();
                                        candidateE10Other.setE10StatusCode(e10StateID);
                                        List<Infos.CandidateChamberStatus> chamberStatuses = Lists.newArrayList();
                                        chamberStatuses.add(setCandidateChamberStatus(state));
                                        candidateE10Other.setCandidateChamberStatusList(chamberStatuses);
                                        chamberE10Others.add(candidateE10Other);
                                        break;
                                    case BizConstant.SP_E10STATE_STANDBY:
                                        // CIMFW_E10_Standby
                                        candidateE10Other1.setE10StatusCode(e10StateID);
                                        chamberStatuses1.add(setCandidateChamberStatus(state));
                                        break;
                                    case BizConstant.SP_E10STATE_ENGINEERING:
                                        // CIMFW_E10_Engineering
                                        candidateE10Other2.setE10StatusCode(e10StateID);
                                        chamberStatuses2.add(setCandidateChamberStatus(state));
                                        break;
                                    case BizConstant.SP_E10STATE_SCHEDULEDDOWNTIME:
                                        // CIMFW_E10_ScheduledDownTime
                                        candidateE10Other3.setE10StatusCode(e10StateID);
                                        chamberStatuses3.add(setCandidateChamberStatus(state));
                                        break;
                                    case BizConstant.SP_E10STATE_UNSCHEDULEDDOWNTIME:
                                        // CIMFW_E10_UnScheduledDownTime
                                        candidateE10Other4.setE10StatusCode(e10StateID);
                                        chamberStatuses4.add(setCandidateChamberStatus(state));
                                        break;
                                    case BizConstant.SP_E10STATE_NONSCHEDULEDTIME:
                                        // CIMFW_E10_NonScheduled
                                        candidateE10Other5.setE10StatusCode(e10StateID);
                                        chamberStatuses5.add(setCandidateChamberStatus(state));
                                        break;
                                }
                            }
                        });
                if (CimArrayUtils.isNotEmpty(chamberStatuses1)) {
                    candidateE10Other1.setCandidateChamberStatusList(chamberStatuses1);
                    chamberE10Others.add(candidateE10Other1);
                }
                if (CimArrayUtils.isNotEmpty(chamberStatuses2)) {
                    candidateE10Other2.setCandidateChamberStatusList(chamberStatuses2);
                    chamberE10Others.add(candidateE10Other2);
                }
                if (CimArrayUtils.isNotEmpty(chamberStatuses3)) {
                    candidateE10Other3.setCandidateChamberStatusList(chamberStatuses3);
                    chamberE10Others.add(candidateE10Other3);
                }
                if (CimArrayUtils.isNotEmpty(chamberStatuses4)) {
                    candidateE10Other4.setCandidateChamberStatusList(chamberStatuses4);
                    chamberE10Others.add(candidateE10Other4);
                }
                if (CimArrayUtils.isNotEmpty(chamberStatuses5)) {
                    candidateE10Other5.setCandidateChamberStatusList(chamberStatuses5);
                    chamberE10Others.add(candidateE10Other5);
                }
                info.setCandidateOtherE10List(chamberE10Others);
                continue;
            }

            if (CimBooleanUtils.isFalse(currentState.isChangeToOtherE10())) {
                continue;
            }

            List<Infos.CandidateE10ChamberStatus> chamberE10Others = Lists.newArrayList();
            info.setCandidateOtherE10List(chamberE10Others);

            List<String> e10Ids =
                    Arrays.asList(
                            CIMStateConst.CIM_E10_PRODUCTIVE,
                            CIMStateConst.CIM_E10_STANDBY,
                            CIMStateConst.CIM_E10_ENGINEERING,
                            CIMStateConst.CIM_E10_SCHEDULED_DOWN_TIME,
                            CIMStateConst.CIM_E10_UN_SCHEDULED_DOWN_TIME,
                            CIMStateConst.CIM_E10_NON_SCHEDULED);
            e10Ids.stream()
                    .filter(e10Id -> CimStringUtils.unEqual(e10Id, currentE10.getIdentifier()))
                    .forEach(
                            e10Id -> {
                                CimE10State e10State = codeManager.findE10StateNamed(e10Id);

                                Infos.CandidateE10ChamberStatus candidateE10Other =
                                        new Infos.CandidateE10ChamberStatus();
                                candidateE10Other.setE10StatusCode(
                                        ObjectIdentifier.build(e10State.getIdentifier(), e10State.getPrimaryKey()));

                                List<CimEquipmentStateDO> equipmentStates =
                                        cimJpaRepository.query(
                                                "SELECT * FROM OMEQPST WHERE E10_STATE_ID = ?1 AND FROM_FLAG = ?2",
                                                CimEquipmentStateDO.class,
                                                e10Id,
                                                1);
                                List<Infos.CandidateChamberStatus> statuses = Lists.newArrayList();
                                if (CimArrayUtils.isNotEmpty(equipmentStates)) {
                                    equipmentStates.forEach(state -> statuses.add(setCandidateChamberStatus(state)));
                                }
                                candidateE10Other.setCandidateChamberStatusList(statuses);

                                chamberE10Others.add(candidateE10Other);
                            });
        }

        return out;
    }

    private Infos.CandidateChamberStatus setCandidateChamberStatus(CimEquipmentStateDO state) {
        Infos.CandidateChamberStatus candidate = new Infos.CandidateChamberStatus();
        candidate.setChamberStatusCode(
                ObjectIdentifier.build(state.getEquipmentStateID(), state.getId()));
        candidate.setChamberStatusName(state.getEquipmentStateName());
        candidate.setChamberStatusDescription(state.getDescription());
        candidate.setAvailableFlag(state.getAvailableFlag());
        return candidate;
    }

    private Infos.CandidateChamberStatus setCandidateChamberStatus(CimMachineState state) {
        Infos.CandidateChamberStatus candidate = new Infos.CandidateChamberStatus();
        candidate.setChamberStatusCode(
                ObjectIdentifier.build(state.getIdentifier(), state.getPrimaryKey()));
        candidate.setChamberStatusName(state.getMachineStateName());
        candidate.setChamberStatusDescription(state.getMachineStateDescription());
        candidate.setAvailableFlag(state.isMachineAvailable());
        return candidate;
    }

    @Override
    public void equipmentReservedControlJobIDClear(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, ObjectIdentifier controlJobID) {
        log.debug("clearEquipmentReservedControlJobID(): enter clearEquipmentReservedControlJobID");
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == aMachine,
                new OmCode(retCodeConfig.getNotFoundEqp(), ObjectIdentifier.fetchValue(equipmentID)));

        CimControlJob aControlJob = baseCoreFactory.getBO(CimControlJob.class, controlJobID);
        Validations.check(
                null == aControlJob,
                new OmCode(
                        retCodeConfig.getNotFoundControlJob(), ObjectIdentifier.fetchValue(controlJobID)));
        aControlJob.makeReservedFlagOff();
    }

    @Override
    public void equipmentProcessingLotAdd(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            ObjectIdentifier controlJobID,
            List<Infos.StartCassette> startCassetteList) {
        log.debug("addEquipmentProcessLot(): enter addEquipmentProcessLot");
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(aMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), "*****"));
        /*---------------------------------*/
        /*   Set posMachineLot structure   */
        /*---------------------------------*/
        for (Infos.StartCassette startCassette : startCassetteList) {
            /*--------------------------------*/
            /*   Omit Non-Operable Cassette   */
            /*--------------------------------*/
            String loadPurposeType = startCassette.getLoadPurposeType();
            if (!CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT)
                    && !CimStringUtils.equals(
                    loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT)
                    // loadPurposeType=other不跳过
                    && !CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_OTHER)) {
                continue;
            }
            /*----------------------------------*/
            /*   Get UnloadPort's UnloadSeqNo   */
            /*----------------------------------*/
            PortResource anUnloadPort =
                    aMachine.findPortResourceNamed(startCassette.getUnloadPortID().getValue());
            com.fa.cim.newcore.bo.machine.CimPortResource anPosUnloadPort =
                    (com.fa.cim.newcore.bo.machine.CimPortResource) anUnloadPort;
            Validations.check(anPosUnloadPort == null, retCodeConfig.getNotFoundPortResource());
            Long unloadSeqNo = anPosUnloadPort.getUnloadSeqInPortGroup();
            List<Infos.LotInCassette> lotInCassetteList = startCassette.getLotInCassetteList();
            for (Infos.LotInCassette lotInCassette : lotInCassetteList) {
                /*------------------------*/
                /*   Omit Not-Start Lot   */
                /*------------------------*/
                boolean operationStartFlag = lotInCassette.getMoveInFlag();
                if (!operationStartFlag) {
                    continue;
                }
                /*-----------------------------*/
                /*   Set Data into Structure   */
                /*-----------------------------*/
                MachineDTO.MachineLot processingLot = new MachineDTO.MachineLot();
                processingLot.setControlJobID(controlJobID);
                processingLot.setLotID(lotInCassette.getLotID());
                processingLot.setUnloadCassetteID(startCassette.getCassetteID());
                processingLot.setUnloadPortID(startCassette.getUnloadPortID());
                processingLot.setUnloadSequenceNumber(unloadSeqNo);
                processingLot.setDataCollectionRequiredFlag(
                        lotInCassette.getStartRecipe().getDataCollectionFlag());
                /*--------------------------*/
                /*   Set Data into Object   */
                /*--------------------------*/
                aMachine.addProcessingLot(processingLot);
                String updateRecipeFlagStr = StandardProperties.OM_UPDATE_LAST_USED_RECIPE.getValue();
                int updateRecipeFlag =
                        CimStringUtils.isEmpty(updateRecipeFlagStr) ? 0 : Integer.parseInt(updateRecipeFlagStr);
                if (updateRecipeFlag != 0) {
                    CimMachineRecipe aMachineRecipe =
                            baseCoreFactory.getBO(
                                    CimMachineRecipe.class, lotInCassette.getStartRecipe().getMachineRecipeID());
                    aMachine.setUsedMachineRecipe(aMachineRecipe);
                }
            }
        }
    }

    @Override
    public Boolean equipmentCurrentStateCheckToManufacturing(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        log.debug(
                "checkEquipmentCurrentState2Manufacturing(): enter checkEquipmentCurrentState2Manufacturing");

        CimMachine baseMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == baseMachine,
                new OmCode(retCodeConfig.getNotFoundEqp(), ObjectIdentifier.fetchValue(equipmentID)));
        boolean isStorageBool = baseMachine.isStorageMachine();
        CimMachineState machineState = null;
        if (isStorageBool) {
            machineState = ((CimStorageMachine) baseMachine).getCurrentMachineState();
        } else {
            machineState = baseMachine.getCurrentMachineState();
        }
        Validations.check(machineState == null, retCodeConfig.getNotFoundEqpState());
        return machineState.isManufacturingStateChangeable();
    }

    @Override
    public ObjectIdentifier equipmentRecoverStateGetManufacturing(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        if (log.isDebugEnabled())
            log.debug("getEquipmentManufacturingRecoverState(): enter getEquipmentManufacturingRecoverState");
        CimMachine machine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == machine, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));

        List<MachineDTO.MachineLot> processingLotList = machine.allProcessingLots();
        String state =
                CimArrayUtils.isNotEmpty(processingLotList)
                        ? CIMStateConst.CIM_E10_PRODUCTIVE
                        : CIMStateConst.CIM_E10_STANDBY;
        CimE10State cimE10State = codeManager.findE10StateNamed(state);
        Validations.check(cimE10State == null, retCodeConfig.getNotFoundE10State());

        AtomicReference<CimMachineState> machineStateNamed = new AtomicReference<>();
        Optional.ofNullable(processingLotList).ifPresent(lotList -> lotList.stream().anyMatch(machineLot -> {
            String subLotTypeGetDR = lotMethod.lotSubLotTypeGetDR(objCommon, machineLot.getLotID());
            if (!CimStringUtils.equals(subLotTypeGetDR,BizConstant.SEASON_LOT_TYPE)) {
                return false;
            }
            if (StandardProperties.OM_SEASON_EQPSTATE.isTrue()) {
                return true;
            }
            CimE10State _cimE10State = codeManager.findE10StateNamed(CIMStateConst.CIM_E10_STANDBY);
            Validations.check(_cimE10State == null, retCodeConfig.getNotFoundE10State());
            machineStateNamed.set(_cimE10State.findMachineStateNamed(BizConstant.SEASON_EQP_STAT));
            return true;
        }));
        if (machineStateNamed.get() != null) {
            return ObjectIdentifier.build(machineStateNamed.get().getIdentifier(),
                    machineStateNamed.get().getPrimaryKey());
        }

        CimMachineState defaultEquipmentState = cimE10State.getDefaultMachineState();
        Validations.check(
                defaultEquipmentState == null, retCodeConfig.getNotFoundDefaultMachineState());
        return new ObjectIdentifier(
                defaultEquipmentState.getIdentifier(), defaultEquipmentState.getPrimaryKey());
    }

    @Override
    public void equipmentUsageCountIncrement(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            List<Infos.StartCassette> startCassetteList) {
        log.debug("incrementEquipmentUsageCount(): enter incrementEquipmentUsageCount");
        CimMachine aMachine = (CimMachine) newMachineManager.findMachineNamed(equipmentID.getValue());
        Validations.check(
                null == aMachine, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));

        AtomicReference<Integer> startWaferCount = new AtomicReference<>(0);
        Predicate<Infos.StartCassette> loadPurposeTypeFilter =
                startCassette ->
                        !CimStringUtils.equals(
                                BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE, startCassette.getLoadPurposeType());
        startCassetteList.stream()
                .filter(loadPurposeTypeFilter)
                .forEach(startCassette -> {
                    for (Infos.LotInCassette lotInCassette : startCassette.getLotInCassetteList()) {
                        if (lotInCassette.getMoveInFlag() == null || !lotInCassette.getMoveInFlag()) {
                            continue;
                        }
                        CimLot lot = baseCoreFactory.getBO(CimLot.class, lotInCassette.getLotID());
                        Validations.check(null == lot, new OmCode(retCodeConfig.getNotFoundLot(), ObjectIdentifier.fetchValue(lotInCassette.getLotID())));
                        String lotContents = lot.getLotContents();
                        //Omit !WaferLot, !DieChipLot
                        if (!CimStringUtils.equals(BizConstant.SP_PRODTYPE_WAFER, lotContents)
                                && !CimStringUtils.equals(BizConstant.SP_PRODTYPE_DIE, lotContents)) {
                            continue;
                        }
                        //Count-Up
                        startWaferCount.set(startWaferCount.get() + lotInCassette.getLotWaferList().size());
                    }
                });
        //Update Usage Information
        String runWaferUpdateByPostProc = StandardProperties.OM_PP_UPDATE_FOR_EQP_ATTR.getValue();
        if (!CimStringUtils.equals(BizConstant.VALUE_ONE, runWaferUpdateByPostProc)) {
            log.debug("update run wafer related count");
            Integer runWaferCount = aMachine.getRunWafer();
            runWaferCount += startWaferCount.get();
            aMachine.setRunWafer(runWaferCount);

            Integer operationStartCount =
                    aMachine.getOperationStart() == null ? 0 : aMachine.getOperationStart();
            aMachine.setOperationStart(++operationStartCount);
        } else {
            log.debug("Prepare for update run wafer related count in postproc");
            ThreadContextHolder.setThreadSpecificDataString(
                    BizConstant.SP_THREADSPECIFICDATA_KEY_RUNWAFERCNT, String.valueOf(startWaferCount));
        }
    }

    @Override
    public Results.EqpStatusSelectionInqResult equipmentFillInTxEQQ002DR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, boolean allInquiryFlag) {
        log.debug("fillInEquipment4CandidateEqpStatus(): enter fillInEquipment4CandidateEqpStatus");
        Results.EqpStatusSelectionInqResult eqpStatusSelectionInqResult =
                new Results.EqpStatusSelectionInqResult();
        boolean isStorageMachine = false;

        log.debug("step1 - get equipment from equipment id {}", equipmentID);
        Machine aMachine = newMachineManager.findMachineNamed(equipmentID.getValue());
        if (aMachine == null) {
            aMachine = newMachineManager.findStorageMachineNamed(equipmentID.getValue());
            Validations.check(
                    aMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        }

        log.debug("step2 - query equipment is storage machine");
        isStorageMachine = aMachine.isStorageMachine();
        CimMachineState aPosMachineState = null;

        log.trace("isStorageMachine is {}", isStorageMachine);
        if (isStorageMachine) {
            CimStorageMachine aStorageMachine = (CimStorageMachine) aMachine;
            aPosMachineState = aStorageMachine.getCurrentMachineState();
        } else {
            CimMachine aPosMachine = (CimMachine) aMachine;
            aPosMachineState = aPosMachine.getCurrentMachineState();
        }

        log.debug("step3 - query e10 state");
        Validations.check(aPosMachineState == null, retCodeConfig.getNotFoundEqpState());
        CimE10State aPosE10State = aPosMachineState.getE10State();
        Validations.check(aPosE10State == null, new OmCode(retCodeConfig.getNotFoundE10State(), ""));
        eqpStatusSelectionInqResult.setCurrentStatusCode(
                new ObjectIdentifier(aPosMachineState.getIdentifier(), aPosMachineState.getPrimaryKey()));
        Infos.CandidateE10Status candidateCurrentE10Status = new Infos.CandidateE10Status();
        eqpStatusSelectionInqResult.setCandidateCurrentE10(candidateCurrentE10Status);
        candidateCurrentE10Status.setE10Status(
                new ObjectIdentifier(aPosE10State.getIdentifier(), aPosE10State.getPrimaryKey()));
        eqpStatusSelectionInqResult.setCurrentStatusName(aPosMachineState.getMachineStateName());
        eqpStatusSelectionInqResult.setCurrentStatusDescription(
                aPosMachineState.getMachineStateDescription());

        log.debug("step4 - query equipment state transition");
        List<ObjectIdentifier> aMachineStateSeq = aPosMachineState.allMachineStateTransitions();
        int len1 = CimArrayUtils.getSize(aMachineStateSeq);
        String anE10State = aPosE10State.getIdentifier();
        List<String> E10typeList =
                CimArrayUtils.generateList(
                        CIMStateConst.CIM_E10_PRODUCTIVE,
                        CIMStateConst.CIM_E10_STANDBY,
                        CIMStateConst.CIM_E10_ENGINEERING,
                        CIMStateConst.CIM_E10_SCHEDULED_DOWN_TIME,
                        CIMStateConst.CIM_E10_UN_SCHEDULED_DOWN_TIME,
                        CIMStateConst.CIM_E10_NON_SCHEDULED);

        log.debug("step5 - Determine whether to query all states based on the identity");
        log.trace("allInquiryFlag is {}", allInquiryFlag);
        log.trace("len1 is {}", len1);
        if (allInquiryFlag) {
            String sql =
                    String.format(
                            "SELECT  EQP_STATE_ID   ,\n"
                                    + "                             ID  ,\n"
                                    + "                             EQP_STATE_NAME ,\n"
                                    + "                             DESCRIPTION   ,\n"
                                    + "                             EQP_AVAIL_FLAG\n"
                                    + "                     FROM    OMEQPST\n"
                                    + "                     WHERE   E10_STATE_ID = '%s'",
                            anE10State);
            List<CimEquipmentStateDO> cimEquipmentStateDOList =
                    cimJpaRepository.query(sql, CimEquipmentStateDO.class);
            if (!CimArrayUtils.isEmpty(cimEquipmentStateDOList)) {
                List<Infos.CandidateEqpStatus> candidateEqpStatusList = new ArrayList<>();
                candidateCurrentE10Status.setCandidateEqpStatusList(candidateEqpStatusList);
                for (CimEquipmentStateDO cimEquipmentStateDO : cimEquipmentStateDOList) {
                    Infos.CandidateEqpStatus candidateEqpStatus = new Infos.CandidateEqpStatus();
                    candidateEqpStatusList.add(candidateEqpStatus);
                    candidateEqpStatus.setEquipmentStatusCode(
                            new ObjectIdentifier(
                                    cimEquipmentStateDO.getEquipmentStateID(), cimEquipmentStateDO.getId()));
                    candidateEqpStatus.setEquipmentStatusName(cimEquipmentStateDO.getEquipmentStateName());
                    candidateEqpStatus.setEquipmentStatusDescription(cimEquipmentStateDO.getDescription());
                    candidateEqpStatus.setAvailableFlag(cimEquipmentStateDO.getAvailableFlag());
                }
            }
        } else if (len1 == 0) {
            String sql =
                    String.format(
                            "SELECT EQP_STATE_ID   ,\n"
                                    + "                            ID  ,\n"
                                    + "                            EQP_STATE_NAME ,\n"
                                    + "                            DESCRIPTION   ,\n"
                                    + "                            EQP_AVAIL_FLAG\n"
                                    + "                     FROM   OMEQPST\n"
                                    + "                     WHERE  E10_STATE_ID = '%s'",
                            anE10State);
            List<CimEquipmentStateDO> cimEquipmentStateDOList =
                    cimJpaRepository.query(sql, CimEquipmentStateDO.class);
            if (!CimArrayUtils.isEmpty(cimEquipmentStateDOList)) {
                List<Infos.CandidateEqpStatus> candidateEqpStatusList = new ArrayList<>();
                candidateCurrentE10Status.setCandidateEqpStatusList(candidateEqpStatusList);
                for (CimEquipmentStateDO cimEquipmentStateDO : cimEquipmentStateDOList) {
                    // assign the selected fields except that EQPSTATE_ID is same as MachineState.identifier
                    if (ObjectIdentifier.equalsWithValue(
                            cimEquipmentStateDO.getEquipmentStateID(),
                            eqpStatusSelectionInqResult.getCurrentStatusCode())) {
                        Infos.CandidateEqpStatus candidateEqpStatus = new Infos.CandidateEqpStatus();
                        candidateEqpStatusList.add(candidateEqpStatus);
                        candidateEqpStatus.setEquipmentStatusCode(
                                new ObjectIdentifier(
                                        cimEquipmentStateDO.getEquipmentStateID(), cimEquipmentStateDO.getId()));
                        candidateEqpStatus.setEquipmentStatusName(cimEquipmentStateDO.getEquipmentStateName());
                        candidateEqpStatus.setEquipmentStatusDescription(cimEquipmentStateDO.getDescription());
                        candidateEqpStatus.setAvailableFlag(cimEquipmentStateDO.getAvailableFlag());
                    }
                }
            }
        } else {
            // ------------------------------------------------------------------------------------------------------------------
            // Current E10
            // ------------------------------------------------------------------------------------------------------------------
            int j1 = 0;
            int nCurrentCount = 0;
            List<Infos.CandidateEqpStatus> candidateEqpStatusList = new ArrayList<>();
            candidateCurrentE10Status.setCandidateEqpStatusList(candidateEqpStatusList);
            for (j1 = 0; j1 < len1; j1++) {
                CimMachineState aPosMachineState1 = null;
                ObjectIdentifier eqpOrStkStateID = aMachineStateSeq.get(j1);
                Validations.check(
                        ObjectIdentifier.isEmptyWithValue(eqpOrStkStateID), retCodeConfig.getNotFoundEqpState());
                List<CimE10State> anE10StateSeq = codeManager.allE10States();
                int _nLen_ = CimArrayUtils.getSize(anE10StateSeq);
                for (int _nCnt_ = 0; _nCnt_ < _nLen_; _nCnt_++) {
                    aPosMachineState1 =
                            anE10StateSeq.get(_nCnt_).findMachineStateNamed(eqpOrStkStateID.getValue());
                    if (aPosMachineState1 != null) {
                        break;
                    }
                }
                Validations.check(aPosMachineState1 == null, retCodeConfig.getNotFoundEqpState());
                CimE10State tmpPosE10State = aPosMachineState1.getE10State();
                Validations.check(
                        tmpPosE10State == null, new OmCode(retCodeConfig.getNotFoundE10State(), ""));
                String tmpE10State = tmpPosE10State.getIdentifier();
                if (CimStringUtils.equals(tmpE10State, anE10State)) {
                    // Current E10
                    log.info("<<< Current E10 {}>>>", tmpE10State);
                    Infos.CandidateEqpStatus candidateEqpStatus = new Infos.CandidateEqpStatus();
                    candidateEqpStatusList.add(candidateEqpStatus);
                    candidateEqpStatus.setEquipmentStatusCode(
                            new ObjectIdentifier(
                                    aPosMachineState1.getIdentifier(), aPosMachineState1.getPrimaryKey()));
                    candidateEqpStatus.setEquipmentStatusName(aPosMachineState1.getMachineStateName());
                    candidateEqpStatus.setEquipmentStatusDescription(
                            aPosMachineState1.getMachineStateDescription());
                    candidateEqpStatus.setAvailableFlag(aPosMachineState1.isMachineAvailable());
                }
            }
            // ------------------------------------------------------------------------------------------------------------------
            // Other E10
            // ------------------------------------------------------------------------------------------------------------------
            Map<ObjectIdentifier, List<Infos.CandidateEqpStatus>> E10TypeMap =
                    new HashMap<>(); // k : E10status, v : CandidateOtherEqpStatus
            for (j1 = 0; j1 < len1; j1++) {
                CimMachineState aPosMachineState1 = null;
                ObjectIdentifier eqpOrStkStateID = aMachineStateSeq.get(j1);
                Validations.check(
                        ObjectIdentifier.isEmptyWithValue(eqpOrStkStateID), retCodeConfig.getNotFoundEqpState());
                List<CimE10State> anE10StateSeq = codeManager.allE10States();
                int _nLen_ = CimArrayUtils.getSize(anE10StateSeq);
                for (int _nCnt_ = 0; _nCnt_ < _nLen_; _nCnt_++) {
                    aPosMachineState1 =
                            anE10StateSeq.get(_nCnt_).findMachineStateNamed(eqpOrStkStateID.getValue());
                    if (aPosMachineState1 != null) {
                        break;
                    }
                }
                Validations.check(aPosMachineState1 == null, retCodeConfig.getNotFoundEqpState());
                CimE10State tmpPosE10State = aPosMachineState1.getE10State();
                Validations.check(
                        tmpPosE10State == null, new OmCode(retCodeConfig.getNotFoundE10State(), ""));
                String tmpE10State = tmpPosE10State.getIdentifier();
                // current E10 is Skip
                if (CimStringUtils.equals(tmpE10State, anE10State)) {
                    continue;
                }

                if (E10typeList.contains(tmpE10State)) {
                    log.info("<<< Other E10 : CIMFW_E10_{} >>>", tmpE10State);
                    aPosE10State = codeManager.findE10StateNamed(tmpE10State);
                    ObjectIdentifier E10Status =
                            new ObjectIdentifier(aPosE10State.getIdentifier(), aPosE10State.getPrimaryKey());
                    Infos.CandidateEqpStatus candidateOtherEqpStatus = new Infos.CandidateEqpStatus();
                    candidateOtherEqpStatus.setEquipmentStatusCode(
                            new ObjectIdentifier(
                                    aPosMachineState1.getIdentifier(), aPosMachineState1.getPrimaryKey()));
                    candidateOtherEqpStatus.setEquipmentStatusName(aPosMachineState1.getMachineStateName());
                    candidateOtherEqpStatus.setEquipmentStatusDescription(
                            aPosMachineState1.getMachineStateDescription());
                    candidateOtherEqpStatus.setAvailableFlag(aPosMachineState1.isMachineAvailable());
                    List<Infos.CandidateEqpStatus> candidateEqpStatusesList = E10TypeMap.get(E10Status);
                    if (CimArrayUtils.isEmpty(candidateEqpStatusesList)) {
                        candidateEqpStatusesList = new ArrayList<>();
                        candidateEqpStatusesList.add(candidateOtherEqpStatus);
                        E10TypeMap.put(E10Status, candidateEqpStatusesList);
                    } else {
                        candidateEqpStatusesList.add(candidateOtherEqpStatus);
                    }
                }
            }
            List<Infos.CandidateE10Status> candidateOtherE10List = new ArrayList<>();
            eqpStatusSelectionInqResult.setCandidateOtherE10List(candidateOtherE10List);
            E10TypeMap.forEach(
                    (k, v) -> {
                        Infos.CandidateE10Status candidateOtherE10Status = new Infos.CandidateE10Status();
                        candidateOtherE10List.add(candidateOtherE10Status);
                        candidateOtherE10Status.setE10Status(k);
                        candidateOtherE10Status.setCandidateEqpStatusList(v);
                    });
            return eqpStatusSelectionInqResult;
        }
        boolean changeToOtherFlag = aPosMachineState.isChangeToOtherE10();
        if (!allInquiryFlag && !changeToOtherFlag) {
            return eqpStatusSelectionInqResult;
        }
        List<Infos.CandidateE10Status> candidateOtherE10List = new ArrayList<>();
        eqpStatusSelectionInqResult.setCandidateOtherE10List(candidateOtherE10List);

        for (String tempE10State : E10typeList) {
            if (CimStringUtils.equals(tempE10State, anE10State)) {
                continue;
            }
            List<Infos.CandidateEqpStatus> candidateOtherEqpStatusList = new ArrayList<>();
            Infos.CandidateE10Status candidateOtherE10Status = new Infos.CandidateE10Status();
            aPosE10State = codeManager.findE10StateNamed(tempE10State);
            candidateOtherE10Status.setE10Status(
                    new ObjectIdentifier(aPosE10State.getIdentifier(), aPosE10State.getPrimaryKey()));
            if (allInquiryFlag) {
                String sql =
                        String.format(
                                " SELECT  EQP_STATE_ID   ,\n"
                                        + "                                 ID  ,\n"
                                        + "                                 EQP_STATE_NAME ,\n"
                                        + "                                 DESCRIPTION   ,\n"
                                        + "                                 EQP_AVAIL_FLAG\n"
                                        + "                         FROM    OMEQPST\n"
                                        + "                         WHERE   E10_STATE_ID = '%s'",
                                tempE10State);
                List<CimEquipmentStateDO> cimEquipmentStateDOList =
                        cimJpaRepository.query(sql, CimEquipmentStateDO.class);
                if (!CimArrayUtils.isEmpty(cimEquipmentStateDOList)) {
                    for (CimEquipmentStateDO cimEquipmentStateDO : cimEquipmentStateDOList) {
                        Infos.CandidateEqpStatus candidateOtherEqpStatus = new Infos.CandidateEqpStatus();
                        candidateOtherEqpStatusList.add(candidateOtherEqpStatus);
                        candidateOtherEqpStatus.setEquipmentStatusCode(
                                new ObjectIdentifier(
                                        cimEquipmentStateDO.getEquipmentStateID(), cimEquipmentStateDO.getId()));
                        candidateOtherEqpStatus.setEquipmentStatusName(
                                cimEquipmentStateDO.getEquipmentStateName());
                        candidateOtherEqpStatus.setEquipmentStatusDescription(
                                cimEquipmentStateDO.getDescription());
                        candidateOtherEqpStatus.setAvailableFlag(cimEquipmentStateDO.getAvailableFlag());
                    }
                }
            } else {
                String sql =
                        String.format(
                                "SELECT  EQP_STATE_ID   ,\n"
                                        + "                                 ID  ,\n"
                                        + "                                 EQP_STATE_NAME ,\n"
                                        + "                                 DESCRIPTION   ,\n"
                                        + "                                 EQP_AVAIL_FLAG\n"
                                        + "                         FROM    OMEQPST\n"
                                        + "                         WHERE   E10_STATE_ID   = '%s' AND\n"
                                        + "                                 FROM_FLAG = '%s'",
                                tempE10State, 1);
                List<CimEquipmentStateDO> cimEquipmentStateDOList =
                        cimJpaRepository.query(sql, CimEquipmentStateDO.class);
                if (!CimArrayUtils.isEmpty(cimEquipmentStateDOList)) {
                    for (CimEquipmentStateDO cimEquipmentStateDO : cimEquipmentStateDOList) {
                        Infos.CandidateEqpStatus candidateOtherEqpStatus = new Infos.CandidateEqpStatus();
                        candidateOtherEqpStatusList.add(candidateOtherEqpStatus);
                        candidateOtherEqpStatus.setEquipmentStatusCode(
                                new ObjectIdentifier(
                                        cimEquipmentStateDO.getEquipmentStateID(), cimEquipmentStateDO.getId()));
                        candidateOtherEqpStatus.setEquipmentStatusName(
                                cimEquipmentStateDO.getEquipmentStateName());
                        candidateOtherEqpStatus.setEquipmentStatusDescription(
                                cimEquipmentStateDO.getDescription());
                        candidateOtherEqpStatus.setAvailableFlag(cimEquipmentStateDO.getAvailableFlag());
                    }
                }
            }
            candidateOtherE10Status.setCandidateEqpStatusList(candidateOtherEqpStatusList);
            candidateOtherE10List.add(candidateOtherE10Status);
        }
        return eqpStatusSelectionInqResult;
    }

    @Override
    public Results.EqpStatusSelectionInqResult equipmentFillInTxEQQ002DRV2(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, boolean allInquiryFlag) {
        Machine baseMachine = getMachine(equipmentID);

        CimPerson person = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());
        Validations.check(person == null, retCodeConfig.getNotFoundPerson());
        List<String> userGroups = person.getUserGroups();

        CimMachine machine;
        CimStorageMachine storage;
        CimMachineState currentState;
        String eqpModel = null;
        if (CimBooleanUtils.isTrue(baseMachine.isStorageMachine())) {
            storage = (CimStorageMachine) baseMachine;
            currentState = storage.getCurrentMachineState();
        } else {
            machine = (CimMachine) baseMachine;
            currentState = machine.getCurrentMachineState();
            eqpModel = machine.getEqpModel();
        }
        Validations.check(currentState == null, retCodeConfig.getNotFoundEqpState());

        CimE10State currentE10 = currentState.getE10State();
        Validations.check(currentE10 == null, retCodeConfig.getNotFoundE10State());

        Results.EqpStatusSelectionInqResult result = new Results.EqpStatusSelectionInqResult();
        result.setCurrentStatusCode(
                ObjectIdentifier.build(currentState.getIdentifier(), currentState.getPrimaryKey()));
        Infos.CandidateE10Status candidateE10Status = new Infos.CandidateE10Status();
        result.setCandidateCurrentE10(candidateE10Status);
        candidateE10Status.setE10Status(
                ObjectIdentifier.build(currentE10.getIdentifier(), currentE10.getPrimaryKey()));
        result.setCurrentStatusName(currentState.getMachineStateName());
        result.setCurrentStatusDescription(currentState.getMachineStateDescription());

        String baseSql =
                "SELECT EQP_STATE_ID, ID, EQP_STATE_NAME, DESCRIPTION, EQP_AVAIL_FLAG FROM OMEQPST";
        List<ObjectIdentifier> transitions = currentState.allMachineStateTransitions(eqpModel);
        // Determine whether to query all states based on the identity
        if (allInquiryFlag || CimArrayUtils.isEmpty(transitions)) {
            List<CimEquipmentStateDO> states =
                    cimJpaRepository.query(
                            baseSql + " WHERE E10_STATE_ID = ?1",
                            CimEquipmentStateDO.class,
                            currentE10.getIdentifier());
            if (CimArrayUtils.isNotEmpty(states)) {
                List<Infos.CandidateEqpStatus> eqpStatuses = Lists.newArrayList();
                candidateE10Status.setCandidateEqpStatusList(eqpStatuses);
                states.stream()
                        .filter(
                                state ->
                                        allInquiryFlag
                                                || CimStringUtils.equals(
                                                state.getEquipmentStateID(), currentState.getIdentifier()))
                        .forEach(state -> eqpStatuses.add(setCandidateEqpStatus(state)));
            }
        } else {
            List<Infos.CandidateEqpStatus> candidateStatuses = Lists.newArrayList();
            candidateE10Status.setCandidateEqpStatusList(candidateStatuses);

            Map<ObjectIdentifier, List<Infos.CandidateEqpStatus>> e10TypeMap = Maps.newHashMap();

            final String eqpModelFinal = eqpModel;
            transitions.forEach(
                    stateID -> {
                        CimMachineState state = baseCoreFactory.getBO(CimMachineState.class, stateID);
                        CimE10State e10State = state.getE10State();
                        Validations.check(e10State == null, retCodeConfig.getNotFoundE10State());

                        List<CodeDTO.BrEquipmentStateUserGroupData> userGroupLimits =
                                currentState.findUserGroupsForNextEquipmentState(eqpModelFinal, stateID.getValue());
                        if (CimArrayUtils.isNotEmpty(userGroupLimits)
                                && userGroupLimits.stream()
                                .noneMatch(group -> userGroups.contains(group.getUserGroupId()))) {
                            return;
                        }

                        if (CimStringUtils.equals(e10State.getIdentifier(), currentE10.getIdentifier())) {
                            // Current E10
                            if (candidateStatuses.stream()
                                    .noneMatch(
                                            tmp ->
                                                    ObjectIdentifier.equalsWithValue(
                                                            tmp.getEquipmentStatusCode(), state.getIdentifier()))) {
                                candidateStatuses.add(setCandidateEqpStatus(state));
                            }
                        } else {
                            // Other E10
                            ObjectIdentifier e10ID =
                                    ObjectIdentifier.build(e10State.getIdentifier(), e10State.getPrimaryKey());
                            List<Infos.CandidateEqpStatus> tmpStatuses = e10TypeMap.get(e10ID);
                            if (CimArrayUtils.isEmpty(tmpStatuses)) {
                                tmpStatuses = Lists.newArrayList();
                                e10TypeMap.put(e10ID, tmpStatuses);
                            }
                            if (tmpStatuses.stream()
                                    .noneMatch(
                                            tmp ->
                                                    ObjectIdentifier.equalsWithValue(
                                                            tmp.getEquipmentStatusCode(), state.getIdentifier()))) {
                                tmpStatuses.add(setCandidateEqpStatus(state));
                            }
                        }
                    });

            List<Infos.CandidateE10Status> chamberE10Others = Lists.newArrayList();
            e10TypeMap.forEach(
                    (id, value) -> {
                        Infos.CandidateE10Status e10Status = new Infos.CandidateE10Status();
                        e10Status.setE10Status(id);
                        e10Status.setCandidateEqpStatusList(value);
                        chamberE10Others.add(e10Status);
                    });
            result.setCandidateOtherE10List(chamberE10Others);
            return result;
        }

        if (!allInquiryFlag && CimBooleanUtils.isFalse(currentState.isChangeToOtherE10())) {
            return result;
        }

        List<Infos.CandidateE10Status> chamberE10Others = Lists.newArrayList();
        result.setCandidateOtherE10List(chamberE10Others);

        List<String> e10Ids =
                Arrays.asList(
                        CIMStateConst.CIM_E10_PRODUCTIVE,
                        CIMStateConst.CIM_E10_STANDBY,
                        CIMStateConst.CIM_E10_ENGINEERING,
                        CIMStateConst.CIM_E10_SCHEDULED_DOWN_TIME,
                        CIMStateConst.CIM_E10_UN_SCHEDULED_DOWN_TIME,
                        CIMStateConst.CIM_E10_NON_SCHEDULED);
        e10Ids.stream()
                .filter(e10Id -> CimStringUtils.unEqual(e10Id, currentE10.getIdentifier()))
                .forEach(
                        e10Id -> {
                            CimE10State e10State = codeManager.findE10StateNamed(e10Id);

                            Infos.CandidateE10Status candidateE10Other = new Infos.CandidateE10Status();
                            candidateE10Other.setE10Status(
                                    ObjectIdentifier.build(e10State.getIdentifier(), e10State.getPrimaryKey()));

                            String sql = String.format(baseSql + " WHERE E10_STATE_ID = '%s'", e10Id);
                            if (!allInquiryFlag) {
                                sql += String.format(" AND FROM_FLAG = '%s'", 1);
                            }
                            List<CimEquipmentStateDO> equipmentStates =
                                    cimJpaRepository.query(sql, CimEquipmentStateDO.class);
                            List<Infos.CandidateEqpStatus> statuses = Lists.newArrayList();
                            if (CimArrayUtils.isNotEmpty(equipmentStates)) {
                                equipmentStates.forEach(state -> statuses.add(setCandidateEqpStatus(state)));
                            }
                            candidateE10Other.setCandidateEqpStatusList(statuses);

                            chamberE10Others.add(candidateE10Other);
                        });

        return result;
    }

    private Infos.CandidateEqpStatus setCandidateEqpStatus(CimEquipmentStateDO state) {
        Infos.CandidateEqpStatus candidate = new Infos.CandidateEqpStatus();
        candidate.setEquipmentStatusCode(
                ObjectIdentifier.build(state.getEquipmentStateID(), state.getId()));
        candidate.setEquipmentStatusName(state.getEquipmentStateName());
        candidate.setEquipmentStatusDescription(state.getDescription());
        candidate.setAvailableFlag(state.getAvailableFlag());
        return candidate;
    }

    private Infos.CandidateEqpStatus setCandidateEqpStatus(CimMachineState state) {
        Infos.CandidateEqpStatus candidate = new Infos.CandidateEqpStatus();
        candidate.setEquipmentStatusCode(
                ObjectIdentifier.build(state.getIdentifier(), state.getPrimaryKey()));
        candidate.setEquipmentStatusName(state.getMachineStateName());
        candidate.setEquipmentStatusDescription(state.getMachineStateDescription());
        candidate.setAvailableFlag(state.isMachineAvailable());
        return candidate;
    }

    @Override
    public ObjectIdentifier equipmentLotCheckFlowBatchConditionForOpeStart(
            Infos.ObjCommon objCommon,
            Inputs.ObjEquipmentLotCheckFlowBatchConditionForOperationStartIn operationStartIn) {
        ObjectIdentifier flowBatchID = null;
        CimMachine aMachine =
                baseCoreFactory.getBO(CimMachine.class, operationStartIn.getEquipmentID());
        Validations.check(
                null == aMachine,
                new OmCode(
                        retCodeConfig.getNotFoundEqp(),
                        ObjectIdentifier.fetchValue(operationStartIn.getEquipmentID())));
        /*----------------------------------------*/
        /*   Get Equipment's Reserved FlowBatch   */
        /*----------------------------------------*/
        List<CimFlowBatch> flowBatchSeq = aMachine.allFlowBatches();
        int lenStartCassette = CimArrayUtils.getSize(operationStartIn.getStartCassetteList());
        int reservedFBLen = CimArrayUtils.getSize(flowBatchSeq);
        if (reservedFBLen == 0) {
            log.info("No FlowBatch is reserved.");
        } else {
            int readyFlowBatchCount = 0;
            int findFlowBatchCount = 0;
            CimFlowBatch readyFlowBatch = null;
            for (CimFlowBatch aFlowBatch : flowBatchSeq) {
                List<CimLot> lots = aFlowBatch.allLots();
                int lenLot = CimArrayUtils.getSize(lots);
                Validations.check(0 == lenLot, retCodeConfig.getFlowBatchLotsMissing());
                int operationalLotCount = 0;
                int findLotCount = 0;
                for (int i = 0; i < lenStartCassette; i++) {
                    int lenLotInCassette =
                            CimArrayUtils.getSize(
                                    operationStartIn.getStartCassetteList().get(i).getLotInCassetteList());
                    Infos.StartCassette startCassette = operationStartIn.getStartCassetteList().get(i);
                    for (int j = 0; j < lenLotInCassette; j++) {
                        Infos.LotInCassette lotInCassette = startCassette.getLotInCassetteList().get(j);
                        if (lotInCassette.getMoveInFlag()) {
                            operationalLotCount++;
                        } else {
                            continue;
                        }
                        for (int k = 0; k < lenLot; k++) {
                            ObjectIdentifier lotID =
                                    new ObjectIdentifier(lots.get(k).getIdentifier(), lots.get(k).getPrimaryKey());
                            if (ObjectIdentifier.equalsWithValue(lotInCassette.getLotID(), lotID)) {
                                findLotCount++;
                            }
                        }
                    }
                }
                if (lenLot == operationalLotCount && lenLot == findLotCount) {
                    readyFlowBatch = aFlowBatch;
                    readyFlowBatchCount++;
                }
                if (0 < findLotCount) {
                    findFlowBatchCount++;
                }
            }
            if (1 == readyFlowBatchCount) {
                flowBatchID =
                        new ObjectIdentifier(readyFlowBatch.getIdentifier(), readyFlowBatch.getPrimaryKey());
            } else {
                if (1 < findFlowBatchCount) {
                    throw new ServiceException(retCodeConfig.getTooManyFlowBatches());
                } else {
                    throw new ServiceException(retCodeConfig.getFlowBatchLotsMissing());
                }
            }
        }
        /*------------------------------------*/
        /*   Check Flow Batch Condition [2]   */
        /*------------------------------------*/
        for (int i = 0; i < lenStartCassette; i++) {
            int lenLotInCassette =
                    CimArrayUtils.getSize(
                            operationStartIn.getStartCassetteList().get(i).getLotInCassetteList());
            Infos.StartCassette startCassette = operationStartIn.getStartCassetteList().get(i);
            for (int j = 0; j < lenLotInCassette; j++) {
                Infos.LotInCassette lotInCassette = startCassette.getLotInCassetteList().get(j);
                if (lotInCassette.getMoveInFlag()) {
                    CimLot aLot = baseCoreFactory.getBO(CimLot.class, lotInCassette.getLotID());
                    CimProcessOperation processOperation = aLot.getProcessOperation();
                    Validations.check(
                            null == processOperation,
                            new OmCode(
                                    retCodeConfig.getNotFoundProcessOperation(),
                                    ObjectIdentifier.fetchValue(lotInCassette.getLotID())));
                    ProcessDTO.PosFlowBatchControl flowBatchCtrl = processOperation.getFlowBatchControl();
                    if (null == flowBatchCtrl) {
                        continue;
                    } else if (CimStringUtils.isEmpty(flowBatchCtrl.getName())) {
                        continue;
                    }
                    CimFlowBatch flowBatch = aLot.getFlowBatch();
                    Validations.check(null == flowBatch, retCodeConfig.getLotFlowBatchIdBlank());
                    CimMachine reservedMachine = flowBatch.getMachine();
                    Validations.check(
                            null == reservedMachine, retCodeConfig.getFlowBatchReservedEqpIdBlank());
                    if (CimBooleanUtils.isTrue(flowBatchCtrl.isTargetOperation())) {
                        ObjectIdentifier reservedEquipmentID =
                                new ObjectIdentifier(
                                        reservedMachine.getIdentifier(), reservedMachine.getPrimaryKey());
                        Validations.check(
                                !ObjectIdentifier.equalsWithValue(
                                        operationStartIn.getEquipmentID(), reservedEquipmentID),
                                retCodeConfig.getEquipmentReservedForOtherFlowBatch());
                    }
                    /*------------------------------------------------------------------*/
                    /*   Check does the following case.                                 */
                    /*                                                                  */
                    /*     1. FlowBatching   (Target EQP is DF001)                      */
                    /*     2. Change TargetOperation(DF001) from [Yes] to [No] by SM.   */
                    /*     3. ReserveEQP(DF001) of FlowBatch is not TargetOpe.          */
                    /*------------------------------------------------------------------*/
                    else {
                        ObjectIdentifier reservedEquipmentID =
                                new ObjectIdentifier(
                                        reservedMachine.getIdentifier(), reservedMachine.getPrimaryKey());
                        ObjectIdentifier tmpFlowBatchID =
                                new ObjectIdentifier(flowBatch.getIdentifier(), flowBatch.getPrimaryKey());
                        Validations.check(
                                ObjectIdentifier.equalsWithValue(
                                        operationStartIn.getEquipmentID(), reservedEquipmentID),
                                new OmCode(
                                        retCodeConfig.getFlowBatchReservedEqpNotTargetEqp(),
                                        reservedEquipmentID.getValue(),
                                        tmpFlowBatchID.getValue()));
                    }
                }
            }
        }
        return flowBatchID;
    }

    @Override
    public void equipmentReservedControlJobIDSet(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, ObjectIdentifier controlJobID) {
        /*------------------------*/
        /*   Get Machine Object   */
        /*------------------------*/
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                aMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        /*-----------------------------------*/
        /*   Get Start Reserved ControlJob   */
        /*-----------------------------------*/
        CimControlJob aControlJob = baseCoreFactory.getBO(CimControlJob.class, controlJobID);
        Validations.check(aControlJob == null, retCodeConfig.getNotFoundControlJob());
        // -----------------------------------------
        // Set Start Reservation Flag for FRCTRLJOB
        // -----------------------------------------
        aControlJob.makeReservedFlagOn();
    }

    /**
     * @param objCommon    objCommon
     * @param equipmentID  equipmentID
     * @param controlJobID controlJobID
     * @param keyCategory  keyCategory
     * @return
     * @author Ho
     */
    @Override
    public Infos.EqpContainerPositionInfo equipmentContainerPositionInfoGet(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            ObjectIdentifier controlJobID,
            String keyCategory) {
        // For OutPutParameter
        Infos.EqpContainerPositionInfo eqpContainerPositionInfo = new Infos.EqpContainerPositionInfo();
        eqpContainerPositionInfo.setEquipmentID(equipmentID);
        List<Infos.EqpContainerPosition> eqpContainerPositionList = new ArrayList<>();
        eqpContainerPositionInfo.setEqpContainerPositionList(eqpContainerPositionList);
        Validations.check(ObjectIdentifier.isEmpty(equipmentID), retCodeConfig.getInvalidParameter());

        // Get Machine Object
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(CimObjectUtils.isEmpty(aMachine), retCodeConfig.getNotFoundMachine());
        List<CimMachineContainerPosition> equipmentContainerPositions = new ArrayList<>();
        if (CimStringUtils.equals(keyCategory, BizConstant.SP_SLM_KEYCATEGORY_EQUIPMENT)
                || CimStringUtils.equals(keyCategory, BizConstant.SP_SLM_KEYCATEGORY_LOT)) {
            log.info("KeyCategory_Equipment or KeyCategory_Lot");
            // -----------------------------------------
            // Get All Machine Container of Equipment
            // -----------------------------------------
            List<CimMachineContainer> equipmentContainer = aMachine.allMachineContainers();

            for (int i = 0; i < CimArrayUtils.getSize(equipmentContainer); i++) {
                equipmentContainerPositions.addAll(
                        equipmentContainer.get(i).allMachineContainerPositions());
            }
        } else if (CimStringUtils.equals(
                BizConstant.SP_SLM_KEYCATEGORY_CONTROLJOB, keyCategory)) {
            // --------------------------------------------------
            // Get Machine Container of Equipment by ControlJob
            // --------------------------------------------------
            equipmentContainerPositions =
                    aMachine.findMachineContainerPositionForControlJob(controlJobID.getValue());
        } else if (CimStringUtils.equals(
                BizConstant.SP_SLM_KEYCATEGORY_PROCESSJOB, keyCategory)) {
            // --------------------------------------------------
            // Get Machine Container of Equipment by ProcessJob
            // --------------------------------------------------
            equipmentContainerPositions =
                    aMachine.findMachineContainerPositionForProcessJob(controlJobID.getValue());
        } else if (CimStringUtils.equals(BizConstant.SP_SLM_KEYCATEGORY_WAFER, keyCategory)) {
            // --------------------------------------------------
            // Get Machine Container of Equipment by Wafer
            // --------------------------------------------------
            CimMachineContainerPosition equipmentContainerPosition =
                    aMachine.findMachineContainerPositionForWafer(controlJobID.getValue());
            if (!CimObjectUtils.isEmpty(equipmentContainerPosition)) {
                equipmentContainerPositions = new ArrayList<>();
                equipmentContainerPositions.add(equipmentContainerPosition);
            }
        } else {
            throw new ServiceException(new OmCode(retCodeConfig.getSlmInvalidKeyCategory(), keyCategory));
        }

        for (CimMachineContainerPosition equipmentContainerPosition : equipmentContainerPositions) {
            com.fa.cim.newcore.bo.product.CimWafer wafer = equipmentContainerPosition.getWafer();
            if (CimObjectUtils.isEmpty(wafer)) {
                continue;
            }
            Lot lot = wafer.getLot();
            ObjectIdentifier lotID = new ObjectIdentifier();
            if (!CimObjectUtils.isEmpty(lot)) {

                lotID = new ObjectIdentifier(lot.getIdentifier(), lot.getPrimaryKey());
            }
            if (CimStringUtils.equals(keyCategory, BizConstant.SP_SLM_KEYCATEGORY_LOT)
                    && !CimStringUtils.equals(controlJobID.getValue(), lotID.getValue())) {
                log.info("IN_keyCategory, IN_key ");
                continue;
            }
            Infos.EqpContainerPosition eqpContainerPosition = new Infos.EqpContainerPosition();
            MachineDTO.MachineContainerPositionInfo machineContainerPositionInfo =
                    equipmentContainerPosition.getMachineContainerPositionInfo();
            eqpContainerPosition.setContainerPositionID(
                    machineContainerPositionInfo.getMachineContainerPosition());
            eqpContainerPosition.setControlJobID(machineContainerPositionInfo.getControlJob());
            eqpContainerPosition.setProcessJobID(machineContainerPositionInfo.getProcessJob());
            eqpContainerPosition.setLotID(lotID);
            eqpContainerPosition.setWaferID(machineContainerPositionInfo.getWafer());
            eqpContainerPosition.setSrcCassetteID(machineContainerPositionInfo.getSrcCassette());
            eqpContainerPosition.setSrcPortID(machineContainerPositionInfo.getSrcPort());
            eqpContainerPosition.setSrcSlotNo(
                    CimNumberUtils.intValue(machineContainerPositionInfo.getSrcSlotNo()));
            eqpContainerPosition.setFmcState(machineContainerPositionInfo.getSLMState());
            eqpContainerPosition.setDestCassetteID(machineContainerPositionInfo.getDestCassette());
            eqpContainerPosition.setDestPortID(machineContainerPositionInfo.getDestPort());
            eqpContainerPosition.setDestSlotNo(
                    CimNumberUtils.intValue(machineContainerPositionInfo.getDestSlotNo()));
            eqpContainerPosition.setEstimatedProcessEndTime(
                    CimDateUtils.convertToOrInitialTime(
                            machineContainerPositionInfo.getEstimatedEndTimeStamp()));
            eqpContainerPosition.setProcessStartTime(
                    CimDateUtils.convertToOrInitialTime(
                            machineContainerPositionInfo.getProcessStartTimeStamp()));
            eqpContainerPosition.setLastClaimedTimeStamp(
                    CimDateUtils.convertToOrInitialTime(
                            machineContainerPositionInfo.getLastClaimedTimeStamp()));
            eqpContainerPosition.setLastClaimedUserID(machineContainerPositionInfo.getLastClaimedUser());
            eqpContainerPositionList.add(eqpContainerPosition);
        }
        return eqpContainerPositionInfo;
    }

    /**
     * equipmentContainer_wafer_Retrieve
     *
     * @param objCommon
     * @param equipmentID
     * @param controlJobID
     * @param processJobID
     * @param strSlmSlotMapSeq
     * @return
     * @author Ho
     */
    @Override
    public void equipmentContainerWaferRetrieve(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            ObjectIdentifier controlJobID,
            ObjectIdentifier processJobID,
            List<Infos.SlmSlotMap> strSlmSlotMapSeq) {

        log.info("inParam [equipmentID]   {}", equipmentID.getValue());
        log.info("inParam [controlJobID]   {}", controlJobID.getValue());
        log.info("inParam [processJobID]   {}", processJobID.getValue());
        /*----------------*/
        /*   Initialize   */
        /*----------------*/
        Validations.check(
                CimArrayUtils.isEmpty(strSlmSlotMapSeq), retCodeConfig.getNoSlotMapInFormAtion());
        /*--------------------------------------*/
        /*   Get lot Information in controljob  */
        /*--------------------------------------*/
        List<Infos.ControlJobLot> controlJobLotList = null;
        if (!ObjectIdentifier.isEmpty(controlJobID)) {
            log.info("Get Lot Information in ControlJob");
            controlJobLotList = controlJobMethod.controlJobLotListGet(objCommon, controlJobID);
            Validations.check(
                    CimArrayUtils.isEmpty(controlJobLotList),
                    new OmCode(retCodeConfig.getNotFoundLotInControlJob(), controlJobID.getValue()));
        }

        int nCnt1 = 0, nCnt2 = 0, nCnt3 = 0;

        /*-----------------------------------*/
        /*   Get lot Sequence from SlotMap   */
        /*-----------------------------------*/
        log.info("Get Lot Sequence from SlotMap");
        List<ObjectIdentifier> retrieveLotIDs = new ArrayList<>();
        int retrieveLotIDLen = 0;
        boolean lotCheckedFlag = false;

        for (int n = CimArrayUtils.getSize(strSlmSlotMapSeq); nCnt1 < n; nCnt1++) {
            // wafer_lot_Get
            Infos.SlmSlotMap strSlmSlotMap = strSlmSlotMapSeq.get(nCnt1);
            ObjectIdentifier waferLotRetCode =
                    waferMethod.waferLotGet(objCommon, strSlmSlotMap.getWaferID());

            lotCheckedFlag = false;

            // check if the lot is registered in retrieveLotIDs
            for (; nCnt2 < retrieveLotIDLen; nCnt2++) {

                if (CimStringUtils.equals(
                        waferLotRetCode.getValue(), retrieveLotIDs.get(nCnt2).getValue())) {
                    lotCheckedFlag = true;
                    break;
                }
            }

            if (CimBooleanUtils.isFalse(lotCheckedFlag)) {
                retrieveLotIDs.add(waferLotRetCode);
                retrieveLotIDLen++;
            }
        }

        /*-------------------------------------*/
        /*   Update SLM State to "Retrieved"   */
        /*-------------------------------------*/
        log.info("Update SLM State to Retrieved");
        CimMachine equipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(CimObjectUtils.isEmpty(equipment), retCodeConfig.getNotFoundMachine());
        for (Infos.SlmSlotMap strSlmSlotMap : strSlmSlotMapSeq) {
            ObjectIdentifier waferID = strSlmSlotMap.getWaferID();
            CimMachineContainerPosition equipmentContainerPosition =
                    equipment.findMachineContainerPositionForWafer(waferID.getValue());
            Validations.check(
                    equipmentContainerPosition == null,
                    retCodeConfig.getNotFoundEquipmentContainerPosition());

            equipmentContainerPosition.setSLMState(BizConstant.SP_SLMSTATE_RETRIEVED);
        }

        /*------------------------------------------------------------------------------------*/
        /*   Checks are done for every lot. If the result is OK, the cassette are attached.   */
        /*------------------------------------------------------------------------------------*/
        for (nCnt1 = 0; nCnt1 < retrieveLotIDLen; nCnt1++) {

            /*-----------------------------------------------------------------------------*/
            /*   Check Conditions for attaching cassette                                   */
            /*       Attached Conditions                                                   */
            /*           - all wafers' SLM state in lot are "Retrieved".                   */
            /*           - all wafers' destination cassette are the same.                  */
            /*           - all wafers' destination port are the same (if they were set).   */
            /*-----------------------------------------------------------------------------*/
            /*------------------------------*/
            /*   Get wafer Map from LotID   */
            /*------------------------------*/
            List<ObjectIdentifier> waferIDs = new ArrayList<>();
            if (CimArrayUtils.binarySearch(
                    new String[]{"OEQPW012", "OEQPW024"}, objCommon.getTransactionID())) {

                CimLot lot = baseCoreFactory.getBO(CimLot.class, retrieveLotIDs.get(nCnt1));
                Validations.check(CimObjectUtils.isEmpty(lot), retCodeConfig.getNotFoundLot());
                List<ProductDTO.WaferInfo> wafers = lot.getAllWaferInfo();

                for (ProductDTO.WaferInfo wafer : wafers) {
                    waferIDs.add(wafer.getWaferID());
                }
            } else {

                // lot_waferIDList_GetDR
                Inputs.ObjLotWaferIDListGetDRIn objLotWaferIDListGetDRIn =
                        new Inputs.ObjLotWaferIDListGetDRIn();
                objLotWaferIDListGetDRIn.setLotID(retrieveLotIDs.get(nCnt1));
                objLotWaferIDListGetDRIn.setScrapCheckFlag(false);
                List<ObjectIdentifier> waferIDList =
                        lotMethod.lotWaferIDListGetDR(objCommon, objLotWaferIDListGetDRIn);

                waferIDs.addAll(waferIDList);
            }

            ObjectIdentifier destCassetteID = null, destPortID = null;
            Boolean allWaferRetrievedFlag = true;
            int wfrMapSeqLen = waferIDs.size();

            for (nCnt2 = 0; nCnt2 < wfrMapSeqLen; nCnt2++) {

                // equipmentContainerPosition_info_Get
                Infos.EqpContainerPositionInfo containerPositionInfoResult =
                        this.equipmentContainerPositionInfoGet(
                                objCommon, equipmentID, waferIDs.get(nCnt2), BizConstant.SP_SLM_KEYCATEGORY_WAFER);

                List<Infos.EqpContainerPosition> eqpContainerPositionList =
                        containerPositionInfoResult.getEqpContainerPositionList();
                Validations.check(
                        CimArrayUtils.isEmpty(eqpContainerPositionList),
                        new OmCode(
                                retCodeConfig.getSlmWaferNotFoundInPosition(), waferIDs.get(nCnt2).getValue()));
                // SLM State Check
                log.info("## SLMState = {}", eqpContainerPositionList.get(0).getFmcState());
                if (!CimStringUtils.equals(
                        eqpContainerPositionList.get(0).getFmcState(), BizConstant.SP_SLMSTATE_RETRIEVED)) {
                    allWaferRetrievedFlag = false;
                    break;
                }

                // Destination cassette Check
                log.info("## destCassetteID = {}", destCassetteID);
                if (ObjectIdentifier.isEmpty(destCassetteID)) {
                    destCassetteID = eqpContainerPositionList.get(0).getDestCassetteID();
                } else {
                    Validations.check(
                            !CimStringUtils.equals(
                                    destCassetteID.getValue(),
                                    eqpContainerPositionList.get(0).getDestCassetteID().getValue()),
                            retCodeConfig.getAllWaferDestCastNotSame());
                }

                // Destination port Check
                log.info("## destPortID = {}", destPortID);
                if (ObjectIdentifier.isEmpty(destPortID)) {
                    destPortID = eqpContainerPositionList.get(0).getDestPortID();
                } else {
                    Validations.check(
                            !CimStringUtils.equals(
                                    destPortID.getValue(),
                                    eqpContainerPositionList.get(0).getDestPortID().getValue()),
                            retCodeConfig.getAllWaferDestPortNotSame());
                }
            }

            if (CimBooleanUtils.isFalse(allWaferRetrievedFlag)) {
                continue;
            }

            /*--------------------------------*/
            /*   Attache the cassette starts  */
            /*--------------------------------*/
            log.info(
                    "Attach the cassette starts. CassetteID = {}",
                    ObjectIdentifier.fetchValue(destCassetteID));
            /*-------------------------------------------------------*/
            /*   Get the port where destination cassette is loaded   */
            /*-------------------------------------------------------*/
            log.info(
                    "Get the port where destination cassette is loaded. CassetteID = {}",
                    ObjectIdentifier.fetchValue(destCassetteID));
            Infos.EqpPortStatus retPort = null;

            // equipment_portInfo_GetDR
            Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoGet(objCommon, equipmentID);

            Boolean portFoundFlag = false;

            for (Infos.EqpPortStatus eqpPortStatus : eqpPortInfo.getEqpPortStatuses()) {
                retPort = eqpPortStatus;

                if (CimStringUtils.equals(
                        destCassetteID.getValue(), retPort.getLoadedCassetteID().getValue())) {
                    log.info("## portFoundFlag = TRUE");
                    portFoundFlag = true;
                    break;
                }
            }
            Validations.check(
                    CimBooleanUtils.isFalse(portFoundFlag),
                    new OmCode(retCodeConfig.getCstNotInLoader(), destCassetteID.getValue()));

            /*----------------------------------------------------------------------*/
            /*   Check if the destination cassette is loaded on destination port.   */
            /*   Checked only when destPortID isn't blank.                          */
            /*----------------------------------------------------------------------*/
            log.info("# destPortID is {}", destPortID.getValue());
            if (!ObjectIdentifier.isEmpty(destPortID)) {
                Validations.check(
                        !CimStringUtils.equals(destPortID.getValue(), retPort.getPortID().getValue()),
                        new OmCode(
                                retCodeConfig.getCastNotLoadedDestPort(),
                                destCassetteID.getValue(),
                                destPortID.getValue()));
            }

            Boolean opeStartFlag = false, monitorLotFlag = false;
            if (!ObjectIdentifier.isEmpty(controlJobID)) {

                /*--------------------------------------*/
                /*   Update information on controljob   */
                /*--------------------------------------*/
                log.info("# controlJobID = {}", controlJobID.getValue());
                /*-----------------------------------------*/
                /*   Check if lot is "opestarted" or not   */
                /*-----------------------------------------*/
                opeStartFlag = true;

                /*-------------------------------------------*/
                /*   Update FRCTRLJOB_CAST_LOT information   */
                /*-------------------------------------------*/
                log.info("# Update OMCJ_CARRIERL_OT information.");
                CimControlJob controlJob = baseCoreFactory.getBO(CimControlJob.class, controlJobID);
                Validations.check(
                        CimObjectUtils.isEmpty(controlJob), retCodeConfig.getNotFoundControlJob());

                ProductDTO.LotInControlJobInfo controlJobLot =
                        controlJob.findControlJobLotNamed(retrieveLotIDs.get(nCnt1).getValue());
                monitorLotFlag = controlJobLot.getMonitorLotFlag();

                List<ProductDTO.PosStartCassetteInfo> startCassetteInfo = controlJob.getStartCassetteInfo();

                Boolean startCastFoundFlag = false;

                // Check if the cassette is related to controlJob
                for (ProductDTO.PosStartCassetteInfo startCassette : startCassetteInfo) {

                    if (CimStringUtils.equals(
                            startCassette.getCassetteID().getValue(), destCassetteID.getValue())) {
                        log.info("## Start cassette information already exist in control job.");
                        startCastFoundFlag = true;
                        log.info(
                                "## Add lot info to Start cassette. LotID ={}",
                                retrieveLotIDs.get(nCnt1).getValue());
                        List<ProductDTO.PosLotInCassetteInfo> lotInCassetteList =
                                startCassette.getLotInCassetteInfo();
                        ProductDTO.PosLotInCassetteInfo lotInCassette = new ProductDTO.PosLotInCassetteInfo();
                        lotInCassetteList.add(lotInCassette);
                        lotInCassette.setLotID(retrieveLotIDs.get(nCnt1));
                        lotInCassette.setOperationStartFlag(opeStartFlag);
                        lotInCassette.setMonitorLotFlag(monitorLotFlag);
                        break;
                    }
                }

                if (CimBooleanUtils.isFalse(startCastFoundFlag)) {

                    // Start cassette information doesn't exist in control job.
                    log.info("# false == StartCastFoundFlag");
                    log.info("# Set start cassette Info. cassetteID = {}", destCassetteID.getValue());
                    ProductDTO.PosStartCassetteInfo startCassette = new ProductDTO.PosStartCassetteInfo();
                    startCassetteInfo.add(startCassette);
                    startCassette.setLoadSequenceNumber(retPort.getLoadSequenceNumber());
                    startCassette.setCassetteID(destCassetteID);
                    startCassette.setLoadPurposeType(retPort.getLoadPurposeType());
                    startCassette.setLoadPortID(retPort.getPortID());
                    startCassette.setUnloadPortID(retPort.getPortID());

                    // cassette_lotList_GetDR
                    log.info("# Set start cassette lots Info. cassetteID = {}", destCassetteID.getValue());
                    Infos.LotListInCassetteInfo cassetteLotListGetResult =
                            cassetteMethod.cassetteGetLotList(objCommon, controlJobID);

                    Integer LotInCastLen = CimArrayUtils.getSize(cassetteLotListGetResult.getLotIDList()),
                            LotInCastCnt = 0,
                            LotInCJCnt = 0,
                            castLotCnt = 0;
                    boolean lotFoundInCJFlag = false;

                    // List<Infos.ControlJobLot> controlJobList = controlJobLotList;
                    for (LotInCastCnt = 0; LotInCastCnt < LotInCastLen; LotInCastCnt++) {
                        for (LotInCJCnt = 0; LotInCJCnt < controlJobLotList.size(); LotInCJCnt++) {
                            if (CimStringUtils.equals(
                                    cassetteLotListGetResult.getLotIDList().get(LotInCastCnt).getValue(),
                                    controlJobLotList.get(LotInCJCnt).getLotID().getValue())) {
                                lotFoundInCJFlag = true;
                            }
                        }

                        if (CimBooleanUtils.isFalse(lotFoundInCJFlag)) {
                            log.info("Add lot to CTRLJOB_CAST_LOT. lotID =");
                            ProductDTO.PosLotInCassetteInfo lotInCassette = new ProductDTO.PosLotInCassetteInfo();
                            startCassette.getLotInCassetteInfo().add(lotInCassette);
                            lotInCassette.setLotID(
                                    ObjectIdentifier.build(
                                            cassetteLotListGetResult.getLotIDList().get(LotInCastCnt).getValue(), null));
                            lotInCassette.setOperationStartFlag(false);
                            lotInCassette.setMonitorLotFlag(false);
                            castLotCnt++;
                        }
                    }
                    log.info("Add retrieved lot to CTRLJOB_CAST_LOT. lotID =");
                    ProductDTO.PosLotInCassetteInfo lotInCassette = new ProductDTO.PosLotInCassetteInfo();
                    startCassette.getLotInCassetteInfo().add(lotInCassette);
                    lotInCassette.setLotID(retrieveLotIDs.get(nCnt1));
                    lotInCassette.setOperationStartFlag(opeStartFlag);
                    lotInCassette.setMonitorLotFlag(controlJobLot.getMonitorLotFlag());

                    /*-------------------------------*/
                    /*   Update OMCARRIER information   */
                    /*-------------------------------*/
                    log.info("Update cassette information. CassetteID = {}", destCassetteID.getValue());
                    CimCassette cassette = baseCoreFactory.getBO(CimCassette.class, destCassetteID);
                    Validations.check(CimObjectUtils.isEmpty(cassette), retCodeConfig.getNotFoundCassette());
                    log.info("Update ControlJobID in OMCARRIER.CJ_ID = {}", controlJobID.getValue());
                    cassette.setControlJob(controlJob);
                }

                /*---------------------------------------*/
                /*   Set Start cassette to Control Job   */
                /*---------------------------------------*/
                log.info("Set Start Cassette to Control Job.");
                controlJob.setStartCassetteInfo(startCassetteInfo);

                /*-----------------------------------*/
                /*   Update FRCTROLJOB information   */
                /*-----------------------------------*/
                log.info("Update PortGroup in OMCJ. PortGroupID = {}", retPort.getPortGroup());
                controlJob.setPortGroup(retPort.getPortGroup());

                /*----------------------------------*/
                /*   Update OMEQP_LOT information   */
                /*----------------------------------*/
                log.info("Update OMEQP_LOT information");
                MachineDTO.MachineLot equipmentLot =
                        equipment.findProcessingLotNamed(retrieveLotIDs.get(nCnt1).getValue());
                log.info("Remove OMCJ_LOT information.");
                com.fa.cim.newcore.bo.product.CimLot lot =
                        baseCoreFactory.getBO(
                                com.fa.cim.newcore.bo.product.CimLot.class, retrieveLotIDs.get(nCnt1));
                Validations.check(CimObjectUtils.isEmpty(lot), retCodeConfig.getNotFoundLot());
                equipment.removeProcessingLot(lot);

                equipmentLot.setUnloadCassetteID(destCassetteID); // 待确认此为unloadCassetteID
                equipmentLot.setUnloadPortID(retPort.getPortID());
            } else {

                /*-------------------------*/
                /*   controljob is blank   */
                /*------------------------ */
                log.info("ControlJob is blank.");
                opeStartFlag = false;
                monitorLotFlag = false;
            }

            /*---------------------------------------*/
            /*   Update FREQP_CAST_LOT information   */
            /*---------------------------------------*/
            log.info("Update OMEQP_CARRIER_LOT information.");
            CimMachine machine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
            Validations.check(CimObjectUtils.isEmpty(machine), retCodeConfig.getNotFoundMachine());
            MachineDTO.MachineCassette equipmentCassette =
                    machine.findCassetteNamed(destCassetteID.getValue());

            /**
             * EquipmentCassetteLot，没有CassetteID这个字段 equipmentCassetteLot.setCassetteID(destCassetteID);
             */
            for (int i = 0; i < CimArrayUtils.getSize(equipmentCassette.getMachineCassetteLots()); i++) {
                equipmentCassette.getMachineCassetteLots().get(i).setLotID(retrieveLotIDs.get(nCnt1));
                equipmentCassette.getMachineCassetteLots().get(i).setOperationStartFlag(opeStartFlag);
                equipmentCassette.getMachineCassetteLots().get(i).setMonitorLotFlag(monitorLotFlag);
            }
            machine.updateCassette(equipmentCassette);

            /*----------------------------------*/
            /*   Update Cassette_multiLotType   */
            /*----------------------------------*/
            log.info("Call cassette_multiLotType_Update");
            cassetteMethod.cassetteMultiLotTypeUpdate(objCommon, destCassetteID);

            /*-----------------------------------------*/
            /*  Set wafer into destination cassette    */
            /*-----------------------------------------*/
            for (ObjectIdentifier waferID : waferIDs) {
                Infos.EqpContainerPositionInfo containerPositionInfoResult =
                        this.equipmentContainerPositionInfoGet(
                                objCommon, equipmentID, waferID, BizConstant.SP_SLM_KEYCATEGORY_WAFER);
                // wafer_materialContainer_Change
                Infos.Wafer strWafer = new Infos.Wafer();
                strWafer.setSlotNumber(
                        containerPositionInfoResult.getEqpContainerPositionList().get(0).getDestSlotNo());
                strWafer.setWaferID(waferID);
                waferMethod.waferMaterialContainerChange(objCommon, destCassetteID, strWafer);
            }

            /*--------------------------------*/
            /*   Attaching the cassette Ends  */
            /*--------------------------------*/
            log.info(
                    "Attaching the cassette ends. CassetteID/LotID {}, {}",
                    destCassetteID.getValue(),
                    retrieveLotIDs.get(nCnt1).getValue());
            /*------------------------------------------------------------------------*/
            /*   Clear pmcmg container information if input controlJob ID is blank  */
            /*------------------------------------------------------------------------*/
            if (ObjectIdentifier.isEmpty(controlJobID)) {

                log.info(
                        "Input control job is blank. Clears machine contaier position info for this lot. LotID = {}",
                        retrieveLotIDs.get(nCnt1).getValue());
                Inputs.ObjEquipmentContainerPositionInfoClearIn objEquipmentContainerPositionInfoClearIn =
                        new Inputs.ObjEquipmentContainerPositionInfoClearIn();
                objEquipmentContainerPositionInfoClearIn.setEquipmentID(equipmentID);
                objEquipmentContainerPositionInfoClearIn.setKey(retrieveLotIDs.get(nCnt1));
                objEquipmentContainerPositionInfoClearIn.setKeyCategory(BizConstant.SP_SLM_KEYCATEGORY_LOT);

                List<ObjectIdentifier> clearOut =
                        equipmentContainerPositionMethod.equipmentContainerPositionInfoClear(
                                objCommon, objEquipmentContainerPositionInfoClearIn);
            }

            // ------------------//
            //    Make Event    //
            // ------------------//
            log.info("Create Wafer Sort Event");
            Outputs.ObjEquipmentContainerInfoGetOut objEquipmentContainerInfoGetOut =
                    this.equipmentContainerInfoGet(objCommon, equipmentID);
            List<Infos.EqpContainer> oldEqpContSeq =
                    objEquipmentContainerInfoGetOut.getStrEqpContainerInfo().getEqpContainerList();

            List<Infos.WaferTransfer> strWaferXferSeq = new ArrayList<>();
            Boolean hisEventMakeFlag = false;

            for (int i = 0; i < wfrMapSeqLen; i++) {
                for (Infos.EqpContainer eqpContainer : oldEqpContSeq) {
                    for (Infos.EqpContainerPosition eqpContainerPosition :
                            eqpContainer.getEqpContainerPosition()) {
                        if (CimStringUtils.equals(
                                eqpContainerPosition.getWaferID().getValue(), waferIDs.get(i).getValue())) {
                            if (!CimStringUtils.equals(
                                    eqpContainerPosition.getSrcCassetteID().getValue(),
                                    eqpContainerPosition.getDestCassetteID().getValue())
                                    || !eqpContainerPosition
                                    .getSrcSlotNo()
                                    .equals(eqpContainerPosition.getDestSlotNo())) {
                                hisEventMakeFlag = true;
                            }
                            Infos.WaferTransfer waferTransfer = new Infos.WaferTransfer();
                            strWaferXferSeq.add(waferTransfer);
                            waferTransfer.setWaferID(eqpContainerPosition.getWaferID());
                            waferTransfer.setBDestinationCassetteManagedByOM(true);
                            waferTransfer.setDestinationCassetteID(eqpContainerPosition.getDestCassetteID());
                            waferTransfer.setBOriginalCassetteManagedByOM(true);
                            waferTransfer.setOriginalCassetteID(eqpContainerPosition.getSrcCassetteID());
                            waferTransfer.setOriginalSlotNumber(eqpContainerPosition.getSrcSlotNo());
                            waferTransfer.setDestinationSlotNumber(eqpContainerPosition.getDestSlotNo());
                            break;
                        }
                    }
                }
            }

            if (CimBooleanUtils.isTrue(hisEventMakeFlag) && !CimArrayUtils.isEmpty(strWaferXferSeq)) {
                eventMethod.lotWaferSortEventMake(objCommon, "TXEQR016", strWaferXferSeq, "");
            }
        }

        /*---------------------------------------------------------------------*/
        /*   Check if the pmcmg container position information is cleared.   */
        /*   This check is done only when input control job isn't blank.       */
        /*       Clear Condition                                               */
        /*           - All wafers' SLM State in controljob is "Retrieved".     */
        /*---------------------------------------------------------------------*/
        Boolean clearReqFlag = true;
        List<ObjectIdentifier> eqpCtnPsnList = new ArrayList<>();
        if (!ObjectIdentifier.isEmpty(controlJobID)) {
            Infos.EqpContainerPositionInfo containerPositionInfoResult =
                    this.equipmentContainerPositionInfoGet(
                            objCommon, equipmentID, controlJobID, BizConstant.SP_SLM_KEYCATEGORY_CONTROLJOB);
            List<Infos.EqpContainerPosition> eqpContainerPositionList =
                    containerPositionInfoResult.getEqpContainerPositionList();
            eqpContainerPositionList.forEach(
                    eqpContainerPosition -> eqpCtnPsnList.add(eqpContainerPosition.getContainerPositionID()));
            if (CimArrayUtils.binarySearch(
                    new String[]{"OEQPW012", "OEQPW024"}, objCommon.getTransactionID())) {
                log.info("PartialOpeComp : TxID == {}", objCommon.getTransactionID());

                // ----------------------------------------------------------
                //  Filtering for Partial OpeComp
                // ----------------------------------------------------------
                List<Infos.EqpContainerPosition> strEqpContainerPositionSeq = new ArrayList<>();
                for (Infos.EqpContainerPosition eqpContainerPosition : eqpContainerPositionList) {
                    if (!ObjectIdentifier.isEmpty(eqpContainerPosition.getControlJobID())) {
                        strEqpContainerPositionSeq.add(eqpContainerPosition);
                    }
                }

                containerPositionInfoResult.setEqpContainerPositionList(strEqpContainerPositionSeq);
            }

            for (Infos.EqpContainerPosition eqpContainerPosition :
                    containerPositionInfoResult.getEqpContainerPositionList()) {
                if (!CimStringUtils.equals(
                        eqpContainerPosition.getFmcState(), BizConstant.SP_SLMSTATE_RETRIEVED)) {
                    log.info(
                            "clearReqFlag is false. Ends check for EQP container position information clear for input controlJobID. ControlJobID = {}",
                            controlJobID.getValue());
                    clearReqFlag = false;
                    break;
                }
            }

            if (CimBooleanUtils.isTrue(clearReqFlag)) {

                Inputs.ObjEquipmentContainerPositionInfoClearIn objEquipmentContainerPositionInfoClearIn =
                        new Inputs.ObjEquipmentContainerPositionInfoClearIn();
                objEquipmentContainerPositionInfoClearIn.setEquipmentID(equipmentID);
                objEquipmentContainerPositionInfoClearIn.setKey(controlJobID);
                objEquipmentContainerPositionInfoClearIn.setKeyCategory(
                        BizConstant.SP_SLM_KEYCATEGORY_CONTROLJOB);

                List<ObjectIdentifier> objEquipmentContainerPositionInfoClearOut =
                        equipmentContainerPositionMethod.equipmentContainerPositionInfoClear(
                                objCommon, objEquipmentContainerPositionInfoClearIn);
            }
        }

        /*----------------------------------*/
        /*   Update LastClaimed User/Time   */
        /*----------------------------------*/
        // TODO:临时解决，之后修复
        log.info("Update LastClaimed User/Time");
        CimPerson person = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());
        Validations.check(person == null, new OmCode(retCodeConfig.getNotFoundPerson(), null));
        if (!clearReqFlag) {
            for (Infos.SlmSlotMap strSlmSlotMap : strSlmSlotMapSeq) {
                CimMachineContainerPosition equipmentContainerPosition =
                        equipment.findMachineContainerPositionForWafer(strSlmSlotMap.getWaferID().getValue());
                Validations.check(
                        equipmentContainerPosition == null,
                        retCodeConfig.getNotFoundEquipmentContainerPosition());
                equipmentContainerPosition.setLastClaimedTimeStamp(
                        objCommon.getTimeStamp().getReportTimeStamp());
                equipmentContainerPosition.setLastClaimedUser(person);
            }
        } else {
            for (ObjectIdentifier eqpCtnPsn : eqpCtnPsnList) {
                CimMachineContainerPosition machineContainerPosition =
                        baseCoreFactory.getBO(CimMachineContainerPosition.class, eqpCtnPsn);
                Validations.check(
                        machineContainerPosition == null,
                        retCodeConfig.getNotFoundEquipmentContainerPosition());
                machineContainerPosition.setLastClaimedTimeStamp(
                        objCommon.getTimeStamp().getReportTimeStamp());
                machineContainerPosition.setLastClaimedUser(person);
            }
        }
    }

    /**
     * @param objCommon    objCommon
     * @param equipmentID  equipmentID
     * @param controlJobID controlJobID
     * @return
     * @author Ho
     */
    @Override
    public void equipmentContainerPositionUpdateForOpeStartCancel(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, ObjectIdentifier controlJobID) {
        // controlJob_lotList_Get

        List<Infos.ControlJobLot> controlJobLots =
                controlJobMethod.controlJobLotListGet(objCommon, controlJobID);
        List<ObjectIdentifier> rsvCancelCassetteList = new ArrayList<>();
        List<ObjectIdentifier> storedLotDestCastList = new ArrayList<>();

        for (Infos.ControlJobLot controlJobLot : controlJobLots) {
            List<Infos.EqpContainerPosition> eqpContainerPositions = null;
            if (CimArrayUtils.binarySearch(
                    new String[]{"OEQPW012", "OEQPW024"}, objCommon.getTransactionID())) {
                String key = controlJobLot.getLotID().getValue(),
                        keyCategory = BizConstant.SP_SLM_KEYCATEGORY_LOT;
                Infos.EqpContainerPositionInfo eqpContainerPositionInfoRetCode =
                        this.equipmentContainerPositionInfoGet(
                                objCommon, equipmentID, ObjectIdentifier.buildWithValue(key), keyCategory);
                eqpContainerPositions = eqpContainerPositionInfoRetCode.getEqpContainerPositionList();
            } else {
                ObjectIdentifier lotID = controlJobLot.getLotID();
                // equipmentContainerPosition_info_GetByLotDR
                List<Infos.EqpContainerPosition> eqpContainerPositionRetCode =
                        this.equipmentContainerPositionInfoGetByLotDR(objCommon, lotID);
                eqpContainerPositions = eqpContainerPositionRetCode;
            }

            int retrievedWaferlen = 0;
            if (!CimArrayUtils.isEmpty(eqpContainerPositions)) {
                boolean reservedFlag = false, retrievedFlag = false;
                List<String> reservedLotList = new ArrayList<>();
                List<Infos.SlmSlotMap> strSlmSlotMapSeq = new ArrayList<>();
                ObjectIdentifier tmpDestCassetteID = null;
                for (Infos.EqpContainerPosition eqpContainerPosition : eqpContainerPositions) {
                    if (CimArrayUtils.binarySearch(
                            new String[]{BizConstant.SP_SLMSTATE_RESERVED, BizConstant.SP_SLMSTATE_NONSLMOPE},
                            eqpContainerPosition.getFmcState())) {
                        reservedFlag = true;
                        tmpDestCassetteID = eqpContainerPosition.getDestCassetteID();
                        break;
                    } else if (CimStringUtils.equals(
                            eqpContainerPosition.getFmcState(), BizConstant.SP_SLMSTATE_RETRIEVED)) {
                        retrievedWaferlen++;
                        retrievedFlag = true;
                    } else if (CimStringUtils.equals(
                            eqpContainerPosition.getFmcState(), BizConstant.SP_SLMSTATE_STORED)) {
                        log.info( "## SLMState = Stored");
                    }
                    Infos.SlmSlotMap strSlmSlotMap = new Infos.SlmSlotMap();
                    strSlmSlotMap.setCassetteID(eqpContainerPosition.getDestCassetteID());
                    strSlmSlotMap.setWaferID(eqpContainerPosition.getWaferID());
                    strSlmSlotMap.setSlotNumber(eqpContainerPosition.getDestSlotNo());
                    strSlmSlotMapSeq.add(strSlmSlotMap);
                    tmpDestCassetteID = eqpContainerPosition.getDestCassetteID();
                }
                if (reservedFlag) {
                    // ----------------------------------------------------------
                    //  For reserved lot,
                    //  delete it from container
                    //  cancel the destination cassette reservation if necessary
                    // ----------------------------------------------------------
                    // delete this lot from container
                    ObjectIdentifier key = controlJobLot.getLotID();
                    String keyCategory = BizConstant.SP_SLM_KEYCATEGORY_LOT;
                    // equipmentContainerPosition_info_Clear
                    //                    RetCode<List<String>>
                    // objEquipmentContainerPositionInfoClearOut=clearEquipmentContainerPositionInfo(objCommon,equipmentID,key,keyCategory);
                    //
                    // Validations.isOK(objEquipmentContainerPositionInfoClearOut.getReturnCode(),objCommon.getTransactionID());

                    Inputs.ObjEquipmentContainerPositionInfoClearIn objEquipmentContainerPositionInfoClearIn =
                            new Inputs.ObjEquipmentContainerPositionInfoClearIn();
                    objEquipmentContainerPositionInfoClearIn.setEquipmentID(equipmentID);
                    objEquipmentContainerPositionInfoClearIn.setKey(key);
                    objEquipmentContainerPositionInfoClearIn.setKeyCategory(keyCategory);

                    List<ObjectIdentifier> objEquipmentContainerPositionInfoClearOut =
                            equipmentContainerPositionMethod.equipmentContainerPositionInfoClear(
                                    objCommon, objEquipmentContainerPositionInfoClearIn);

                    if (ObjectIdentifier.isNotEmpty(tmpDestCassetteID)) {
                        int nCnt2 = 0, n = rsvCancelCassetteList.size();
                        for (; nCnt2 < n; nCnt2++) {
                            if (CimStringUtils.equals(
                                    rsvCancelCassetteList.get(nCnt2).getValue(), tmpDestCassetteID.getValue())) {
                                break;
                            }
                        }
                        if (nCnt2 == n) {
                            rsvCancelCassetteList.add(tmpDestCassetteID);
                        }
                    }
                } else if (retrievedFlag) {
                    if (CimArrayUtils.isEmpty(strSlmSlotMapSeq)
                            && retrievedWaferlen < eqpContainerPositions.size()) {
                        // equipmentContainer_wafer_Retrieve
                        equipmentContainerWaferRetrieve(
                                objCommon, equipmentID, controlJobID, null, strSlmSlotMapSeq);
                    }
                    // delete this lot from container
                    //                    RetCode<List<String>> clearRetCode =
                    // clearEquipmentContainerPositionInfo(objCommon, equipmentID, controlJobLot.getLotID(),
                    // CIMStateEnum.SP_SLM_KEY_CATEGORY_LOT.getValue());
                    //
                    // Validations.isOK(clearRetCode.getReturnCode(),objCommon.getTransactionID());

                    Inputs.ObjEquipmentContainerPositionInfoClearIn objEquipmentContainerPositionInfoClearIn =
                            new Inputs.ObjEquipmentContainerPositionInfoClearIn();
                    objEquipmentContainerPositionInfoClearIn.setEquipmentID(equipmentID);
                    objEquipmentContainerPositionInfoClearIn.setKey(controlJobLot.getLotID());
                    objEquipmentContainerPositionInfoClearIn.setKeyCategory(
                            BizConstant.SP_SLM_KEYCATEGORY_LOT);

                    List<ObjectIdentifier> objEquipmentContainerPositionInfoClearOut =
                            equipmentContainerPositionMethod.equipmentContainerPositionInfoClear(
                                    objCommon, objEquipmentContainerPositionInfoClearIn);
                    if (!ObjectIdentifier.isEmpty(tmpDestCassetteID)) {
                        int nCnt2 = 0, n = rsvCancelCassetteList.size();
                        for (; nCnt2 < n; nCnt2++) {
                            if (CimStringUtils.equals(
                                    rsvCancelCassetteList.get(nCnt2).getValue(), tmpDestCassetteID.getValue())) {
                                break;
                            }
                        }
                        if (nCnt2 == n) {
                            rsvCancelCassetteList.add(tmpDestCassetteID);
                        }
                    }
                } else {
                    // ----------------------------------------------------------
                    // this lot is not reserved and not retrieved
                    // do message queue put for this lot
                    // SLM message queue put for "Stored" lots
                    // ----------------------------------------------------------
                    if (!ObjectIdentifier.isEmpty(tmpDestCassetteID)) {
                        // SLM_messageQueue_PutDR
                        Infos.StrSLMMsgQueueRecord strSLMMsgQueueRecord = new Infos.StrSLMMsgQueueRecord();
                        strSLMMsgQueueRecord.setEventName(BizConstant.SP_SLM_EVENTNAME_OPESTARTCANCEL);
                        strSLMMsgQueueRecord.setEquipmentID(equipmentID);
                        strSLMMsgQueueRecord.setCassetteID(tmpDestCassetteID);
                        strSLMMsgQueueRecord.setControlJobID(controlJobID);
                        strSLMMsgQueueRecord.setLotID(controlJobLot.getLotID());
                        messageMethod.slmMessageQueuePutDR(objCommon, strSLMMsgQueueRecord);
                    } else {
                        throw new ServiceException(retCodeConfig.getSlmDestinationCassetteUndefine());
                    }

                    int nCnt2 = 0, n = storedLotDestCastList.size();
                    for (; nCnt2 < n; nCnt2++) {
                        if (CimStringUtils.equals(
                                storedLotDestCastList.get(nCnt2).getValue(), tmpDestCassetteID.getValue())) {
                            break;
                        }
                    }
                    if (nCnt2 == n) {
                        storedLotDestCastList.add(tmpDestCassetteID);
                    }
                }
            }
        }

        // -------------------------------------------------
        // for each pst, clear controlJobID, processJobID
        // -------------------------------------------------

        // -------------------------------
        //  Get Machine Object
        // -------------------------------
        CimMachine machineBO = baseCoreFactory.getBO(CimMachine.class, equipmentID);

        List<CimMachineContainerPosition> machineContainerPositionForControlJob =
                machineBO.findMachineContainerPositionForControlJob(
                        ObjectIdentifier.fetchValue(controlJobID));
        if (CimArrayUtils.isNotEmpty(machineContainerPositionForControlJob)) {
            for (CimMachineContainerPosition equipmentContainerPosition :
                    machineContainerPositionForControlJob) {
                equipmentContainerPosition.setControlJob(null);
                equipmentContainerPosition.setProcessJob(null);
                CimPerson person = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());
                equipmentContainerPosition.setLastClaimedUser(person);
                equipmentContainerPosition.setLastClaimedTimeStamp(
                        objCommon.getTimeStamp().getReportTimeStamp());
            }
        }

        // -------------------------------------------------
        // Cancel destination cassette SLM reservation
        // -------------------------------------------------

        for (ObjectIdentifier rsvCancelCassette : rsvCancelCassetteList) {
            int nCnt2 = 0, n = storedLotDestCastList.size();
            for (; nCnt2 < n; nCnt2++) {
                if (CimStringUtils.equals(
                        rsvCancelCassette.getValue(), storedLotDestCastList.get(nCnt2).getValue())) {
                    break;
                }
            }
            if (nCnt2 == n) {
                if (!ObjectIdentifier.isEmpty(rsvCancelCassette)) {
                    CimCassette cassette = baseCoreFactory.getBO(CimCassette.class, rsvCancelCassette);
                    if (cassette != null) {
                        cassette.setSLMReservedMachine(null);
                    }
                }
            }
        }
    }

    /**
     * equipment_CheckConditionForOpeStartCancel
     *
     * @param objCommon         objCommon
     * @param equipmentID       equipmentID
     * @param startCassetteList startCassetteList
     * @return
     * @author Ho
     */
    @Override
    public void equipmentCheckConditionForOpeStartCancel(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            List<Infos.StartCassette> startCassetteList) {
        /*-----------------------------------*/
        /*                                   */
        /*   Check Condition for eqp   */
        /*                                   */
        /*-----------------------------------*/

        /*------------------------*/
        /*   Get Machine Object   */
        /*------------------------*/
        CimMachine equipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(CimObjectUtils.isEmpty(equipment), retCodeConfig.getNotFoundEqp());
        /*----------------------------------------------------*/
        /*   Get PosMachineLot Sequence (In-Processing lot)   */
        /*----------------------------------------------------*/
        List<MachineDTO.MachineLot> equipmentLots = equipment.allProcessingLots();

        /*----------------------------------------------------------*/
        /*   Check all of StartedLot is in Psocessing Info or Not   */
        /*----------------------------------------------------------*/
        for (Infos.StartCassette startCassette : startCassetteList) {
            for (Infos.LotInCassette lotInCassette : startCassette.getLotInCassetteList()) {
                /*--------------------------*/
                /*   Omit Not-Started lot   */
                /*--------------------------*/
                boolean operationStartFlag = lotInCassette.getMoveInFlag();
                if (!operationStartFlag) {
                    continue;
                }
                /*--------------------------------------------*/
                /*   Find lot in ProcessingLot of eqp   */
                /*--------------------------------------------*/
                boolean findFlag = false;
                for (MachineDTO.MachineLot equipmentLot : equipmentLots) {
                    ObjectIdentifier pLident = equipmentLot.getLotID(), lICident = lotInCassette.getLotID();
                    if (ObjectIdentifier.equalsWithValue(pLident, lICident)) {
                        findFlag = true;
                        break;
                    }
                }
                Validations.check(!findFlag, retCodeConfig.getNotFoundLotInProcessLot());
            }
        }
    }

    /**
     * equipment_portState_CheckForOpeStartCancel
     *
     * @param objCommon         objCommon
     * @param equipmentID       equipmentID
     * @param startCassetteList startCassetteList
     * @return
     * @author Ho
     */
    @Override
    public void equipmentPortStateCheckForOpeStartCancel(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            List<Infos.StartCassette> startCassetteList) {
        /*-------------------------------------------------*/
        /*                                                 */
        /*   Check port's cassette vs In-parm's cassette   */
        /*                                                 */
        /*-------------------------------------------------*/

        /*--------------------------*/
        /*   Get port Information   */
        /*--------------------------*/
        // equipment_portInfo_Get
        Infos.EqpPortInfo eqpPortInfo = equipmentPortInfoGet(objCommon, equipmentID);
        boolean slmCapabilityFlag = false;
        // ----------------------------------------------------------------
        //  Get SLM Capability of eqp BR info
        // ----------------------------------------------------------------

        // equipment_brInfo_GetDR__120
        Infos.EqpBrInfo eqpBrInfo = equipmentBRInfoGetDR(objCommon, equipmentID);
        if (eqpBrInfo.isFmcCapabilityFlag()) {
            slmCapabilityFlag = true;
        }

        /*----------------------------------------*/
        /*   For-Loop for strStartCassette Info   */
        /*----------------------------------------*/
        for (Infos.StartCassette startCassette : startCassetteList) {
            if (ObjectIdentifier.isEmpty(startCassette.getCassetteID()) && slmCapabilityFlag) {
                continue;
            }

            /*-------------------------*/
            /*   Find Specified port   */
            /*-------------------------*/
            boolean findFlag = false;
            List<Infos.EqpPortStatus> eqpPortStatuses = eqpPortInfo.getEqpPortStatuses();
            int j = 0, n = eqpPortStatuses.size();
            for (; j < n; j++) {
                if (CimStringUtils.equals(
                        eqpPortStatuses.get(j).getPortID().getValue(),
                        startCassette.getUnloadPortID().getValue())) {
                    findFlag = true;
                    break;
                }
            }
            Validations.check(!findFlag, retCodeConfig.getNotFoundPort());

            /*------------------------*/
            /*   Compare CassetteID   */
            /*------------------------*/
      /*
      if (!ObjectUtils.equalsWithValue(eqpPortStatuses.get(j).getLoadedCassetteID(), startCassette.getCassetteID())) {
          result.setReturnCode(retCodeConfig.getInvalidCassettePortCombination());
          return result;
      }
      */
        }
    }

    /**
     * equipment_processingLot_Delete Delete specified lots from eqp's processing-lot
     *
     * @param objCommon         objCommon
     * @param equipmentID       equipmentID
     * @param startCassetteList startCassetteList
     * @return
     * @author Ho
     */
    @Override
    public void equipmentProcessingLotDelete(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            List<Infos.StartCassette> startCassetteList) {
        /*------------------------*/
        /*   Get Machine Object   */
        /*------------------------*/
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(aMachine == null,
                new OmCode(retCodeConfig.getNotFoundMachine(), ObjectIdentifier.fetchValue(equipmentID)));
        /*---------------------------------*/
        /*   Set posMachineLot structure   */
        /*---------------------------------*/
        startCassetteList.stream()
                .flatMap(startCassette -> startCassette.getLotInCassetteList().stream())
                /*------------------------*/
                /*   Omit Not-Start lot   */
                /*------------------------*/
                .filter(lotInCassette -> CimBooleanUtils.isTrue(lotInCassette.getMoveInFlag()))
                .forEach(lotInCassette -> {
                    final ObjectIdentifier lotID = lotInCassette.getLotID();
                    /*--------------------*/
                    /*   Get lot Object   */
                    /*--------------------*/
                    CimLot aLot = baseCoreFactory.getBO(CimLot.class, lotID);
                    Validations.check(aLot == null,
                            new OmCode(retCodeConfig.getNotFoundLot(), ObjectIdentifier.fetchValue(lotID)));
                    /*-------------------------*/
                    /*   Find processing Lot   */
                    /*-------------------------*/
                    MachineDTO.MachineLot processingLot =
                            aMachine.findProcessingLotNamed(ObjectIdentifier.fetchValue(lotID));
                    Validations.check(
                            processingLot == null,
                            new OmCode(
                                    retCodeConfig.getNotFoundLotInProcessLot(),
                                    ObjectIdentifier.fetchValue(lotID),
                                    ObjectIdentifier.fetchValue(equipmentID)));
                    /*-----------------------------------------*/
                    /*   Remove InprocessingLot from Machine   */
                    /*-----------------------------------------*/
                    aMachine.removeProcessingLot(aLot);
                });
    }

    /**
     * Decrease the usage count of specified eqp.
     *
     * @param objCommon         objCommon
     * @param equipmentID       equipmentID
     * @param startCassetteList startCassetteList
     * @return
     * @author Ho
     */
    @Override
    public void equipmentUsageCountDecrement(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            List<Infos.StartCassette> startCassetteList) {

        /*------------------------*/
        /*   Get Machine Object   */
        /*------------------------*/
        CimMachine equipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(CimObjectUtils.isEmpty(equipment), retCodeConfig.getNotFoundEqp());

        int startWaferCnt = 0;
        for (Infos.StartCassette startCassette : startCassetteList) {
            for (Infos.LotInCassette lotInCassette : startCassette.getLotInCassetteList()) {
                boolean operationStartFlag = lotInCassette.getMoveInFlag();
                if (!operationStartFlag) {
                    continue;
                }

                /*--------------------*/
                /*   Get lot Object   */
                /*--------------------*/
                com.fa.cim.newcore.bo.product.CimLot lot =
                        baseCoreFactory.getBO(
                                com.fa.cim.newcore.bo.product.CimLot.class, lotInCassette.getLotID());

                /*------------------------*/
                /*   Get lot's Contents   */
                /*------------------------*/
                String contents = lot.getLotContents();

                /*---------------------------------*/
                /*   Omit !WaferLot, !DieChipLot   */
                /*---------------------------------*/
                if (!CimStringUtils.equals(contents, BizConstant.SP_PRODTYPE_WAFER)
                        && !CimStringUtils.equals(contents, BizConstant.SP_PRODTYPE_DIE)) {
                    continue;
                }

                /*--------------*/
                /*   Count-Up   */
                /*--------------*/
                int size = lotInCassette.getLotWaferList().size();
                startWaferCnt += size;
            }
        }

        /*------------------------------*/
        /*   Update Usage Information   */
        /*------------------------------*/
        String runWaferUpdateByPostProc = StandardProperties.OM_PP_UPDATE_FOR_EQP_ATTR.getValue();
        if (!CimStringUtils.equals(runWaferUpdateByPostProc, BizConstant.CONSTANT_QUANTITY_ONE)) {

            /*===== runWafer count =====*/
            Integer runWaferCount = equipment.getRunWafer();
            if (runWaferCount == null) {
                runWaferCount = 0;
            }
            runWaferCount -= startWaferCnt;
            if (runWaferCount < 0) {
                runWaferCount = 0;
            }
            equipment.setRunWafer(runWaferCount);

            /*===== operationStart count =====*/
            Integer operationStartCount = equipment.getOperationStart();
            if (operationStartCount == null) {
                operationStartCount = 0;
            }
            operationStartCount -= 1;
            if (operationStartCount < 0) {
                operationStartCount = 0;
            }
            equipment.setOperationStart(operationStartCount);
        }
    }

    @Override
    public void equipmenCheckConditionForLoading(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            ObjectIdentifier portID,
            ObjectIdentifier cassetteID,
            String loadPurposeType) {
        Boolean nPWFlag = false;
        Boolean sLMRetrieveForWBFlag = false;
        /*-------------------*/
        /*   Get port Info   */
        /*-------------------*/
        Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoGet(objCommon, equipmentID);
        /*------------------------------*/
        /*   Find In-parm port's Info   */
        /*------------------------------*/
        Integer i;
        Integer saveSeqNo = 0;
        String basePortGroupID = null;
        int lenPortInfo = CimArrayUtils.getSize(eqpPortInfo.getEqpPortStatuses());
        for (i = 0; i < lenPortInfo; i++) {
            if (ObjectIdentifier.equalsWithValue(
                    portID, eqpPortInfo.getEqpPortStatuses().get(i).getPortID())) {
                basePortGroupID = eqpPortInfo.getEqpPortStatuses().get(i).getPortGroup();
                saveSeqNo = i;
                break;
            }
        }
        /*------------------*/
        /*    Set NPWFlag   */
        /*------------------*/
        Infos.EqpPortStatus saveEqpPortStatus = eqpPortInfo.getEqpPortStatuses().get(saveSeqNo);
        if (CimStringUtils.equals(
                saveEqpPortStatus.getLoadPurposeType(), BizConstant.SP_LOADPURPOSETYPE_SIDEDUMMYLOT)
                || CimStringUtils.equals(
                saveEqpPortStatus.getLoadPurposeType(), BizConstant.SP_LOADPURPOSETYPE_FILLERDUMMY)
                || CimStringUtils.equals(
                saveEqpPortStatus.getLoadPurposeType(),
                BizConstant.SP_LOADPURPOSETYPE_WAITINGMONITORLOT)
                || CimStringUtils.equals(
                saveEqpPortStatus.getLoadPurposeType(), BizConstant.SP_LOADPURPOSETYPE_OTHER)) {
            nPWFlag = true;
        } else if (CimStringUtils.equals(
                BizConstant.SP_LOADPURPOSETYPE_SLMRETRIEVING, loadPurposeType)) {
            nPWFlag = true;
            Infos.EqpBrInfo eqpBrInfo = this.equipmentBRInfoGetDR(objCommon, equipmentID);
            if (CimStringUtils.equals(
                    eqpBrInfo.getEquipmentCategory(), BizConstant.SP_MC_CATEGORY_WAFERBONDING)) {
                sLMRetrieveForWBFlag = true;
            }
        }
        /*---------------------------------*/
        /*   Get cassette's ControlJobID   */
        /*---------------------------------*/
        com.fa.cim.newcore.bo.durable.CimCassette aCassette =
                baseCoreFactory.getBO(com.fa.cim.newcore.bo.durable.CimCassette.class, cassetteID);
        com.fa.cim.newcore.bo.product.CimControlJob aCassetteControlJob = null;
        if (!SorterHandler.containsFOSB(cassetteID)) {
            Validations.check(
                    null == aCassette,
                    new OmCode(retCodeConfig.getNotFoundCassette(), cassetteID.getValue()));
            aCassetteControlJob = aCassette.getControlJob();
        }

        if (aCassetteControlJob == null
                && (CimStringUtils.equals(
                BizConstant.SP_LOADPURPOSETYPE_OTHER, saveEqpPortStatus.getLoadPurposeType())
                || CimStringUtils.equals(
                BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE,
                saveEqpPortStatus.getLoadPurposeType()))) {
            if (log.isDebugEnabled()) {
                log.debug(
                        "aCassetteControlJob is nill and loadPurposeType is SP_LoadPurposeType_EmptyCassette");
            }
            nPWFlag = true;
        } else {
            if (log.isDebugEnabled()) {
                log.debug(
                        "aCassetteControlJob is not nill or loadPurposeType is not SP_LoadPurposeType_EmptyCassette");
            }
            nPWFlag = false;
        }

        // ---------------------------//
        //   Check for NPW Loading   //
        // ---------------------------//
        if (nPWFlag) {
            Validations.check(null != aCassetteControlJob, retCodeConfig.getCassetteControlJobFilled());
        } else {
            if (CimStringUtils.equals(
                    BizConstant.SP_EQP_DISPATCHMODE_AUTO, saveEqpPortStatus.getDispatchMode())
                    || CimStringUtils.equals(
                    BizConstant.SP_EQP_ACCESSMODE_AUTO, saveEqpPortStatus.getAccessMode())) {
                Validations.check(null == aCassetteControlJob, retCodeConfig.getCastControlJobIdBlank());
            }
        }
        /*----------------------------------*/
        /*   Get eqp's ControlJobID   */
        /*----------------------------------*/
        List<Infos.StartReservedControlJobInfo> startReservedControlJobInfos =
                this.equipmentReservedControlJobIDGetDR(objCommon, equipmentID);
        ObjectIdentifier mCtrlJobID = null;
        int lenStartResvCtrlJob = CimArrayUtils.getSize(startReservedControlJobInfos);
        for (int j = 0; j < lenStartResvCtrlJob; j++) {
            basePortGroupID = null == basePortGroupID ? "" : basePortGroupID;
            if (CimStringUtils.equals(
                    startReservedControlJobInfos.get(j).getPortGroupID(), basePortGroupID)) {
                mCtrlJobID = startReservedControlJobInfos.get(j).getControlJobID();
            }
        }
        /*---------------------------------------------------------*/
        /*   Check Combination of controljob, port, and cassette   */
        /*---------------------------------------------------------*/
        ObjectIdentifier cCtrlJobID = null;
        if (null == aCassetteControlJob) {
            if (!ObjectIdentifier.isEmptyWithValue(mCtrlJobID)) {
                /*-------------------------------------------------------------------------*/
                /*  If eqp category is SP_Mc_Category_WaferBonding                   */
                /*   allow loading cassette onto not load reserved port for SLMRetrieving  */
                /*-------------------------------------------------------------------------*/
                if (sLMRetrieveForWBFlag
                        && ObjectIdentifier.isEmptyWithValue(saveEqpPortStatus.getLoadResrvedCassetteID())) {

                } else {
                    throw new ServiceException(
                            new OmCode(
                                    retCodeConfig.getAlreadyReservedPortGroup(),
                                    portID.getValue(),
                                    mCtrlJobID.getValue()));
                }
            }
        } else {
            cCtrlJobID =
                    new ObjectIdentifier(
                            aCassetteControlJob.getIdentifier(), aCassetteControlJob.getPrimaryKey());
            if (ObjectIdentifier.equalsWithValue(cCtrlJobID, mCtrlJobID)) {
                List<ProductDTO.PosStartCassetteInfo> startCassettes =
                        aCassetteControlJob.getStartCassetteInfo();
                Boolean findFlag = false;
                int lenCassette = CimArrayUtils.getSize(startCassettes);
                for (int j = 0; j < lenCassette; j++) {
                    if (ObjectIdentifier.equalsWithValue(cassetteID, startCassettes.get(j).getCassetteID())) {
                        if (ObjectIdentifier.equalsWithValue(portID, startCassettes.get(j).getLoadPortID())) {
                            findFlag = true;
                            break;
                        } else {
                            throw new ServiceException(
                                    new OmCode(
                                            retCodeConfig.getInvalidLoadingPort(),
                                            portID.getValue(),
                                            cassetteID.getValue(),
                                            startCassettes.get(j).getLoadPortID().getValue()));
                        }
                    }
                }
                Validations.check(
                        !findFlag,
                        new OmCode(
                                retCodeConfig.getEquipmentCastUnmatch(),
                                mCtrlJobID.getValue(),
                                cassetteID.getValue()));
            } else {
                log.info("cassette's controlJobID and eqp's controlJobID is not same");
                CimMachine aReserveMachine = aCassetteControlJob.getMachine();
                ObjectIdentifier resvEqpID =
                        new ObjectIdentifier(aReserveMachine.getIdentifier(), aReserveMachine.getPrimaryKey());
                throw new ServiceException(
                        new OmCode(retCodeConfig.getCastResvedForAnotherEqp(), resvEqpID.getValue()));
            }
        }
        /*------------------------------------------*/
        /*                                          */
        /*   Check Condition for Loading Sequence   */
        /*                                          */
        /*------------------------------------------*/
        if (CimStringUtils.equals(
                BizConstant.SP_EQP_ACCESSMODE_AUTO, saveEqpPortStatus.getAccessMode())) {
            /*--------------------------------*/
            /*   Check port is Empty or Not   */
            /*--------------------------------*/
            Validations.check(
                    !ObjectIdentifier.isEmptyWithValue(saveEqpPortStatus.getLoadedCassetteID()),
                    retCodeConfig.getPortHasLoadedCassette());
            // ---------------------------//
            //   Check for NPW Loading   //
            // ---------------------------//
            if (nPWFlag) {
                Validations.check(
                        ObjectIdentifier.isEmptyWithValue(saveEqpPortStatus.getDispatchLoadCassetteID()),
                        new OmCode(retCodeConfig.getLoadCastNotNpwReserved(), cassetteID.getValue()));
                Validations.check(
                        !ObjectIdentifier.equalsWithValue(
                                saveEqpPortStatus.getDispatchLoadCassetteID(), cassetteID),
                        new OmCode(
                                retCodeConfig.getEquipmentPortReservedForAnotherCast(),
                                portID.getValue(),
                                saveEqpPortStatus.getDispatchLoadCassetteID().getValue()));
            } else {
                /*---------------------------------------------*/
                /*   Check ControlJobID of cassette and port   */
                /*---------------------------------------------*/
                Validations.check(
                        ObjectIdentifier.isEmptyWithValue(cCtrlJobID), retCodeConfig.getCastControlJobIdBlank());
                Validations.check(
                        ObjectIdentifier.isEmptyWithValue(mCtrlJobID), retCodeConfig.getNotResvedPortgrp());
                Validations.check(
                        !ObjectIdentifier.equalsWithValue(cCtrlJobID, mCtrlJobID),
                        retCodeConfig.getCassettePortControlJobUnMatch());
            }
        } else {
            /*----------------------------------*/
            /*   Check for Access Mode : Manu   */
            /*----------------------------------*/
            int sequenceCondition = StandardProperties.OM_CARRIER_LOAD_SEQ_CHK.getIntValue();
            if (0 == sequenceCondition) {
                if (!sLMRetrieveForWBFlag) {
                    /*-----------------------------------------*/
                    /*   Get Next Loading port in port Group   */
                    /*-----------------------------------------*/
                    Long minLoadSeqNo = 999L;
                    ObjectIdentifier nextPortID = null;
                    for (int j = 0; j < lenPortInfo; j++) {
                        Infos.EqpPortStatus eqpPortStatus = eqpPortInfo.getEqpPortStatuses().get(j);
                        if (CimStringUtils.equals(eqpPortStatus.getPortGroup(), basePortGroupID)
                                && ObjectIdentifier.isEmptyWithValue(eqpPortStatus.getLoadedCassetteID())
                                && minLoadSeqNo > eqpPortStatus.getLoadSequenceNumber()) {
                            minLoadSeqNo = eqpPortStatus.getLoadSequenceNumber();
                            nextPortID = eqpPortStatus.getPortID();
                        }
                    }
                    /*-------------------------*/
                    /*   Judge Loading Order   */
                    /*-------------------------*/
                    Validations.check(
                            !ObjectIdentifier.equalsWithValue(nextPortID, portID),
                            new OmCode(retCodeConfig.getInvalidLoadingSequence(), ""));
                    /*-----------------------------------------------------*/
                    /*   Check cassette On port for 1st Loading cassette   */
                    /*-----------------------------------------------------*/
                    if (1 == saveEqpPortStatus.getLoadSequenceNumber()) {
                        for (int j = 0; j < lenPortInfo; j++) {
                            Infos.EqpPortStatus eqpPortStatus = eqpPortInfo.getEqpPortStatuses().get(j);
                            if (CimStringUtils.equals(basePortGroupID, eqpPortStatus.getPortGroup())
                                    && !ObjectIdentifier.isEmptyWithValue(eqpPortStatus.getLoadedCassetteID())) {
                                throw new ServiceException(
                                        new OmCode(
                                                retCodeConfig.getPortGroupHasLoadedCast(),
                                                eqpPortStatus.getLoadedCassetteID().getValue()));
                            }
                        }
                    }
                }
            }
        }
        /*------------------------------------*/
        /*                                    */
        /*   Check Condition for port Usage   */
        /*                                    */
        /*------------------------------------*/
        if (CimStringUtils.equals(
                CIMStateConst.CIM_PORT_RESOURCE_INPUT, saveEqpPortStatus.getPortUsage())
                || CimStringUtils.equals(
                CIMStateConst.CIM_PORT_RESOURCE_INPUTOUTPUT, saveEqpPortStatus.getPortUsage())) {

        } else {
            throw new ServiceException(retCodeConfig.getInvalidPortUsage(), portID.getValue());
        }
        /*-------------------------------------------*/
        /*                                           */
        /*   Check Condition for Load Purpose Type   */
        /*                                           */
        /*-------------------------------------------*/
        if (CimStringUtils.equals(
                BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT, saveEqpPortStatus.getLoadPurposeType())) {
            if (CimStringUtils.equals(BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT, loadPurposeType)
                    || CimStringUtils.equals(BizConstant.SP_LOADPURPOSETYPE_SLMRETRIEVING, loadPurposeType)
                    || CimStringUtils.equals(
                    BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT, loadPurposeType)) {
            } else {
                throw new ServiceException(
                        new OmCode(
                                retCodeConfig.getNotSameLoadPurpose(),
                                cassetteID.getValue(),
                                loadPurposeType,
                                portID.getValue(),
                                saveEqpPortStatus.getLoadPurposeType()));
            }
        } else if (CimStringUtils.equals(
                BizConstant.SP_LOADPURPOSETYPE_ANY, saveEqpPortStatus.getLoadPurposeType())) {
            if (CimStringUtils.equals(BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT, loadPurposeType)
                    || CimStringUtils.equals(
                    BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT, loadPurposeType)
                    || CimStringUtils.equals(BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE, loadPurposeType)) {
            } else {
                throw new ServiceException(
                        new OmCode(
                                retCodeConfig.getNotSameLoadPurpose(),
                                cassetteID.getValue(),
                                loadPurposeType,
                                portID.getValue(),
                                saveEqpPortStatus.getLoadPurposeType()));
            }
        } else if (CimStringUtils.equals(
                BizConstant.SP_LOADPURPOSETYPE_OTHER, saveEqpPortStatus.getLoadPurposeType())) {
            if (CimStringUtils.equals(BizConstant.SP_LOADPURPOSETYPE_OTHER, loadPurposeType)
                    || CimStringUtils.equals(BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE, loadPurposeType)) {
            } else {
                throw new ServiceException(
                        new OmCode(
                                retCodeConfig.getNotSameLoadPurpose(),
                                cassetteID.getValue(),
                                loadPurposeType,
                                portID.getValue(),
                                saveEqpPortStatus.getLoadPurposeType()));
            }
        } else {
            Validations.check(
                    !CimStringUtils.equals(loadPurposeType, saveEqpPortStatus.getLoadPurposeType()),
                    new OmCode(
                            retCodeConfig.getNotSameLoadPurpose(),
                            cassetteID.getValue(),
                            loadPurposeType,
                            portID.getValue(),
                            saveEqpPortStatus.getLoadPurposeType()));
        }
        // ---------------------------//
        //   Check for NPW Loading   //
        // ---------------------------//
        if (nPWFlag) {
            if (!ObjectIdentifier.isEmptyWithValue(saveEqpPortStatus.getDispatchLoadCassetteID())) {
                Validations.check(
                        !ObjectIdentifier.equalsWithValue(
                                saveEqpPortStatus.getDispatchLoadCassetteID(), cassetteID),
                        new OmCode(
                                retCodeConfig.getEquipmentPortReservedForAnotherCast(),
                                portID.getValue(),
                                saveEqpPortStatus.getDispatchLoadCassetteID().getValue()));
                // ===== get Cassette's NPWLoadPurposeType =====//
                com.fa.cim.newcore.bo.durable.CimCassette aCassetteInner =
                        baseCoreFactory.getBO(com.fa.cim.newcore.bo.durable.CimCassette.class, cassetteID);
                Validations.check(
                        aCassetteInner == null,
                        new OmCode(retCodeConfig.getNotFoundCassette(), cassetteID.getValue()));
                String NPWLoadPurposeType = aCassetteInner.getNPWLoadPurposeType();
                Validations.check(
                        !CimStringUtils.equals(NPWLoadPurposeType, loadPurposeType),
                        new OmCode(
                                retCodeConfig.getNotSameLoadPurpose(),
                                cassetteID.getValue(),
                                loadPurposeType,
                                portID.getValue(),
                                NPWLoadPurposeType));
            } else {
                // ===== get Cassette's NPWLoadPurposeType =====//
                if (!SorterHandler.containsFOSB(cassetteID)) {
                    String NPWLoadPurposeType = aCassette.getNPWLoadPurposeType();
                    Validations.check(
                            !CimStringUtils.isEmpty(NPWLoadPurposeType),
                            new OmCode(
                                    retCodeConfig.getLoadNotMatchNpwRsv(),
                                    portID.getValue(),
                                    loadPurposeType,
                                    cassetteID.getValue()));
                }
            }
        }
        /*---------------------------------------------------*/
        /*   Additional Check for controljob-cassette case   */
        /*---------------------------------------------------*/
        if (null != aCassetteControlJob) {
            /*------------------------------------------*/
            /*   Get All Cassette / Lot in ControlJob   */
            /*------------------------------------------*/
            List<ProductDTO.PosStartCassetteInfo> startCassettes =
                    aCassetteControlJob.getStartCassetteInfo();
            /*-----------------------------------------------*/
            /*   Find cassette and Compare LoadPurposeType   */
            /*-----------------------------------------------*/
            if (!CimArrayUtils.isEmpty(startCassettes)) {
                for (int j = 0; j < startCassettes.size(); j++) {
                    if (ObjectIdentifier.equalsWithValue(cassetteID, startCassettes.get(j).getCassetteID())) {
                        Validations.check(
                                !loadPurposeType.equals(startCassettes.get(j).getLoadPurposeType()),
                                new OmCode(
                                        retCodeConfig.getNotSameLoadPurpose(),
                                        cassetteID.getValue(),
                                        loadPurposeType,
                                        portID.getValue(),
                                        startCassettes.get(j).getLoadPurposeType()));
                    }
                }
            }
        }
        /*---------------------------------------------------*/
        /*   Additional Check for ControlUse cassette case   */
        /*---------------------------------------------------*/
        if (nPWFlag
                && !CimStringUtils.equals(BizConstant.SP_LOADPURPOSETYPE_SLMRETRIEVING, loadPurposeType)
                && !CimStringUtils.equals(
                BizConstant.SP_LOADPURPOSETYPE_OTHER, saveEqpPortStatus.getLoadPurposeType())) {
            // ----------------------------------------//
            //   Get eqp's controlBnak information    //
            // ----------------------------------------//
            this.equipmentBankIDGet(objCommon, equipmentID);
            /*--------------------------------*/
            /*   Get All of lot in cassette   */
            /*--------------------------------*/
            List<Lot> lots = aCassette.allLots();
            int lotLen = CimArrayUtils.getSize(lots);
            /*--------------------------------*/
            /*   Get Eqp's bank Information   */
            /*--------------------------------*/
            String fillerDummyBankIdentifier = null;
            String sideDummyBankIdentifier = null;
            String monitorBankIdentifier = null;
            CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
            Validations.check(
                    aMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
            List<MachineDTO.ControlLotBank> controlLotBankSeq = aMachine.allControlLotBanks();
            int cbLen = CimArrayUtils.getSize(controlLotBankSeq);
            Validations.check(cbLen == 0, new OmCode(retCodeConfig.getNotFoundBank(), "*****"));
            /*--------------------------------*/
            /*   Get Each BankID              */
            /*--------------------------------*/
            for (int q = 0; q < cbLen; q++) {
                MachineDTO.ControlLotBank controlLotBank = controlLotBankSeq.get(q);
                if (CimStringUtils.equals(
                        controlLotBank.getControlLotType(), BizConstant.SP_LOADPURPOSETYPE_FILLERDUMMY)) {
                    fillerDummyBankIdentifier = controlLotBank.getBankID().getValue();
                }
                if (CimStringUtils.equals(
                        controlLotBank.getControlLotType(), BizConstant.SP_LOADPURPOSETYPE_SIDEDUMMYLOT)) {
                    sideDummyBankIdentifier = controlLotBank.getBankID().getValue();
                }
                if (CimStringUtils.equals(
                        controlLotBank.getControlLotType(), BizConstant.SP_LOADPURPOSETYPE_WAITINGMONITORLOT)) {
                    monitorBankIdentifier = controlLotBank.getBankID().getValue();
                }
            }
            /*-------------------------------------*/
            /*   Loop for All of lot in cassette   */
            /*-------------------------------------*/
            for (int r = 0; r < lotLen; r++) {
                com.fa.cim.newcore.bo.product.CimLot aLot =
                        (com.fa.cim.newcore.bo.product.CimLot) lots.get(r);
                Validations.check(null == aLot, new OmCode(retCodeConfig.getNotFoundLot(), "*****"));
                /*---------------------------------*/
                /*   Get lot Related Information   */
                /*---------------------------------*/
                String lotBankIdentifier = null;
                String lotIdentifier = aLot.getIdentifier();
                String holdState = aLot.getLotHoldState();
                String inventoryState = aLot.getLotInventoryState();
                String finishedState = aLot.getLotFinishedState();
                com.fa.cim.newcore.bo.factory.CimBank aLotBank = aLot.getBank();
                Validations.check(
                        null == aLotBank, new OmCode(retCodeConfig.getNotFoundBank(), lotIdentifier));
                lotBankIdentifier = aLotBank.getIdentifier();
                /*--------------------------------*/
                /*   Check Condition for Common   */
                /*--------------------------------*/
                Validations.check(
                        !CimStringUtils.equals(holdState, CIMStateConst.CIM_LOT_HOLD_STATE_NOTONHOLD),
                        new OmCode(retCodeConfig.getInvalidLotHoldStat(), lotIdentifier, holdState));
                Validations.check(
                        !CimStringUtils.equals(inventoryState, BizConstant.SP_LOT_INVENTORYSTATE_INBANK),
                        retCodeConfig.getInvalidLotInventoryStat(),
                        lotIdentifier,
                        inventoryState);
                Validations.check(
                        !CimStringUtils.equals(finishedState, CIMStateConst.CIM_LOT_FINISHED_STATE_COMPLETED),
                        new OmCode(retCodeConfig.getInvalidLotFinishStat(), finishedState));
                /*-------------------------------------------------*/
                /*   Check Condition for FillerDummy               */
                /*-------------------------------------------------*/
                if (CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_FILLERDUMMY)) {
                    Validations.check(
                            !CimStringUtils.equals(lotBankIdentifier, fillerDummyBankIdentifier),
                            new OmCode(
                                    retCodeConfig.getLotBankDifferent(),
                                    lotBankIdentifier,
                                    fillerDummyBankIdentifier));
                }
                /*-------------------------------------------------*/
                /*   Check Condition for SideDummy                 */
                /*-------------------------------------------------*/
                if (CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_SIDEDUMMYLOT)) {
                    Validations.check(
                            !CimStringUtils.equals(lotBankIdentifier, sideDummyBankIdentifier),
                            new OmCode(
                                    retCodeConfig.getLotBankDifferent(), lotBankIdentifier, sideDummyBankIdentifier));
                }
                /*----------------------------------------*/
                /*   Check Condition for WaitingMonitor   */
                /*----------------------------------------*/
                if (CimStringUtils.equals(
                        loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_WAITINGMONITORLOT)) {
                    Validations.check(
                            !CimStringUtils.equals(lotBankIdentifier, monitorBankIdentifier),
                            new OmCode(
                                    retCodeConfig.getLotBankDifferent(), lotBankIdentifier, monitorBankIdentifier));
                }
            }
        }
        /*--------------------------------------*/
        /*                                      */
        /*   Check Condition for port Status    */
        /*                                      */
        /*--------------------------------------*/
        if (!CimStringUtils.equals(
                saveEqpPortStatus.getOnlineMode(), BizConstant.SP_EQP_ONLINEMODE_OFFLINE)) {
            if (CimStringUtils.equals(
                    saveEqpPortStatus.getPortState(), BizConstant.SP_PORTRSC_PORTSTATE_LOADCOMP)) {

            } else {
                throw new ServiceException(
                        new OmCode(
                                retCodeConfig.getInvalidPortState(),
                                portID.getValue(),
                                saveEqpPortStatus.getPortState()));
            }
            Validations.check(
                    !ObjectIdentifier.isEmptyWithValue(saveEqpPortStatus.getLoadedCassetteID()),
                    retCodeConfig.getPortHasLoadedCassette());
        }
    }

    @Override
    public void equipmentContainerWaferStore(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            ObjectIdentifier controlJobID,
            String processJobID,
            List<Infos.SlmSlotMap> strSlmSlotMapSeq) {

        log.info("in-parm equipmentID {}", equipmentID.getValue());
        log.info("in-parm controlJobID {}", controlJobID.getValue());
        log.info("in-parm processJobID {}", processJobID);
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(CimObjectUtils.isEmpty(aMachine), retCodeConfig.getNotFoundMachine());
        // ----------------------------------------------------------------
        // Change SLMState of eqp container positions
        // ----------------------------------------------------------------
        com.fa.cim.newcore.bo.person.CimPerson aPosPerson =
                baseCoreFactory.getBO(
                        com.fa.cim.newcore.bo.person.CimPerson.class, objCommon.getUser().getUserID());
        Validations.check(
                null == aPosPerson,
                new OmCode(retCodeConfig.getNotFoundPerson(), objCommon.getUser().getUserID().getValue()));

        int lenSrcSlotMap = CimArrayUtils.getSize(strSlmSlotMapSeq);
        for (int i = 0; i < lenSrcSlotMap; i++) {
            CimMachineContainerPosition equipmentContainerPosition =
                    aMachine.findMachineContainerPositionForWafer(
                            strSlmSlotMapSeq.get(i).getWaferID().getValue());
            Validations.check(
                    CimObjectUtils.isEmpty(equipmentContainerPosition),
                    new OmCode(retCodeConfig.getNotFoundEquipmentContainerPosition()));

            equipmentContainerPosition.setSLMState(BizConstant.SP_SLMSTATE_STORED);
            equipmentContainerPosition.setLastClaimedTimeStamp(
                    objCommon.getTimeStamp().getReportTimeStamp());
            equipmentContainerPosition.setLastClaimedUser(aPosPerson);
        }
        // ----------------------------------------------------------------
        // Get lot list without duplication
        // ----------------------------------------------------------------
        log.info("Get lot list without duplication");
        List<ObjectIdentifier> storeCastIDs = new ArrayList<>();
        List<ObjectIdentifier> storeLotIDs = new ArrayList<>();
        for (int i = 0; i < lenSrcSlotMap; i++) {
            //  Get Lot from Wafer
            log.info("call wafer_lot_Get()");
            ObjectIdentifier retCode =
                    waferMethod.waferLotGet(objCommon, strSlmSlotMapSeq.get(i).getWaferID());
            Boolean bFoundLot = false;
            int tmpLotLen = CimArrayUtils.getSize(storeLotIDs);
            for (int j = 0; j < tmpLotLen; j++) {
                if (ObjectIdentifier.equalsWithValue(retCode, storeLotIDs.get(j))) {
                    bFoundLot = true;
                    break;
                }
            }
            if (CimBooleanUtils.isFalse(bFoundLot)) {
                storeCastIDs.add(strSlmSlotMapSeq.get(i).getCassetteID());
                storeLotIDs.add(retCode);
            }
        }
        // ----------------------------------------------------------------
        // Get Equipment Container Information
        // ----------------------------------------------------------------
        Outputs.ObjEquipmentContainerInfoGetOut objEquipmentContainerInfoGetOut =
                this.equipmentContainerInfoGet(objCommon, equipmentID);
        List<Infos.EqpContainer> eqpContainers =
                objEquipmentContainerInfoGetOut.getStrEqpContainerInfo().getEqpContainerList();
        Validations.check(
                0 == CimArrayUtils.getSize(eqpContainers), retCodeConfig.getNotFoundEquipmentContainer());

        int lenEqpContPos = CimArrayUtils.getSize(eqpContainers.get(0).getEqpContainerPosition());
        // ----------------------------------------------------------------
        // If all Wafers of lot go into eqp,
        //     cut the relation between cassette and lot.
        // ----------------------------------------------------------------
        log.info("cut the relation between Cassette and Lot");
        List<ObjectIdentifier> removeLotIDs = new ArrayList<>();
        int nLotLen = CimArrayUtils.getSize(storeLotIDs);
        for (int i = 0; i < nLotLen; i++) {
            Boolean bWaferInContPos = false;
            if (CimStringUtils.equals("OEQPW012", objCommon.getTransactionID())
                    || CimStringUtils.equals("OEQPW024", objCommon.getTransactionID())) {
                com.fa.cim.newcore.bo.product.CimLot tmpLot =
                        baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, storeLotIDs.get(i));
                List<ProductDTO.WaferInfo> waferInfoSeq = tmpLot.getAllWaferInfo();
                int lenWafer = CimArrayUtils.getSize(waferInfoSeq);
                for (int j = 0; j < lenWafer; j++) {
                    bWaferInContPos = false;
                    for (int k = 0; k < lenEqpContPos; k++) {
                        Infos.EqpContainerPosition eqpContainerPosition =
                                eqpContainers.get(0).getEqpContainerPosition().get(k);
                        if (ObjectIdentifier.equalsWithValue(
                                eqpContainerPosition.getWaferID(), waferInfoSeq.get(j).getWaferID())
                                && (CimStringUtils.equals(
                                BizConstant.SP_SLMSTATE_STORED, eqpContainerPosition.getFmcState())
                                || CimStringUtils.equals(
                                BizConstant.SP_SLMSTATE_RETRIEVED, eqpContainerPosition.getFmcState()))) {
                            log.info("bWaferInContPos = TRUE");
                            bWaferInContPos = true;
                            break;
                        }
                    }
                    if (CimBooleanUtils.isFalse(bWaferInContPos)) {
                        break;
                    }
                }
            } else {
                Inputs.ObjLotWaferIDListGetDRIn objLotWaferIDListGetDRIn =
                        new Inputs.ObjLotWaferIDListGetDRIn();
                objLotWaferIDListGetDRIn.setLotID(storeLotIDs.get(i));
                objLotWaferIDListGetDRIn.setScrapCheckFlag(true);
                List<ObjectIdentifier> waferIDs =
                        lotMethod.lotWaferIDListGetDR(objCommon, objLotWaferIDListGetDRIn);

                int lenWafer = CimArrayUtils.getSize(waferIDs);
                for (int j = 0; j < lenWafer; j++) {
                    bWaferInContPos = false;
                    for (int k = 0; k < lenEqpContPos; k++) {
                        Infos.EqpContainerPosition eqpContainerPosition =
                                eqpContainers.get(0).getEqpContainerPosition().get(k);
                        if (ObjectIdentifier.equalsWithValue(eqpContainerPosition.getWaferID(), waferIDs.get(j))
                                && (CimStringUtils.equals(
                                BizConstant.SP_SLMSTATE_STORED, eqpContainerPosition.getFmcState())
                                || CimStringUtils.equals(
                                BizConstant.SP_SLMSTATE_RETRIEVED, eqpContainerPosition.getFmcState()))) {
                            log.info("bWaferInContPos = TRUE");
                            bWaferInContPos = true;
                            break;
                        }
                    }
                    if (CimBooleanUtils.isFalse(bWaferInContPos)) {
                        break;
                    }
                }
            }
            if (CimBooleanUtils.isFalse(bWaferInContPos)) {
                // All Wafers of this Lot are NOT contained in EQPConPos yet.
                continue;
            }
            removeLotIDs.add(storeLotIDs.get(i));
            com.fa.cim.newcore.bo.product.CimLot lot =
                    baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, storeLotIDs.get(i));
            Validations.check(CimObjectUtils.isEmpty(lot), retCodeConfig.getNotFoundLot());
            com.fa.cim.newcore.bo.durable.CimCassette cassette =
                    baseCoreFactory.getBO(
                            com.fa.cim.newcore.bo.durable.CimCassette.class, storeCastIDs.get(i));
            Validations.check(CimObjectUtils.isEmpty(cassette), retCodeConfig.getNotFoundCassette());

            // OMMCARRIER_LOT
            log.info("PosCassette::unloadLot");
            cassette.unloadLot(lot);

            // get FREQP_CAST information
            log.info("PosMachine::removeCassette");
            MachineDTO.MachineCassette updatedCassetteInfo =
                    aMachine.findCassetteNamed(storeCastIDs.get(i).getValue());
            // update FREQP_CAST_LOT
            log.info("update OMEQP_CARRIER_LOT");
            int lotLen = CimArrayUtils.getSize(updatedCassetteInfo.getMachineCassetteLots());

            // get FREQP_CAST information
            List<MachineDTO.MachineCassetteLot> tmpLotList = new ArrayList<>();
            for (int j = 0; j < lotLen; j++) {
                if (!ObjectIdentifier.equalsWithValue(
                        updatedCassetteInfo.getMachineCassetteLots().get(j).getLotID(), storeLotIDs.get(i))) {
                    tmpLotList.add(updatedCassetteInfo.getMachineCassetteLots().get(j));
                }
            }
            updatedCassetteInfo.setMachineCassetteLots(tmpLotList);
            aMachine.updateCassette(updatedCassetteInfo);
            // Update OMEQP_LOT info (clear UnloadCassette, UnloadPort)
            log.info("aMachine->findProcessingLotNamed");
            MachineDTO.MachineLot processingLot =
                    aMachine.findProcessingLotNamed(storeLotIDs.get(i).getValue());
            Validations.check(
                    null == processingLot,
                    new OmCode(
                            retCodeConfig.getNotFoundLotInProcessLot(),
                            storeLotIDs.get(i).getValue(),
                            equipmentID.getValue()));
            log.info("PosMachine::removeProcessingLot");
            aMachine.removeProcessingLot(lot);
            MachineDTO.MachineLot addProcessingLot = processingLot;
            addProcessingLot.setUnloadPortID(null);
            addProcessingLot.setUnloadCassetteID(null);
            aMachine.addProcessingLot(addProcessingLot);
        }
        // ----------------------------------------------------------------
        // Update FRCTRLJOB_CAST_LOT
        // ----------------------------------------------------------------
        log.info("Update OMCJ_CARRIERL_LOT");
        com.fa.cim.newcore.bo.product.CimControlJob controlJob =
                baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimControlJob.class, controlJobID);
        Validations.check(CimObjectUtils.isEmpty(controlJob), retCodeConfig.getNotFoundControlJob());
        log.info("PosControlJob::getStartCassetteInfo");
        List<ProductDTO.PosStartCassetteInfo> updateStartCastSeq = controlJob.getStartCassetteInfo();
        int castLen = CimArrayUtils.getSize(updateStartCastSeq);
        for (int i = 0; i < castLen; i++) {
            List<ProductDTO.PosLotInCassetteInfo> tmpLotSeq = new ArrayList<>();
            int lotLen = CimArrayUtils.getSize(updateStartCastSeq.get(i).getLotInCassetteInfo());
            for (int j = 0; j < lotLen; j++) {
                Boolean bRemoveLot = false;
                for (int k = 0; k < CimArrayUtils.getSize(removeLotIDs); k++) {
                    if (ObjectIdentifier.equalsWithValue(
                            updateStartCastSeq.get(i).getLotInCassetteInfo().get(j).getLotID(),
                            removeLotIDs.get(k))) {
                        bRemoveLot = true;
                        break;
                    }
                }
                if (CimBooleanUtils.isFalse(bRemoveLot)) {
                    tmpLotSeq.add(updateStartCastSeq.get(i).getLotInCassetteInfo().get(j));
                    break;
                }
            }
            updateStartCastSeq.get(i).setLotInCassetteInfo(tmpLotSeq);
        }
        controlJob.setStartCassetteInfo(updateStartCastSeq);
    }

    @Override
    public Integer INTGetMachineCassetteSequenceIndex(
            List<MachineDTO.MachineCassette> machineCassettes, String cassetteID) {
        int nLen = CimArrayUtils.getSize(machineCassettes);
        for (int i = 0; i < nLen; i++) {
            if (ObjectIdentifier.equalsWithValue(cassetteID, machineCassettes.get(i).getCassetteID())) {
                return i;
            }
        }
        return -1;
    }

    @Override
    public Integer INTGetMachineCassetteLotSequenceIndex(
            List<MachineDTO.MachineCassetteLot> machineCassetteLots, String lotID) {
        int nLen = CimArrayUtils.getSize(machineCassetteLots);
        for (int i = 0; i < nLen; i++) {
            if (CimStringUtils.equals(lotID, machineCassetteLots.get(i).getLotID().getValue())) {
                return i;
            }
        }
        return -1;
    }

    @Override
    public Integer INTGetStartLotSequenceIndex(
            List<ProductDTO.PosStartCassetteInfo> strPosStartCassetteInfoSeq,
            Integer nCastIdx,
            String lotID) {
        int nLen =
                CimArrayUtils.getSize(strPosStartCassetteInfoSeq.get(nCastIdx).getLotInCassetteInfo());
        for (int i = 0; i < nLen; i++) {
            if (CimObjectUtils.equals(
                    lotID,
                    strPosStartCassetteInfoSeq.get(nCastIdx).getLotInCassetteInfo().get(i).getLotID())) {
                return i;
            }
        }
        return -1;
    }

    @Override
    public Integer INTGetLotInCassetteSequenceIndex(
            List<ProductDTO.PosLotInCassetteInfo> tmpLotInCassetteInfoSeq, String lotID) {
        int nLen = CimArrayUtils.getSize(tmpLotInCassetteInfoSeq);
        for (int i = 0; i < nLen; i++) {
            if (ObjectIdentifier.equalsWithValue(lotID, tmpLotInCassetteInfoSeq.get(i).getLotID())) {
                return i;
            }
        }
        return -1;
    }

    @Override
    public Integer INTGetStartCassetteSequenceIndex(
            List<ProductDTO.PosStartCassetteInfo> strPosStartCassetteInfoSeq, String cassetteID) {
        int nLen = CimArrayUtils.getSize(strPosStartCassetteInfoSeq);
        for (int i = 0; i < nLen; i++) {
            if (ObjectIdentifier.equalsWithValue(
                    cassetteID, strPosStartCassetteInfoSeq.get(i).getCassetteID())) {
                return i;
            }
        }
        return -1;
    }

    @Override
    public void equipmentProcessJobLevelControlCheck(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            boolean pjLevelCtrlFlagCheck,
            boolean equipmentCategoryCheck,
            boolean onlineModeCheck,
            boolean multipleRecipeCheck) {
        // Get eqp Base Information , equipment_brInfo_GetDR__120
        Infos.EqpBrInfo equipmentBRInfo = this.equipmentBRInfoGetDR(objCommon, equipmentID);
        // Check that the "PJ Level Control Flag" of the eqp should be "True"
        Validations.check(
                pjLevelCtrlFlagCheck && !equipmentBRInfo.isProcessJobLevelCtrl(),
                new OmCode(retCodeConfig.getProcessJobCtrlNotAvailable(), equipmentID.getValue()));

        // Check that eqp category should be one of the following:
        // a.   Internal Buffer
        // b.   Measurement
        // c.   Process
        // d.   wafer Bonding
        boolean equipmentCategoryNotValid =
                !CimArrayUtils.generateList(
                        BizConstant.SP_MC_CATEGORY_INTERNALBUFFER,
                        BizConstant.SP_MC_CATEGORY_MEASUREMENT,
                        BizConstant.SP_MC_CATEGORY_PROCESS,
                        BizConstant.SP_MC_CATEGORY_WAFERBONDING)
                        .contains(equipmentBRInfo.getEquipmentCategory());
        // Check that the "Carrier Exchange flag" should be false.
        boolean cassetteChangeFlag = equipmentBRInfo.isCassetteChangeFlag();
        Validations.check(
                equipmentCategoryCheck && (equipmentCategoryNotValid || cassetteChangeFlag),
                new OmCode(
                        retCodeConfig.getProcessJobCtrlNotAvailable(),
                        ObjectIdentifier.fetchValue(equipmentID)));

        if (onlineModeCheck) {
            // equipment_portInfo_GetDR
            Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoGet(objCommon, equipmentID);
            Validations.check(
                    !CimStringUtils.equals(
                            eqpPortInfo.getEqpPortStatuses().get(0).getOnlineMode(),
                            BizConstant.SP_EQP_ONLINEMODE_ONLINEREMOTE),
                    new OmCode(
                            retCodeConfig.getEqpOnlineMode(),
                            ObjectIdentifier.fetchValue(equipmentID),
                            eqpPortInfo.getEqpPortStatuses().get(0).getOnlineMode()));
        }
        Validations.check(
                multipleRecipeCheck
                        && !CimStringUtils.equals(
                        equipmentBRInfo.getMultiRecipeCapability(),
                        BizConstant.SP_EQP_MULTIRECIPECAPABILITY_MULTIPLERECIPE),
                retCodeConfig.getCassetteEquipmentConditionError());
    }

    @Override
    public Outputs.ObjRawEquipmentStateTranslateOut rawEquipmentStateTranslate(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            ObjectIdentifier rawEquipmentStatusCode) {
        // init
        Outputs.ObjRawEquipmentStateTranslateOut out = new Outputs.ObjRawEquipmentStateTranslateOut();

        boolean isStorageBool = false;
        CimRawMachineStateSet aRawMachineStateSet = null;
        CimMachine aPosMachine;
        CimStorageMachine aPosStorageMachine =
                baseCoreFactory.getBO(CimStorageMachine.class, equipmentID);
        if (aPosStorageMachine != null) {
            isStorageBool = true;
            aRawMachineStateSet = aPosStorageMachine.getRawMachineStateSet();
        } else {
            aPosMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
            Validations.check(aPosMachine == null, retCodeConfig.getNotFoundEqp());
            aRawMachineStateSet = aPosMachine.getRawMachineStateSet();
        }

        if (aRawMachineStateSet == null) {
            out.setEquipmentStatusCode(rawEquipmentStatusCode);
            CimMachineState aMachineState = null;
            if (ObjectIdentifier.isEmptyWithRefKey(rawEquipmentStatusCode)) {
                Validations.check(
                        ObjectIdentifier.isEmptyWithValue(rawEquipmentStatusCode),
                        retCodeConfig.getNotFoundEqpState(),
                        "*****");
                List<CimE10State> e10States = codeManager.allE10States();
                if (CimArrayUtils.isNotEmpty(e10States)) {
                    for (CimE10State e10State : e10States) {
                        aMachineState = e10State.findMachineStateNamed(rawEquipmentStatusCode.getValue());
                        if (null != aMachineState) {
                            break;
                        }
                    }
                }
            } else {
                aMachineState =
                        baseCoreFactory.getBO(CimMachineState.class, rawEquipmentStatusCode.getReferenceKey());
            }
            Validations.check(aMachineState == null, retCodeConfig.getNotFoundEqpState());

            // END PPT_CONVERT_EQPSTATE_TO_MACHINESTATE_OR
            out.setEquipmentStatusName(aMachineState.getMachineStateName());

            CimE10State anE10State = aMachineState.getE10State();
            // PPT_SET_OBJECT_IDENTIFIER
            if (anE10State != null) {
                out.setE10Status(
                        ObjectIdentifier.build(anE10State.getIdentifier(), anE10State.getPrimaryKey()));
            }
            // END PPT_SET_OBJECT_IDENTIFIER
            out.setStateTranslated(false);
            return out;
        }

        CimMachineState aMachineState =
                aRawMachineStateSet.findTranslatedMachineState(
                        ObjectIdentifier.fetchValue(rawEquipmentStatusCode));
        Validations.check(aMachineState == null, retCodeConfig.getNotFoundEqpState());

        // PPT_SET_OBJECT_IDENTIFIER
        out.setEquipmentStatusCode(
                ObjectIdentifier.build(aMachineState.getIdentifier(), aMachineState.getPrimaryKey()));

        // END PPT_SET_OBJECT_IDENTIFIER
        out.setEquipmentStatusName(aMachineState.getMachineStateName());

        CimE10State anE10State = aMachineState.getE10State();
        // PPT_SET_OBJECT_IDENTIFIER
        if (anE10State != null) {
            out.setE10Status(
                    ObjectIdentifier.build(anE10State.getIdentifier(), anE10State.getPrimaryKey()));
        }
        // END PPT_SET_OBJECT_IDENTIFIER
        out.setStateTranslated(true);
        return out;
    }

    @Override
    public Outputs.ObjEquipmentCurrentStateChangeByAutoOut equipmentCurrentStateChangeByAuto(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            ObjectIdentifier actualStatusCode,
            ObjectIdentifier equipmentStatusCode,
            boolean updateCurrentState) {
        Machine baseMachine = getMachine(equipmentID);
        CimMachineState toState = getMachineState(equipmentStatusCode);
        CimMachineState toActualState = getMachineState(actualStatusCode);

        CimMachine machine = null;
        CimStorageMachine storage = null;
        CimMachineState currentState, currentActualState;
        if (CimBooleanUtils.isTrue(baseMachine.isStorageMachine())) {
            storage = (CimStorageMachine) baseMachine;
            currentState = storage.getCurrentMachineState();
            currentActualState = storage.getActualMachineState();
        } else {
            machine = (CimMachine) baseMachine;
            currentState = machine.getCurrentMachineState();
            currentActualState = machine.getActualMachineState();
        }

        CimE10State toE10 = toState.getE10State();
        CimE10State toActualE10 = toActualState.getE10State();

        CimE10State currentE10 = null;
        if (currentState != null) {
            currentE10 = currentState.getE10State();
        }
        CimE10State currentActualE10 = null;
        if (currentActualState != null) {
            currentActualE10 = currentActualState.getE10State();
        }

        Outputs.ObjEquipmentCurrentStateChangeByAutoOut out =
                new Outputs.ObjEquipmentCurrentStateChangeByAutoOut();
        out.setEquipmentID(equipmentID);
        out.setEquipmentStatusCode(equipmentStatusCode);
        out.setActualStatus(actualStatusCode);
        out.setE10Status(ObjectIdentifier.build(toE10.getIdentifier(), toE10.getPrimaryKey()));

        if (currentState != null) {
            out.setActualE10Status(
                    ObjectIdentifier.build(currentState.getIdentifier(), currentState.getPrimaryKey()));
        }
        if (currentE10 != null) {
            out.setPreviousE10Status(
                    ObjectIdentifier.build(currentE10.getIdentifier(), currentE10.getPrimaryKey()));
        }
        out.setPreviousActualE10Status(
                ObjectIdentifier.build(toActualE10.getIdentifier(), toActualE10.getPrimaryKey()));

        if (currentActualState != null) {
            out.setPreviousStatus(
                    ObjectIdentifier.build(
                            currentActualState.getIdentifier(), currentActualState.getPrimaryKey()));
        }
        if (currentActualE10 != null) {
            out.setPreviousActualStatus(
                    ObjectIdentifier.build(
                            currentActualE10.getIdentifier(), currentActualE10.getPrimaryKey()));
        }

        CimPerson person = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());
        Validations.check(
                person == null,
                new OmCode(retCodeConfig.getNotFoundPerson(), objCommon.getUser().getUserID().getValue()));

        if (storage != null) {
            out.setPrevStateStartTime(
                    CimDateUtils.convertToSpecString(storage.getLastStatusHistoryTimeStamp()));
            out.setOperationMode("");
            out.setPreviousOpeMode("");
            storage.setLastStatusHistoryTimeStamp(objCommon.getTimeStamp().getReportTimeStamp());
            if (CimBooleanUtils.isTrue(updateCurrentState)) {
                storage.setCurrentMachineState(toState);
                storage.setLastClaimedPerson(person);
                storage.setLastClaimedTimeStamp(objCommon.getTimeStamp().getReportTimeStamp());
                storage.setLastStatusChangePerson(person);
                storage.setLastStatusChangeTimeStamp(objCommon.getTimeStamp().getReportTimeStamp());
                storage.setAvailableFlag(toState.isMachineAvailable());
            }
            storage.setActualMachineState(toActualState);
            storage.setLastClaimedPerson(person);
            storage.setLastClaimedTimeStamp(objCommon.getTimeStamp().getReportTimeStamp());
            storage.setLastStatusChangeTimeStamp(objCommon.getTimeStamp().getReportTimeStamp());
        } else {
            out.setPrevStateStartTime(
                    CimDateUtils.convertToSpecString(machine.getLastStatusHistoryTimeStamp()));
            out.setOperationMode(machine.getOperationMode());
            out.setPreviousOpeMode(machine.getOperationMode());
            machine.setLastStatusHistoryTimeStamp(objCommon.getTimeStamp().getReportTimeStamp());
            if (CimBooleanUtils.isTrue(updateCurrentState)) {
                machine.setCurrentMachineState(toState);
                machine.setLatestOperatedUser(person);
                machine.setLatestOperatedTimestamp(objCommon.getTimeStamp().getReportTimeStamp());
                machine.setLastStatusChangePerson(person);
                machine.setLastStatusChangeTimeStamp(objCommon.getTimeStamp().getReportTimeStamp());
                machine.setAvailableFlag(toState.isMachineAvailable());
            }
            machine.setActualMachineState(toActualState);
            machine.setLatestOperatedUser(person);
            machine.setLatestOperatedTimestamp(objCommon.getTimeStamp().getReportTimeStamp());
            machine.setLastStatusChangeTimeStamp(objCommon.getTimeStamp().getReportTimeStamp());
        }

        out.setGenHistory(true);
        return out;
    }

    @Override
    public void equipmentLotSTBCheck(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            List<ObjectIdentifier> productLotIDs,
            ObjectIdentifier productRequestID,
            Infos.NewLotAttributes strNewLotAttributes) {
        // ------------------------------------------
        // Get Object reference of eqp
        // ------------------------------------------
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        // ------------------------------------------
        // Get Object reference of Product Request
        // ------------------------------------------
        CimProductRequest aProdReq = baseCoreFactory.getBO(CimProductRequest.class, productRequestID);
        // ------------------------------------------
        // Get Object reference of bank from Product Request
        // ------------------------------------------
        com.fa.cim.newcore.bo.factory.CimBank aStartBank = aProdReq.getStartBank();
        Validations.check(null == aStartBank, retCodeConfig.getNotFoundBank());

        // ------------------------------------------
        // Check Start bank and Monitor bank is the same or not
        // ------------------------------------------
        Outputs.ObjEquipmentBankIDGetOut objEquipmentBankIDOut =
                this.equipmentBankIDGet(objCommon, equipmentID);
        ObjectIdentifier strMonitorBankID = objEquipmentBankIDOut.getMonitorBankID();
        Validations.check(
                !CimObjectUtils.equals(strMonitorBankID, aStartBank.getBankID()),
                retCodeConfigEx.getMonitorbankStartbankCombinationError()); // find in bug-6323

        // ------------------------------------------
        // Check bank is STB Allowed or not
        // ------------------------------------------
        Boolean bSTBBankFlag = aStartBank.isSTBBank();
        Validations.check(CimBooleanUtils.isFalse(bSTBBankFlag), retCodeConfig.getInvalidBankStb());

        // ------------------------------------------
        // Check bank is Control bank or not
        // ------------------------------------------
        Validations.check(
                CimBooleanUtils.isFalse(aStartBank.isControlWaferBank()),
                retCodeConfig.getInvalidBankData());

        // ------------------------------------------
        // Check Reqest type for generating lot
        // ------------------------------------------
        Validations.check(
                !CimStringUtils.equals(BizConstant.SP_LOT_TYPE_PRODUCTIONMONITORLOT, aProdReq.getLotType())
                        && !CimStringUtils.equals(
                        BizConstant.SP_LOT_TYPE_EQUIPMENTMONITORLOT, aProdReq.getLotType())
                        && !CimStringUtils.equals(BizConstant.SP_LOT_TYPE_DUMMYLOT, aProdReq.getLotType())
                        && !CimStringUtils.equals(BizConstant.SP_LOT_TYPE_RECYCLELOT, aProdReq.getLotType()),
                retCodeConfig.getInvalidBankData());

        // ------------------------------------------
        // Retrieve lot product's source product sequence
        // ------------------------------------------
        ProductSpecification aProdSpec = aProdReq.getProductSpecification();
        CimProductSpecification aPosProdSpec = (CimProductSpecification) aProdSpec;
        Validations.check(null == aPosProdSpec, retCodeConfig.getNotFoundProductSpec());

        List<CimProductSpecification> pSourceProdSeq = aPosProdSpec.allSourceProductSpecifications();
        List<String> strSourceProductSeq = new ArrayList<>();
        for (int i = 0; i < CimArrayUtils.getSize(pSourceProdSeq); i++) {
            strSourceProductSeq.add(pSourceProdSeq.get(i).getIdentifier());
        }
        // ------------------------------------------
        // Check source lot condition
        // ------------------------------------------
        Integer lenNewWaferAttr = strNewLotAttributes.getNewWaferAttributesList().size();
        for (int i = 0; i < lenNewWaferAttr; i++) {
            // ------------------------------------------
            // escape to check lot condition for same lot
            // ------------------------------------------
            if (0 < i) {
                if (strNewLotAttributes
                        .getNewWaferAttributesList()
                        .get(i)
                        .getSourceLotID()
                        .equals(strNewLotAttributes.getNewWaferAttributesList().get(i - 1).getSourceLotID())) {
                    continue;
                }
            }
            // ------------------------------------------
            // Get object reference of source lot
            // ------------------------------------------
            CimLot aSourceLot =
                    baseCoreFactory.getBO(
                            CimLot.class,
                            strNewLotAttributes.getNewWaferAttributesList().get(i).getSourceLotID());
            Validations.check(null == aSourceLot, retCodeConfig.getNotFoundLot());

            // ------------------------------------------
            // Check source lot Finished Status
            // ------------------------------------------
            Validations.check(
                    !CimStringUtils.equals(
                            BizConstant.CIMFW_LOT_FINISHEDSTATE_COMPLETED, aSourceLot.getLotFinishedState()),
                    retCodeConfig.getInvalidLotFinishStat());

            // ------------------------------------------
            // Check source lot Status
            // ------------------------------------------
            Validations.check(
                    !CimStringUtils.equals(BizConstant.CIMFW_LOT_STATE_FINISHED, aSourceLot.getLotState()),
                    retCodeConfig.getInvalidLotStat());

            // ------------------------------------------
            // Check source lot Hold Status
            // ------------------------------------------
            Validations.check(
                    CimStringUtils.equals(
                            BizConstant.CIMFW_LOT_HOLDSTATE_ONHOLD, aSourceLot.getLotHoldState()),
                    retCodeConfig.getInvalidLotHoldStat());

            // ------------------------------------------
            // Check source lot Inventory Status
            // ------------------------------------------
            Validations.check(
                    !CimStringUtils.equals(
                            BizConstant.SP_LOT_INVENTORYSTATE_INBANK, aSourceLot.getLotInventoryState()),
                    retCodeConfig.getInvalidLotInventoryStat(),
                    ObjectIdentifier.fetchValue(aSourceLot.getLotID()),
                    aSourceLot.getLotInventoryState());

            // ------------------------------------------
            // Check source lot control use state
            // ------------------------------------------
            Validations.check(
                    !CimStringUtils.equals(
                            BizConstant.SP_LOT_CONTROLUSESTATE_INUSE, aSourceLot.getControlUseState()),
                    retCodeConfig.getInvalidLotControlUseStat());

            // ------------------------------------------
            // Check source lot bank
            // ------------------------------------------
            com.fa.cim.newcore.bo.factory.CimBank aSourceLotBank = aSourceLot.getBank();
            Validations.check(null == aSourceLotBank, retCodeConfig.getNotFoundBank());
            Validations.check(
                    !CimObjectUtils.equals(aSourceLotBank.getBankID(), aStartBank.getBankID()),
                    retCodeConfig.getNotMatchStartBank());

            // ------------------------------------------
            // Check source lot Product Spec
            // ------------------------------------------
            CimProductSpecification aSourceLotProdSpec = aSourceLot.getProductSpecification();
            // CimProductSpecificationDO aSourceLotProdSpec =
            // productRequestSpecCore.findProductRequestSpecByProductSpecID(aSourceLot.getProductSpecificationID());
            Validations.check(null == aSourceLotProdSpec, retCodeConfig.getNotFoundProductSpec());

            Boolean bSourceProductMatchFlag = false;
            for (int j = 0; j < strSourceProductSeq.size(); j++) {
                if (CimStringUtils.equals(strSourceProductSeq.get(j), aSourceLotProdSpec.getIdentifier())) {
                    bSourceProductMatchFlag = true;
                    break;
                }
            }
            Validations.check(
                    CimBooleanUtils.isFalse(bSourceProductMatchFlag),
                    retCodeConfig.getInvalidSourceLotProduct());
        }
        // ------------------------------------------
        // Check source wafer's transfer state
        // ------------------------------------------
        lenNewWaferAttr = strNewLotAttributes.getNewWaferAttributesList().size();
        for (int i = 0; i < lenNewWaferAttr; i++) {
            // ------------------------------------------
            // Check source wafer transfer state
            // ------------------------------------------
            CimWafer aSourceWafer =
                    baseCoreFactory.getBO(
                            CimWafer.class,
                            strNewLotAttributes.getNewWaferAttributesList().get(i).getSourceWaferID());
            MaterialContainer aMaterialContainer = aSourceWafer.getMaterialContainer();
            CimCassette aPosCassette = (CimCassette) aMaterialContainer;
            Validations.check(null == aPosCassette, retCodeConfig.getNotFoundCassette());

            Validations.check(
                    !CimStringUtils.equals(
                            BizConstant.SP_TRANSSTATE_EQUIPMENTIN, aPosCassette.getTransportState()),
                    retCodeConfig.getInvalidLotXferstat());

            String tmpMachineID = null;
            Machine equipment = aPosCassette.currentAssignedMachine();
            if (null != equipment) {
                Boolean isStorageBool = equipment.isStorageMachine();
                if (CimBooleanUtils.isFalse(isStorageBool)) {
                    tmpMachineID = equipment.getIdentifier();
                }
            } else {
                Validations.check(retCodeConfig.getInvalidCassetteTransferState());
            }
            Validations.check(!equipmentID.equals(tmpMachineID), retCodeConfig.getWaferNotInEqp());
        }
        // ------------------------------------------
        // Retrieve product request's source lot
        // ------------------------------------------
        List<PlanDTO.SourceLotEx> sourceLotList = aProdReq.allSourceLots();
        int sourceLen = CimArrayUtils.getSize(sourceLotList);
        // Check source lot wafer Contents
        if (sourceLen > 0) {
            for (PlanDTO.SourceLotEx sourceLotEx : sourceLotList) {
                boolean foundFlag = false;
                List<ObjectIdentifier> WaferIDs = sourceLotEx.getWaferIDList();
                Validations.check(CimArrayUtils.isEmpty(WaferIDs), retCodeConfig.getNotFoundSourceWafer());
                for (Infos.NewWaferAttributes newWaferAttributes :
                        strNewLotAttributes.getNewWaferAttributesList()) {
                    Predicate<ObjectIdentifier> valueMatchPredicate =
                            p -> ObjectIdentifier.equalsWithValue(p, newWaferAttributes.getSourceWaferID());
                    if (WaferIDs.stream().anyMatch(valueMatchPredicate)) {
                        foundFlag = true;
                        break;
                    }
                }
                Validations.check(!foundFlag, retCodeConfig.getNotFoundSourceWafer());
            }
        } else {
            for (Infos.NewWaferAttributes newWaferAttributes :
                    strNewLotAttributes.getNewWaferAttributesList()) {
                CimWafer wafer =
                        baseCoreFactory.getBO(CimWafer.class, newWaferAttributes.getSourceWaferID());
                Boolean stbAllocatedFlag = wafer.isSTBAllocated();
                Validations.check(
                        CimBooleanUtils.isTrue(stbAllocatedFlag), retCodeConfig.getWaferAllocated());
            }
        }
        // -----------------------------------
        // Check Product lot Control Job and Monitor wafer Destination Carrier Control Job
        // -----------------------------------
        CimLot aProductLot = baseCoreFactory.getBO(CimLot.class, productLotIDs.get(0));
        Validations.check(null == aProductLot, retCodeConfig.getNotFoundLot());
        com.fa.cim.newcore.bo.product.CimControlJob aProdLotCtrlJob = aProductLot.getControlJob();
        Validations.check(null == aProdLotCtrlJob, retCodeConfig.getInvalidParameter());
        String strProdLotCtrlJobID = aProdLotCtrlJob.getIdentifier();

        CimCassette anEmptyCassette =
                baseCoreFactory.getBO(CimCassette.class, strNewLotAttributes.getCassetteID());
        Validations.check(null == anEmptyCassette, retCodeConfig.getNotFoundCassette());
        List<Material> materials = anEmptyCassette.containedMaterial();
        Validations.check(CimArrayUtils.isNotEmpty(materials), retCodeConfig.getCastNotEmpty());

        com.fa.cim.newcore.bo.product.CimControlJob tmpMaterialSeq = anEmptyCassette.getControlJob();
        Validations.check(
                null == tmpMaterialSeq, retCodeConfig.getCastNotEmpty(), anEmptyCassette.getIdentifier());
        String strEmptyCasCtrlJobID = tmpMaterialSeq.getIdentifier();

        Validations.check(
                !CimStringUtils.equals(strProdLotCtrlJobID, strEmptyCasCtrlJobID),
                retCodeConfig.getNotSameControlJobId());
    }

    @Override
    public Integer INTGetMachineLotSequenceIndex(
            List<MachineDTO.MachineCassette> machineCassettes, Integer nCastIdx, String lotID) {
        int nLen = CimArrayUtils.getSize(machineCassettes.get(nCastIdx).getMachineCassetteLots());
        for (int i = 0; i < nLen; i++) {
            List<MachineDTO.MachineCassetteLot> machineCassetteLots =
                    machineCassettes.get(nCastIdx).getMachineCassetteLots();
            if (!CimObjectUtils.isEmpty(machineCassetteLots)) {
                if (ObjectIdentifier.equalsWithValue(machineCassetteLots.get(i).getLotID(), lotID)) {
                    return i;
                }
            }
        }
        return -1;
    }

    @Override
    public Integer INTGetMachineLotPtrSequenceIndex(
            List<MachineDTO.MachineCassette> machineCassettes, Integer nCastIdx, String lotID) {
        int nLen = CimArrayUtils.getSize(machineCassettes.get(nCastIdx).getMachineCassetteLots());
        for (int i = 0; i < nLen; i++) {
            if (ObjectIdentifier.equalsWithValue(
                    machineCassettes.get(nCastIdx).getMachineCassetteLots().get(i).getLotID(), lotID)) {
                return i;
            }
        }
        return -1;
    }

    @Override
    public void equipmentCheckConditionForEmptyCassetteEarlyOut(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        // Get object reference of eqp
        CimMachine equipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(equipment == null, retCodeConfig.getNotFoundEqp());

        // Check eqp is cassette exchange type or not
        Boolean cassetteExchangeType = equipment.isCassetteChangeRequired();
        Validations.check(CimBooleanUtils.isFalse(cassetteExchangeType),
                retCodeConfig.getMachineTypeNotExchange());

        //Check equipment allow 'early empty carrier out' or not
        Boolean emptyCassetteEarlyOut = equipment.isEmptyCassetteEarlyOut();
        Validations.check(CimBooleanUtils.isFalse(emptyCassetteEarlyOut),
                retCodeConfig.getEquipmentTypeNotEarlyCastOut());
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     * 2018/11/19 Wind
     *
     * @param objCommon
     * @return RetCode<Outputs.ObjEquipmentIDGetDROut>
     * @author Wind
     * @date 2018/11/19 15:24
     */
    @Override
    public List<ObjectIdentifier> equipmentIDGetDR(Infos.ObjCommon objCommon) {

        List<CimEquipmentDO> eqpIDList =
                cimJpaRepository.query(
                        "SELECT EQP_ID, ID FROM OMEQP ORDER BY EQP_ID", CimEquipmentDO.class);
        List<ObjectIdentifier> objectIdentifiers = new ArrayList<>();
        for (CimEquipmentDO equipment : eqpIDList) {
            objectIdentifiers.add(
                    ObjectIdentifier.build(equipment.getEquipmentID(), equipment.getId()));
        }

        return objectIdentifiers;
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     * 2018/10/19 Wind
     *
     * @param objCommon
     * @param equipmentID
     * @return RetCode<Outputs.ObjEquipmentNoteGetByEqpIDDROut>
     * @author Wind
     * @date 2018/10/19 18:23
     */
    @Override
    public List<Infos.EqpNote> equipmentNoteGetByEqpIDDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {

        CimEquipmentNoteDO example = new CimEquipmentNoteDO();
        example.setEqpID(ObjectIdentifier.fetchValue(equipmentID));
        List<CimEquipmentNoteDO> equipmentNotes = cimJpaRepository.findAll(Example.of(example));
        Validations.check(
                CimArrayUtils.isEmpty(equipmentNotes), retCodeConfig.getSomeEqpNoteDataError());
        List<Infos.EqpNote> eqpNotes = new ArrayList<>();
        for (CimEquipmentNoteDO equipmentNote : equipmentNotes) {
            Infos.EqpNote eqpNote = new Infos.EqpNote();
            eqpNote.setNoteTitle(equipmentNote.getNoteTitle());
            eqpNote.setEquipmentNote(equipmentNote.getNoteContents());
            eqpNote.setClaimUserID(
                    ObjectIdentifier.build(
                            equipmentNote.getOwnerID(), equipmentNote.getOwnerObj()));
            eqpNote.setClaimTimeStamp(String.valueOf(equipmentNote.getCreateTime()));
            CimPersonDO person =
                    cimJpaRepository.queryOne(
                            "select USER_NAME from OMUSER where USER_ID = ?1",
                            CimPersonDO.class,
                            equipmentNote.getOwnerID());
            eqpNote.setClaimUserName(person != null ? person.getUserFullID() : null);
            eqpNotes.add(eqpNote);
        }
        return eqpNotes;
    }

    @Override
    public void equipmentNoteMake(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            String noteTitle,
            String equipmentNote) {
        CimPerson person = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());
        Validations.check(CimObjectUtils.isEmpty(person), retCodeConfig.getNotFoundPerson());
        CimMachineNote machineNote = null;
        CimStorageMachine storage = baseCoreFactory.getBO(CimStorageMachine.class, equipmentID);
        if (null != storage) {
            machineNote =
                    storage.createMachineNote(
                            objCommon.getTimeStamp().getReportTimeStamp(), person, noteTitle);
        } else {
            CimMachine equipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
            Validations.check(null == equipment, retCodeConfig.getNotFoundEqp());
            machineNote =
                    equipment.createMachineNote(
                            objCommon.getTimeStamp().getReportTimeStamp(), person, noteTitle);
        }
        Validations.check(machineNote == null, retCodeConfig.getNotFoundMachineNote());

        machineNote.setTitle(noteTitle);
        machineNote.setContents(equipmentNote);
    }

    @Override
    public void equipmentUsageInfoReset(Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        Validations.check(
                ObjectIdentifier.isEmpty(equipmentID),
                retCodeConfig.getNotFoundEquipment(),
                objCommon.getTransactionID());

        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == aMachine, new OmCode(retCodeConfig.getNotFoundEquipment(), equipmentID.getValue()));

        aMachine.setRunWafer(0);
        aMachine.setRunTime(0);
        aMachine.setOperationStart(0);
        aMachine.setLastMaintenanceTimeStamp(objCommon.getTimeStamp().getReportTimeStamp());

        CimPerson aPerson = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());
        Validations.check(
                null == aPerson,
                new OmCode(retCodeConfig.getNotFoundPerson(), objCommon.getUser().getUserID().getValue()));

        aMachine.setLastMaintenancePerson(aPerson);
        aMachine.setLatestOperatedTimestamp(objCommon.getTimeStamp().getReportTimeStamp());
        aMachine.setLatestOperatedUser(aPerson);
    }

    @Override
    public String equipmentCategoryGet(Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        CimMachine equipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(null == equipment, retCodeConfig.getNotFoundEquipment());
        return equipment.getCategory();
    }

    /**
     * description: equipment_machineType_CheckDR.dr
     *
     * <p><br>
     * change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param objCommonIn Infos.ObjCommon
     * @param machineID   ObjectIdentifier
     * @return RetCode<Outputs.EquipmentMachineTypeCheckOut>
     * @author Yuri
     * @date 2018/10/29 18:10:47
     */
    @Override
    public Boolean equipmentMachineTypeCheckDR(
            Infos.ObjCommon objCommonIn, ObjectIdentifier machineID) {
        boolean equipmentFlag = false;
        /*-------------------*/
        /*  is Equipment ?   */
        /*-------------------*/
        String sql =
                String.format(
                        "SELECT COUNT(ID)\n"
                                + "                 FROM   OMEQP\n"
                                + "                 WHERE  EQP_ID = '%s'",
                        machineID.getValue());
        long hCount = cimJpaRepository.count(sql);
        long hCount2 = 0L;
        if (hCount == 0) {
            /*-------------------------*/
            /*  is Storage machine ?   */
            /*-------------------------*/
            sql =
                    String.format(
                            "SELECT COUNT(ID)\n"
                                    + "                     FROM   OMSTOCKER\n"
                                    + "                     WHERE  STOCKER_ID = '%s'",
                            machineID.getValue());
            hCount2 = cimJpaRepository.count(sql);
        }
        if (hCount > 0) {
            equipmentFlag = true;
        } else if (hCount2 > 0) {
            equipmentFlag = false;
        } else {
            throw new ServiceException(retCodeConfig.getNotFoundMachine());
        }
        return equipmentFlag;
    }

    @Override
    public Results.MoveOutReqResult equipmentFillInTxTRC004(
            Infos.ObjCommon objCommon,
            List<Infos.StartCassette> startCassetteList,
            List<Infos.SpcCheckLot> spcCheckLot) {
        Results.MoveOutReqResult data = new Results.MoveOutReqResult();

        List<Infos.OpeCompLot> opeCompLots = new ArrayList<>();
        data.setMoveOutLot(opeCompLots);
        for (Infos.StartCassette startCassette : startCassetteList) {
            List<Infos.LotInCassette> lotInCassetteList = startCassette.getLotInCassetteList();
            if (CimArrayUtils.isEmpty(lotInCassetteList)) {
                continue;
            }
            for (Infos.LotInCassette lotInCassette : lotInCassetteList) {
                // Omit Not-OpeStart lot
                if (CimBooleanUtils.isFalse(lotInCassette.getMoveInFlag())) {
                    continue;
                }
                // Get lot ojbect
                CimLot lot = baseCoreFactory.getBO(CimLot.class, lotInCassette.getLotID());
                Validations.check(null == lot, retCodeConfig.getNotFoundLot());

                Infos.OpeCompLot opeCompLot = new Infos.OpeCompLot();
                opeCompLots.add(opeCompLot);
                opeCompLot.setLotID(lotInCassette.getLotID());
                opeCompLot.setLotStatus(lot.getState());

        /*
        Find out the worst spechCheckResult among all strDCDef items
        The worst specCheckResult means the biggest number of spechCheckResult.
         */
                String lotSpecCheckResult = null;
                long lotSpecCheckResultValue = 0L;
                int noSpecCheckCount = 0;
                int totalSpecCheckCount = 0;
                List<Infos.DataCollectionInfo> dcDefList = lotInCassette.getStartRecipe().getDcDefList();
                if (CimArrayUtils.isNotEmpty(dcDefList)) {

                    Map<String, String> specCheckResultMap = new HashMap<>();
                    specCheckResultMap.put(
                            BizConstant.SP_SPECCHECKRESULT_1X_OK, BizConstant.SP_SPECCHECKRESULT_OK);
                    specCheckResultMap.put(
                            BizConstant.SP_SPECCHECKRESULT_1X_UPPERCONTROLLIMIT,
                            BizConstant.SP_SPECCHECKRESULT_UPPERCONTROLLIMIT);
                    specCheckResultMap.put(
                            BizConstant.SP_SPECCHECKRESULT_1X_LOWERCONTROLLIMIT,
                            BizConstant.SP_SPECCHECKRESULT_LOWERCONTROLLIMIT);
                    specCheckResultMap.put(
                            BizConstant.SP_SPECCHECKRESULT_1X_UPPERSPECLIMIT,
                            BizConstant.SP_SPECCHECKRESULT_UPPERSPECLIMIT);
                    specCheckResultMap.put(
                            BizConstant.SP_SPECCHECKRESULT_1X_LOWERSPECLIMIT,
                            BizConstant.SP_SPECCHECKRESULT_LOWERSPECLIMIT);
                    specCheckResultMap.put(
                            BizConstant.SP_SPECCHECKRESULT_1X_UPPERSCREENLIMIT,
                            BizConstant.SP_SPECCHECKRESULT_UPPERSCREENLIMIT);
                    specCheckResultMap.put(
                            BizConstant.SP_SPECCHECKRESULT_1X_LOWERSCREENLIMIT,
                            BizConstant.SP_SPECCHECKRESULT_LOWERSCREENLIMIT);
                    specCheckResultMap.put(
                            BizConstant.SP_SPECCHECKRESULT_1X_APCERROR, BizConstant.SP_SPECCHECKRESULT_APCERROR);

                    final int specCheckResult =
                            dcDefList.stream()
                                    .flatMap(dataCollectionInfo -> dataCollectionInfo.getDcItems().stream())
                                    .peek(
                                            dcItem -> {
                                                if (CimStringUtils.equalsIn(
                                                        dcItem.getSpecCheckResult(), "*", "", "#", "1*", "1#")) {
                                                    dcItem.setSpecCheckResult(BizConstant.SP_SPECCHECKRESULT_OK);
                                                } else {
                                                    for (Map.Entry<String, String> entry : specCheckResultMap.entrySet()) {
                                                        if (CimStringUtils.equalsIn(
                                                                dcItem.getSpecCheckResult(), entry.getKey(), entry.getValue())) {
                                                            dcItem.setSpecCheckResult(entry.getValue());
                                                            break;
                                                        }
                                                    }
                                                }
                                            })
                                    .mapToInt(dcItem -> Integer.parseInt(dcItem.getSpecCheckResult()))
                                    .max()
                                    .orElse(0);
                    lotSpecCheckResult = String.valueOf(specCheckResult);
                }
                opeCompLot.setSpecificationCheckResult(lotSpecCheckResult);

                List<Infos.SpcDcItemAndChart> tmpDcItemAndChartSeq = new ArrayList<>();
                if (CimArrayUtils.isNotEmpty(spcCheckLot)) {
                    for (Infos.SpcCheckLot checkLot : spcCheckLot) {
                        String licLotIdent = lotInCassette.getLotID().getValue();
                        String sclLotIdent = ObjectIdentifier.fetchValue(checkLot.getLotID());
                        if (CimStringUtils.equals(licLotIdent, sclLotIdent)) {
                            Infos.SpcResult retSpcResult = checkLot.getSpcResult();
                            List<Infos.SpcDcItemAndChart> spcDcItemList = null;
                            if (null != retSpcResult) {
                                spcDcItemList = retSpcResult.getSpcDcItem();
                            }
                            if (CimArrayUtils.isNotEmpty(spcDcItemList)) {
                                for (Infos.SpcDcItemAndChart spcDcItemAndChart : spcDcItemList) {
                                    List<Infos.SpcChart> spcChartList = spcDcItemAndChart.getSpcChartList();
                                    // No chart in DCItem -> continue
                                    if (CimArrayUtils.isEmpty(spcChartList)) {
                                        continue;
                                    }
                                    boolean sameDCItemFlag = false;
                                    for (Infos.SpcDcItemAndChart dcItemAndChart : tmpDcItemAndChartSeq) {
                                        if (CimStringUtils.unEqual(
                                                dcItemAndChart.getDataCollectionItemName(),
                                                spcDcItemAndChart.getDataCollectionItemName())) {
                                            continue;
                                        }
                                        List<Infos.SpcChart> tmpSpcChartList = dcItemAndChart.getSpcChartList();
                                        for (Infos.SpcChart spcChart : spcChartList) {
                                            for (Infos.SpcChart tmpChart : tmpSpcChartList) {
                                                // Check chartGroupID & chartID
                                                if (CimStringUtils.equals(
                                                        spcChart.getChartGroupID(), tmpChart.getChartGroupID())
                                                        && CimStringUtils.equals(spcChart.getChartID(), tmpChart.getChartID())
                                                        && CimStringUtils.equals(
                                                        spcChart.getChartType(), tmpChart.getChartType())) {
                                                    sameDCItemFlag = true;
                                                    break;
                                                }
                                            }
                                            if (sameDCItemFlag) {
                                                break;
                                            }
                                        }
                                    }
                                    if (!sameDCItemFlag) {
                                        tmpDcItemAndChartSeq.add(spcDcItemAndChart);
                                    }
                                }
                            }
                            if (retSpcResult == null) {
                                retSpcResult = new Infos.SpcResult();
                            }
                            retSpcResult.setSpcDcItem(tmpDcItemAndChartSeq);
                            if (CimStringUtils.isEmpty(opeCompLot.getSpcCheckResult())) {
                                opeCompLot.setSpcCheckResult(checkLot.getSpcCheckResult());
                            } else {
                /*
                Check priority of SPC Check Result
                The order of priorities is as follows.
                  H : 1 (highest)
                  W : 2
                  O : 3
                  N : 4
                 */
                                int prioritySpcCheckResult = 0;
                                int priorityLotRc = 0;
                                Map<String, Integer> prioritySpcCheckMapping = new HashMap<>();
                                prioritySpcCheckMapping.put(BizConstant.SP_SPCCHECK_HOLDLIMITOFF, 1);
                                prioritySpcCheckMapping.put(BizConstant.SP_SPCCHECK_WARNINGLIMITOFF, 2);
                                prioritySpcCheckMapping.put(BizConstant.SP_SPCCHECK_NOTDEFINED, 4);
                                Map<String, Integer> priorityLotMapping = new HashMap<>();
                                priorityLotMapping.put(BizConstant.SP_SPCCHECK_HOLDLIMITOFF, 1);
                                priorityLotMapping.put(BizConstant.SP_SPCCHECK_WARNINGLIMITOFF, 2);
                                priorityLotMapping.put(BizConstant.SP_SPCCHECK_NOTDEFINED, 4);
                                prioritySpcCheckResult =
                                        prioritySpcCheckMapping.getOrDefault(opeCompLot.getSpcCheckResult(), 3);
                                priorityLotRc = priorityLotMapping.getOrDefault(checkLot.getSpcCheckResult(), 3);
                                if (priorityLotRc < prioritySpcCheckResult) {
                                    opeCompLot.setSpcCheckResult(checkLot.getSpcCheckResult());
                                }
                            }
                            opeCompLot.setSpcResult(retSpcResult);
                        }
                    }
                }
            }
        }
        return data;
    }

    /**
     * description: equipment_targetPort_Pickup
     *
     * <p><br>
     * change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param objCommonIn
     * @param eqpPortInfoOrderByGroup
     * @param eqpBrInfo               - Not Used?
     * @param eqpPortInfo
     * @return
     * @author Yuri
     * @date 2018/11/7 18:01:45
     */
    @Override
    public Outputs.EquipmentTargetPortPickupOut equipmentTargetPortPickup(
            Infos.ObjCommon objCommonIn,
            Infos.EqpPortInfoOrderByGroup eqpPortInfoOrderByGroup,
            Infos.EqpBrInfo eqpBrInfo,
            Infos.EqpPortInfo eqpPortInfo) {
        Outputs.EquipmentTargetPortPickupOut equipmentTargetPortPickupOut =
                new Outputs.EquipmentTargetPortPickupOut();
        Infos.EqpTargetPortInfo eqpTargetPortInfo = new Infos.EqpTargetPortInfo();
        equipmentTargetPortPickupOut.setEqpTargetPortInfo(eqpTargetPortInfo);
        eqpTargetPortInfo.setEquipmentID(eqpPortInfoOrderByGroup.getEquipmentID());
        equipmentTargetPortPickupOut.setWhatsNextRequireFlag(false);
        equipmentTargetPortPickupOut.setEmptyCassetteRequireFlag(false);

        String tmpUseCDRForAutoDispatchFlag =
                StandardProperties.OM_XFER_CARRIER_WITH_AUTO3_DISPATCH.getValue();

        boolean unloadEventFlag = false;
        boolean loadEventFlag = false;

        if (CimStringUtils.equals("1", tmpUseCDRForAutoDispatchFlag)) {
            List<ObjectIdentifier> equipmentIDs = new ArrayList<>(1);
            equipmentIDs.add(eqpPortInfoOrderByGroup.getEquipmentID());
            List<Infos.EqpAuto3SettingInfo> eqpAuto3SettingInfoList =
                    this.equipmentAuto3DispatchSettingListGetDR(objCommonIn, equipmentIDs);

            for (Infos.EqpAuto3SettingInfo eqpAuto3SettingInfo : eqpAuto3SettingInfoList) {
                if (CimStringUtils.equals(
                        BizConstant.SP_EQPAUTO3SETTING_EVENTTYPE_UNLOADREQ,
                        eqpAuto3SettingInfo.getCarrierTransferRequestEvent())) {
                    log.debug("Existing auto3Setting for UnloadReq");
                    unloadEventFlag = true;
                } else if (CimStringUtils.equals(
                        eqpAuto3SettingInfo.getCarrierTransferRequestEvent(),
                        BizConstant.SP_EQPAUTO3SETTING_EVENTTYPE_LOADREQ)) {
                    log.debug("Existing auto3Setting for LoadReq");
                    loadEventFlag = true;
                }
            }
            Validations.check(
                    CimBooleanUtils.isFalse(unloadEventFlag) && CimBooleanUtils.isFalse(loadEventFlag),
                    retCodeConfig.getNotFoundTargetPort());
        }
        CimMachine posMachine =
                baseCoreFactory.getBO(CimMachine.class, eqpPortInfoOrderByGroup.getEquipmentID());
        boolean bFurnace = posMachine.isFurnace();
        String variableLoadState =
                !bFurnace
                        ? BizConstant.SP_PORTRSC_PORTSTATE_LOADREQ
                        : BizConstant.SP_PORTRSC_PORTSTATE_LOADAVAIL;

        // ----------------------------------------------------------------------
        //  Sort <PortGroup> by dispatchState_TimeStamp field of one strPortID
        //  whose dispatchState_TimeStamp is earliest in a PortGroup.
        // ----------------------------------------------------------------------

        // Sort the PortIDs in each PortGroup ascending by Dispatch_State_Timestamp
        // then sort each PortGroup by the max Dispatch_state_timestamp of the PortID
        Infos.EqpPortInfoOrderByGroup tmpEqpPortInfoOrderByGroup = new Infos.EqpPortInfoOrderByGroup();
        tmpEqpPortInfoOrderByGroup.setStrPortGroup(new ArrayList<>());
        String tmpTimeStamp = null;
        List<String> tmpTimeStapList = new ArrayList<>();
        int a = 0;
        int nInputPortGrpLen = CimArrayUtils.getSize(eqpPortInfoOrderByGroup.getStrPortGroup());
        for (a = 0; a < nInputPortGrpLen; a++) {
            int b = 0;
            int nInputPortLen =
                    CimArrayUtils.getSize(eqpPortInfoOrderByGroup.getStrPortGroup().get(a).getStrPortID());
            for (b = 0; b < nInputPortLen; b++) {
                int tb = 0;
                int nInputLotLen =
                        CimArrayUtils.getSize(
                                eqpPortInfoOrderByGroup
                                        .getStrPortGroup()
                                        .get(a)
                                        .getStrPortID()
                                        .get(tb)
                                        .getLotInfoOnPortList());
                for (tb = 0; tb < nInputLotLen; tb++) {
                }

                if (b == 0) {
                    tmpTimeStamp =
                            eqpPortInfoOrderByGroup
                                    .getStrPortGroup()
                                    .get(a)
                                    .getStrPortID()
                                    .get(0)
                                    .getDispatchStateTimeStamp();
                } else {
                    if (0
                            < CimDateUtils.convertToOrInitialTime(tmpTimeStamp)
                            .compareTo(
                                    CimDateUtils.convertToOrInitialTime(
                                            eqpPortInfoOrderByGroup
                                                    .getStrPortGroup()
                                                    .get(a)
                                                    .getStrPortID()
                                                    .get(b)
                                                    .getDispatchStateTimeStamp()))) {
                        tmpTimeStamp =
                                eqpPortInfoOrderByGroup
                                        .getStrPortGroup()
                                        .get(a)
                                        .getStrPortID()
                                        .get(b)
                                        .getDispatchStateTimeStamp();
                    }
                }
            }

            boolean bTmpAddFlag = false;
            int c = 0;
            for (c = 0; c < a; c++) {
                if (a > 0) {
                    if (0
                            > CimDateUtils.convertToOrInitialTime(tmpTimeStamp)
                            .compareTo(CimDateUtils.convertToOrInitialTime(tmpTimeStapList.get(c)))) {
                        int d = 0;
                        for (d = a; d > c; d--) {
                            tmpTimeStapList.add(d, tmpTimeStapList.get(d - 1));
                            tmpEqpPortInfoOrderByGroup
                                    .getStrPortGroup()
                                    .add(d, tmpEqpPortInfoOrderByGroup.getStrPortGroup().get(d - 1));
                        }
                        tmpTimeStapList.set(c, tmpTimeStamp);
                        tmpEqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .set(c, eqpPortInfoOrderByGroup.getStrPortGroup().get(a));
                        bTmpAddFlag = true;
                        break;
                    }
                }
            }
            if (CimBooleanUtils.isFalse(bTmpAddFlag)) {
                tmpTimeStapList.add(a, tmpTimeStamp);
                tmpEqpPortInfoOrderByGroup
                        .getStrPortGroup()
                        .add(a, eqpPortInfoOrderByGroup.getStrPortGroup().get(a));
            }
        }

        for (Infos.PortGroup portGroup : tmpEqpPortInfoOrderByGroup.getStrPortGroup()) {
            log.debug(String.format("[port Group ID] : [ %s ]", portGroup.getPortGroup()));
        }

        // -------------------------------------------------------------------------------------
        //  Search port Group which is much for Load conditions or Unload Conditions
        //  At first, Program looking for port Group which has port under UnloadReq Condition
        // -------------------------------------------------------------------------------------
        boolean bLoadPortFoundFlag = false;
        boolean bUnloadPortFoundFlag = false;
        int nOutPortGrpLen = 0;
        int i = 0;
        int nPortGrpLen = CimArrayUtils.getSize(tmpEqpPortInfoOrderByGroup.getStrPortGroup());

        if (!CimStringUtils.equals(tmpUseCDRForAutoDispatchFlag, "1")
                || (CimStringUtils.equals(tmpUseCDRForAutoDispatchFlag, "1")
                && CimBooleanUtils.isTrue(unloadEventFlag))) {
            for (i = 0; i < nPortGrpLen; i++) {
                boolean bPortGrpAddFlg = false;
                int nOutPortLen = 0;

                int j = 0;
                int nPortLen =
                        CimArrayUtils.getSize(
                                tmpEqpPortInfoOrderByGroup.getStrPortGroup().get(i).getStrPortID());

                Infos.PortGroup iTmpPortGroup = tmpEqpPortInfoOrderByGroup.getStrPortGroup().get(i);

                for (j = 0; j < nPortLen; j++) {
                    int tj = 0;
                    Infos.PortID jTmpPortID = iTmpPortGroup.getStrPortID().get(j);
                    int nLotLen = jTmpPortID.getLotInfoOnPortList().size();
                    if (!CimStringUtils.equals(
                            jTmpPortID.getPortState(), BizConstant.SP_PORTRSC_PORTSTATE_UNLOADREQ)) {
                        log.debug("port State is not 'UnloadReq'");
                        continue;
                    }

                    if (CimStringUtils.equals(
                            jTmpPortID.getPortState(), BizConstant.SP_PORTRSC_PORTSTATE_UNLOADREQ)) {
                        log.debug("port State is 'UnloadReq'");
                        boolean bCheckDispatchMode = true;
                        int k;
                        int nEqpPortGrpLen = CimArrayUtils.getSize(eqpPortInfo.getEqpPortStatuses());
                        for (k = 0; k < nEqpPortGrpLen; k++) {
                            Infos.EqpPortStatus kEqpPortStatus = eqpPortInfo.getEqpPortStatuses().get(k);
                            if (CimStringUtils.equals(
                                    iTmpPortGroup.getPortGroup(), kEqpPortStatus.getPortGroup())) {
                                if (!CimStringUtils.equals(
                                        kEqpPortStatus.getAccessMode(), BizConstant.SP_EQP_ACCESSMODE_AUTO)
                                        || CimStringUtils.equals(
                                        kEqpPortStatus.getOnlineMode(), BizConstant.SP_EQP_ONLINEMODE_OFFLINE))
                                    bCheckDispatchMode = false;
                                break;
                            } else {
                                log.debug("No Check Ignore");
                            }
                        }
                        if (CimBooleanUtils.isFalse(bCheckDispatchMode)) {
                            log.debug("Add Check PortGroup NG");
                            continue;
                        } else {
                            log.debug("Add Check PortGroup OK");
                        }

                        if (!CimStringUtils.equals(
                                jTmpPortID.getPortUsage(), CIMStateConst.CIM_PORT_RESOURCE_OUTPUT)
                                && !CimStringUtils.equals(
                                jTmpPortID.getPortUsage(), CIMStateConst.CIM_PORT_RESOURCE_INPUTOUTPUT)) {
                            log.debug("port Usage is not Output or InputOutput");
                            continue;
                        }

                        if (!CimStringUtils.equals(
                                jTmpPortID.getDispatchState(), BizConstant.SP_PORTRSC_DISPATCHSTATE_REQUIRED)) {
                            log.debug("dispatch State is not 'Required'");
                            continue;
                        }

                        if (ObjectIdentifier.isEmpty(jTmpPortID.getCassetteID())) {
                            log.debug("loadedCassetteID is null");
                            continue;
                        }

                        int nLotOnPortLen = CimArrayUtils.getSize(jTmpPortID.getLotInfoOnPortList());
                        boolean bProcessing = false;
                        for (k = 0; k < nLotOnPortLen; k++) {
                            Infos.LotInfoOnPort lotInfoOnPort = jTmpPortID.getLotInfoOnPortList().get(k);
                            String lotProcessStateGetRetCode =
                                    lotMethod.lotProcessStateGet(objCommonIn, lotInfoOnPort.getLotID());
                            if (CimStringUtils.equals(
                                    lotProcessStateGetRetCode, BizConstant.SP_LOT_PROCSTATE_PROCESSING)) {
                                bProcessing = true;
                                break;
                            }
                        }
                        if (CimBooleanUtils.isTrue(bProcessing)) {
                            log.debug("lot is Processing continue");
                            continue;
                        }

                        bUnloadPortFoundFlag = true;

                        if (CimBooleanUtils.isFalse(bPortGrpAddFlg)) {
                            eqpTargetPortInfo.setPortGroups(new ArrayList<>(nOutPortGrpLen + 1));
                            Infos.PortGroup portGroup = new Infos.PortGroup();
                            eqpTargetPortInfo.getPortGroups().add(nOutPortGrpLen, portGroup);
                            eqpTargetPortInfo
                                    .getPortGroups()
                                    .get(nOutPortGrpLen)
                                    .setPortGroup(tmpEqpPortInfoOrderByGroup.getStrPortGroup().get(i).getPortGroup());
                            eqpTargetPortInfo
                                    .getPortGroups()
                                    .get(nOutPortGrpLen)
                                    .setStrPortID(new ArrayList<>(0));

                            nOutPortGrpLen++;
                            bPortGrpAddFlg = true;
                        }
                        if (CimArrayUtils.getSize(
                                eqpTargetPortInfo.getPortGroups().get(nOutPortGrpLen - 1).getStrPortID())
                                == 0) {
                            eqpTargetPortInfo
                                    .getPortGroups()
                                    .get(nOutPortGrpLen - 1)
                                    .setStrPortID(new ArrayList<>());
                        }

                        boolean bPortAddFlg = false;

                        for (k = 0; k < nOutPortLen; k++) {
                            if (eqpTargetPortInfo
                                    .getPortGroups()
                                    .get(nOutPortGrpLen - 1)
                                    .getStrPortID()
                                    .get(k)
                                    .getLoadSequenceNoInPortGroup()
                                    > jTmpPortID.getLoadSequenceNoInPortGroup()) {
                                int l = k;
                                for (l = nOutPortLen; l > k; l--) {
                                    eqpTargetPortInfo
                                            .getPortGroups()
                                            .get(nOutPortGrpLen - 1)
                                            .getStrPortID()
                                            .set(
                                                    l,
                                                    eqpTargetPortInfo
                                                            .getPortGroups()
                                                            .get(nOutPortGrpLen - 1)
                                                            .getStrPortID()
                                                            .get(l - 1));
                                }
                                eqpTargetPortInfo
                                        .getPortGroups()
                                        .get(nOutPortGrpLen - 1)
                                        .getStrPortID()
                                        .set(k, jTmpPortID);
                                bPortAddFlg = true;
                                break;
                            }
                        }

                        if (CimBooleanUtils.isFalse(bPortAddFlg)) {
                            eqpTargetPortInfo
                                    .getPortGroups()
                                    .get(nOutPortGrpLen - 1)
                                    .getStrPortID()
                                    .add(nOutPortLen, jTmpPortID);
                        }
                        nOutPortLen++;
                    }
                }
                if (CimBooleanUtils.isTrue(bUnloadPortFoundFlag)) {
                    break;
                }
            }
        }

        if (CimBooleanUtils.isFalse(bUnloadPortFoundFlag)) {

            if (!CimStringUtils.equals(tmpUseCDRForAutoDispatchFlag, "1")
                    || (CimStringUtils.equals(tmpUseCDRForAutoDispatchFlag, "1") && loadEventFlag)) {
                for (i = 0; i < nPortGrpLen; i++) {

                    boolean bCheckDispatchMode = true;
                    int j;
                    int nEqpPortGrpLen = eqpPortInfo.getEqpPortStatuses().size();
                    Infos.PortGroup iTmpPortGroup = tmpEqpPortInfoOrderByGroup.getStrPortGroup().get(i);
                    for (j = 0; j < nEqpPortGrpLen; j++) {
                        Infos.EqpPortStatus eqpPortStatus = eqpPortInfo.getEqpPortStatuses().get(j);

                        if (CimStringUtils.equals(iTmpPortGroup.getPortGroup(), eqpPortStatus.getPortGroup())) {
                            if (!CimStringUtils.equals(
                                    eqpPortStatus.getDispatchMode(), BizConstant.SP_EQP_DISPATCHMODE_AUTO)
                                    || !CimStringUtils.equals(
                                    eqpPortStatus.getAccessMode(), BizConstant.SP_EQP_ACCESSMODE_AUTO)
                                    || CimStringUtils.equals(
                                    eqpPortStatus.getOnlineMode(), BizConstant.SP_EQP_ONLINEMODE_OFFLINE)) {
                                bCheckDispatchMode = false;
                                break;
                            }
                        } else {
                            log.debug("NoCheck ignore");
                        }
                    }

                    if (CimBooleanUtils.isFalse(bCheckDispatchMode)) {
                        log.debug("Add Check PortGroup NG");
                        continue;
                    } else {
                        log.debug("Add Check PortGroup OK");
                    }

                    int nOutPortLen = 0; // Not Used ?
                    int nPortLen = CimArrayUtils.getSize(iTmpPortGroup.getStrPortID());

                    int m = 0;
                    int nLoadReqPortCnt = 0;
                    for (m = 0; m < nPortLen; m++) {
                        int tm = 0;
                        Infos.PortID mTmpPortID =
                                tmpEqpPortInfoOrderByGroup.getStrPortGroup().get(i).getStrPortID().get(m);
                        int nOutLotLen = CimArrayUtils.getSize(mTmpPortID.getLotInfoOnPortList());

                        for (tm = 0; tm < nOutLotLen; tm++) {
                            log.debug("Check Input lot On port State");
                        }

                        if (!CimStringUtils.equals(mTmpPortID.getPortState(), variableLoadState)) {
                            log.debug("port State is not Good");
                            break;
                        }

                        if (!CimStringUtils.equals(
                                mTmpPortID.getPortUsage(), CIMStateConst.CIM_PORT_RESOURCE_INPUT)
                                && !CimStringUtils.equals(
                                mTmpPortID.getPortUsage(), CIMStateConst.CIM_PORT_RESOURCE_INPUTOUTPUT)) {
                            log.debug("port Usage is not Input or InputOutput");
                            break;
                        }

                        if (!CimStringUtils.equals(
                                mTmpPortID.getLoadPurposeType(), BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT)
                                && !CimStringUtils.equals(
                                mTmpPortID.getLoadPurposeType(),
                                BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT)
                                && !CimStringUtils.equals(
                                mTmpPortID.getLoadPurposeType(), BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE)
                                && !CimStringUtils.equals(
                                mTmpPortID.getLoadPurposeType(), BizConstant.SP_LOADPURPOSETYPE_ANY)) {
                            log.debug(
                                    "loadPurposeType is not [ProcessLot] or [ProcessMonitorLot] or [EmptyCassette] or [Any]");
                            break;
                        }

                        if (!CimStringUtils.equals(
                                mTmpPortID.getDispatchState(), BizConstant.SP_PORTRSC_DISPATCHSTATE_REQUIRED)) {
                            log.debug("dispatch State is not 'Required'");
                            break;
                        }
                        nLoadReqPortCnt++;

                        if (nLoadReqPortCnt == nPortLen) {
                            if (null == eqpTargetPortInfo.getPortGroups()) {
                                eqpTargetPortInfo.setPortGroups(new ArrayList<>());
                            }
                            Infos.PortGroup _portGroup = new Infos.PortGroup();
                            _portGroup.setPortGroup(iTmpPortGroup.getPortGroup());
                            eqpTargetPortInfo.getPortGroups().add(nOutPortGrpLen, _portGroup);
                            eqpTargetPortInfo
                                    .getPortGroups()
                                    .get(nOutPortGrpLen)
                                    .setStrPortID(new ArrayList<>(0));

                            int n = 0;
                            int nTmpPortLen = iTmpPortGroup.getStrPortID().size();

                            for (n = 0; n < nTmpPortLen; n++) {
                                boolean bTmpAddFlg = false;
                                int o = 0;
                                Infos.PortID nTmpPortID = iTmpPortGroup.getStrPortID().get(n);
                                for (o = 0; o < n; o++) {
                                    if (nTmpPortID.getLoadSequenceNoInPortGroup()
                                            < eqpTargetPortInfo
                                            .getPortGroups()
                                            .get(nOutPortGrpLen)
                                            .getStrPortID()
                                            .get(o)
                                            .getLoadSequenceNoInPortGroup()) {

                                        int p = 0;
                                        for (p = n; p > o; p--) {
                                            eqpTargetPortInfo
                                                    .getPortGroups()
                                                    .get(nOutPortGrpLen)
                                                    .getStrPortID()
                                                    .set(
                                                            p,
                                                            eqpTargetPortInfo
                                                                    .getPortGroups()
                                                                    .get(nOutPortGrpLen)
                                                                    .getStrPortID()
                                                                    .get(p - 1));
                                            bTmpAddFlg = true;
                                        }
                                        eqpTargetPortInfo
                                                .getPortGroups()
                                                .get(nOutPortGrpLen)
                                                .getStrPortID()
                                                .add(o, nTmpPortID);
                                    }
                                }
                                if (CimBooleanUtils.isFalse(bTmpAddFlg)) {
                                    eqpTargetPortInfo
                                            .getPortGroups()
                                            .get(nOutPortGrpLen)
                                            .getStrPortID()
                                            .add(n, nTmpPortID);
                                }
                            }
                            nOutPortGrpLen++;
                            bLoadPortFoundFlag = true;
                        }
                    }
                }
            }
        }
        Validations.check(
                CimBooleanUtils.isFalse(bLoadPortFoundFlag)
                        && CimBooleanUtils.isFalse(bUnloadPortFoundFlag),
                retCodeConfig.getNotFoundTargetPort());

        if (CimBooleanUtils.isTrue(bLoadPortFoundFlag)) {
            equipmentTargetPortPickupOut.setWhatsNextRequireFlag(true);
            equipmentTargetPortPickupOut.setEmptyCassetteRequireFlag(true);
            equipmentTargetPortPickupOut.setTargetPortType(BizConstant.SP_PORTRSC_PORTSTATE_LOADREQ);
        }

        if (CimBooleanUtils.isTrue(bUnloadPortFoundFlag)) {
            equipmentTargetPortPickupOut.setTargetPortType(BizConstant.SP_PORTRSC_PORTSTATE_UNLOADREQ);
        }
        return equipmentTargetPortPickupOut;
    }

    @Override
    public List<Infos.EqpAuto3SettingInfo> equipmentAuto3DispatchSettingListGetDR(
            Infos.ObjCommon objCommonIn, List<ObjectIdentifier> equipmentIDs) {
        return CimArrayUtils.isEmpty(equipmentIDs)
                ? cimJpaRepository.findAll(CimEqpAuto3SettingDO.class).stream()
                .sorted(Comparator.comparing(CimEqpAuto3SettingDO::getEqpID))
                .map(
                        eqpAuto3Setting -> {
                            Infos.EqpAuto3SettingInfo eqpAuto3SettingInfo = new Infos.EqpAuto3SettingInfo();
                            eqpAuto3SettingInfo.setEqpID(new ObjectIdentifier(eqpAuto3Setting.getEqpID()));
                            eqpAuto3SettingInfo.setCarrierTransferRequestEvent(eqpAuto3Setting.getCdrEvent());
                            eqpAuto3SettingInfo.setWatchdogName(eqpAuto3Setting.getWatchdogName());
                            return eqpAuto3SettingInfo;
                        })
                .collect(Collectors.toList())
                : equipmentIDs.stream()
                .flatMap(
                        equipmentID -> {
                            CimEqpAuto3SettingDO cimEqpAuto3SettingExam = new CimEqpAuto3SettingDO();
                            cimEqpAuto3SettingExam.setEqpID(ObjectIdentifier.fetchValue(equipmentID));
                            return cimJpaRepository.findAll(Example.of(cimEqpAuto3SettingExam)).stream()
                                    .sorted(Comparator.comparing(CimEqpAuto3SettingDO::getEqpID))
                                    .map(
                                            eqpAuto3Setting -> {
                                                Infos.EqpAuto3SettingInfo eqpAuto3SettingInfo =
                                                        new Infos.EqpAuto3SettingInfo();
                                                eqpAuto3SettingInfo.setEqpID(
                                                        new ObjectIdentifier(eqpAuto3Setting.getEqpID()));
                                                eqpAuto3SettingInfo.setCarrierTransferRequestEvent(
                                                        eqpAuto3Setting.getCdrEvent());
                                                eqpAuto3SettingInfo.setWatchdogName(eqpAuto3Setting.getWatchdogName());
                                                return eqpAuto3SettingInfo;
                                            });
                        })
                .collect(Collectors.toList());
    }

    @Override
    public void equipmentPortStateCheckForOpeStartCancelForInternalBuffer(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            List<Infos.StartCassette> startCassetteList) {
        /*-------------------------------------------------*/
        /*                                                 */
        /*   Check Port's Cassette vs In-parm's Cassette   */
        /*                                                 */
        /*-------------------------------------------------*/

        // ---------------------------------
        //  Get Eqp Internal Buffer Info
        // ---------------------------------
        log.info("Get Internal Buffer Information equipmentID: {}", equipmentID);
        List<Infos.EqpInternalBufferInfo> strEquipmentInternalBufferInfoGetOut =
                this.equipmentInternalBufferInfoGet(objCommon, equipmentID);

        /*----------------------------------------*/
        /*   For-Loop for strStartCassette Info   */
        /*----------------------------------------*/
        int scLength = CimArrayUtils.getSize(startCassetteList);
        for (int i = 0; i < scLength; i++) {
            log.info("loop to strStartCassette.length() : {} and siez: {}", scLength, i);
            // -----------------------------------
            //  Find Internal Buffer Info
            // -----------------------------------
            Boolean bCassetteFoundInBuffer = false;
            int nBufferCategoryLen = CimArrayUtils.getSize(strEquipmentInternalBufferInfoGetOut);
            log.info(" nBufferCategoryLen = {}", nBufferCategoryLen);
            for (int j = 0; j < nBufferCategoryLen; j++) {
                int nShelfLen =
                        CimArrayUtils.getSize(
                                strEquipmentInternalBufferInfoGetOut.get(j).getShelfInBufferList());
                log.info(" nShelfLen = {}", nShelfLen);
                for (int k = 0; k < nShelfLen; k++) {
                    if (ObjectIdentifier.equalsWithValue(
                            startCassetteList.get(i).getCassetteID(),
                            strEquipmentInternalBufferInfoGetOut
                                    .get(j)
                                    .getShelfInBufferList()
                                    .get(k)
                                    .getLoadedCarrierID())) {
                        bCassetteFoundInBuffer = true;
                        log.info(" Input cassette was found in Internal Buffer of equipment.");
                        break;
                    }
                }
            }
            Validations.check(!bCassetteFoundInBuffer, retCodeConfig.getInvalidCassettePortCombination());
        }
        /*----------------------*/
        /*   Return to Caller   */
        /*----------------------*/
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     * 2018/11/13 Wind
     *
     * @param objCommon
     * @param equipmentID
     * @return RetCode<List < Infos.BufferResourceInfo>>
     * @author Wind
     * @date 2018/11/13 13:06
     */
    @Override
    public List<Infos.BufferResourceInfo> equipmentBufferResourceInfoGet(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        // --------------------------------------------------
        // Initialize
        // --------------------------------------------------
        List<Infos.BufferResourceInfo> tmpBufferResourceInfoSeq = new ArrayList<>();

        // --------------------------------------------------
        //   Get Machine Object
        // --------------------------------------------------
        CimMachine equipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == equipment,
                new OmCode(retCodeConfig.getNotFoundEqp(), ObjectIdentifier.fetchValue(equipmentID)));

        List<BufferResource> buffResources = equipment.allBufferResources();
        for (int i = 0; i < CimArrayUtils.getSize(buffResources); i++) {
            Infos.BufferResourceInfo bufferResourceInfo = new Infos.BufferResourceInfo();
            tmpBufferResourceInfoSeq.add(bufferResourceInfo);
            // ----------------------------------------------
            //   Get BufferResource Info
            // ----------------------------------------------
            CimBufferResource aPosBufferResource = (CimBufferResource) buffResources.get(i);
            Validations.check(aPosBufferResource == null, retCodeConfig.getNotFoundBufferResource());

            // ----------------------------------------------
            //   Set BufferResource Category
            // ----------------------------------------------
            String bufferResourceCategory = aPosBufferResource.getCategory();
            bufferResourceInfo.setBufferCategory(bufferResourceCategory);

            // ----------------------------------------------
            //   Set BufferResource Capacity
            // ----------------------------------------------
            long bufferResourceCapacity = CimNumberUtils.intValue(aPosBufferResource.getCapacity());
            bufferResourceInfo.setSmCapacity(bufferResourceCapacity);
            bufferResourceInfo.setSmInUseCapacity(0);
            bufferResourceInfo.setDynamicCapacity(0);
            bufferResourceInfo.setDynamicInUseCapacity(0);

            // ----------------------------------------------
            //   Get MaterialLocation
            // ----------------------------------------------
            List<MaterialLocation> aMaterialLocationSeq = aPosBufferResource.allMaterialLocations();
            long lenShelfInBuffer = CimArrayUtils.getSize(aMaterialLocationSeq);
            if (CimStringUtils.equals(
                    bufferResourceCategory, BizConstant.SP_BUFFERCATEGORY_ANYPROCESSLOT)) {
                bufferResourceInfo.setSmInUseCapacity(bufferResourceCapacity - lenShelfInBuffer);
                continue;
            }
            for (int j = 0; j < lenShelfInBuffer; j++) {
                CimMaterialLocation aMaterialLocation = (CimMaterialLocation) aMaterialLocationSeq.get(j);
                Validations.check(aMaterialLocation == null, retCodeConfig.getNotFoundMaterialLocation());
                // ------------------------------------------
                //   Check Dynamic flag
                // ------------------------------------------
                boolean dynamicFlag = CimBooleanUtils.isTrue(aMaterialLocation.isDynamic());

                // ------------------------------------------
                //   Check Allocated status
                // ------------------------------------------
                boolean inUseFlag = CimBooleanUtils.isTrue(aMaterialLocation.isAllocated());

                // ------------------------------------------
                //   Check Occupied status
                // ------------------------------------------
                if (CimBooleanUtils.isFalse(inUseFlag)) {
                    inUseFlag = aMaterialLocation.isOccupied();
                }
                if (dynamicFlag) {
                    if (inUseFlag) {
                        bufferResourceInfo.setDynamicInUseCapacity(
                                tmpBufferResourceInfoSeq.get(i).getDynamicInUseCapacity() + 1);
                    }
                    bufferResourceInfo.setDynamicCapacity(
                            tmpBufferResourceInfoSeq.get(i).getDynamicCapacity() + 1);
                } else {
                    if (inUseFlag) {
                        bufferResourceInfo.setSmInUseCapacity(
                                tmpBufferResourceInfoSeq.get(i).getSmInUseCapacity() + 1);
                    }
                }
            }
        }

        return tmpBufferResourceInfoSeq;
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     * 2018/11/13 Wind
     *
     * @param objCommon
     * @param strEquipmentBufferResourceTypeChangeIn
     * @return RetCode<Object>
     * @author Wind
     * @date 2018/11/13 18:05
     */
    @Override
    public void equipmentBufferResourceTypeChange(
            Infos.ObjCommon objCommon,
            Inputs.ObjEquipmentBufferResourceTypeChangeIn strEquipmentBufferResourceTypeChangeIn) {
        // --------------------------------------------------
        //   Get Machine Object
        // --------------------------------------------------
        ObjectIdentifier equipmentID = strEquipmentBufferResourceTypeChangeIn.getEquipmentID();
        List<Infos.BufferResourceUpdateInfo> strBufferResourceUpdateInfoSeq =
                strEquipmentBufferResourceTypeChangeIn.getStrBufferResourceUpdateInfoSeq();

        CimMachine equipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == equipment,
                new OmCode(retCodeConfig.getNotFoundEqp(), ObjectIdentifier.fetchValue(equipmentID)));

        // --------------------------------------------------
        // Check capacity of each buffer category
        // --------------------------------------------------
        long lenBufferResource = CimArrayUtils.getSize(strBufferResourceUpdateInfoSeq);

        List<Infos.BufferResourceUpdateInfo> tmpBufferResourceUpdateInfoSeq = new ArrayList<>();
        Infos.BufferResourceUpdateInfo bufferResourceUpdateInfo = new Infos.BufferResourceUpdateInfo();
        // --------------------------------------------------
        // First: Sort buffer resources, put descrease prior to increase
        // --------------------------------------------------
        int len = 0;
        long totalDeltaCapacity = 0;
        for (int i = 0; i < lenBufferResource; i++) {
            if (CimStringUtils.equals(
                    strBufferResourceUpdateInfoSeq.get(i).getBufferCategory(),
                    BizConstant.SP_BUFFERCATEGORY_ANYPROCESSLOT)) {
                // No need to check capacity for AnyProcessLot buffer
                continue;
            }

            long newCapacity = strBufferResourceUpdateInfoSeq.get(i).getNewCapacity();
            long dynCapacity = strBufferResourceUpdateInfoSeq.get(i).getDynamicCapacity();
            totalDeltaCapacity += newCapacity - dynCapacity;

            Validations.check(newCapacity < 0, retCodeConfig.getInvalidParameter());
            if (newCapacity < dynCapacity) { // decrease
                tmpBufferResourceUpdateInfoSeq.add(strBufferResourceUpdateInfoSeq.get(i));
                len++;
            }
        }
        for (int i = 0; i < lenBufferResource; i++) {
            if (CimStringUtils.equals(
                    strBufferResourceUpdateInfoSeq.get(i).getBufferCategory(),
                    BizConstant.SP_BUFFERCATEGORY_ANYPROCESSLOT)) {
                // No need to check capacity for AnyProcessLot buffer
                continue;
            }

            long newCapacity = strBufferResourceUpdateInfoSeq.get(i).getNewCapacity();
            long dynCapacity = strBufferResourceUpdateInfoSeq.get(i).getDynamicCapacity();
            if (newCapacity > dynCapacity) { // increase
                tmpBufferResourceUpdateInfoSeq.add(strBufferResourceUpdateInfoSeq.get(i));
                len++;
            }
        }
        // --------------------------------------------------
        // If total buffer increasement happens, need to check whether
        // resources of AnyProcessLot available by this quantity
        // --------------------------------------------------
        if (0 < totalDeltaCapacity) {
            CimBufferResource aBufferResource =
                    (CimBufferResource)
                            equipment.findBufferResourceNamed(BizConstant.SP_BUFFERCATEGORY_ANYPROCESSLOT);
            Validations.check(aBufferResource == null, retCodeConfig.getNotFoundBufferResource());
            // ----------------------------------------------
            //   Get MaterialLocation
            // ----------------------------------------------
            List<MaterialLocation> aMaterialLocationSeq = aBufferResource.allMaterialLocations();
            long freeAnyProcessLot = CimArrayUtils.getSize(aMaterialLocationSeq);
            Validations.check(
                    freeAnyProcessLot < totalDeltaCapacity, retCodeConfig.getNotEnoughIncreaseCapacity());
        }
        // --------------------------------------------------
        // Then: decrease/increase capacity accordingly
        // --------------------------------------------------
        for (int i = 0; i < len; i++) {
            CimBufferResource buffResource =
                    (CimBufferResource)
                            equipment.findBufferResourceNamed(
                                    tmpBufferResourceUpdateInfoSeq.get(i).getBufferCategory());
            Validations.check(buffResource == null, retCodeConfig.getNotFoundBufferResource());

            // --------------------------------------------------
            // Check smCpacity&actualCapacity of current buffer
            // --------------------------------------------------
            long smCapacity = CimNumberUtils.longValue(buffResource.getCapacity());
            Validations.check(
                    Long.compare(tmpBufferResourceUpdateInfoSeq.get(i).getSmCapacity(), smCapacity) != 0,
                    retCodeConfig.getNotSameBufferCapacity());

            long actualCapacity = CimNumberUtils.longValue(buffResource.getActualCapacity());
            long dynCapacity = actualCapacity - smCapacity;
            Validations.check(
                    Long.compare(tmpBufferResourceUpdateInfoSeq.get(i).getDynamicCapacity(), dynCapacity)
                            != 0,
                    retCodeConfig.getNotSameBufferCapacity());

            // --------------------------------------------------
            // decrase or increase buffer capacity
            // --------------------------------------------------
            long newCapacity = tmpBufferResourceUpdateInfoSeq.get(i).getNewCapacity();
            if (newCapacity < dynCapacity) {
                long decCapacity = dynCapacity - newCapacity;
                long freeDynCapacity = 0;
                // ----------------------------------------------
                // Check whether enough free buffers availabe to decrease
                // ----------------------------------------------
                List<MaterialLocation> aMaterialLocationSeq = buffResource.allMaterialLocations();
                for (int j = 0; j < CimArrayUtils.getSize(aMaterialLocationSeq); j++) {
                    CimMaterialLocation aMaterialLocation = (CimMaterialLocation) aMaterialLocationSeq.get(j);
                    Validations.check(aMaterialLocation == null, retCodeConfig.getNotFoundMaterialLocation());

                    // ------------------------------------------
                    //   Check Dynamic flag
                    // ------------------------------------------
                    boolean dynamicFlag = CimBooleanUtils.isTrue(aMaterialLocation.isDynamic());
                    if (CimBooleanUtils.isTrue(dynamicFlag)) {
                        // ------------------------------------------
                        //   Check Allocated status
                        // ------------------------------------------
                        boolean inUseFlag = CimBooleanUtils.isTrue(aMaterialLocation.isAllocated());
                        // ------------------------------------------
                        //   Check Occupied status
                        // ------------------------------------------
                        if (CimBooleanUtils.isFalse(inUseFlag)) {
                            inUseFlag = aMaterialLocation.isOccupied();
                        }
                        if (CimBooleanUtils.isFalse(inUseFlag)) {
                            freeDynCapacity++;
                        }
                    }
                }
                Validations.check(
                        freeDynCapacity < decCapacity, retCodeConfig.getNotEnoughDecreaseCapacity());
                buffResource.decreaseCapacity(CimNumberUtils.intValue(decCapacity));
            } else {
                long incCapacity = newCapacity - dynCapacity;
                buffResource.increaseCapacity(CimNumberUtils.intValue(incCapacity));
            }
        }
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     * 2018/11/15 Wind
     *
     * @param objCommon
     * @param params
     * @return RetCode<Object>
     * @author Wind
     * @date 2018/11/15 9:13
     */
    @Override
    public void equipmentUnLoadCarrierAdd(
            Infos.ObjCommon objCommon, Params.CarrierMoveFromIBRptParams params) {

        ObjectIdentifier equipmentID = params.getEquipmentID();
        ObjectIdentifier destinationPortID = params.getDestinationPortID();
        ObjectIdentifier cassetteID = params.getCarrierID();
        /*--------------------------*/
        /*   Check Machine Object   */
        /*--------------------------*/
        CimMachine equipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == equipment,
                new OmCode(retCodeConfig.getNotFoundEqp(), ObjectIdentifier.fetchValue(equipmentID)));

        /*------------------------------*/
        /*   Get BufferResource Info    */
        /*------------------------------*/
        List<BufferResource> aBufferResourceSeq = equipment.allBufferResources();
        Validations.check(
                CimArrayUtils.isEmpty(aBufferResourceSeq), retCodeConfig.getNotFoundBufferResource());

        int k;
        /*-------------------------------------------------*/
        /*   Check port reservation by other carrier       */
        /*-------------------------------------------------*/

        /*-------------------------------------------------*/
        /*   Find MaterialLocation of BufferResource       */
        /*-------------------------------------------------*/
        boolean founfTarget = false;
        for (int j = 0; j < aBufferResourceSeq.size(); j++) {
            CimBufferResource aBufferResource = (CimBufferResource) aBufferResourceSeq.get(j);
            Validations.check(aBufferResource == null, retCodeConfig.getNotFoundBufferResource());

            List<MaterialLocation> aMaterialLocationSeq = aBufferResource.allMaterialLocations();
            int lenMaterialLocation =
                    CimObjectUtils.isEmpty(aMaterialLocationSeq) ? 0 : aMaterialLocationSeq.size();
            /**************************************/
            /*  Check source data                 */
            /**************************************/
            for (k = 0; k < lenMaterialLocation; k++) {
                CimMaterialLocation aMaterialLocation = (CimMaterialLocation) aMaterialLocationSeq.get(k);
                Validations.check(
                        CimObjectUtils.isEmpty(aMaterialLocation), retCodeConfig.getNotFoundMaterialLocation());

                /*--------------------------------*/
                /*   Get CarrierID                */
                /*--------------------------------*/
                CimCassette aContainedCassette = (CimCassette) aMaterialLocation.getMaterial();
                if (CimObjectUtils.isEmpty(aContainedCassette)) {
                    CimCassette aAlocationCassette = (CimCassette) aMaterialLocation.getAllocatedMaterial();
                    if (!CimObjectUtils.isEmpty(aAlocationCassette)) {
                        /*--------------------------------*/
                        /*   Check ReservedLoadPortID   */
                        /*--------------------------------*/
                        CimPortResource aLoadPortResource = aMaterialLocation.getReservedLoadPort();
                        if (!CimObjectUtils.isEmpty(aLoadPortResource)) {
                            String lPortIdent = aLoadPortResource.getIdentifier();
                            Validations.check(
                                    ObjectIdentifier.equalsWithValue(params.getDestinationPortID(), lPortIdent),
                                    retCodeConfig.getUnloaderReservedByAnother());
                        }
                    }
                    continue;
                }
                String carrierIdent = aContainedCassette.getIdentifier();
                if (!ObjectIdentifier.equalsWithValue(params.getCarrierID(), carrierIdent)) {
                    continue;
                }
                /*--------------------------------*/
                /*   Check ReservedUnloadPortID   */
                /*--------------------------------*/
                CimPortResource aUnloadPortResource = aMaterialLocation.getReservedUnloadPort();
                if (!CimObjectUtils.isEmpty(aUnloadPortResource)) {
                    String portIdent = aUnloadPortResource.getIdentifier();
                    Validations.check(
                            !ObjectIdentifier.equalsWithValue(destinationPortID, portIdent),
                            retCodeConfig.getUnloaderReservedByAnother());
                }
                /***********************************/
                /*  Clear reservedUnloadPortID     */
                /***********************************/
                aMaterialLocation.setReservedUnloadPort(null);
                /***********************************/
                /*  Clear containedCarrierID       */
                /***********************************/
                aMaterialLocation.materialSent();
                founfTarget = true;
            }
        }

        Validations.check(
                CimBooleanUtils.isFalse(founfTarget), retCodeConfig.getNotFoundMaterialLocation());

        /**********************************************/
        /*  Check materialLocation of port            */
        /**********************************************/
        List<PortResource> portResourceSeq = equipment.allPortResources();
        for (int m = 0; m < CimArrayUtils.getSize(portResourceSeq); m++) {
            CimPortResource aPosPort = (CimPortResource) portResourceSeq.get(m);
            Validations.check(
                    CimObjectUtils.isEmpty(aPosPort),
                    new OmCode(retCodeConfig.getNotFoundPortResource(), "*****"));
            ObjectIdentifier temPortID =
                    new ObjectIdentifier(aPosPort.getIdentifier(), aPosPort.getPrimaryKey());
            if (ObjectIdentifier.equalsWithValue(temPortID, params.getDestinationPortID())) {
                List<MaterialLocation> strMaterialLocations = aPosPort.allMaterialLocations();
                /**********************************************/
                /*  Check materialLocation of port            */
                /**********************************************/
                boolean isOccupiedFlag = false;
                for (int n = 0; n < CimArrayUtils.getSize(strMaterialLocations); n++) {

                    /**********************************************/
                    /*  Check containedCarrier existance on port  */
                    /**********************************************/
                    // not null  true; load
                    // null false; unload
                    isOccupiedFlag = CimBooleanUtils.isTrue(strMaterialLocations.get(n).isOccupied());
                    if (isOccupiedFlag){
                        List<MachineDTO.MachineCassette> machineCassettes = equipment.allCassettes();
                        for (MachineDTO.MachineCassette machineCassette : machineCassettes) {
                            if(ObjectIdentifier.equalsWithValue(params.getDestinationPortID(), machineCassette.getLoadPortID())){
                                Validations.check(
                                        isOccupiedFlag, new OmCode(retCodeConfig.getCstAlreadyLoaded(), ObjectIdentifier.fetchValue(machineCassette.getCassetteID())));
                            }
                        }
                    }

                    /**********************************************/
                    /*  Narrow to MaterialLocation                */
                    /**********************************************/
                    CimMaterialLocation aPosMaterialLocation =
                            (CimMaterialLocation) strMaterialLocations.get(n);
                    /**********************************************/
                    /*  Check allocatedCarrier on port            */
                    /**********************************************/
                    CimCassette aLocatedCassette = (CimCassette) aPosMaterialLocation.getAllocatedMaterial();
                    if (!CimObjectUtils.isEmpty(aLocatedCassette)) {
                        String cassetteIdent = aLocatedCassette.getIdentifier();
                        Validations.check(
                                !ObjectIdentifier.equalsWithValue(cassetteIdent, cassetteID),
                                retCodeConfig.getUnloaderReservedByAnother());
                    }
                    // -- start tok ---------------
                    /*------------------------------------------------------*/
                    /*                                                      */
                    /*     Get posMachineCassette for re-makeing            */
                    /*                                                      */
                    /*------------------------------------------------------*/
                    List<MachineDTO.MachineCassette> posMachineCassetteSeq = equipment.allCassettes();
                    for (int x = 0; x < CimArrayUtils.getSize(posMachineCassetteSeq); x++) {
                        MachineDTO.MachineCassette newMachineCassette = posMachineCassetteSeq.get(x);
                        if (ObjectIdentifier.equalsWithValue(cassetteID, newMachineCassette.getCassetteID())) {
                            // --- over write
                            newMachineCassette.setLoadPortID(temPortID);
                            CimCassette cassette = baseCoreFactory.getBO(CimCassette.class, cassetteID);
                            Validations.check(
                                    null == cassette,
                                    new OmCode(
                                            retCodeConfig.getNotFoundCassette(),
                                            ObjectIdentifier.fetchValue(cassetteID)));
                            // --- remove old one
                            /*----------------------------*/
                            /*   Remove MachineCassette   */
                            /*----------------------------*/
                            equipment.removeCassette(cassette);

                            equipment.addCassette(newMachineCassette);

                            /********************************************************/
                            /*  Add containedMaterial into port's MaterialLocation. */
                            /********************************************************/
                            strMaterialLocations.get(n).materialReceived((Material) cassette);
                            break;
                        }
                    }
                } // end of n
            }
        } // end of m
        /*   Return to Caller   */
    }

    @Override
    public Infos.EqpBrInfoForInternalBuffer equipmentBrInfoForInternalBufferGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        log.debug("equipmentBrInfoForInternalBufferGetDR start");
        Infos.EqpBrInfoForInternalBuffer data = new Infos.EqpBrInfoForInternalBuffer();

        log.debug("step1 - check if equipment exists");
        CimMachine equipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == equipment,
                new OmCode(retCodeConfig.getNotFoundEqp(), ObjectIdentifier.fetchValue(equipmentID)));

        log.debug("step2 - set params");
        data.setEquipmentName(equipment.getDescription()); // 设备名称为修饰，是否需要修改为EquipmentName
        data.setWorkBay(equipment.getWorkAreaID());
        data.setEquipmentOwner(ObjectIdentifier.fetchValue(equipment.getOwnerID()));
        data.setEqpResourceName(equipment.getCellController());
        data.setEquipmentCategory(equipment.getCategory());
        data.setReticleUseFlag(equipment.isReticleRequired());
        data.setFixtureUseFlag(equipment.isFixtureRequired());
        data.setCassetteChangeFlag(equipment.isCassetteChangeRequired());
        data.setStartLotsNotifyRequiredFlag(equipment.isStartLotsNotifyRequired());
        data.setMonitorCreationFlag(equipment.isMonitorCreation());
        data.setEqpToEqpTransferFlag(equipment.isEqpToEqpTransferFlagOn());
        data.setTakeInOutTransferFlag(equipment.isTakeOutInTransferFlagOn());
        data.setMultiRecipeCapability(equipment.getMultipleRecipeCapability());
        data.setMinWaferCount(equipment.getMinimumWaferCount());
        data.setMaxBatchSize(equipment.getMaxBatchSize());
        data.setMinBatchSize(equipment.getMinBatchSize());
        data.setProcessJobLevelCtrl(equipment.isProcessJobLevelControlOn());
        data.setPrControl(equipment.getPrControl());

        boolean tmpEmptyCassetteReqFlag = CimBooleanUtils.isTrue(equipment.isMonitorCreation());
        log.trace("tmpEmptyCassetteReqFlag is {}", tmpEmptyCassetteReqFlag);
        if (tmpEmptyCassetteReqFlag) {
            data.setEmptyCassetteRequireFlag(tmpEmptyCassetteReqFlag);
        } else {
            data.setEmptyCassetteRequireFlag(data.isCassetteChangeFlag());
        }

        List<String> specialControls = equipment.getSpecialEquipmentControls();
        data.setSpecialControl(specialControls);

        log.debug("step3 - query ControlLotBank from equipment");
        List<MachineDTO.ControlLotBank> equipmentControlLotBanks = equipment.allControlLotBanks();
        if (null != equipmentControlLotBanks) {
            List<Infos.ControlBank> controlBanks = new ArrayList<>();
            for (MachineDTO.ControlLotBank equipmentControlLotBank : equipmentControlLotBanks) {
                Infos.ControlBank controlBank = new Infos.ControlBank();
                controlBank.setControlLotType(equipmentControlLotBank.getControlLotType());
                controlBank.setControlBankID(equipmentControlLotBank.getBankID());
                controlBanks.add(controlBank);
            }
            data.setControlBanks(controlBanks);

            for (MachineDTO.ControlLotBank equipmentControlLotBank : equipmentControlLotBanks) {
                String controlLotType = equipmentControlLotBank.getControlLotType();
                Validations.check(
                        !CimStringUtils.equals(controlLotType, BizConstant.SP_CONTROLLOTTYPE_WAITINGMONITORLOT)
                                && !CimStringUtils.equals(controlLotType, BizConstant.SP_CONTROLLOTTYPE_FILLERDUMMY)
                                && !CimStringUtils.equals(
                                controlLotType, BizConstant.SP_CONTROLLOTTYPE_SIDEDUMMYLOT),
                        retCodeConfig.getInvalidBankType());
            }
        }

        return data;
    }

    @Override
    public Outputs.ObjEquipmentReticlePodPortInfoGetDROut equipmentReticlePodPortInfoGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        Outputs.ObjEquipmentReticlePodPortInfoGetDROut data =
                new Outputs.ObjEquipmentReticlePodPortInfoGetDROut();
        Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoGet(objCommon, equipmentID);
        String onLineMode = null;
        List<Infos.EqpPortStatus> eqpPortInfos = eqpPortInfo.getEqpPortStatuses();
        if (!CimArrayUtils.isEmpty(eqpPortInfos)) {
            onLineMode = eqpPortInfos.get(0).getOnlineMode();
        } else {
            onLineMode = BizConstant.SP_EQP_ONLINEMODE_OFFLINE;
        }
        CimReservePortDO example = new CimReservePortDO();
        example.setEquipmentID(ObjectIdentifier.fetchValue(equipmentID));
        List<CimReservePortDO> reservePorts = cimJpaRepository.findAll(Example.of(example));
        List<Infos.ReticlePodPortInfo> reticlePodPortInfos = new ArrayList<>();
        if (!CimObjectUtils.isEmpty(reservePorts)) {
            for (CimReservePortDO reservePort : reservePorts) {
                Infos.ReticlePodPortInfo reticlePodPortInfo = new Infos.ReticlePodPortInfo();
                reticlePodPortInfo.setReticlePodPortID(
                        new ObjectIdentifier(reservePort.getPortID(), reservePort.getId()));
                reticlePodPortInfo.setAccessMode(reservePort.getAccessMode());
                reticlePodPortInfo.setEqpCategory(reservePort.getEquipmentCategory());
                reticlePodPortInfo.setEqpCategory(reservePort.getEquipmentCategory());
                if (!CimStringUtils.equals(BizConstant.SP_EQP_ONLINEMODE_OFFLINE, onLineMode)) {
                    reticlePodPortInfo.setPortStatus(reservePort.getPortState());
                } else {
                    reticlePodPortInfo.setPortStatus(BizConstant.SP_PORTRSC_PORTSTATE_UNKNOWN);
                }
                if (!CimDateUtils.checkNull(reservePort.getStateChangeTime())) {
                    reticlePodPortInfo.setPortStatusChangeTimestamp(
                            reservePort.getStateChangeTime().toString());
                }
                reticlePodPortInfo.setLoadedReticlePodID(
                        new ObjectIdentifier(reservePort.getReticlePodID(), reservePort.getReticlePodObj()));
                reticlePodPortInfo.setReservedReticlePodID(
                        new ObjectIdentifier(
                                reservePort.getTransferReserveReticlPodID(),
                                reservePort.getTransferReserveReticlPodObj()));
                reticlePodPortInfo.setTransferReserveStatus(reservePort.getReserveState());
                reticlePodPortInfo.setDispatchStatus(reservePort.getDispatchState());
                if (!CimDateUtils.checkNull(reservePort.getDispatchTime())) {
                    reticlePodPortInfo.setDispatchTimestamp(reservePort.getDispatchTime().toString());
                }
                reticlePodPortInfos.add(reticlePodPortInfo);
            }
        }
        // ----------------------------------------------------------
        //  Get reticleStoreMaxCount and reticleStoreLimitCount
        // ----------------------------------------------------------
        data.setReticlePodPortInfoList(reticlePodPortInfos);
        CimMachine machine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                machine == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        data.setReticleStoreMaxCount(machine.getMaxReticleCapacity());
        data.setReticleStoreLimitCount(machine.getReticleStoreLimit());
        return data;
    }

    @Override
    public List<Infos.MandPRecipeInfo> equipmentMachineAndPhysicalRecipeIDGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        Validations.check(ObjectIdentifier.isEmpty(equipmentID), retCodeConfig.getNotFoundEqp());

        List<Infos.MandPRecipeInfo> mandPRecipeInfoList = new ArrayList<>();

        String sql =
                "SELECT A.ID,A.RECIPE_ID, A.PHY_RECIPE_ID,A.FILE_PATH FROM OMRCP A, OMRCP_EQP B WHERE A.VERSION_ID <> ?1 AND B.EQP_ID = ?2 AND A.ID = B.REFKEY ORDER BY A.RECIPE_ID";
        //        String sql = "SELECT A.ID,A.RECIPE_ID, A.PHY_RECIPE_ID FROM OMRCP A, OMRCP_EQP B WHERE
        // A.VERSION_ID <> ?1 AND B.EQP_ID = ?2 AND A.ID = B.REFKEY ORDER BY A.RECIPE_ID";
        List<Object[]> dataList =
                cimJpaRepository.query(sql, BizConstant.SP_ACTIVE_VERSION, equipmentID.getValue());
        if (!CimObjectUtils.isEmpty(dataList)) {
            for (Object[] objects : dataList) {
                String recipeId = CimObjectUtils.isEmpty(objects[0]) ? "" : String.valueOf(objects[0]);
                String recipeID = CimObjectUtils.isEmpty(objects[1]) ? "" : String.valueOf(objects[1]);
                String physicalRecipeID =
                        CimObjectUtils.isEmpty(objects[2]) ? "" : String.valueOf(objects[2]);
                // MES qiandao-dev physicalRecipe add fileLocation start
                String fileLocation = CimObjectUtils.isEmpty(objects[3]) ? "" : String.valueOf(objects[3]);
                if (CimStringUtils.isNotEmpty(fileLocation)) {
                    physicalRecipeID = fileLocation.trim() + physicalRecipeID;
                }
                // MES qiandao-dev physicalRecipe add fileLocation start
                Infos.MandPRecipeInfo mandPRecipeInfo = new Infos.MandPRecipeInfo();
                mandPRecipeInfo.setMachineRecipeID(new ObjectIdentifier(recipeID, recipeId));
                mandPRecipeInfo.setPhysicalRecipeID(physicalRecipeID);
                mandPRecipeInfoList.add(mandPRecipeInfo);
            }
        }
        return mandPRecipeInfoList;
    }

    @Override
    public Outputs.ObjEquipmentReserveFlowBatchIDGetOut equipmentReserveFlowBatchIDGet(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        log.info("enter the method[reserveFlowBatchIDGet]");
        Outputs.ObjEquipmentReserveFlowBatchIDGetOut objEquipmentReserveFlowBatchIDGetOut =
                new Outputs.ObjEquipmentReserveFlowBatchIDGetOut();
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                aMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        List<com.fa.cim.newcore.bo.dispatch.CimFlowBatch> flowBatchSeq = aMachine.allFlowBatches();
        List<ObjectIdentifier> flowBatchIDs = new ArrayList<>();
        objEquipmentReserveFlowBatchIDGetOut.setFlowBatchIDs(flowBatchIDs);
        if (CimArrayUtils.isNotEmpty(flowBatchSeq)) {
            for (com.fa.cim.newcore.bo.dispatch.CimFlowBatch flowBatch : flowBatchSeq) {
                ObjectIdentifier flowBatchId =
                        new ObjectIdentifier(flowBatch.getIdentifier(), flowBatch.getPrimaryKey());
                flowBatchIDs.add(flowBatchId);
            }
        }
        objEquipmentReserveFlowBatchIDGetOut.setFlowBatchMaxCount(
                aMachine.getFlowBatchMaxCount() == null ? 0 : (long) aMachine.getFlowBatchMaxCount());
        log.info("exit the method[reserveFlowBatchIDGet]");
        return objEquipmentReserveFlowBatchIDGetOut;
    }

    @Override
    public void equipmentCheckInhibitForLot(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, List<ObjectIdentifier> lotIDs) {
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                aMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        if (!CimArrayUtils.isEmpty(lotIDs)) {
            for (ObjectIdentifier lotID : lotIDs) {
                if (!ObjectIdentifier.isEmptyWithValue(lotID)) {
                    CimLot aLot = baseCoreFactory.getBO(CimLot.class, lotID);
                    Validations.check(
                            aLot == null, new OmCode(retCodeConfig.getNotFoundLot(), lotID.getValue()));
                    List<CimRestriction> entityInhibitSeq =
                            entityInhibitManager.allEntityInhibitsForLot(aLot, aMachine);
                    int numOfInhibits = CimArrayUtils.getSize(entityInhibitSeq);
                    if (numOfInhibits > 0) {
                        List<Infos.EntityInhibitInfo> entityInhibitInfos = new ArrayList<>();
                        for (CimRestriction entityInhibit : entityInhibitSeq) {
                            Constrain.EntityInhibitRecord pRecord = entityInhibit.getInhibitRecord();
                            List<Constrain.EntityIdentifier> entities = pRecord.getEntities();

                            Infos.EntityInhibitInfo entityInhibitInfo = new Infos.EntityInhibitInfo();
                            entityInhibitInfos.add(entityInhibitInfo);
                            Infos.EntityInhibitAttributes entityInhibitAttributes =
                                    new Infos.EntityInhibitAttributes();
                            entityInhibitInfo.setEntityInhibitAttributes(entityInhibitAttributes);
                            List<Infos.EntityIdentifier> entitiesList = new ArrayList<>();
                            entityInhibitAttributes.setEntities(entitiesList);
                            if (!CimArrayUtils.isEmpty(entities)) {
                                for (Constrain.EntityIdentifier entity : entities) {
                                    Infos.EntityIdentifier entityIdentifier = new Infos.EntityIdentifier();
                                    entityIdentifier.setClassName(entity.getClassName());
                                    entityIdentifier.setObjectID(new ObjectIdentifier(entity.getObjectId()));
                                    entityIdentifier.setAttribution(entity.getAttrib());
                                    entitiesList.add(entityIdentifier);
                                }
                            }
                            entityInhibitInfo.setEntityInhibitID(
                                    new ObjectIdentifier(pRecord.getId(), pRecord.getReferenceKey()));
                            entityInhibitAttributes.setSubLotTypes(pRecord.getSubLotTypes());
                            entityInhibitAttributes.setStartTimeStamp(
                                    CimDateUtils.convertToSpecString(pRecord.getStartTimeStamp()));
                            entityInhibitAttributes.setEndTimeStamp(
                                    CimDateUtils.convertToSpecString(pRecord.getEndTimeStamp()));
                            entityInhibitAttributes.setClaimedTimeStamp(
                                    CimDateUtils.convertToSpecString(pRecord.getChangedTimeStamp()));
                            entityInhibitAttributes.setReasonCode(pRecord.getReasonCode().getValue());
                            entityInhibitAttributes.setOwnerID(pRecord.getOwner());
                            entityInhibitAttributes.setMemo(pRecord.getClaimMemo());
                        }
                        Inputs.ObjEntityInhibiteffectiveForLotGetDRIn inhibiteffectiveForLotGetDRIn =
                                new Inputs.ObjEntityInhibiteffectiveForLotGetDRIn();
                        inhibiteffectiveForLotGetDRIn.setStrEntityInhibitInfos(entityInhibitInfos);
                        inhibiteffectiveForLotGetDRIn.setLotID(lotID);
                        // entityInhibit_effectiveForLot_GetDR
                        List<Infos.EntityInhibitInfo> effectiveForLot =
                                constraintMethod.constraintEffectiveForLotGetDR(
                                        objCommon,
                                        inhibiteffectiveForLotGetDRIn.getStrEntityInhibitInfos(),
                                        inhibiteffectiveForLotGetDRIn.getLotID());
                        numOfInhibits = CimArrayUtils.getSize(effectiveForLot);
                        for (int j = 0; j < numOfInhibits; j++) {
                            CimRestriction pEntityInhibit =
                                    baseCoreFactory.getBO(
                                            CimRestriction.class,
                                            effectiveForLot.get(j).getEntityInhibitID().getReferenceKey());
                            entityInhibitSeq.set(j, pEntityInhibit);
                        }
                    }
                    if (numOfInhibits > 0) {
                        String inhibitList =
                                constraintMethod.makeInhibitListFromEntityInhibits(entityInhibitSeq);
                        throw new ServiceException(
                                new OmCode(retCodeConfig.getInhibitLot(), lotID.getValue(), inhibitList));
                    }
                }
            }
        }
    }

    @Override
    public void equipmentPortStateCheckForOpeCompForInternalBuffer(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            List<Infos.StartCassette> startCassetteList) {

        // Get Eqp Internal Buffer Info;
        List<Infos.EqpInternalBufferInfo> eqpInternalBufferInfoRetCode =
                equipmentInternalBufferInfoGet(objCommon, equipmentID);

        // For-Loop for strStartCassette Info;
        int SCLength = CimArrayUtils.getSize(startCassetteList);
        for (int i = 0; i < SCLength; i++) {
            Infos.StartCassette startCassette = startCassetteList.get(i);
            // Find Internal Buffer Info,Loop of Buffer Category;
            Boolean bCassetteFoundInBuffer = false;
            int nBufferCategoryLen = CimArrayUtils.getSize(eqpInternalBufferInfoRetCode);
            for (int m = 0; m < nBufferCategoryLen; m++) {
                int nShelfLen =
                        CimArrayUtils.getSize(eqpInternalBufferInfoRetCode.get(m).getShelfInBufferList());

                // Loop of cassette in Buffer
                for (int n = 0; n < nShelfLen; n++) {
                    Infos.ShelfInBuffer shelfInBuffer =
                            eqpInternalBufferInfoRetCode.get(m).getShelfInBufferList().get(n);
                    if (ObjectIdentifier.equalsWithValue(
                            startCassette.getCassetteID(), shelfInBuffer.getLoadedCarrierID())) {
                        bCassetteFoundInBuffer = true;
                        break;
                    }
                }
            }
            Validations.check(!bCassetteFoundInBuffer, retCodeConfig.getInvalidCassettePortCombination());
        }
    }

    @Override
    public void equipmentCheckConditionForOpeComp(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            List<Infos.StartCassette> startCassetteList) {
        // Check Condition for eqp : Get Machine Object;
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);

        // Get PosMachineLot Sequence (In-Processing lot);
        List<MachineDTO.MachineLot> processingLots = aMachine.allProcessingLots();

        // Check all of StartedLot is in Processing Info or Not;
        int scLength = CimArrayUtils.getSize(startCassetteList);
        for (int i = 0; i < scLength; i++) {
            Infos.StartCassette startCassette = startCassetteList.get(i);

            int licLength = CimArrayUtils.getSize(startCassette.getLotInCassetteList());
            for (int j = 0; j < licLength; j++) {
                Infos.LotInCassette lotInCassette = startCassette.getLotInCassetteList().get(j);
                // Omit Not-Started lot ;
                Boolean operationStartFlag = false;
                operationStartFlag = lotInCassette.getMoveInFlag();
                if (!operationStartFlag) {
                    continue;
                }

                // Find lot in ProcessingLot of eqp ;
                Boolean findFlag = false;
                int elLength = CimArrayUtils.getSize(processingLots);
                for (int k = 0; k < elLength; k++) {
                    String eqpLotId = ObjectIdentifier.fetchValue(processingLots.get(k).getLotID());
                    String cassetteId = lotInCassette.getLotID().getValue();
                    if (CimStringUtils.equals(eqpLotId, cassetteId)) {
                        findFlag = true;
                        break;
                    }
                }
                Validations.check(
                        !findFlag,
                        new OmCode(
                                retCodeConfig.getNotFoundLotInProcessLot(),
                                lotInCassette.getLotID().getValue(),
                                equipmentID.getValue()));
            }
        }
    }

    /**
     * description: change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param *           @param objCommon
     * @param equipmentID -
     * @return com.fa.cim.dto.RetCode<Outputs.ObjEquipmentinprocessingControlJobInfoGetout>
     * @author Lin
     * @date 2018/12/24 13:10
     */
    @Override
    public Infos.EqpInprocessingControlJobInfo equipmentInprocessingControlJobInfoGet(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        Infos.EqpInprocessingControlJobInfo EqpInprocessingControlJobInfo =
                new Infos.EqpInprocessingControlJobInfo();

        CimMachine aPosMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == aPosMachine,
                new OmCode(retCodeConfig.getNotFoundEqp(), ObjectIdentifier.fetchValue(equipmentID)));
        List<MachineDTO.MachineLot> equipmentLotList = aPosMachine.allProcessingLots();
        List<Infos.EqpInprocessingControlJob> eqpInprocessingControlJobs = new ArrayList<>();
        EqpInprocessingControlJobInfo.setStrEqpInprocessingControlJob(eqpInprocessingControlJobs);
        Infos.EqpInprocessingControlJob eqpInprocessingControlJob =
                new Infos.EqpInprocessingControlJob();
        List<Infos.EqpInprocessingLot> eqpInprocessingLots = new ArrayList<>();
        Infos.EqpInprocessingLot eqpInprocessingLot = new Infos.EqpInprocessingLot();

        int lenMachineLotSeq = CimArrayUtils.getSize(equipmentLotList);
        int controlJobCnt = 0;
        int lotCnt = 0;
        int lCnt = 0;
        for (int i = 0; i < lenMachineLotSeq; i++) {
            Boolean findCtrlJobFlag = false;
            int nFindCtrlJobNo = -1;
            int nControlJobLen = eqpInprocessingControlJobs.size();
            for (int j = 0; j < nControlJobLen; j++) {
                if (ObjectIdentifier.equalsWithValue(
                        equipmentLotList.get(i).getControlJobID(),
                        eqpInprocessingControlJobs.get(j).getControlJobID())) {
                    findCtrlJobFlag = true;
                    nFindCtrlJobNo = j;
                    break;
                }
            }
            if (findCtrlJobFlag != true) {
                nFindCtrlJobNo = nControlJobLen;
            }
            int nLotLen = 0;
            if (CimObjectUtils.isEmpty(eqpInprocessingControlJobs)
                    || CimObjectUtils.isEmpty(
                    eqpInprocessingControlJobs.get(nFindCtrlJobNo).getEqpInprocessingLotList())) {
                nLotLen = 0;
            } else {
                nLotLen =
                        CimArrayUtils.getSize(
                                eqpInprocessingControlJobs.get(nFindCtrlJobNo).getEqpInprocessingLotList());
            }
            eqpInprocessingControlJob.setControlJobID(equipmentLotList.get(i).getControlJobID());
            eqpInprocessingLot.setLotID(equipmentLotList.get(i).getLotID());
            eqpInprocessingLot.setUnloadPortID(equipmentLotList.get(i).getUnloadPortID());
            eqpInprocessingLot.setCassetteID(equipmentLotList.get(i).getUnloadCassetteID());
            eqpInprocessingLot.setUnloadSequenceNumber(equipmentLotList.get(i).getUnloadSequenceNumber());
            eqpInprocessingLot.setEdcRequiredFlag(
                    equipmentLotList.get(i).getDataCollectionRequiredFlag());
            eqpInprocessingLots.add(eqpInprocessingLot);
            eqpInprocessingControlJob.setEqpInprocessingLotList(eqpInprocessingLots);
            eqpInprocessingControlJobs.add(eqpInprocessingControlJob);

            CimLot aLot =
                    baseCoreFactory.getBO(
                            CimLot.class,
                            eqpInprocessingControlJobs
                                    .get(nFindCtrlJobNo)
                                    .getEqpInprocessingLotList()
                                    .get(nLotLen)
                                    .getLotID());
            eqpInprocessingLot.setHoldState(aLot.getLotHoldState());
            eqpInprocessingLots.add(eqpInprocessingLot);
            eqpInprocessingControlJob.setEqpInprocessingLotList(eqpInprocessingLots);
            eqpInprocessingControlJobs.add(eqpInprocessingControlJob);

            if (ObjectIdentifier.isEmpty(
                    eqpInprocessingControlJobs
                            .get(nFindCtrlJobNo)
                            .getEqpInprocessingLotList()
                            .get(nLotLen)
                            .getUnloadPortID())) {
                ObjectIdentifier dummyOI = new ObjectIdentifier();
                eqpInprocessingLot.setUnloadPortID(dummyOI);
                eqpInprocessingLots.add(eqpInprocessingLot);
                eqpInprocessingControlJob.setEqpInprocessingLotList(eqpInprocessingLots);
                eqpInprocessingControlJobs.add(eqpInprocessingControlJob);
            } else {
                PortResource aPort =
                        aPosMachine.findPortResourceNamed(
                                ObjectIdentifier.fetchValue(equipmentLotList.get(i).getUnloadPortID()));
                CimPortResource aPosPort = (CimPortResource) aPort;
                Validations.check(null == aPosPort, retCodeConfig.getNotFoundPort());

                CimPortResource aPosAssociatedPort = aPosPort.getAssociatedPort();
                if (null != aPosAssociatedPort) {
                    ObjectIdentifier loadPortID = new ObjectIdentifier();
                    loadPortID.setValue(aPosAssociatedPort.getIdentifier());
                    eqpInprocessingLot.setLoadPortID(loadPortID);
                    eqpInprocessingLots.add(eqpInprocessingLot);
                    eqpInprocessingControlJob.setEqpInprocessingLotList(eqpInprocessingLots);
                    eqpInprocessingControlJobs.add(eqpInprocessingControlJob);
                }
            }
        }
        return EqpInprocessingControlJobInfo;
    }

    @Override
    public void equipmentFlowBatchMaxCountChange(
            Infos.ObjCommon objCommon,
            Inputs.ObjEquipmentFlowBatchMaxCountChangeIn objEquipmentFlowBatchMaxCountChangeIn) {
        log.info("equipmentFlowBatchMaxCountChange... ");
        ObjectIdentifier equipmentID = objEquipmentFlowBatchMaxCountChangeIn.getEquipmentID();
        Integer inputMaxCount = objEquipmentFlowBatchMaxCountChangeIn.getFlowBatchMaxCount();
        log.info("equipmentFlowBatchMaxCountChange... {} {}", equipmentID, inputMaxCount);
        // -----------------------------//
        //  Check Requested Max Count  //
        // -----------------------------//
        Validations.check(
                inputMaxCount < BizConstant.SP_FLOWBATCH_LOWERLIMIT
                        || inputMaxCount > BizConstant.SP_FLOWBATCH_UPPERLIMIT,
                retCodeConfig.getFlowBatchMaxCountTypeError());

        // ------------------------//
        //  Get Current Max Count //
        // ------------------------//
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                aMachine == null, new OmCode(retCodeConfig.getNotFoundMachine(), equipmentID.getValue()));
        Integer currentMaxCount = CimNumberUtils.intValue(aMachine.getFlowBatchMaxCount());
        Validations.check(
                inputMaxCount.equals(currentMaxCount), retCodeConfig.getFlowBatchMaxCountIsSame());

        // ------------------------------//
        //   Get Reserved FlowBatches   //
        // ------------------------------//
        List<com.fa.cim.newcore.bo.dispatch.CimFlowBatch> flowBatchList = aMachine.allFlowBatches();
        int reservedFlowBatchCount = CimArrayUtils.getSize(flowBatchList);
        if (0 != reservedFlowBatchCount) {
            Validations.check(
                    0 == currentMaxCount * inputMaxCount,
                    new OmCode(retCodeConfig.getEqpReservedForSomeFlowBatch(), equipmentID.getValue()));
        }
        // ---------------------------------//
        //  Change FlowBatchMaxCount       //
        // ---------------------------------//
        aMachine.setFlowBatchMaxCount(inputMaxCount);
        log.info("exit equipmentFlowBatchMaxCountChange... ");
    }

    @Override
    public void equipmentCheckConditionForFlowBatch(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            ObjectIdentifier flowBatchID,
            String operation) {
        // step1 - flowBatch_reserveEquipmentID_Get
        try {
            flowBatchMethod.flowBatchReserveEquipmentIDGet(objCommon, flowBatchID);
        } catch (ServiceException e) {
            ObjectIdentifier reserveEquipmentID = (ObjectIdentifier) e.getData();
            if (Validations.isEquals(retCodeConfig.getFlowBatchReservedEqpIdFilled(), e.getCode())) {
                if (CimStringUtils.equals(BizConstant.SP_OPERATION_FLOWBATCH_EQPRESERVECANCEL, operation)) {
                    Validations.check(
                            !ObjectIdentifier.equalsWithValue(reserveEquipmentID, equipmentID),
                            new OmCode(
                                    retCodeConfig.getFlowBatchReservedEqpIdNotSame(), reserveEquipmentID.getValue()));
                } else if (CimStringUtils.equals(BizConstant.SP_OPERATION_FLOWBATCH_LOTREMOVE, operation)) {
                    // step2 - object_lockMode_Get
                    Inputs.ObjLockModeIn objLockModeIn = new Inputs.ObjLockModeIn();
                    objLockModeIn.setObjectID(reserveEquipmentID);
                    objLockModeIn.setClassName(BizConstant.SP_CLASSNAME_POSMACHINE);
                    objLockModeIn.setFunctionCategory(objCommon.getTransactionID());
                    objLockModeIn.setUserDataUpdateFlag(false);
                    Outputs.ObjLockModeOut objLockModeOut =
                            objectMethod.objectLockModeGet(objCommon, objLockModeIn);
                    // step3 - object_Lock
                    if (objLockModeOut.getLockMode().equals(BizConstant.SP_EQP_LOCK_MODE_WRITE)) {
                        objectLockMethod.objectLock(objCommon, CimMachine.class, equipmentID);
                    }
                } else if (CimStringUtils.equals(
                        BizConstant.SP_OPERATION_FLOWBATCH_EQPRESERVE, operation)) {
                    throw new ServiceException(
                            new OmCode(
                                    retCodeConfig.getFlowBatchReservedForOtherEqp(), reserveEquipmentID.getValue()));
                }
            } else if (Validations.isEquals(
                    retCodeConfig.getFlowBatchReservedEqpIdBlank(), e.getCode())) {
                if (!CimStringUtils.equals(BizConstant.SP_OPERATION_FLOWBATCH_EQPRESERVE, operation)
                        && !CimStringUtils.equals(BizConstant.SP_OPERATION_FLOWBATCH_LOTREMOVE, operation)) {
                    throw new ServiceException(
                            new OmCode(retCodeConfig.getFlowBatchNotReservedForEqp(), flowBatchID.getValue()));
                }
            } else {
                throw e;
            }
        }

        if (!CimStringUtils.equals(BizConstant.SP_OPERATION_FLOWBATCH_LOTREMOVE, operation)) {

            // step4 - equipment_reserveFlowBatchID_Get__090
            Outputs.ObjEquipmentReserveFlowBatchIDGetOut objEquipmentReserveFlowBatchIDGetOut =
                    this.equipmentReserveFlowBatchIDGet(objCommon, equipmentID);

            long reservedFBLen = objEquipmentReserveFlowBatchIDGetOut.getFlowBatchIDs().size();
            long maxFBCount = objEquipmentReserveFlowBatchIDGetOut.getFlowBatchMaxCount();
            if (CimStringUtils.equals(BizConstant.SP_OPERATION_FLOWBATCH_EQPRESERVECANCEL, operation)) {
                if (reservedFBLen == 0) {
                    Validations.check(true, retCodeConfig.getEquipmentNotReservedForFlowBatch());
                } else if (reservedFBLen > 0) {
                    boolean bFlowBatchFound = false;
                    for (int m = 0; m < reservedFBLen; m++) {
                        if (CimStringUtils.equals(
                                objEquipmentReserveFlowBatchIDGetOut.getFlowBatchIDs().get(m).getValue(),
                                flowBatchID.getValue())) {
                            bFlowBatchFound = true;
                            break;
                        }
                    }
                    Validations.check(
                            CimBooleanUtils.isFalse(bFlowBatchFound),
                            retCodeConfig.getEquipmentReservedFlowBatchIdNotSame());
                }
            } else if (CimStringUtils.equals(BizConstant.SP_OPERATION_FLOWBATCH_EQPRESERVE, operation)) {
                if (reservedFBLen == 0) {
                    // OK
                } else if (reservedFBLen >= maxFBCount) {
                    Validations.check(true, retCodeConfig.getEquipmentReservedForOtherFlowBatch());
                }
            }
        }
    }

    @Override
    public void equipmentCheckConditionForLoadingForInternalBuffer(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            ObjectIdentifier portID,
            ObjectIdentifier cassetteID,
            String loadPurposeType) {
        /*------------------------------*/
        /*   Judge NPW Loading or Not   */
        /*------------------------------*/
        Boolean npwflag = false;
        if (CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_SIDEDUMMYLOT)
                || CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_FILLERDUMMY)
                || CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_WAITINGMONITORLOT)
                || CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_OTHER)) {
            npwflag = true;
        }
        Infos.EqpPortInfo objEquipmentPortInfoGetDROut =
                this.equipmentPortInfoForInternalBufferGetDR(objCommon, equipmentID);

        int lenPortInfo = CimArrayUtils.getSize(objEquipmentPortInfoGetDROut.getEqpPortStatuses());
        List<Infos.EqpPortStatus> eqpPortStatuses = objEquipmentPortInfoGetDROut.getEqpPortStatuses();
        /*------------------------------*/
        /*   Find In-parm Port's Info   */
        /*------------------------------*/
        int saveSeqNo = 0;
        for (int i = 0; i < lenPortInfo; i++) {
            if (ObjectIdentifier.equalsWithValue(portID, eqpPortStatuses.get(i).getPortID())) {
                saveSeqNo = i;
                break;
            }
        }
        /*--------------------------------------*/
        /*   Get InternalBuffer Infomation.     */
        /*--------------------------------------*/
        List<Infos.EqpInternalBufferInfo> equipmentInternalBufferInfoGet =
                this.equipmentInternalBufferInfoGet(objCommon, equipmentID);
        /*----------------------------------------*/
        /*   Check for ControlJob Point of View   */
        /*----------------------------------------*/

        /*---------------------------------*/
        /*   Get Cassette's ControlJobID   */
        /*---------------------------------*/
        CimCassette aCassette = baseCoreFactory.getBO(CimCassette.class, cassetteID);
        Validations.check(
                null == aCassette,
                new OmCode(retCodeConfig.getNotFoundCassette(), ObjectIdentifier.fetchValue(cassetteID)));

        Boolean foundTarget = false;
        Boolean bRcCastResvedForAnotherEQP = false;
        com.fa.cim.newcore.bo.product.CimControlJob aCassetteControlJob = aCassette.getControlJob();
        if (null == aCassetteControlJob) {
            if (npwflag) {

            } else {
                Validations.check(
                        CimStringUtils.equals(
                                BizConstant.SP_EQP_ACCESSMODE_AUTO,
                                objEquipmentPortInfoGetDROut.getEqpPortStatuses().get(saveSeqNo).getAccessMode()),
                        retCodeConfig.getCastControlJobIdBlank());
            }
            List<Infos.EqpInternalBufferInfo> tempInternalBufferInfo = equipmentInternalBufferInfoGet;
            int bLen = CimArrayUtils.getSize(tempInternalBufferInfo);
            for (int i = 0; i < bLen; i++) {
                /***** Serch category **********/
                if (CimStringUtils.equals(
                        loadPurposeType, tempInternalBufferInfo.get(i).getBufferCategory())) {
                    int sLen = CimArrayUtils.getSize(tempInternalBufferInfo.get(i).getShelfInBufferList());
                    if (npwflag) {
                        // ===== Try to find reserved carrier is existing or not =====//
                        for (int j = 0; j < sLen; j++) {
                            if (ObjectIdentifier.equalsWithValue(
                                    cassetteID,
                                    tempInternalBufferInfo
                                            .get(i)
                                            .getShelfInBufferList()
                                            .get(j)
                                            .getReservedCarrierID())) {
                                foundTarget = true;
                                break;
                            }
                        }
                        if (!foundTarget) {
                            // ===== get Cassette's NPWLoadPurposeType =====//
                            String nonProductionWaferLoadPurposeType = aCassette.getNPWLoadPurposeType();
                            if (null != nonProductionWaferLoadPurposeType) {
                                bRcCastResvedForAnotherEQP = true;
                            } else {
                                // ===== Not reserved carrier. Try to Re-search Free shelf =====//
                                if (CimArrayUtils.isEmpty(tempInternalBufferInfo.get(i).getShelfInBufferList())) {
                                    foundTarget = true;
                                    break;
                                }

                                for (int j = 0; j < sLen; j++) {
                                    if (null
                                            == tempInternalBufferInfo
                                            .get(i)
                                            .getShelfInBufferList()
                                            .get(j)
                                            .getControlJobID()
                                            && null
                                            == tempInternalBufferInfo
                                            .get(i)
                                            .getShelfInBufferList()
                                            .get(j)
                                            .getLoadedCarrierID()
                                            && null
                                            == tempInternalBufferInfo
                                            .get(i)
                                            .getShelfInBufferList()
                                            .get(j)
                                            .getReservedCarrierID()
                                            && null
                                            == tempInternalBufferInfo
                                            .get(i)
                                            .getShelfInBufferList()
                                            .get(j)
                                            .getReservedLoadPortID()) {
                                        foundTarget = true;
                                        break;
                                    }
                                }
                            }
                        }
                    } else {
                        if (CimArrayUtils.isEmpty(tempInternalBufferInfo.get(i).getShelfInBufferList())) {
                            foundTarget = true;
                            break;
                        }

                        for (int j = 0; j < sLen; j++) {
                            if (null
                                    == tempInternalBufferInfo
                                    .get(i)
                                    .getShelfInBufferList()
                                    .get(j)
                                    .getControlJobID()
                                    && null
                                    == tempInternalBufferInfo
                                    .get(i)
                                    .getShelfInBufferList()
                                    .get(j)
                                    .getLoadedCarrierID()
                                    && null
                                    == tempInternalBufferInfo
                                    .get(i)
                                    .getShelfInBufferList()
                                    .get(j)
                                    .getReservedCarrierID()
                                    && null
                                    == tempInternalBufferInfo
                                    .get(i)
                                    .getShelfInBufferList()
                                    .get(j)
                                    .getReservedLoadPortID()) {
                                foundTarget = true;
                                break;
                            }
                        }
                    }
                    if (foundTarget) {
                        break;
                    }
                }
            }

        } else {
            // -------------------------------//
            //   If NPW loading, ERROR !!!   //
            // -------------------------------//
            Validations.check(npwflag, retCodeConfig.getCassetteControlJobFilled());
            /*----------------------------------*/
            /*   Check loadPortID of ControlJob */
            /*----------------------------------*/
            List<ProductDTO.PosStartCassetteInfo> startCassettes =
                    aCassetteControlJob.getStartCassetteInfo();
            Boolean findFlag = false;
            int lenCassette = CimArrayUtils.getSize(startCassettes);
            String targetPortID = "";
      /*
      BUG-784 modified logical jugement [edit by Zack]
       */
            for (int i = 0; i < lenCassette; i++) {
                if (ObjectIdentifier.equalsWithValue(cassetteID, startCassettes.get(i).getCassetteID())) {
                    targetPortID = startCassettes.get(i).getLoadPortID().getValue();
                    if (ObjectIdentifier.equalsWithValue(portID, startCassettes.get(i).getLoadPortID())) {
                        findFlag = true;
                        break;
                    }
                }
            }
            Validations.check(
                    !findFlag,
                    new OmCode(
                            retCodeConfig.getInvalidLoadingPort(),
                            portID.getValue(),
                            cassetteID.getValue(),
                            targetPortID));

            /*----------------------------------*/
            /*   Check Equipment's ControlJobID */
            /*----------------------------------*/
            CimMachine aReserveMachine = aCassetteControlJob.getMachine();
            Validations.check(
                    null == aReserveMachine, new OmCode(retCodeConfig.getNotFoundEquipment(), "*****"));

            Validations.check(
                    !ObjectIdentifier.equalsWithValue(aReserveMachine.getIdentifier(), equipmentID),
                    new OmCode(retCodeConfig.getCastResvedForAnotherEqp(), aReserveMachine.getIdentifier()));

            ObjectIdentifier cCtrlJobID = aCassetteControlJob.getControlJobID();
            List<Infos.StartReservedControlJobInfo> startReservedControlJobInfos =
                    this.equipmentReservedControlJobIDGetDR(objCommon, equipmentID);
            int lenStartResvCtrlJob = CimArrayUtils.getSize(startReservedControlJobInfos);
            ObjectIdentifier rCtrlJobID;
            Boolean foundControlJob = false;
            for (int i = 0; i < lenStartResvCtrlJob; i++) {
                rCtrlJobID = startReservedControlJobInfos.get(i).getControlJobID();
                if (!ObjectIdentifier.isEmpty(rCtrlJobID)) {
                    if (ObjectIdentifier.equalsWithValue(cCtrlJobID, rCtrlJobID)) {
                        foundControlJob = true;
                        break;
                    }
                }
            }
            Validations.check(!foundControlJob, retCodeConfig.getControlJobEqpUnmatch());

            List<Infos.EqpInternalBufferInfo> tempInternalBufferInfo = equipmentInternalBufferInfoGet;
            int buffLen = CimArrayUtils.getSize(tempInternalBufferInfo);
            for (int i = 0; i < buffLen; i++) {
                if (loadPurposeType.equals(tempInternalBufferInfo.get(i).getBufferCategory())) {
                    int shLen = CimArrayUtils.getSize(tempInternalBufferInfo.get(i).getShelfInBufferList());
                    for (int j = 0; j < shLen; j++) {
                        if (ObjectIdentifier.equalsWithValue(
                                cCtrlJobID,
                                tempInternalBufferInfo.get(i).getShelfInBufferList().get(j).getControlJobID())
                                && ObjectIdentifier.equalsWithValue(
                                cassetteID,
                                tempInternalBufferInfo
                                        .get(i)
                                        .getShelfInBufferList()
                                        .get(j)
                                        .getReservedCarrierID())
                                && ObjectIdentifier.equalsWithValue(
                                portID,
                                tempInternalBufferInfo
                                        .get(i)
                                        .getShelfInBufferList()
                                        .get(j)
                                        .getReservedLoadPortID())) {
                            foundTarget = true;
                            break;
                        }
                    }
                    if (foundTarget) {
                        break;
                    }
                }
            }
        }
        if (!foundTarget) {
            if (bRcCastResvedForAnotherEQP) {
                Validations.check(
                        true,
                        new OmCode(
                                retCodeConfig.getLoadNotMatchNpwRsv(),
                                ObjectIdentifier.fetchValue(portID),
                                loadPurposeType,
                                ObjectIdentifier.fetchValue(cassetteID)));
            } else {
                Validations.check(true, retCodeConfig.getMaterialLocationNotFound());
            }
        }
        /*------------------------------------*/
        /*   Check Condition for Port Usage   */
        /*------------------------------------*/
        if (CimStringUtils.equals(
                objEquipmentPortInfoGetDROut.getEqpPortStatuses().get(saveSeqNo).getPortUsage(),
                CIMStateConst.CIM_PORT_RESOURCE_INPUT)
                || CimStringUtils.equals(
                objEquipmentPortInfoGetDROut.getEqpPortStatuses().get(saveSeqNo).getPortUsage(),
                CIMStateConst.CIM_PORT_RESOURCE_INPUTOUTPUT)) {
        } else {
            Validations.check(
                    true,
                    new OmCode(retCodeConfig.getInvalidPortUsage(), ObjectIdentifier.fetchValue(portID)));
        }
        /*-------------------------------------------*/
        /*   Check Condition for Load Purpose Type   */
        /*-------------------------------------------*/
        Validations.check(
                !CimStringUtils.equals(
                        objEquipmentPortInfoGetDROut
                                .getEqpPortStatuses()
                                .get(saveSeqNo)
                                .getLoadPurposeType(),
                        BizConstant.SP_LOADPURPOSETYPE_INTERNALBUFFER)
                        && !CimStringUtils.equals(
                        objEquipmentPortInfoGetDROut
                                .getEqpPortStatuses()
                                .get(saveSeqNo)
                                .getLoadPurposeType(),
                        BizConstant.SP_LOADPURPOSETYPE_OTHER),
                new OmCode(
                        retCodeConfig.getNotSameLoadPurpose(),
                        ObjectIdentifier.fetchValue(cassetteID),
                        loadPurposeType,
                        ObjectIdentifier.fetchValue(portID)));

        /*---------------------------------------------------*/
        /*   Additional Check for ControlJob-Cassette case   */
        /*---------------------------------------------------*/
        if (null != aCassetteControlJob) {
            /*------------------------------------------*/
            /*   Get All Cassette / Lot in ControlJob   */
            /*------------------------------------------*/
            List<ProductDTO.PosStartCassetteInfo> startCassetteInfoSeq =
                    aCassetteControlJob.getStartCassetteInfo();

            /*-----------------------------------------------*/
            /*   Find Cassette and Compare LoadPurposeType   */
            /*-----------------------------------------------*/
            int scLen = CimArrayUtils.getSize(startCassetteInfoSeq);
            for (int i = 0; i < scLen; i++) {
                if (ObjectIdentifier.equalsWithValue(
                        cassetteID, startCassetteInfoSeq.get(i).getCassetteID())) {
                    Validations.check(
                            !CimStringUtils.equals(
                                    loadPurposeType, startCassetteInfoSeq.get(i).getLoadPurposeType()),
                            new OmCode(
                                    retCodeConfig.getNotSameLoadPurpose(),
                                    ObjectIdentifier.fetchValue(cassetteID),
                                    loadPurposeType,
                                    ObjectIdentifier.fetchValue(portID)));
                }
            }
        }
        /*---------------------------------------------------*/
        /*   Additional Check for ControlUse Cassette case   */
        /*---------------------------------------------------*/
        if (npwflag) {
            // ----------------------------------------//
            //   Get eqp's controlBnak information    //
            // ----------------------------------------//
            Outputs.ObjEquipmentBankIDGetOut strEquipmentBankIDGetOut =
                    this.equipmentBankIDGet(objCommon, equipmentID);

            /*--------------------------------*/
            /*   Get All of Lot in Cassette   */
            /*--------------------------------*/
            List<Lot> lotSeq = aCassette.allLots();
            int lotLen = CimArrayUtils.getSize(lotSeq);
            /*--------------------------------*/
            /*   Get Eqp's Bank Information   */
            /*--------------------------------*/
            String fillerDummyBankIdentifier = null;
            String sideDummyBankIdentifier = null;
            String monitorBankIdentifier = null;
            CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
            Validations.check(
                    null == aMachine,
                    new OmCode(
                            retCodeConfig.getNotFoundEquipment(), ObjectIdentifier.fetchValue(equipmentID)));

            List<MachineDTO.ControlLotBank> controlLotBankSeq = aMachine.allControlLotBanks();
            int cbLen = CimArrayUtils.getSize(controlLotBankSeq);
            Validations.check(0 == cbLen, new OmCode(retCodeConfig.getNotFoundBank(), "*****"));

            /*--------------------------------*/
            /*   Get Each BankID              */
            /*--------------------------------*/
            for (int i = 0; i < cbLen; i++) {
                if (CimStringUtils.equals(
                        controlLotBankSeq.get(i).getControlLotType(),
                        BizConstant.SP_LOADPURPOSETYPE_FILLERDUMMY)
                        && ObjectIdentifier.isNotEmptyWithValue(controlLotBankSeq.get(i).getBankID())) {
                    fillerDummyBankIdentifier = controlLotBankSeq.get(i).getBankID().getValue();
                }
                if (CimStringUtils.equals(
                        controlLotBankSeq.get(i).getControlLotType(),
                        BizConstant.SP_LOADPURPOSETYPE_SIDEDUMMYLOT)
                        && ObjectIdentifier.isNotEmptyWithValue(controlLotBankSeq.get(i).getBankID())) {
                    sideDummyBankIdentifier = controlLotBankSeq.get(i).getBankID().getValue();
                }
                if (CimStringUtils.equals(
                        controlLotBankSeq.get(i).getControlLotType(),
                        BizConstant.SP_LOADPURPOSETYPE_WAITINGMONITORLOT)
                        && ObjectIdentifier.isNotEmptyWithValue(controlLotBankSeq.get(i).getBankID())) {
                    monitorBankIdentifier = controlLotBankSeq.get(i).getBankID().getValue();
                }
            }
            /*-------------------------------------*/
            /*   Loop for All of Lot in Cassette   */
            /*-------------------------------------*/
            for (int i = 0; i < lotLen; i++) {
                CimLot aLot = (CimLot) lotSeq.get(i);
                Validations.check(null == aLot, new OmCode(retCodeConfig.getNotFoundLot(), "*****"));

                /*---------------------------------*/
                /*   Get Lot Related Information   */
                /*---------------------------------*/
                String lotBankIdentifier;
                String lotIdentifier = aLot.getIdentifier();
                ;
                String holdState = aLot.getLotHoldState();
                String inventoryState = aLot.getLotInventoryState();
                String finishedState = aLot.getLotFinishedState();
                com.fa.cim.newcore.bo.factory.CimBank aLotBank = aLot.getBank();
                Validations.check(
                        null == aLotBank, new OmCode(retCodeConfig.getNotFoundBank(), lotIdentifier));

                lotBankIdentifier = aLotBank.getIdentifier();
                /*--------------------------------*/
                /*   Check Condition for Common   */
                /*--------------------------------*/
                Validations.check(
                        !CimStringUtils.equals(holdState, CIMStateConst.CIM_LOT_HOLD_STATE_NOTONHOLD),
                        new OmCode(retCodeConfig.getInvalidLotHoldStat(), lotIdentifier, holdState));
                Validations.check(
                        !CimStringUtils.equals(inventoryState, CIMStateConst.CIM_LOT_INVENTORY_STATE_INBANK),
                        retCodeConfig.getInvalidLotInventoryStat(),
                        lotIdentifier,
                        inventoryState);
                Validations.check(
                        !CimStringUtils.equals(finishedState, CIMStateConst.CIM_LOT_FINISHED_STATE_COMPLETED),
                        new OmCode(retCodeConfig.getInvalidLotFinishStat(), finishedState));

                /*-------------------------------------------------*/
                /*   Check Condition for FillerDummy               */
                /*-------------------------------------------------*/
                if (CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_FILLERDUMMY)) {
                    Validations.check(
                            !lotBankIdentifier.equals(fillerDummyBankIdentifier),
                            new OmCode(
                                    retCodeConfig.getLotBankDifferent(),
                                    lotBankIdentifier,
                                    fillerDummyBankIdentifier));
                }
                /*-------------------------------------------------*/
                /*   Check Condition for SideDummy                 */
                /*-------------------------------------------------*/
                if (CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_SIDEDUMMYLOT)) {
                    Validations.check(
                            !lotBankIdentifier.equals(sideDummyBankIdentifier),
                            new OmCode(
                                    retCodeConfig.getLotBankDifferent(), lotBankIdentifier, sideDummyBankIdentifier));
                }
                /*-------------------------------------------------*/
                /*     Check Condition for WaitingMonitor          */
                /*-------------------------------------------------*/
                if (CimStringUtils.equals(
                        loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_WAITINGMONITORLOT)) {
                    Validations.check(
                            !lotBankIdentifier.equals(monitorBankIdentifier),
                            new OmCode(
                                    retCodeConfig.getLotBankDifferent(), lotBankIdentifier, monitorBankIdentifier));
                }
            }
        }
        /*--------------------------------------*/
        /*                                      */
        /*   Check Condition for Port Status    */
        /*                                      */
        /*--------------------------------------*/
        if (!CimStringUtils.equals(
                objEquipmentPortInfoGetDROut.getEqpPortStatuses().get(saveSeqNo).getOnlineMode(),
                BizConstant.SP_EQP_ONLINEMODE_OFFLINE)) {
            String portState =
                    objEquipmentPortInfoGetDROut.getEqpPortStatuses().get(saveSeqNo).getPortState();
            Validations.check(
                    !CimStringUtils.equals(portState, BizConstant.SP_PORTRSC_PORTSTATE_LOADCOMP),
                    new OmCode(
                            retCodeConfig.getInvalidPortState(),
                            ObjectIdentifier.fetchValue(portID),
                            portState));

            Validations.check(
                    !ObjectIdentifier.isEmptyWithValue(
                            objEquipmentPortInfoGetDROut
                                    .getEqpPortStatuses()
                                    .get(saveSeqNo)
                                    .getLoadedCassetteID()),
                    retCodeConfig.getPortHasLoadedCassette());
        }
        if (npwflag) {
            // ----------------------------------------
            //   Check for NPW Reserve information
            // ----------------------------------------
            // equipment_NPWReserveInfo_GetDR
            List<Outputs.NPWReserveInfo> npwReserveInfoList =
                    this.equipmentNPWReserveInfoGetDR(objCommon, equipmentID);
            for (int i = 0; i < CimArrayUtils.getSize(npwReserveInfoList); i++) {
                if (ObjectIdentifier.equalsWithValue(cassetteID, npwReserveInfoList.get(i).getCassetteID())) {
                    log.info("Found NPW Reserved cassetteID. {}", ObjectIdentifier.fetchValue(cassetteID));
                    if (!ObjectIdentifier.equalsWithValue(
                            portID, npwReserveInfoList.get(i).getReservedLoadPortID())
                            || !CimStringUtils.equals(
                            loadPurposeType, npwReserveInfoList.get(i).getLoadPurposeType())) {
                        Validations.check(
                                true, retCodeConfig.getLoadNotMatchNpwRsv(), portID, loadPurposeType, cassetteID);
                    }
                    break;
                }
            }
        }
        /*----------------------*/
        /*   Return to Caller   */
        /*----------------------*/
    }

    @Override
    public List<Infos.EqpMonitorWaferUsedCount> eqpMonitorWaferUsedCountUpdate(
            Infos.ObjCommon objCommon,
            Inputs.ObjEqpMonitorWaferUsedCountUpdateIn objEqpMonitorWaferUsedCountUpdateIn) {
        List<Infos.EqpMonitorWaferUsedCount> eqpMonitorWaferUsedCounts = new ArrayList<>();
        // ----------------------//
        // Update EqpMonUsedCount//
        // ----------------------//
        String action = objEqpMonitorWaferUsedCountUpdateIn.getAction();
        if (CimStringUtils.equals(action, BizConstant.SP_EQPMONUSEDCNT_ACTION_UPDATE)) {
            // ----------------------
            // Update: Update EqpMonUsedCount based on strEqpMonitorWaferUsedCountSeq
            // ----------------------
            List<Infos.EqpMonitorWaferUsedCount> strEqpMonitorWaferUsedCountSeq =
                    objEqpMonitorWaferUsedCountUpdateIn.getStrEqpMonitorWaferUsedCountSeq();
            for (Infos.EqpMonitorWaferUsedCount eqpMonitorWaferUsedCount :
                    strEqpMonitorWaferUsedCountSeq) {
                log.info("set eqpMonitorUsedCount for each wafer");
                CimWafer aPosWafer =
                        baseCoreFactory.getBO(CimWafer.class, eqpMonitorWaferUsedCount.getWaferID());
                Validations.check(CimObjectUtils.isEmpty(aPosWafer), retCodeConfig.getNotFoundWafer());
                aPosWafer.setEqpMonitorUsedCount(eqpMonitorWaferUsedCount.getEqpMonitorUsedCount());
            }
        } else if (CimStringUtils.equals(
                action, BizConstant.SP_EQPMONUSEDCNT_ACTION_INCREMENT)) {
            // ----------------------
            // Increment: Increment EqpMonUsedCount for lot's all wafer
            // ----------------------
            log.info("strEqpMonitorWaferUsedCountAction is Increment");
            CimLot aLot =
                    baseCoreFactory.getBO(CimLot.class, objEqpMonitorWaferUsedCountUpdateIn.getLotID());
            Validations.check(CimObjectUtils.isEmpty(aLot), retCodeConfig.getNotFoundLot());
            // ------------------------------------------------------
            // Get all wafer information of  Lot
            // ------------------------------------------------------
            List<ProductDTO.WaferInfo> lotWaferInfo = aLot.getAllWaferInfo();
            Validations.check(
                    CimObjectUtils.isEmpty(lotWaferInfo), retCodeConfigEx.getNotFoundWaferInLot());
            for (ProductDTO.WaferInfo waferInfo : lotWaferInfo) {
                log.info("Increment eqpMonitorUsedCount for each wafer");
                CimWafer aPosWafer = baseCoreFactory.getBO(CimWafer.class, waferInfo.getWaferID());
                Validations.check(CimObjectUtils.isEmpty(aPosWafer), retCodeConfig.getNotFoundWafer());
                long nOrgEqpMonitorUsedCount =
                        CimNumberUtils.intValue(aPosWafer.getEquipmentMonitorUsedCount());
                aPosWafer.increaseEqpMonitorUsedCount();
                Infos.EqpMonitorWaferUsedCount eqpMonitorWaferUsedCount =
                        new Infos.EqpMonitorWaferUsedCount();
                eqpMonitorWaferUsedCount.setWaferID(waferInfo.getWaferID());
                eqpMonitorWaferUsedCount.setEqpMonitorUsedCount(nOrgEqpMonitorUsedCount + 1);
                eqpMonitorWaferUsedCounts.add(eqpMonitorWaferUsedCount);
            }
        } else if (CimStringUtils.equals(action, BizConstant.SP_EQPMONUSEDCNT_ACTION_RESET)) {
            // ----------------------
            // Reset: Reset EqpMonUsedCount with 0 for lot's all wafer
            // ----------------------
            log.info("strEqpMonitorWaferUsedCountAction is Reset");
            CimLot aLot =
                    baseCoreFactory.getBO(CimLot.class, objEqpMonitorWaferUsedCountUpdateIn.getLotID());
            Validations.check(CimObjectUtils.isEmpty(aLot), retCodeConfig.getNotFoundLot());
            // ------------------------------------------------------
            // Get all wafer information of  Lot
            // ------------------------------------------------------
            List<ProductDTO.WaferInfo> lotWaferInfo = aLot.getAllWaferInfo();
            Validations.check(
                    CimObjectUtils.isEmpty(lotWaferInfo), retCodeConfigEx.getNotFoundWaferInLot());
            for (ProductDTO.WaferInfo waferInfo : lotWaferInfo) {
                log.info("Increment eqpMonitorUsedCount for each wafer");
                CimWafer aPosWafer = baseCoreFactory.getBO(CimWafer.class, waferInfo.getWaferID());
                Validations.check(CimObjectUtils.isEmpty(aPosWafer), retCodeConfig.getNotFoundWafer());
                aPosWafer.setEqpMonitorUsedCount(0L);
                Infos.EqpMonitorWaferUsedCount eqpMonitorWaferUsedCount =
                        new Infos.EqpMonitorWaferUsedCount();
                eqpMonitorWaferUsedCount.setWaferID(waferInfo.getWaferID());
                eqpMonitorWaferUsedCount.setEqpMonitorUsedCount(0L);
                eqpMonitorWaferUsedCounts.add(eqpMonitorWaferUsedCount);
            }
        } else {
            Validations.check(
                    true, retCodeConfig.getInvalidParameterWithMsg(), "Specified action is invalid");
        }
        if (CimStringUtils.equals(action, BizConstant.SP_EQPMONUSEDCNT_ACTION_UPDATE)) {
            log.info("Action is UPDATE, strEqpMonitorWaferUsedCountSeq is same as input.");
            eqpMonitorWaferUsedCounts =
                    objEqpMonitorWaferUsedCountUpdateIn.getStrEqpMonitorWaferUsedCountSeq();
        }
        return eqpMonitorWaferUsedCounts;
    }

    @Override
    public void equipmentStartReserveCancelForInternalBuffer(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, ObjectIdentifier controlJobID) {
        // --------------------------
        //   Check Machine Object
        // --------------------------

        CimMachine aPosMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == aPosMachine,
                new OmCode(retCodeConfig.getNotFoundEqp(), ObjectIdentifier.fetchValue(equipmentID)));
        CimPortDO nilPort = null;
        CimControlJobDO nilCtrlJob = null;
        // Get BufferResource Info
        List<BufferResource> aBufferResourceSeq = aPosMachine.allBufferResources();
        int lenBufferResource = CimArrayUtils.getSize(aBufferResourceSeq);
        for (int i = 0; i < lenBufferResource; i++) {
            CimBufferResource buffResource = (CimBufferResource) aBufferResourceSeq.get(i);
            // Get BufferResource Info
            Validations.check(null == buffResource, retCodeConfig.getNotFoundBufferResource());
            // Get MaterialLocation
            List<MaterialLocation> aMaterialLocationSeq = buffResource.allMaterialLocations();
            int lenShelfInBuffer = CimArrayUtils.getSize(aMaterialLocationSeq);
            for (int j = 0; j < lenShelfInBuffer; j++) {
                CimMaterialLocation aMaterialLocation = (CimMaterialLocation) aMaterialLocationSeq.get(j);
                Validations.check(null == aMaterialLocation, retCodeConfig.getNotFoundMaterialLocation());

                ObjectIdentifier materialLocID =
                        new ObjectIdentifier(
                                aMaterialLocation.getIdentifier(), aMaterialLocation.getPrimaryKey());
                log.info("materialLocID : {}", materialLocID);

                // Set controlJobID
                com.fa.cim.newcore.bo.product.CimControlJob aMaterialLocationControlJob =
                        aMaterialLocation.getControlJob();
                if (null != aMaterialLocationControlJob) {
                    String shelfControlJobID = aMaterialLocationControlJob.getIdentifier();
                    if (ObjectIdentifier.equalsWithValue(shelfControlJobID, controlJobID)) {
                        CimCassette aReservedCarrier = (CimCassette) aMaterialLocation.getAllocatedMaterial();
                        if (null != aReservedCarrier) {
                            aMaterialLocation.makeNotAllocated();
                        }
                        aMaterialLocation.setControlJob(null);
                        aMaterialLocation.setReservedLoadPort(null);
                    }
                }
            }
        }
        // ----------------------
        //   Return to Caller
        // ----------------------
    }

    @Override
    public void equipmentStartReserveCancelForDurableInternalBuffer(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, ObjectIdentifier controlJobID) {
        // --------------------------
        //   Check Machine Object
        // --------------------------

        CimMachine aPosMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == aPosMachine,
                new OmCode(retCodeConfig.getNotFoundEqp(), ObjectIdentifier.fetchValue(equipmentID)));
        CimPortDO nilPort = null;
        CimControlJobDO nilCtrlJob = null;
        // Get BufferResource Info
        List<BufferResource> aBufferResourceSeq = aPosMachine.allBufferResources();
        int lenBufferResource = CimArrayUtils.getSize(aBufferResourceSeq);
        for (int i = 0; i < lenBufferResource; i++) {
            CimBufferResource buffResource = (CimBufferResource) aBufferResourceSeq.get(i);
            // Get BufferResource Info
            Validations.check(null == buffResource, retCodeConfig.getNotFoundBufferResource());
            // Get MaterialLocation
            List<MaterialLocation> aMaterialLocationSeq = buffResource.allMaterialLocations();
            int lenShelfInBuffer = CimArrayUtils.getSize(aMaterialLocationSeq);
            for (int j = 0; j < lenShelfInBuffer; j++) {
                CimMaterialLocation aMaterialLocation = (CimMaterialLocation) aMaterialLocationSeq.get(j);
                Validations.check(null == aMaterialLocation, retCodeConfig.getNotFoundMaterialLocation());

                ObjectIdentifier materialLocID =
                        new ObjectIdentifier(
                                aMaterialLocation.getIdentifier(), aMaterialLocation.getPrimaryKey());
                log.info("materialLocID : {}", materialLocID);

                // Set controlJobID
                CimDurableControlJob aMaterialLocationControlJob = aMaterialLocation.getDurableControlJob();
                if (null != aMaterialLocationControlJob) {
                    String shelfControlJobID = aMaterialLocationControlJob.getIdentifier();
                    if (ObjectIdentifier.equalsWithValue(shelfControlJobID, controlJobID)) {
                        CimCassette aReservedCarrier = (CimCassette) aMaterialLocation.getAllocatedMaterial();
                        if (null != aReservedCarrier) {
                            aMaterialLocation.makeNotAllocated();
                        }
                        aMaterialLocation.setControlJob(null);
                        aMaterialLocation.setReservedLoadPort(null);
                    }
                }
            }
        }
        // ----------------------
        //   Return to Caller
        // ----------------------
    }

    /**
     * description: change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param *                    @param objCommon
     * @param equipmentID
     * @param strPortOperationMode -
     * @return com.fa.cim.dto.RetCode<java.lang.Object>
     * @author Lin
     * @date 2019/1/3 15:54
     */
    @Override
    public void equipmentPortOperationModeChange(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            List<Infos.PortOperationMode> strPortOperationMode) {
        CimMachine aPosMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(aPosMachine == null, retCodeConfig.getNotFoundMachine());
        int i;
        int lenOpeMode = CimObjectUtils.isEmpty(strPortOperationMode) ? 0 : strPortOperationMode.size();
        log.info("strPortOperationMode->length(): {}", lenOpeMode);
        for (i = 0; i < lenOpeMode; i++) {
            CimPortResource aPosPort =
                    baseCoreFactory.getBO(CimPortResource.class, strPortOperationMode.get(i).getPortID());
            Validations.check(aPosPort == null, retCodeConfig.getNotFoundPort());
            log.info("Port::getAllAllowedOperationMode {}", strPortOperationMode.get(i).getPortID());
            List<CimMachineOperationMode> anAllAllowedOpeMode = aPosPort.getAllAllowedOperationMode();
            Boolean bFount = false;
            int nModeLen =
                    CimObjectUtils.isEmpty(anAllAllowedOpeMode)
                            ? 0
                            : CimArrayUtils.getSize(anAllAllowedOpeMode);
            log.info("nModeLen {}", nModeLen);
            for (int j = 0; j < nModeLen; j++) {
                ObjectIdentifier allowedOpeModeID = new ObjectIdentifier();
                allowedOpeModeID.setValue(anAllAllowedOpeMode.get(j).getIdentifier());
                allowedOpeModeID.setReferenceKey(anAllAllowedOpeMode.get(j).getPrimaryKey());
                if (CimStringUtils.equals(
                        allowedOpeModeID.getValue(),
                        strPortOperationMode.get(i).getOperationMode().getOperationMode().getValue())) {
                    log.error("Found operation mode");
                    bFount = true;
                    break;
                }
            }
            Validations.check(CimBooleanUtils.isFalse(bFount), retCodeConfig.getInvalidModeTransition());
            if (CimStringUtils.equals(
                    StandardProperties.SP_DISPATCH_CAST_CLEARED_BY_CHANGE_TO_ONLINE.getValue(),
                    "1")) {
                log.info("SP_DISPATCH_CAST_CLEARED_BY_CHANGE_TO_ONLINE = 1");
                if (CimStringUtils.equals(
                        strPortOperationMode.get(i).getOperationMode().getOnlineMode(),
                        BizConstant.SP_EQP_ONLINEMODE_ONLINELOCAL)
                        || CimStringUtils.equals(
                        strPortOperationMode.get(i).getOperationMode().getOnlineMode(),
                        BizConstant.SP_EQP_ONLINEMODE_ONLINEREMOTE)) {
                    log.info("onlineMode {}", strPortOperationMode.get(i).getOperationMode().getOnlineMode());
                    CimMachineOperationMode aCurrPortOpeMode = aPosPort.getMachineOperationMode();
                    Validations.check(
                            CimObjectUtils.isEmpty(aCurrPortOpeMode),
                            retCodeConfig.getNotFoundMachineOperationMode());

                    CodeDTO.OperationModeInfo aCurrOpeModeInfo = aCurrPortOpeMode.getOperationModeInfo();
                    Validations.check(
                            CimObjectUtils.isEmpty(aCurrOpeModeInfo),
                            retCodeConfig.getNotFoundMachineOperationMode());

                    if (CimStringUtils.equals(
                            aCurrOpeModeInfo.getOnlineMode(), BizConstant.SP_EQP_ONLINEMODE_OFFLINE)) {
                        log.info("Offline => Online");
                        com.fa.cim.newcore.bo.product.CimLot aDummyLot = null;
                        com.fa.cim.newcore.bo.durable.CimCassette aDummyCassette = null;
                        aPosPort.setDispatchUnloadLot(aDummyLot);
                        aPosPort.setDispatchUnloadCassette(aDummyCassette);
                        if (CimStringUtils.equals(
                                BizConstant.SP_EQP_ACCESSMODE_MANUAL, aCurrOpeModeInfo.getAccessMode())) {
                            log.info("Offline-1 => Online");
                            aPosPort.setDispatchLoadLot(aDummyLot);
                            aPosPort.setDispatchLoadCassette(aDummyCassette);
                        }
                    }
                }
            }
            CimMachineOperationMode anOperationMode =
                    baseCoreFactory.getBO(
                            CimMachineOperationMode.class,
                            strPortOperationMode.get(i).getOperationMode().getOperationMode());
            Validations.check(anOperationMode == null, retCodeConfig.getNotFoundMachineOperationMode());
            aPosPort.setMachineOperationMode(anOperationMode);
            // Update TimeStamp and Person Info

            Timestamp StatusChangeTimeStamp = objCommon.getTimeStamp().getReportTimeStamp();
            aPosPort.setLastStatusChangeTimeStamp(
                    CimDateUtils.convertToSpecString(StatusChangeTimeStamp));
            CimPerson aPerson = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());
            Validations.check(aPerson == null, retCodeConfig.getNotFoundPerson());

            aPosPort.setLastStatusChangePerson(aPerson);
            Timestamp LastClaimedTimeStamp = objCommon.getTimeStamp().getReportTimeStamp();
            aPosPort.setLastClaimedTimeStamp(LastClaimedTimeStamp);
            aPosPort.setLastClaimedPerson(aPerson);
        }
        Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoGet(objCommon, equipmentID);
        int lenPortInfo = CimArrayUtils.getSize(eqpPortInfo.getEqpPortStatuses());
        log.info("lenPortInfo {}", lenPortInfo);
        log.info("In All Ports, As for OnlineMode, Online and Offline must not be mixed.");
        String tmpOnlineMode = null;
        for (i = 0; i < lenPortInfo; i++) {
            log.info("--------------------------------------------------------");
            log.info("PortID {}", eqpPortInfo.getEqpPortStatuses().get(i).getPortID().getValue());
            log.info("onlineMode {}", eqpPortInfo.getEqpPortStatuses().get(i).getOnlineMode());
            if (0 == i) {
                tmpOnlineMode = eqpPortInfo.getEqpPortStatuses().get(i).getOnlineMode();
                log.info("tmpOnlineMode {}", tmpOnlineMode);
            } else if (CimStringUtils.equals(tmpOnlineMode, BizConstant.SP_EQP_ONLINEMODE_OFFLINE)) {
                log.error("tmpOnlineMode is [Offline]");
                Validations.check(
                        !CimStringUtils.equals(
                                BizConstant.SP_EQP_ONLINEMODE_OFFLINE,
                                eqpPortInfo.getEqpPortStatuses().get(i).getOnlineMode()),
                        retCodeConfig.getInvalidPortModeCombination());
            } else {
                log.error("tmpOnlineMode is not [Offline]");
                Validations.check(
                        !CimStringUtils.equals(
                                BizConstant.SP_EQP_ONLINEMODE_ONLINELOCAL,
                                eqpPortInfo.getEqpPortStatuses().get(i).getOnlineMode())
                                && !CimStringUtils.equals(
                                BizConstant.SP_EQP_ONLINEMODE_ONLINEREMOTE,
                                eqpPortInfo.getEqpPortStatuses().get(i).getOnlineMode()),
                        retCodeConfig.getInvalidPortModeCombination());
            }
        }
        log.info("In Port Group Unit, All OperationModes must be the same.");
        List<Infos.PortOperationMode> tmp_strPortOperationMode = new ArrayList<>();
        for (i = 0; i < lenPortInfo; i++) {
            log.info("--------------------------------------------------------");
            log.info("PortGroup {}", eqpPortInfo.getEqpPortStatuses().get(i).getPortGroup());
            log.info("PortID  {}", eqpPortInfo.getEqpPortStatuses().get(i).getPortID().getValue());
            log.info("operationMode {}", eqpPortInfo.getEqpPortStatuses().get(i).getOperationModeID());
            int lenPortOpeMode = tmp_strPortOperationMode.size();
            log.info("lenPortOpeMode {}", lenPortOpeMode);
            Boolean bFound = false;
            for (int j = 0; j < lenPortOpeMode; j++) {
                if (CimStringUtils.equals(
                        CimObjectUtils.isEmpty(eqpPortInfo.getEqpPortStatuses())
                                ? null
                                : eqpPortInfo.getEqpPortStatuses().get(i).getPortGroup(),
                        tmp_strPortOperationMode.get(j).getPortGroup())) {
                    log.info("Found same PortGroup {}", tmp_strPortOperationMode.get(j).getPortGroup());
                    bFound = true;
                    Validations.check(
                            !CimStringUtils.equals(
                                    CimObjectUtils.isEmpty(eqpPortInfo.getEqpPortStatuses())
                                            ? null
                                            : eqpPortInfo.getEqpPortStatuses().get(i).getOperationModeID().getValue(),
                                    tmp_strPortOperationMode.get(j).getOperationMode().getOperationMode().getValue()),
                            retCodeConfig.getInvalidPortModeCombination());
                }
            }
            if (CimBooleanUtils.isFalse(bFound)) {
                Infos.PortOperationMode portOperationMode = new Infos.PortOperationMode();
                Infos.OperationMode operationMode = new Infos.OperationMode();
                operationMode.setOperationMode(
                        CimObjectUtils.isEmpty(eqpPortInfo.getEqpPortStatuses())
                                ? null
                                : ObjectIdentifier.isEmpty(
                                eqpPortInfo.getEqpPortStatuses().get(i).getOperationModeID())
                                ? null
                                : new ObjectIdentifier(
                                eqpPortInfo.getEqpPortStatuses().get(i).getOperationMode()));
                portOperationMode.setOperationMode(operationMode);
                portOperationMode.setPortGroup(eqpPortInfo.getEqpPortStatuses().get(i).getPortGroup());
                tmp_strPortOperationMode.add(portOperationMode);
            }
        }
    }

    /**
     * description: change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param objCommon       -
     * @param equipmentID     -
     * @param strEqpInBuffer  -
     * @param strEqpOutBuffer -
     * @return Results.ObjEquipmentportStateFillInTxEQR002InParmResult
     * @author Lin
     * @since 2019/1/7 17:24
     */
    @Override
    public List<Infos.EqpPortEventOnTCS> equipmentportStateFillInTxEQR002InParm(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            List<Infos.EqpInBuffer> strEqpInBuffer,
            List<Infos.EqpOutBuffer> strEqpOutBuffer) {
        log.error("PPTManager_i::equipment_portState_FillInTxEQR002InParm {}", "Initialize...");
        int setCount = 0;
        int i = 0;
        int j = 0;
        int inBufLen = strEqpInBuffer.size();
        int outBufLen = strEqpOutBuffer.size();
        Boolean findFlag = false;
        log.error(
                "PPTManager_i::equipment_portState_FillInTxEQR002InParm {}",
                "Set for Input and In-Out Common Port...");
        List<Infos.EqpPortEventOnTCS> strEqpPortEventOnTCS = new ArrayList<>();
        Infos.EqpPortEventOnTCS eqpPortEventOnTCS = new Infos.EqpPortEventOnTCS();
        for (i = 0; i < inBufLen; i++) {
            findFlag = false;
            for (j = 0; j < outBufLen; j++) {
                if (CimStringUtils.equals(
                        strEqpInBuffer.get(i).getPortID().getValue(),
                        strEqpOutBuffer.get(j).getPortID().getValue())) {
                    findFlag = true;
                    break;
                }
            }
            if (findFlag == false) {
                eqpPortEventOnTCS.setPortID(strEqpInBuffer.get(i).getPortID());
                eqpPortEventOnTCS.setPortStatus(strEqpInBuffer.get(i).getPortStatus());
                eqpPortEventOnTCS.setLotID(strEqpInBuffer.get(i).getLotID());
                eqpPortEventOnTCS.setCassetteID(strEqpInBuffer.get(i).getCassetteID());
                strEqpPortEventOnTCS.add(setCount, eqpPortEventOnTCS);
            } else {
                if (CimStringUtils.equals(
                        strEqpOutBuffer.get(j).getPortStatus(),
                        BizConstant.SP_EQPAUTO3SETTING_EVENTTYPE_UNLOADREQ)) {
                    eqpPortEventOnTCS.setPortID(strEqpOutBuffer.get(i).getPortID());
                    eqpPortEventOnTCS.setPortStatus(strEqpOutBuffer.get(i).getPortStatus());
                    eqpPortEventOnTCS.setLotID(strEqpOutBuffer.get(i).getLotID());
                    eqpPortEventOnTCS.setCassetteID(strEqpOutBuffer.get(i).getCassetteID());
                    strEqpPortEventOnTCS.add(setCount, eqpPortEventOnTCS);
                } else {
                    eqpPortEventOnTCS.setPortID(strEqpInBuffer.get(i).getPortID());
                    eqpPortEventOnTCS.setPortStatus(strEqpInBuffer.get(i).getPortStatus());
                    eqpPortEventOnTCS.setLotID(strEqpInBuffer.get(i).getLotID());
                    eqpPortEventOnTCS.setCassetteID(strEqpInBuffer.get(i).getCassetteID());
                    strEqpPortEventOnTCS.add(setCount, eqpPortEventOnTCS);
                }
            }
        }
        setCount = strEqpPortEventOnTCS.size();
        log.error(
                "PPTManager_i::equipment_portState_FillInTxEQR002InParm {}", "Set for Output Port...");
        for (i = 0; i < outBufLen; i++) {
            findFlag = false;
            for (j = 0; j < setCount; j++) {
                if (CimStringUtils.equals(
                        strEqpOutBuffer.get(i).getPortID().getValue(),
                        strEqpPortEventOnTCS.get(j).getPortID().getValue())) {
                    findFlag = true;
                    break;
                }
            }
            if (findFlag == false) {
                eqpPortEventOnTCS.setPortID(strEqpOutBuffer.get(i).getPortID());
                eqpPortEventOnTCS.setPortStatus(strEqpOutBuffer.get(i).getPortStatus());
                eqpPortEventOnTCS.setLotID(strEqpOutBuffer.get(i).getLotID());
                eqpPortEventOnTCS.setCassetteID(strEqpOutBuffer.get(i).getCassetteID());
                strEqpPortEventOnTCS.add(setCount, eqpPortEventOnTCS);
            }
        }
        return strEqpPortEventOnTCS;
    }

    @Override
    public String equipmentMultiRecipeCapabilityGet(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        /*-----------------------------------------*/
        /*   Get Machine Object for Recipe Check   */
        /*-----------------------------------------*/
        CimMachine equipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(null == equipment, retCodeConfig.getNotFoundEquipment());
        /*------------------------------------------------------------*/
        /*   Get Equipment's MultiRecipeCapability for Recipe Check   */
        /*------------------------------------------------------------*/
        return equipment.getMultipleRecipeCapability();
    }

    @Override
    public void equipmentPortStateCheckForStartReservationForInternalBuffer(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            List<Infos.StartCassette> startCassettes) {
        log.info("equipmentID = {}", equipmentID);
        /*----------------------------------------*/
        /*   Get Equipment and Port Information   */
        /*----------------------------------------*/
        log.info("Get Equipment and Port Information");
        Validations.check(CimObjectUtils.isEmpty(startCassettes), retCodeConfig.getInvalidInputParam());

        /*-----------------------------------------*/
        /*   Get Equipment's Operation Mode Info   */
        /*-----------------------------------------*/
        log.info("Get Equipment's Operation Mode Info");
        Outputs.ObjPortResourceCurrentOperationModeGetOut currentOperationModeOut =
                portMethod.portResourceCurrentOperationModeGet(
                        objCommon, equipmentID, startCassettes.get(0).getLoadPortID());

        String onlineMode = currentOperationModeOut.getOperationMode().getOnlineMode();

        /*------------------------------------*/
        /*   Get and Check Cassette on Port   */
        /*------------------------------------*/
        log.info("Get Equipment's Operation Mode Info");
        Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoGet(objCommon, equipmentID);

        /*----------------------------*/
        /*   Check Port Information   */
        /*----------------------------*/
        log.info("Check Port Information");

        CimMachine machineBO = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == machineBO,
                new OmCode(retCodeConfig.getNotFoundEqp(), ObjectIdentifier.fetchValue(equipmentID)));

        if (null != eqpPortInfo && !CimObjectUtils.isEmpty(eqpPortInfo.getEqpPortStatuses())) {
            List<Infos.EqpPortStatus> eqpPortStatuses = eqpPortInfo.getEqpPortStatuses();
            for (Infos.EqpPortStatus eqpPortStatus : eqpPortStatuses) {
                /*----------------------------------------*/
                /*   Ignore Port which hasn't been used   */
                /*----------------------------------------*/
                log.info("Ignore Port which hasn't been used");
                ObjectIdentifier portID = eqpPortStatus.getPortID();
                boolean bFoundPort = false;
                for (Infos.StartCassette startCassette : startCassettes) {
                    if (ObjectIdentifier.equalsWithValue(startCassette.getLoadPortID(), portID)) {
                        bFoundPort = true;
                        break;
                    }
                }
                if (!bFoundPort) {
                    continue;
                }

                /*-----------------------------------*/
                /*   Get and Check Port's LoadMode   */
                /*-----------------------------------*/
                log.info("Get and Check Port's LoadMode");
                CimPortResource port =
                        (CimPortResource)
                                machineBO.findPortResourceNamed(ObjectIdentifier.fetchValue(portID));
                Validations.check(
                        null == port, new OmCode(retCodeConfig.getNotFoundPort(), portID.getValue()));

                String loadMode = port.getPortUsage();
                Validations.check(
                        !CimStringUtils.equals(loadMode, CIMStateConst.CIM_PORT_RESOURCE_INPUT)
                                && !CimStringUtils.equals(loadMode, CIMStateConst.CIM_PORT_RESOURCE_INPUTOUTPUT),
                        retCodeConfig.getInvalidPortLoadMode());

                /*-------------------------------------*/
                /*   Get and Check Port's Port State   */
                /*-------------------------------------*/
                log.info("Get and Check Port's Port State");
                if (!CimStringUtils.equals(onlineMode, BizConstant.SP_EQP_ONLINEMODE_OFFLINE)) {
                    log.info("onlineMode != [Offline]");
                    String portState = eqpPortStatus.getPortState();
                    Validations.check(
                            !CimStringUtils.equals(portState, BizConstant.SP_PORTRSC_PORTSTATE_LOADAVAIL)
                                    && !CimStringUtils.equals(portState, BizConstant.SP_PORTRSC_PORTSTATE_LOADREQ)
                                    && !CimStringUtils.equals(portState, BizConstant.SP_PORTRSC_PORTSTATE_LOADCOMP),
                            new OmCode(retCodeConfig.getInvalidPortState(), portID.getValue(), portState));
                }
            }
        }

        /*---------------------------------------------------*/
        /*   Check All OperationMode of PortID is the same   */
        /*---------------------------------------------------*/
        log.info("Check All OperationMode of PortID is the same");
        ObjectIdentifier operationModeID = null;
        for (int i = 0; i < startCassettes.size(); i++) {
            boolean bFoundPort = false;
            if (null != eqpPortInfo && !CimObjectUtils.isEmpty(eqpPortInfo.getEqpPortStatuses())) {
                int j = 0;
                List<Infos.EqpPortStatus> eqpPortStatuses = eqpPortInfo.getEqpPortStatuses();
                for (; j < eqpPortStatuses.size(); j++) {
                    if (ObjectIdentifier.equalsWithValue(
                            startCassettes.get(i).getLoadPortID(), eqpPortStatuses.get(j).getPortID())) {
                        log.info("find loadPortID {}", startCassettes.get(i).getLoadPortID());
                        bFoundPort = true;
                        break;
                    }
                }
                if (bFoundPort) {
                    log.info("TRUE == bFoundPort");
                    if (i == 0) {
                        operationModeID = eqpPortStatuses.get(j).getOperationModeID();
                        log.info("0 == i   operationModeID {}", operationModeID);
                    } else {
                        Validations.check(
                                !ObjectIdentifier.equalsWithValue(
                                        operationModeID, eqpPortStatuses.get(j).getOperationModeID()),
                                retCodeConfig.getInvalidEquipmentMode(),
                                ObjectIdentifier.fetchValue(equipmentID),
                                ObjectIdentifier.fetchValue(eqpPortStatuses.get(j).getOperationModeID()));
                    }
                } else {
                    Validations.check(
                            true,
                            new OmCode(
                                    retCodeConfig.getNotFoundPort(),
                                    startCassettes.get(i).getLoadPortID().getValue()));
                }
            }
        }
    }

    @Override
    public List<Infos.EqpMonitorJobDetailInfo> eqpMonitorJobListGetDR(
            Infos.ObjCommon objCommon, Infos.EqpMonitorJobListGetDRIn eqpMonitorJobListGetDRIn) {
        List<Infos.EqpMonitorJobDetailInfo> eqpMonitorJobDetailInfos = new ArrayList<>();
        String sql = "SELECT * FROM OMAMJOB WHERE ";
        Boolean bFirstCondition = true;
        if (!ObjectIdentifier.isEmpty(eqpMonitorJobListGetDRIn.getEquipmentID())) {
            bFirstCondition = false;
            sql += String.format(" EQP_ID = '%s'", eqpMonitorJobListGetDRIn.getEquipmentID().getValue());
        }
        if (!ObjectIdentifier.isEmpty(eqpMonitorJobListGetDRIn.getChamberID())) {
            if (bFirstCondition) {
                bFirstCondition = false;
                sql +=
                        String.format(
                                " CHAMBER_ID = '%s' ", eqpMonitorJobListGetDRIn.getChamberID().getValue());
            } else {
                sql +=
                        String.format(
                                " AND CHAMBER_ID = '%s' ", eqpMonitorJobListGetDRIn.getChamberID().getValue());
            }
        }
        if (!ObjectIdentifier.isEmpty(eqpMonitorJobListGetDRIn.getEqpMonitorID())) {
            if (bFirstCondition) {
                bFirstCondition = false;
                sql +=
                        String.format(
                                " AM_PLAN_ID = '%s' ", eqpMonitorJobListGetDRIn.getEqpMonitorID().getValue());
            } else {
                sql +=
                        String.format(
                                " AND AM_PLAN_ID = '%s' ", eqpMonitorJobListGetDRIn.getEqpMonitorID().getValue());
            }
        }
        if (!ObjectIdentifier.isEmpty(eqpMonitorJobListGetDRIn.getEqpMonitorJobID())) {
            if (bFirstCondition) {
                bFirstCondition = false;
                sql +=
                        String.format(
                                " AM_JOB_ID = '%s' ", eqpMonitorJobListGetDRIn.getEqpMonitorJobID().getValue());
            } else {
                sql +=
                        String.format(
                                " AND AM_JOB_ID = '%s' ", eqpMonitorJobListGetDRIn.getEqpMonitorJobID().getValue());
            }
        }
        log.info("eqpMonitorJobListGetDR SQL : {}", sql);
        List<CimEquipmentMonitorJobDO> equipmentMonitorJobDOS =
                cimJpaRepository.query(sql, CimEquipmentMonitorJobDO.class);
        log.info("equipmentMonitorJobDOS : {}", equipmentMonitorJobDOS);
        if (CimArrayUtils.isNotEmpty(equipmentMonitorJobDOS)) {
            for (CimEquipmentMonitorJobDO equipmentMonitorJobDO : equipmentMonitorJobDOS) {
                Infos.EqpMonitorJobDetailInfo eqpMonitorJobDetailInfo = new Infos.EqpMonitorJobDetailInfo();
                eqpMonitorJobDetailInfo.setEqpMonitorJobID(
                        new ObjectIdentifier(
                                equipmentMonitorJobDO.getEquipmentMonitorJobID(), equipmentMonitorJobDO.getId()));
                eqpMonitorJobDetailInfo.setEquipmentID(
                        new ObjectIdentifier(
                                equipmentMonitorJobDO.getEquipmentID(), equipmentMonitorJobDO.getEquipmentObj()));
                eqpMonitorJobDetailInfo.setChamberID(
                        new ObjectIdentifier(
                                equipmentMonitorJobDO.getChamberID(), equipmentMonitorJobDO.getChamberObj()));
                eqpMonitorJobDetailInfo.setEqpMonitorID(
                        new ObjectIdentifier(
                                equipmentMonitorJobDO.getEquipmentMonitorID(),
                                equipmentMonitorJobDO.getEquipmentMonitorObj()));
                eqpMonitorJobDetailInfo.setMonitorJobStatus(equipmentMonitorJobDO.getMonitorJobStatus());
                eqpMonitorJobDetailInfo.setRetryCount(equipmentMonitorJobDO.getRetryCount());
                eqpMonitorJobDetailInfo.setStartTimeStamp(equipmentMonitorJobDO.getStartTime());
                eqpMonitorJobDetailInfo.setStartUser(
                        new ObjectIdentifier(
                                equipmentMonitorJobDO.getStartUserID(), equipmentMonitorJobDO.getStartUserObj()));
                eqpMonitorJobDetailInfo.setLastClaimedTimeStamp(equipmentMonitorJobDO.getClaimTime());
                eqpMonitorJobDetailInfo.setLastClaimedUser(
                        new ObjectIdentifier(
                                equipmentMonitorJobDO.getClaimUserID(), equipmentMonitorJobDO.getClaimUserObj()));
                // -------------------------------------
                //   Get EqpMonitor Lot Information.
                // -------------------------------------
                List<Infos.EqpMonitorLot> eqpMonitorLots = new ArrayList<>();
                log.info("equipmentMonitorJobDO is ID : {}", equipmentMonitorJobDO.getId());
                CimEquipmentMonitorJobLotDO example = new CimEquipmentMonitorJobLotDO();
                example.setReferenceKey(equipmentMonitorJobDO.getId());
                List<CimEquipmentMonitorJobLotDO> equipmentMonitorJobLots =
                        cimJpaRepository.findAll(Example.of(example));

                log.info("equipmentMonitorJobLots : {}", equipmentMonitorJobLots);
                if (CimArrayUtils.isNotEmpty(equipmentMonitorJobLots)) {
                    for (CimEquipmentMonitorJobLotDO equipmentMonitorJobLot : equipmentMonitorJobLots) {
                        Infos.EqpMonitorLot eqpMonitorLot = new Infos.EqpMonitorLot();
                        eqpMonitorLot.setLotID(
                                new ObjectIdentifier(
                                        equipmentMonitorJobLot.getLotID(), equipmentMonitorJobLot.getLotObj()));
                        eqpMonitorLot.setStartSeqNo(equipmentMonitorJobLot.getStartSequenceNumber());
                        eqpMonitorLot.setMonitorLotStatus(equipmentMonitorJobLot.getMonitorLotStatus());
                        if (CimStringUtils.isNotEmpty(equipmentMonitorJobLot.getMonitorOpeKey())) {
                            String monitorRouteID =
                                    BaseStaticMethod.convertOpeNoToModuleNo(
                                            equipmentMonitorJobLot.getMonitorOpeKey());
                            String monitorOpeNo =
                                    BaseStaticMethod.convertOpeNoToModuleOpeNo(
                                            equipmentMonitorJobLot.getMonitorOpeKey());
                            eqpMonitorLot.setMonitorRouteID(new ObjectIdentifier(monitorRouteID));
                            eqpMonitorLot.setMonitorOpeNo(monitorOpeNo);
                        }
                        // -------------------------------------------------------------------------//
                        // Get EqpMonitorLot basic information from FRLOT                          //
                        // -------------------------------------------------------------------------//
                        CimLotDO exampleLot = new CimLotDO();
                        exampleLot.setLotID(equipmentMonitorJobLot.getLotID());
                        CimLotDO lotDO = cimJpaRepository.findOne(Example.of(exampleLot)).orElse(null);
                        log.info("lot : {}", lotDO);
                        if (null != lotDO) {
                            eqpMonitorLot.setLotStatus(lotDO.getLotState());
                            eqpMonitorLot.setLotType(lotDO.getLotType());
                            eqpMonitorLot.setSubLotType(lotDO.getSubLotType());
                            eqpMonitorLot.setRouteID(
                                    new ObjectIdentifier(lotDO.getRouteID(), lotDO.getRouteObj()));
                            eqpMonitorLot.setOpeNo(lotDO.getOperationNumber());
                            eqpMonitorLot.setTotalWaferCount(lotDO.getWaferCount());
                            eqpMonitorLot.setProductID(lotDO.getProductSpecificationID());
                        }
                        // -------------------------------------------------------------------------//
                        //   Get carrierID from FRLOT_MTRLCONTNRS                                  //
                        // -------------------------------------------------------------------------//
                        CimLotMaterialContainerDO cimLotMaterialContainerExample =
                                new CimLotMaterialContainerDO();
                        cimLotMaterialContainerExample.setReferenceKey(lotDO == null ? null : lotDO.getId());
                        CimLotMaterialContainerDO allMaterialContainer =
                                cimJpaRepository.findOne(Example.of(cimLotMaterialContainerExample)).orElse(null);
                        log.info("OMLOT_CARRIER is DB : {}", allMaterialContainer);
                        if (null != allMaterialContainer) {
                            eqpMonitorLot.setCarrierID(
                                    new ObjectIdentifier(
                                            allMaterialContainer.getMaterialContainerID(),
                                            allMaterialContainer.getMaterialContainerObj()));
                        }
                        if (null != lotDO) {
                            log.info("lot is ProcessOperation Obj : {}", lotDO.getProcessOperationObj());
                        }
                        if (null != lotDO && CimStringUtils.isNotEmpty(lotDO.getProcessOperationObj())) {
                            CimProcessOperationDO processOperation =
                                    cimJpaRepository.queryOne(
                                            "SELECT * FROM OMPROPE WHERE ID = ?1",
                                            CimProcessOperationDO.class,
                                            lotDO.getProcessOperationObj());
                            log.info("lot is ProcessOperation : {}", processOperation);
                            if (null != processOperation) {
                                eqpMonitorLot.setOperationID(
                                        new ObjectIdentifier(
                                                processOperation.getProcessDefinitionID(),
                                                processOperation.getProcessDefinitionObj()));
                                eqpMonitorLot.setAssignedMachineID(
                                        new ObjectIdentifier(
                                                processOperation.getAssignEquipmentID(),
                                                processOperation.getAssignEquipmentObj()));
                            }
                        }
                        // -------------------------------------------------------------------------//
                        //   Get entity inhibitions information                                    //
                        // -------------------------------------------------------------------------//
                        List<Infos.EntityInhibitInfo> objEntityInhibitCheckForLotDRout = null;
                        if (null != lotDO) {
                            objEntityInhibitCheckForLotDRout =
                                    constraintMethod.constraintCheckForLotDR(
                                            objCommon, new ObjectIdentifier(lotDO.getLotID(), lotDO.getId()), null);
                        }
                        log.info("objEntityInhibitCheckForLotDRout is success ");
                        if (CimArrayUtils.isNotEmpty(objEntityInhibitCheckForLotDRout)) {
                            eqpMonitorLot.setInhibitFlag(true);
                        } else {
                            eqpMonitorLot.setInhibitFlag(false);
                        }
                        eqpMonitorLots.add(eqpMonitorLot);
                    }
                }
                eqpMonitorJobDetailInfo.setStrEqpMonitorLotSeq(eqpMonitorLots);
                eqpMonitorJobDetailInfos.add(eqpMonitorJobDetailInfo);
            }
        }
        return eqpMonitorJobDetailInfos;
    }

    @Override
    public String eqpMonitorScheduleUpdate(
            Infos.ObjCommon objCommon, Infos.EqpMonitorScheduleUpdateIn eqpMonitorScheduleUpdateIn) {
        String result = null;
        // --------------//
        //  Initialize  //
        // --------------//
        // Get EqpMonitor object
        CimEqpMonitor aPosEqpMonitor =
                baseCoreFactory.getBO(CimEqpMonitor.class, eqpMonitorScheduleUpdateIn.getEqpMonitorID());
        // Get ScheduleBaseTimeStamp of EqpMonitor
        String scheduleBaseTime = aPosEqpMonitor.getScheduleBaseTimeStamp().toString();

        // Get ExecutionInterval of EqpMonitor
        Long executionInterval = aPosEqpMonitor.getExecutionInterval();
        String tmpScheduleBaseTime = null;
        Long tmpScheduleAdjustment = 0L;
        if (BizConstant.SP_EQPMONITOR_SCHEDULE_NEXT.equals(
                eqpMonitorScheduleUpdateIn.getActionType())) {
            String targetTimeStamp =
                    timeStampMethod.timeStampDoCalculation(
                            objCommon, scheduleBaseTime, 0, 0, executionInterval.intValue(), 0, 0);
            tmpScheduleBaseTime = targetTimeStamp;
            tmpScheduleAdjustment = 0L;
            Infos.EqpMonitorNextExecutionTimeCalculateIn eqpMonitorNextExecutionTimeCalculateIn =
                    new Infos.EqpMonitorNextExecutionTimeCalculateIn();
            eqpMonitorNextExecutionTimeCalculateIn.setCurrentScheduleBaseTime(
                    Timestamp.valueOf(tmpScheduleBaseTime));
            eqpMonitorNextExecutionTimeCalculateIn.setExecutionInterval(executionInterval.intValue());
            eqpMonitorNextExecutionTimeCalculateIn.setScheduleAdjustment(
                    tmpScheduleAdjustment.intValue());
            eqpMonitorNextExecutionTimeCalculateIn.setFutureTimeRequireFlag(true);
            log.info(
                    "eqpMonitor_nextExecutionTime_Calculate in params : {}",
                    eqpMonitorNextExecutionTimeCalculateIn);
            Results.EqpMonitorNextExecutionTimeCalculateResult
                    eqpMonitorNextExecutionTimeCalculateResultObject =
                    this.eqpMonitorNextExecutionTimeCalculate(
                            objCommon, eqpMonitorNextExecutionTimeCalculateIn);

            // Update nextScheduleBaseTime of EqpMonitor
            aPosEqpMonitor.setScheduleBaseTimeStamp(
                    eqpMonitorNextExecutionTimeCalculateResultObject.getNextScheduleBaseTime());
            aPosEqpMonitor.setScheduleAdjustment(0L);
        } else {
            String lastMonitorPassedTime = aPosEqpMonitor.getLastMonitorPassedTimeStamp().toString();
            Long expirationInterval =
                    null == aPosEqpMonitor.getExpirationInterval()
                            ? 0
                            : aPosEqpMonitor.getExpirationInterval();
            Long scheduleAdjustment =
                    null == aPosEqpMonitor.getScheduleAdjustment()
                            ? 0
                            : aPosEqpMonitor.getScheduleAdjustment();
            String tmpLastMonitorPassedTime = null;
            Long tmpExpirationInterval = 0L;
            Boolean tmpFutureTimeRequireFlag = false;
            if (BizConstant.SP_EQPMONITOR_SCHEDULE_POSTPONE.equals(
                    eqpMonitorScheduleUpdateIn.getActionType())) {
                tmpScheduleBaseTime = scheduleBaseTime;
                tmpScheduleAdjustment =
                        scheduleAdjustment + eqpMonitorScheduleUpdateIn.getPostponeTime().intValue();
                tmpLastMonitorPassedTime = lastMonitorPassedTime;
                tmpExpirationInterval = expirationInterval;
                tmpFutureTimeRequireFlag = false;
            } else if (BizConstant.SP_EQPMONITOR_SCHEDULE_SKIP.equals(
                    eqpMonitorScheduleUpdateIn.getActionType())) {
                String targetTimeStamp =
                        timeStampMethod.timeStampDoCalculation(
                                objCommon, scheduleBaseTime, 0, 0, executionInterval.intValue(), 0, 0);

                tmpScheduleBaseTime = targetTimeStamp;
                tmpScheduleAdjustment = 0L;
                tmpLastMonitorPassedTime = lastMonitorPassedTime;
                tmpExpirationInterval = expirationInterval;
                tmpFutureTimeRequireFlag = true;
            } else if (BizConstant.SP_EQPMONITOR_SCHEDULE_FORCERUN.equals(
                    eqpMonitorScheduleUpdateIn.getActionType())) {
                // In ForceRun case, if it doesn't reach next execution time(this check is performed in
                // txEqpMonitorScheduleChangeReq),
                // schedule change to current time is performed to create history.
                // There is 2 cases
                //  Case-1 : It doesn't reach next execution time without schedule adjustment factor
                //  Case-2 : It is between next execution time with schedule adjustment factor and one
                // without it.
                //
                // Abbreviation
                //  - B : BaseTime
                //  - C : CurrentTime
                //  - N : NextExecutionTime without adjustment factor
                //  - A : NextExecutionTime with adjustment factor
                //
                // Case-1
                //            SPS change(New adjustment[negative number])
                //            <---------
                // ---+-------+---------+-----------------------+------> time
                //    B       C         N                       A
                //
                // Case-2
                //                      SPS change(New adjustment[positive number])
                //                      --------------->
                // ---+-----------------+--------------+--------+------> time
                //    B                 N              C        A
                //

                tmpScheduleBaseTime = scheduleBaseTime;
                Infos.EqpMonitorNextExecutionTimeCalculateIn eqpMonitorNextExecutionTimeCalculateIn =
                        new Infos.EqpMonitorNextExecutionTimeCalculateIn();
                eqpMonitorNextExecutionTimeCalculateIn.setCurrentScheduleBaseTime(
                        Timestamp.valueOf(scheduleBaseTime));
                eqpMonitorNextExecutionTimeCalculateIn.setExecutionInterval(executionInterval.intValue());
                eqpMonitorNextExecutionTimeCalculateIn.setScheduleAdjustment(
                        tmpScheduleAdjustment.intValue());
                eqpMonitorNextExecutionTimeCalculateIn.setExpirationInterval(0);
                eqpMonitorNextExecutionTimeCalculateIn.setFutureTimeRequireFlag(false);
                log.info(
                        "eqpMonitor_nextExecutionTime_Calculate in params : {}",
                        eqpMonitorNextExecutionTimeCalculateIn);
                Results.EqpMonitorNextExecutionTimeCalculateResult
                        eqpMonitorNextExecutionTimeCalculateResult =
                        this.eqpMonitorNextExecutionTimeCalculate(
                                objCommon, eqpMonitorNextExecutionTimeCalculateIn);

                Timestamp aTimeStamp =
                        Timestamp.valueOf(eqpMonitorNextExecutionTimeCalculateResult.getNextExecutionTime());
                Timestamp currentTimeStamp = objCommon.getTimeStamp().getReportTimeStamp();
                Long aDuration =
                        CimDateUtils.substractTimeStamp(currentTimeStamp.getTime(), aTimeStamp.getTime());
                Long tempElapsedTime = aDuration / 1000;
                Long timeLag = tempElapsedTime / 60;
                if (0
                        == CimDateUtils.compare(
                        aTimeStamp, objCommon.getTimeStamp().getReportTimeStamp())) {
                    if ((tempElapsedTime - timeLag * 60) > 0) {
                        timeLag = timeLag + 1;
                    }
                    tmpScheduleAdjustment = 0 - timeLag;
                } else {
                    tmpScheduleAdjustment = timeLag;
                }
                tmpExpirationInterval = 0L;
                tmpFutureTimeRequireFlag = false;
            } else {
                Validations.check(retCodeConfig.getInvalidParameterWithMsg());
            }
            Infos.EqpMonitorNextExecutionTimeCalculateIn eqpMonitorNextExecutionTimeCalculateIn =
                    new Infos.EqpMonitorNextExecutionTimeCalculateIn();

            eqpMonitorNextExecutionTimeCalculateIn.setCurrentScheduleBaseTime(
                    Timestamp.valueOf(tmpScheduleBaseTime));
            eqpMonitorNextExecutionTimeCalculateIn.setExecutionInterval(executionInterval.intValue());
            eqpMonitorNextExecutionTimeCalculateIn.setScheduleAdjustment(
                    tmpScheduleAdjustment.intValue());
            if (null != tmpLastMonitorPassedTime) {
                eqpMonitorNextExecutionTimeCalculateIn.setLastMonitorPassedTime(
                        Timestamp.valueOf(tmpLastMonitorPassedTime));
            }
            eqpMonitorNextExecutionTimeCalculateIn.setExpirationInterval(
                    tmpExpirationInterval.intValue());
            eqpMonitorNextExecutionTimeCalculateIn.setFutureTimeRequireFlag(tmpFutureTimeRequireFlag);
            log.info(
                    "eqpMonitor_nextExecutionTime_Calculate in params : {}",
                    eqpMonitorNextExecutionTimeCalculateIn);
            Results.EqpMonitorNextExecutionTimeCalculateResult
                    eqpMonitorNextExecutionTimeCalculateResult =
                    this.eqpMonitorNextExecutionTimeCalculate(
                            objCommon, eqpMonitorNextExecutionTimeCalculateIn);
            if (BizConstant.SP_EQPMONITOR_SCHEDULE_SKIP.equals(
                    eqpMonitorScheduleUpdateIn.getActionType())) {
                aPosEqpMonitor.setScheduleBaseTimeStamp(
                        eqpMonitorNextExecutionTimeCalculateResult.getNextScheduleBaseTime());
            }
            aPosEqpMonitor.setScheduleAdjustment(tmpScheduleAdjustment);
            result = eqpMonitorNextExecutionTimeCalculateResult.getNextExecutionTime();
        }
        aPosEqpMonitor.setLastClaimedTimeStamp(
                objCommon.getTimeStamp().getReportTimeStamp().toString());

        CimPerson person = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());
        aPosEqpMonitor.setLastClaimedUser(person);

        // --------------------//
        //  Return to Caller  //
        // --------------------//
        return result;
    }

    @Override
    public List<ObjectIdentifier> eqpMonitorEqpMonitorJobIDsGet(
            Infos.ObjCommon objCommon, ObjectIdentifier eqpMonitorID) {
        /*----------------*/
        /*   Initialize   */
        /*----------------*/
        List<ObjectIdentifier> objectIdentifiers = new ArrayList<>();
        // --------------------------------//
        //  Get Auto Monitor Object  //
        // --------------------------------//
        CimEqpMonitor anEqpMonitor = baseCoreFactory.getBO(CimEqpMonitor.class, eqpMonitorID);

        List<CimEqpMonitorJob> tmpEqpMonitorJobSeq = anEqpMonitor.allEqpMonitorJobs();
        int nCount = CimArrayUtils.getSize(tmpEqpMonitorJobSeq);
        log.info("Found EqpMonitor Job count: {}", nCount);
        for (int i = 0; i < nCount; i++) {
            CimEqpMonitorJob equipmentMonitorJobDO = tmpEqpMonitorJobSeq.get(i);
            objectIdentifiers.add(
                    new ObjectIdentifier(
                            equipmentMonitorJobDO.getIdentifier(), equipmentMonitorJobDO.getPrimaryKey()));
        }
        return objectIdentifiers;
    }

    @Override
    public ObjectIdentifier eqpMonitorJobCreate(
            Infos.ObjCommon objCommon, ObjectIdentifier eqpMonitorID) {
        /*----------------*/
        /*   Initialize   */
        /*----------------*/
        ObjectIdentifier result = new ObjectIdentifier();
        // ------------------//
        // Trace InParameters//
        // ------------------//
        log.info("in para eqpMonitorID : {}", eqpMonitorID);
        // --------------------------------//
        //  Get Auto Monitor Object  //
        // --------------------------------//
        CimEqpMonitor anEqpMonitor = baseCoreFactory.getBO(CimEqpMonitor.class, eqpMonitorID);
        Validations.check(
                null == anEqpMonitor, retCodeConfig.getNotFoundEqpMonitor(), objCommon.getTransactionID());

        String anEqpMonitorJobID =
                eqpMonitorID.getValue()
                        + BizConstant.HYPHEN
                        + objCommon.getTimeStamp().getReportTimeStamp().toString();

        CimEqpMonitorJob anEqpMonitorJob = anEqpMonitor.createEqpMonitorJobNamed(anEqpMonitorJobID);
        MachineDTO.EqpMonitorInfo strEqpMonitorInfo = anEqpMonitor.getEqpMonitorInfo();

        MachineDTO.EqpMonitorJobInfo eqpMonitorJobInfo = new MachineDTO.EqpMonitorJobInfo();
        eqpMonitorJobInfo.setEqpMonitorJobID(new ObjectIdentifier(anEqpMonitorJobID));
        eqpMonitorJobInfo.setEquipmentID(strEqpMonitorInfo.getMachineID());
        eqpMonitorJobInfo.setChamberID(strEqpMonitorInfo.getChamberID());
        eqpMonitorJobInfo.setEqpMonitorID(strEqpMonitorInfo.getEqpMonitorID());
        eqpMonitorJobInfo.setMonitorJobStatus(BizConstant.SP_EQPMONITORJOB_STATUS_CREATED);
        eqpMonitorJobInfo.setRetryCount(0);
        eqpMonitorJobInfo.setStartTimeStamp(objCommon.getTimeStamp().getReportTimeStamp().toString());
        eqpMonitorJobInfo.setLastClaimedTimeStamp(
                objCommon.getTimeStamp().getReportTimeStamp().toString());
        eqpMonitorJobInfo.setStartUser(objCommon.getUser().getUserID());
        eqpMonitorJobInfo.setLastClaimedUser(objCommon.getUser().getUserID());

        // Set EqpMonitorJob Information
        anEqpMonitorJob.setEqpMonitorJobInfo(eqpMonitorJobInfo);
        return eqpMonitorJobInfo.getEqpMonitorJobID();
    }

    @Override
    public String eqpMonitorStatusChange(
            Infos.ObjCommon objCommon, Infos.EqpMonitorStatusChangeIn eqpMonitorStatusChangeIn) {
        /*----------------*/
        /*   Initialize   */
        /*----------------*/
        log.info("Trace InParameters ：{}", eqpMonitorStatusChangeIn);
        // --------------------------------//
        //  Get Auto Monitor Object  //
        // --------------------------------//
        CimEqpMonitor anEqpMonitor =
                baseCoreFactory.getBO(CimEqpMonitor.class, eqpMonitorStatusChangeIn.getEqpMonitorID());
        String strCurStatus = anEqpMonitor.getMonitorStatus();
        String strEqpMonType = anEqpMonitor.getMonitorType();
        Validations.check(
                CimStringUtils.equals(eqpMonitorStatusChangeIn.getMonitorStatus(), strCurStatus),
                retCodeConfig.getSameEqpMonState());

        if (CimStringUtils.equals(BizConstant.SP_EQPMONITOR_TYPE_ROUTINE, strEqpMonType)) {
            if ((CimStringUtils.equals(BizConstant.SP_EQPMONITOR_STATUS_RUNNING, strCurStatus)
                    || CimStringUtils.equals(BizConstant.SP_EQPMONITOR_STATUS_MONITOROVER, strCurStatus))
                    && CimStringUtils.equals(BizConstant.SP_EQPMONITOR_STATUS_DELETED, strCurStatus)) {
                Validations.check(retCodeConfig.getNotAllowedEqpMonitorStat());
            }
            if (CimStringUtils.equals(BizConstant.SP_EQPMONITOR_STATUS_MONITOROVER, strCurStatus)
                    && (CimStringUtils.equals(
                    BizConstant.SP_EQPMONITOR_STATUS_WARNING,
                    eqpMonitorStatusChangeIn.getMonitorStatus())
                    || CimStringUtils.equals(
                    BizConstant.SP_EQPMONITOR_STATUS_RUNNING,
                    eqpMonitorStatusChangeIn.getMonitorStatus()))) {
                Validations.check(retCodeConfig.getNotAllowedEqpMonitorStat());
            }
            if (CimStringUtils.equals(BizConstant.SP_EQPMONITOR_STATUS_DELETED, strCurStatus)) {
                Validations.check(retCodeConfig.getInvalidEqpmonstatus());
            }
            if (CimStringUtils.isEmpty(strCurStatus)
                    && !CimStringUtils.equals(
                    BizConstant.SP_EQPMONITOR_STATUS_WAITING,
                    eqpMonitorStatusChangeIn.getMonitorStatus())) {
                Validations.check(retCodeConfig.getNotAllowedEqpMonitorStat());
            }
        } else if (BizConstant.SP_EQPMONITOR_TYPE_MANUAL.equals(strEqpMonType)) {
            if (!CimStringUtils.equals(
                    BizConstant.SP_EQPMONITOR_STATUS_WAITING, eqpMonitorStatusChangeIn.getMonitorStatus())
                    && !CimStringUtils.equals(
                    BizConstant.SP_EQPMONITOR_STATUS_RUNNING, eqpMonitorStatusChangeIn.getMonitorStatus())
                    && !CimStringUtils.equals(
                    BizConstant.SP_EQPMONITOR_STATUS_DELETED,
                    eqpMonitorStatusChangeIn.getMonitorStatus())) {
                Validations.check(retCodeConfig.getInvalidEqpmonstatus());
            }
            if (CimStringUtils.equals(BizConstant.SP_EQPMONITOR_STATUS_RUNNING, strCurStatus)
                    && CimStringUtils.equals(
                    BizConstant.SP_EQPMONITOR_STATUS_DELETED,
                    eqpMonitorStatusChangeIn.getMonitorStatus())) {
                Validations.check(retCodeConfig.getNotAllowedEqpMonitorStat());
            }
            if (CimStringUtils.equals(BizConstant.SP_EQPMONITOR_STATUS_DELETED, strCurStatus)) {
                Validations.check(retCodeConfig.getInvalidEqpmonstatus());
            }
            if (CimStringUtils.isEmpty(strCurStatus)
                    && !CimStringUtils.equals(
                    BizConstant.SP_EQPMONITOR_STATUS_WAITING,
                    eqpMonitorStatusChangeIn.getMonitorStatus())) {
                Validations.check(retCodeConfig.getNotAllowedEqpMonitorStat());
            }
        }
        anEqpMonitor.setMonitorStatus(eqpMonitorStatusChangeIn.getMonitorStatus());
        anEqpMonitor.setLastClaimedTimeStamp(objCommon.getTimeStamp().getReportTimeStamp().toString());
        CimPerson personBO = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());
        anEqpMonitor.setLastClaimedUser(personBO);
        return eqpMonitorStatusChangeIn.getMonitorStatus();
    }

    @Override
    public void eqpMonitorActionExecute(
            Infos.ObjCommon objCommon, Infos.EqpMonitorActionExecuteIn eqpMonitorActionExecuteIn) {
        /*----------------*/
        /*   Initialize   */
        /*----------------*/
        log.info("in para : {}", eqpMonitorActionExecuteIn);
        // Get EqpMonitor object
        CimEqpMonitor anEqpMonitor =
                baseCoreFactory.getBO(CimEqpMonitor.class, eqpMonitorActionExecuteIn.getEqpMonitorID());

        CimMachine aMachine = anEqpMonitor.getMachine();
        Validations.check(null == aMachine, retCodeConfig.getNotFoundMachine());

        ObjectIdentifier equipmentID =
                ObjectIdentifier.build(aMachine.getIdentifier(), aMachine.getPrimaryKey());
        StringBuffer messageSb = new StringBuffer();
        messageSb
                .append("This message was sent by EqpMonitor.\\n")
                .append("Schedule Change Reservation Info.\n")
                .append("Auto Monitor ID  : ")
                .append(ObjectIdentifier.fetchValue(eqpMonitorActionExecuteIn.getEqpMonitorID()))
                .append("\n")
                .append("Auto Monitor Job ID    : ")
                .append(ObjectIdentifier.fetchValue(eqpMonitorActionExecuteIn.getEqpMonitorJobID()));

        if (CimStringUtils.equals(
                BizConstant.SP_EQPMONITOR_ACTION_MAIL,
                eqpMonitorActionExecuteIn.getStrEqpMonitorActionInfo().getAction())) {
            messageMethod.messageDistributionMgrPutMessage(
                    objCommon,
                    eqpMonitorActionExecuteIn.getStrEqpMonitorActionInfo().getSysMessageCodeID(),
                    null,
                    "",
                    equipmentID,
                    null,
                    null,
                    ObjectIdentifier.fetchValue(
                            eqpMonitorActionExecuteIn.getStrEqpMonitorActionInfo().getReasonCodeID()),
                    messageSb.toString());
        }

        if (CimStringUtils.equals(
                BizConstant.SP_EQPMONITOR_EVENT_WARNING, eqpMonitorActionExecuteIn.getEventType())) {
            anEqpMonitor.setWarningTimeStamp(objCommon.getTimeStamp().getReportTimeStamp().toString());
            anEqpMonitor.setLastClaimedTimeStamp(
                    objCommon.getTimeStamp().getReportTimeStamp().toString());
            CimPerson personBO = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());
            anEqpMonitor.setLastClaimedUser(personBO);
        }
    }

    @Override
    public String eqpMonitorJobStatusChange(
            Infos.ObjCommon objCommon, Infos.EqpMonitorJobStatusChangeIn eqpMonitorJobStatusChangeIn) {

        /*----------------*/
        /*   Initialize   */
        /*----------------*/
        // ------------------//
        // Trace InParameters//
        // ------------------//
        log.info("in para : {}", eqpMonitorJobStatusChangeIn);
        // --------------------------------//
        //  Get Auto Monitor Object  //
        // --------------------------------//
        CimEqpMonitor anEqpMonitor =
                baseCoreFactory.getBO(CimEqpMonitor.class, eqpMonitorJobStatusChangeIn.getEqpMonitorID());
        Validations.check(null == anEqpMonitor, retCodeConfig.getNotFoundEqpMonitor());

        CimEqpMonitorJob anEqpMonitorJob =
                baseCoreFactory.getBO(
                        CimEqpMonitorJob.class, eqpMonitorJobStatusChangeIn.getEqpMonitorJobID());
        Validations.check(null == anEqpMonitorJob, retCodeConfig.getNotFoundEqpMonitorJob());

        String strCurStatus = anEqpMonitorJob.getMonitorJobStatus();
        Validations.check(
                CimStringUtils.equals(eqpMonitorJobStatusChangeIn.getMonitorJobStatus(), strCurStatus),
                retCodeConfig.getSameEqpmonJobStat());

        if (!CimStringUtils.equals(
                BizConstant.SP_EQPMONITORJOB_STATUS_REQUESTED,
                eqpMonitorJobStatusChangeIn.getMonitorJobStatus())
                && !CimStringUtils.equals(
                BizConstant.SP_EQPMONITORJOB_STATUS_RESERVED,
                eqpMonitorJobStatusChangeIn.getMonitorJobStatus())
                && !CimStringUtils.equals(
                BizConstant.SP_EQPMONITORJOB_STATUS_READY,
                eqpMonitorJobStatusChangeIn.getMonitorJobStatus())
                && !CimStringUtils.equals(
                BizConstant.SP_EQPMONITORJOB_STATUS_EXECUTING,
                eqpMonitorJobStatusChangeIn.getMonitorJobStatus())
                && !CimStringUtils.equals(
                BizConstant.SP_EQPMONITORJOB_STATUS_PASSED,
                eqpMonitorJobStatusChangeIn.getMonitorJobStatus())
                && !CimStringUtils.equals(
                BizConstant.SP_EQPMONITORJOB_STATUS_FAILED,
                eqpMonitorJobStatusChangeIn.getMonitorJobStatus())
                && !CimStringUtils.equals(
                BizConstant.SP_EQPMONITORJOB_STATUS_ABORTED,
                eqpMonitorJobStatusChangeIn.getMonitorJobStatus())) {
            log.error("Invalid Auto Monitor job status is specified.: {}", strCurStatus);
            Validations.check(retCodeConfig.getInvalidEqpMonitorJobStatus());
        }
        if (CimStringUtils.equals(
                BizConstant.SP_EQPMONITORJOB_STATUS_REQUESTED,
                eqpMonitorJobStatusChangeIn.getMonitorJobStatus())
                && (CimStringUtils.equals(
                BizConstant.SP_EQPMONITORJOB_STATUS_EXECUTING,
                eqpMonitorJobStatusChangeIn.getMonitorJobStatus())
                || CimStringUtils.equals(
                BizConstant.SP_EQPMONITORJOB_STATUS_FAILED,
                eqpMonitorJobStatusChangeIn.getMonitorJobStatus())
                || CimStringUtils.equals(
                BizConstant.SP_EQPMONITORJOB_STATUS_PASSED,
                eqpMonitorJobStatusChangeIn.getMonitorJobStatus()))) {
            log.error(
                    "Auto Monitor job status change isn't allowed.: {}",
                    eqpMonitorJobStatusChangeIn.getMonitorJobStatus());
            Validations.check(retCodeConfig.getNotAllowedEqpMonitorjobStat());
        }
        if (CimStringUtils.equals(BizConstant.SP_EQPMONITORJOB_STATUS_RESERVED, strCurStatus)
                && (CimStringUtils.equals(
                BizConstant.SP_EQPMONITORJOB_STATUS_REQUESTED,
                eqpMonitorJobStatusChangeIn.getMonitorJobStatus())
                || CimStringUtils.equals(
                BizConstant.SP_EQPMONITORJOB_STATUS_EXECUTING,
                eqpMonitorJobStatusChangeIn.getMonitorJobStatus())
                || CimStringUtils.equals(
                BizConstant.SP_EQPMONITORJOB_STATUS_FAILED,
                eqpMonitorJobStatusChangeIn.getMonitorJobStatus())
                || CimStringUtils.equals(
                BizConstant.SP_EQPMONITORJOB_STATUS_PASSED,
                eqpMonitorJobStatusChangeIn.getMonitorJobStatus()))) {
            log.error(
                    "Auto Monitor job status change isn't allowed.: {}",
                    eqpMonitorJobStatusChangeIn.getMonitorJobStatus());
            Validations.check(retCodeConfig.getNotAllowedEqpMonitorjobStat());
        }
        if (CimStringUtils.equals(BizConstant.SP_EQPMONITORJOB_STATUS_READY, strCurStatus)
                && (CimStringUtils.equals(
                BizConstant.SP_EQPMONITORJOB_STATUS_REQUESTED,
                eqpMonitorJobStatusChangeIn.getMonitorJobStatus())
                || CimStringUtils.equals(
                BizConstant.SP_EQPMONITORJOB_STATUS_RESERVED,
                eqpMonitorJobStatusChangeIn.getMonitorJobStatus())
                || CimStringUtils.equals(
                BizConstant.SP_EQPMONITORJOB_STATUS_FAILED,
                eqpMonitorJobStatusChangeIn.getMonitorJobStatus())
                || CimStringUtils.equals(
                BizConstant.SP_EQPMONITORJOB_STATUS_PASSED,
                eqpMonitorJobStatusChangeIn.getMonitorJobStatus()))) {
            log.error(
                    "Auto Monitor job status change isn't allowed.: {}",
                    eqpMonitorJobStatusChangeIn.getMonitorJobStatus());
            Validations.check(retCodeConfig.getNotAllowedEqpMonitorjobStat());
        }
        if (CimStringUtils.equals(BizConstant.SP_EQPMONITORJOB_STATUS_EXECUTING, strCurStatus)
                && CimStringUtils.equals(
                BizConstant.SP_EQPMONITORJOB_STATUS_RESERVED,
                eqpMonitorJobStatusChangeIn.getMonitorJobStatus())) {
            log.error(
                    "Auto Monitor job status change isn't allowed. : {}",
                    eqpMonitorJobStatusChangeIn.getMonitorJobStatus());
            Validations.check(retCodeConfig.getNotAllowedEqpMonitorjobStat());
        }
        if (CimStringUtils.equals(BizConstant.SP_EQPMONITORJOB_STATUS_FAILED, strCurStatus)
                || CimStringUtils.equals(BizConstant.SP_EQPMONITORJOB_STATUS_PASSED, strCurStatus)
                || CimStringUtils.equals(BizConstant.SP_EQPMONITORJOB_STATUS_ABORTED, strCurStatus)) {
            log.error("Auto Monitor job status change isn't allowed. : {}", strCurStatus);
            Validations.check(retCodeConfig.getNotAllowedEqpMonitorjobStat());
        }
        if (CimStringUtils.isEmpty(strCurStatus)
                && !CimStringUtils.equals(
                BizConstant.SP_EQPMONITORJOB_STATUS_REQUESTED,
                eqpMonitorJobStatusChangeIn.getMonitorJobStatus())) {
            log.error(
                    "Current Auto Monitor job status change is empty, it can only be changed to Requested.");
            Validations.check(retCodeConfig.getNotAllowedEqpMonitorjobStat());
        }
        anEqpMonitorJob.setMonitorJobStatus(eqpMonitorJobStatusChangeIn.getMonitorJobStatus());
        anEqpMonitorJob.setLastClaimedTimeStamp(objCommon.getTimeStamp().getReportTimeStamp());
        CimPerson personBO = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());
        anEqpMonitorJob.setLastClaimedUser(personBO);
        return eqpMonitorJobStatusChangeIn.getMonitorJobStatus();
    }

    @Override
    public void eqpMonitorJobCompleted(
            Infos.ObjCommon objCommon, Infos.EqpMonitorJobCompletedIn eqpMonitorJobCompletedIn) {
        /*----------------*/
        /*   Initialize   */
        /*----------------*/
        // ------------------//
        // Trace InParameters//
        // ------------------//
        log.info("in para : {}", eqpMonitorJobCompletedIn);
        // --------------------------------//
        //  Get Auto Monitor Object  //
        // --------------------------------//
        CimEqpMonitor anEqpMonitor =
                baseCoreFactory.getBO(CimEqpMonitor.class, eqpMonitorJobCompletedIn.getEqpMonitorID());
        Validations.check(null == anEqpMonitor, retCodeConfig.getNotFoundEqpMonitor());

        CimEqpMonitorJob anEqpMonitorJob =
                baseCoreFactory.getBO(
                        CimEqpMonitorJob.class, eqpMonitorJobCompletedIn.getEqpMonitorJobID());
        Validations.check(null == anEqpMonitorJob, retCodeConfig.getNotFoundEqpMonitorJob());

        anEqpMonitor.removeEqpMonitorJobNamed(anEqpMonitorJob);

        if (CimStringUtils.equals(
                eqpMonitorJobCompletedIn.getMonitorJobStatus(),
                BizConstant.SP_EQPMONITORJOB_STATUS_PASSED)) {
            anEqpMonitor.setLastMonitorPassedTimeStamp(
                    objCommon.getTimeStamp().getReportTimeStamp().toString());
            anEqpMonitor.setWarningTimeStamp(null);
        }
        anEqpMonitor.setLastMonitorTimeStamp(objCommon.getTimeStamp().getReportTimeStamp().toString());
        anEqpMonitor.setLastMonitorResult(eqpMonitorJobCompletedIn.getMonitorJobStatus());
        anEqpMonitor.setLastClaimedTimeStamp(objCommon.getTimeStamp().getReportTimeStamp().toString());

        CimPerson personBO = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());
        anEqpMonitor.setLastClaimedUser(personBO);
    }

    @Override
    public ObjectIdentifier eqpMonitorInfoUpdate(
            Infos.ObjCommon objCommon, Infos.EqpMonitorInfoUpdateIn eqpMonitorInfoUpdateIn) {
        // --------------//
        //  Initialize  //
        // --------------//
        ObjectIdentifier result = new ObjectIdentifier();
        // ------------------//
        // Trace InParameters//
        // ------------------//
        log.info("in para : {}", eqpMonitorInfoUpdateIn);
        List<Infos.EqpMonitorProductInfo> strEqpMonitorProductInfoSeq =
                eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getStrEqpMonitorProductInfoSeq();
        // --------------------------
        //  Check product category and status
        // --------------------------
        if (CimStringUtils.equals(
                BizConstant.SP_EQPMONITOR_OPECATEGORY_CREATE, eqpMonitorInfoUpdateIn.getActionType())
                || CimStringUtils.equals(
                BizConstant.SP_EQPMONITOR_OPECATEGORY_UPDATE, eqpMonitorInfoUpdateIn.getActionType())) {
            int prodLen = CimArrayUtils.getSize(strEqpMonitorProductInfoSeq);
            log.info("prodLen : {}", prodLen);
            for (int i = 0; i < prodLen; i++) {
                log.info("loop for strEqpMonitorProductInfoSeq : {}", prodLen);
                CimProductSpecification aPosProductSpec =
                        baseCoreFactory.getBO(
                                CimProductSpecification.class, strEqpMonitorProductInfoSeq.get(i).getProductID());
                Validations.check(null == aPosProductSpec, retCodeConfig.getNotFoundProductSpec());
                CimMachineRecipe cimMachineRecipe =
                        baseCoreFactory.getBO(
                                CimMachineRecipe.class, strEqpMonitorProductInfoSeq.get(i).getRecipeID());
                Validations.check(null == cimMachineRecipe, retCodeConfig.getNotFoundMachineRecipe());

                String productState = aPosProductSpec.getState();
                log.info("productState : {}", productState);
                Validations.check(
                        CimStringUtils.equals(BizConstant.SP_PRODUCTSPECIFICATION_STATE_OBSOLETE, productState)
                                || CimStringUtils.equals(
                                BizConstant.SP_PRODUCTSPECIFICATION_STATE_DRAFT, productState),
                        retCodeConfig.getInvalidProductStat());

                com.fa.cim.newcore.bo.prodspec.CimProductCategory aPosProdCategory =
                        aPosProductSpec.getProductCategory();
                if (null != aPosProdCategory) {
                    Validations.check(
                            !CimStringUtils.equals(
                                    BizConstant.SP_PRODUCTCATEGORY_EQUIPMENTMONITOR,
                                    aPosProdCategory.getIdentifier())
                                    && !CimStringUtils.equals(
                                    BizConstant.SP_PRODUCTCATEGORY_DUMMY, aPosProdCategory.getIdentifier()),
                            retCodeConfig.getInvalidProductCategory());
                }
            }
        }

        if (CimStringUtils.equals(
                BizConstant.SP_EQPMONITOR_OPECATEGORY_CREATE, eqpMonitorInfoUpdateIn.getActionType())) {
            // Create EqpMonitor
            CimEqpMonitor aPosEqpMonitor = null;
            // BUG-2048 check the autoMonitor ID if already exist
            try {

                aPosEqpMonitor =
                        newMachineManager.createEqpMonitor(
                                ObjectIdentifier.fetchValue(
                                        eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getEqpMonitorID()));
            } catch (DuplicateRecordException ex) {
                Validations.check(
                        true,
                        retCodeConfigEx.getAlreadyExistMonitorID(),
                        ObjectIdentifier.fetchValue(
                                eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getEqpMonitorID()));
            }

            Validations.check(null == aPosEqpMonitor, retCodeConfig.getNotFoundEqpMonitor());
            // Set EqpMonitor Info
            MachineDTO.EqpMonitorInfo aEqpMonitorInfo = new MachineDTO.EqpMonitorInfo();
            aEqpMonitorInfo.setEqpMonitorID(
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getEqpMonitorID());
            CimMachine machineBO =
                    baseCoreFactory.getBO(
                            CimMachine.class,
                            eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getEquipmentID());
            aEqpMonitorInfo.setMachineID(
                    ObjectIdentifier.build(machineBO.getIdentifier(), machineBO.getPrimaryKey()));
            aEqpMonitorInfo.setChamberID(
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getChamberID());
            aEqpMonitorInfo.setDescription(
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getDescription());
            aEqpMonitorInfo.setMonitorType(
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getMonitorType());
            aEqpMonitorInfo.setScheduleType(
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getScheduleType());
            // Set EqpMonitor Product
            int eqpMonProdLen = CimArrayUtils.getSize(strEqpMonitorProductInfoSeq);
            log.info("eqpMonProdLen : {}", eqpMonProdLen);
            List<MachineDTO.EqpMonitorProductSpecificationInfo> eqpMonitorProductInfoSeq =
                    new ArrayList<>();
            for (int i = 0; i < eqpMonProdLen; i++) {
                MachineDTO.EqpMonitorProductSpecificationInfo eqpMonitorProductInfo =
                        new MachineDTO.EqpMonitorProductSpecificationInfo();
                eqpMonitorProductInfo.setProductSpecificationID(
                        strEqpMonitorProductInfoSeq.get(i).getProductID());
                eqpMonitorProductInfo.setRecipeID(strEqpMonitorProductInfoSeq.get(i).getRecipeID());
                eqpMonitorProductInfo.setStartSeqNo(strEqpMonitorProductInfoSeq.get(i).getStartSeqNo());
                eqpMonitorProductInfo.setWaferCount(strEqpMonitorProductInfoSeq.get(i).getWaferCount());
                eqpMonitorProductInfoSeq.add(eqpMonitorProductInfo);
            }
            aEqpMonitorInfo.setEqpMonitorProdSpecs(eqpMonitorProductInfoSeq);

            if (CimStringUtils.equals(
                    BizConstant.SP_EQPMONITOR_TYPE_ROUTINE,
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getMonitorType())) {
                log.info("monitorType is Routine");
                aEqpMonitorInfo.setStartTimeStamp(
                        eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getStartTimeStamp());
                aEqpMonitorInfo.setExecutionInterval(
                        eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getExecutionInterval());
                aEqpMonitorInfo.setWarningInterval(
                        eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getWarningInterval());
                aEqpMonitorInfo.setExpirationInterval(
                        eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getExpirationInterval());
            } else if (CimStringUtils.equals(
                    BizConstant.SP_EQPMONITOR_TYPE_MANUAL,
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getMonitorType())) {
                aEqpMonitorInfo.setStartTimeStamp(
                        Timestamp.valueOf(BizConstant.SP_TIMESTAMP_NIL_OBJECT_STRING));
                aEqpMonitorInfo.setExecutionInterval(0);
                aEqpMonitorInfo.setWarningInterval(0);
                aEqpMonitorInfo.setExpirationInterval(0);
            }
            aEqpMonitorInfo.setStandAloneFlag(
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getStandAloneFlag());
            aEqpMonitorInfo.setKitFlag(eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getKitFlag());
            if (null != eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getWarningTime()) {
                aEqpMonitorInfo.setWarningTimeStamp(
                        Timestamp.valueOf(
                                eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getWarningTime()));
            }
            aEqpMonitorInfo.setMaxRetryCount(
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getMaxRetryCount());
            if (null != eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getEqpStateAtStart()) {
                aEqpMonitorInfo.setMachineStateAtStart(
                        eqpMonitorInfoUpdateIn
                                .getStrEqpMonitorDetailInfo()
                                .getEqpStateAtStart()
                                .getEquipmentStatusCode());
            }
            if (null != eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getEqpStateAtPassed()) {
                aEqpMonitorInfo.setMachineStateAtPassed(
                        eqpMonitorInfoUpdateIn
                                .getStrEqpMonitorDetailInfo()
                                .getEqpStateAtPassed()
                                .getEquipmentStatusCode());
            }
            if (null != eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getEqpStateAtFailed()) {
                aEqpMonitorInfo.setMachineStateAtFailed(
                        eqpMonitorInfoUpdateIn
                                .getStrEqpMonitorDetailInfo()
                                .getEqpStateAtFailed()
                                .getEquipmentStatusCode());
            }
            // Set EqpMonitor Action
            List<Infos.EqpMonitorActionInfo> strEqpMonitorActionInfoSeq =
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getStrEqpMonitorActionInfoSeq();
            int eqpMonActionLen = CimArrayUtils.getSize(strEqpMonitorActionInfoSeq);
            log.info("eqpMonActionLen : {}", eqpMonActionLen);
            List<MachineDTO.EqpMonitorActionInfo> eqpMonitorActions = new ArrayList<>();
            for (int i = 0; i < eqpMonActionLen; i++) {
                MachineDTO.EqpMonitorActionInfo eqpMonitorActionInfo =
                        new MachineDTO.EqpMonitorActionInfo();
                eqpMonitorActionInfo.setEventType(strEqpMonitorActionInfoSeq.get(i).getEventType());
                eqpMonitorActionInfo.setAction(strEqpMonitorActionInfoSeq.get(i).getAction());
                eqpMonitorActionInfo.setReasonCodeID(strEqpMonitorActionInfoSeq.get(i).getReasonCodeID());
                eqpMonitorActionInfo.setSysMessageCodeID(
                        strEqpMonitorActionInfoSeq.get(i).getSysMessageCodeID());
                eqpMonitorActionInfo.setCustomField(strEqpMonitorActionInfoSeq.get(i).getCustomField());
                eqpMonitorActions.add(eqpMonitorActionInfo);
            }
            aEqpMonitorInfo.setEqpMonitorActions(eqpMonitorActions);

            aEqpMonitorInfo.setMonitorStatus(
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getMonitorStatus());
            aEqpMonitorInfo.setScheduleBaseTimeStamp(
                    Timestamp.valueOf(
                            eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getScheduleBaseTimeStamp()));
            aEqpMonitorInfo.setScheduleAdjustment(
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getScheduleAdjustment());
            aEqpMonitorInfo.setLastMonitorTimeStamp(
                    Timestamp.valueOf(
                            eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getLastMonitorTimeStamp()));
            aEqpMonitorInfo.setLastMonitorResult(
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getLastMonitorResult());
            aEqpMonitorInfo.setLastMonitorPassedTimeStamp(
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getLastMonitorPassedTimeStamp());
            aEqpMonitorInfo.setLastClaimedTimeStamp(
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getLastClaimedTimeStamp());
            aEqpMonitorInfo.setLastClaimedUser(
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getLastClaimedUser());

            aPosEqpMonitor.setEqpMonitorInfo(aEqpMonitorInfo);
            result = eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getEqpMonitorID();
        } else if (CimStringUtils.equals(
                BizConstant.SP_EQPMONITOR_OPECATEGORY_UPDATE, eqpMonitorInfoUpdateIn.getActionType())) {
            // Get EqpMonitor
            CimEqpMonitor aPosEqpMonitor =
                    baseCoreFactory.getBO(
                            CimEqpMonitor.class,
                            eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getEqpMonitorID());
            Validations.check(null == aPosEqpMonitor, retCodeConfig.getNotFoundEqpMonitor());
            // Remove all EqpMonitor Product
            aPosEqpMonitor.removeAllMonitorProductSpecifications();
            // Remove all EqpMonitor Action
            aPosEqpMonitor.removeAllMonitorActions();
            // Get EqpMonitor Info
            MachineDTO.EqpMonitorInfo aEqpMonitorInfo = aPosEqpMonitor.getEqpMonitorInfo();
            aEqpMonitorInfo.setChamberID(
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getChamberID());
            aEqpMonitorInfo.setDescription(
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getDescription());
            // Set EqpMonitor Product
            int eqpMonProdLen = CimArrayUtils.getSize(strEqpMonitorProductInfoSeq);
            log.info("eqpMonProdLen : {}", eqpMonProdLen);
            List<MachineDTO.EqpMonitorProductSpecificationInfo> eqpMonitorProductInfoSeq =
                    new ArrayList<>();
            for (int i = 0; i < eqpMonProdLen; i++) {
                MachineDTO.EqpMonitorProductSpecificationInfo eqpMonitorProductInfo =
                        new MachineDTO.EqpMonitorProductSpecificationInfo();
                eqpMonitorProductInfo.setProductSpecificationID(
                        strEqpMonitorProductInfoSeq.get(i).getProductID());
                eqpMonitorProductInfo.setRecipeID(strEqpMonitorProductInfoSeq.get(i).getRecipeID());
                eqpMonitorProductInfo.setStartSeqNo(strEqpMonitorProductInfoSeq.get(i).getStartSeqNo());
                eqpMonitorProductInfo.setWaferCount(strEqpMonitorProductInfoSeq.get(i).getWaferCount());
                eqpMonitorProductInfoSeq.add(eqpMonitorProductInfo);
            }
            aEqpMonitorInfo.setEqpMonitorProdSpecs(eqpMonitorProductInfoSeq);

            if (CimStringUtils.equals(
                    BizConstant.SP_EQPMONITOR_TYPE_ROUTINE,
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getMonitorType())) {
                log.info("monitorType is Routine");
                aEqpMonitorInfo.setStartTimeStamp(
                        eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getStartTimeStamp());
                if (0
                        == CimDateUtils.compare(
                        eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getStartTimeStamp(),
                        aEqpMonitorInfo.getLastMonitorPassedTimeStamp())) {
                    aEqpMonitorInfo.setLastMonitorPassedTimeStamp(
                            eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getStartTimeStamp());
                }
                aEqpMonitorInfo.setExecutionInterval(
                        eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getExecutionInterval());
                aEqpMonitorInfo.setWarningInterval(
                        eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getWarningInterval());
                aEqpMonitorInfo.setExpirationInterval(
                        eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getExpirationInterval());
            } else if (CimStringUtils.equals(
                    BizConstant.SP_EQPMONITOR_TYPE_MANUAL,
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getMonitorType())) {
                aEqpMonitorInfo.setStartTimeStamp(
                        Timestamp.valueOf(BizConstant.SP_TIMESTAMP_NIL_OBJECT_STRING));
                aEqpMonitorInfo.setExecutionInterval(0);
                aEqpMonitorInfo.setWarningInterval(0);
                aEqpMonitorInfo.setExpirationInterval(0);
            }
            aEqpMonitorInfo.setStandAloneFlag(
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getStandAloneFlag());
            aEqpMonitorInfo.setKitFlag(eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getKitFlag());
            if (null != eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getWarningTime()) {
                aEqpMonitorInfo.setWarningTimeStamp(
                        Timestamp.valueOf(
                                eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getWarningTime()));
            }
            aEqpMonitorInfo.setMaxRetryCount(
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getMaxRetryCount());
            aEqpMonitorInfo.setMachineStateAtStart(
                    eqpMonitorInfoUpdateIn
                            .getStrEqpMonitorDetailInfo()
                            .getEqpStateAtStart()
                            .getEquipmentStatusCode());
            aEqpMonitorInfo.setMachineStateAtPassed(
                    eqpMonitorInfoUpdateIn
                            .getStrEqpMonitorDetailInfo()
                            .getEqpStateAtPassed()
                            .getEquipmentStatusCode());
            aEqpMonitorInfo.setMachineStateAtFailed(
                    eqpMonitorInfoUpdateIn
                            .getStrEqpMonitorDetailInfo()
                            .getEqpStateAtFailed()
                            .getEquipmentStatusCode());
            // Set EqpMonitor Action
            List<Infos.EqpMonitorActionInfo> strEqpMonitorActionInfoSeq =
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getStrEqpMonitorActionInfoSeq();
            int eqpMonActionLen = CimArrayUtils.getSize(strEqpMonitorActionInfoSeq);
            log.info("eqpMonActionLen : {}", eqpMonActionLen);
            List<MachineDTO.EqpMonitorActionInfo> eqpMonitorActions = new ArrayList<>();
            for (int i = 0; i < eqpMonActionLen; i++) {
                MachineDTO.EqpMonitorActionInfo eqpMonitorActionInfo =
                        new MachineDTO.EqpMonitorActionInfo();
                eqpMonitorActionInfo.setEventType(strEqpMonitorActionInfoSeq.get(i).getEventType());
                eqpMonitorActionInfo.setAction(strEqpMonitorActionInfoSeq.get(i).getAction());
                eqpMonitorActionInfo.setReasonCodeID(strEqpMonitorActionInfoSeq.get(i).getReasonCodeID());
                eqpMonitorActionInfo.setSysMessageCodeID(
                        strEqpMonitorActionInfoSeq.get(i).getSysMessageCodeID());
                eqpMonitorActionInfo.setCustomField(strEqpMonitorActionInfoSeq.get(i).getCustomField());
                eqpMonitorActions.add(eqpMonitorActionInfo);
            }
            aEqpMonitorInfo.setEqpMonitorActions(eqpMonitorActions);

            aEqpMonitorInfo.setScheduleBaseTimeStamp(
                    Timestamp.valueOf(
                            eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getScheduleBaseTimeStamp()));
            aEqpMonitorInfo.setScheduleAdjustment(
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getScheduleAdjustment());
            aEqpMonitorInfo.setLastClaimedTimeStamp(
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getLastClaimedTimeStamp());
            aEqpMonitorInfo.setLastClaimedUser(
                    eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getLastClaimedUser());
            aPosEqpMonitor.setEqpMonitorInfo(aEqpMonitorInfo);
            result = eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getEqpMonitorID();
        } else if (CimStringUtils.equals(
                BizConstant.SP_EQPMONITOR_OPECATEGORY_DELETE, eqpMonitorInfoUpdateIn.getActionType())) {
            // Get EqpMonitor
            CimEqpMonitor aPosEqpMonitor =
                    baseCoreFactory.getBO(
                            CimEqpMonitor.class,
                            eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getEqpMonitorID());
            Validations.check(null == aPosEqpMonitor, retCodeConfig.getNotFoundEqpMonitor());

            // Remove EqpMonitor
            newMachineManager.removeEqpMonitor(aPosEqpMonitor);
            result = eqpMonitorInfoUpdateIn.getStrEqpMonitorDetailInfo().getEqpMonitorID();

        } else {
            Validations.check(true, retCodeConfig.getInvalidParameterWithMsg());
        }
        return result;
    }

    @Override
    public Outputs.ObjMachineTypeGetOut machineTypeGet(
            Infos.ObjCommon objCommon, ObjectIdentifier machineID) {
        Outputs.ObjMachineTypeGetOut objMachineTypeGetOut = new Outputs.ObjMachineTypeGetOut();
        // =========================================================================
        // Get reticle list into output structure
        // =========================================================================
        CimMachine aPosMachine = null;
        CimStorageMachine aPosStorageMachine = null;
        boolean isStorageBool = false;
        Validations.check(ObjectUtils.isEmpty(machineID), retCodeConfig.getNotFoundEquipment());
        Machine aMachine = newMachineManager.findMachineNamed(machineID.getValue());
        if (aMachine == null) {
            aMachine = newMachineManager.findStorageMachineNamed(machineID.getValue());
            Validations.check(
                    aMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), machineID.getValue()));
            isStorageBool = aMachine.isStorageMachine();
        }
        Validations.check(null == aMachine, retCodeConfig.getNotFoundEquipment());
        objMachineTypeGetOut.setBStorageMachineFlag(isStorageBool);
        if (isStorageBool) {
            aPosStorageMachine = (CimStorageMachine) aMachine;
            objMachineTypeGetOut.setStockerID(
                    new ObjectIdentifier(
                            aPosStorageMachine.getIdentifier(), aPosStorageMachine.getPrimaryKey()));
            objMachineTypeGetOut.setStockerType(aPosStorageMachine.getStockerType());
            CimArea aworkArea = aPosStorageMachine.getWorkArea();
            if (aworkArea != null) {
                String aworkAreaid = aworkArea.getIdentifier();
                objMachineTypeGetOut.setAreaID(
                        new ObjectIdentifier(aworkArea.getIdentifier(), aworkArea.getPrimaryKey()));
            }
        } else {
            aPosMachine = (CimMachine) aMachine;
            objMachineTypeGetOut.setEquipmentID(
                    new ObjectIdentifier(aPosMachine.getIdentifier(), aPosMachine.getPrimaryKey()));
            objMachineTypeGetOut.setEquipmentType(aPosMachine.getMachineType());
            CimArea aworkArea = aPosMachine.getWorkArea();
            if (aworkArea != null) {
                String aworkAreaid = aworkArea.getIdentifier();
                objMachineTypeGetOut.setAreaID(
                        new ObjectIdentifier(aworkArea.getIdentifier(), aworkArea.getPrimaryKey()));
            }
        }
        return objMachineTypeGetOut;
    }

    @Override
    public void equipmentLotCheckFlowBatchConditionForLoading(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, Infos.StartCassette startCassette) {
        /*--------------------------*/
        /*   Get Equipment Object   */
        /*--------------------------*/
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == aMachine, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));

        /*----------------------------------------*/
        /*   Get Equipment's Reserved FlowBatch   */
        /*----------------------------------------*/
        List<com.fa.cim.newcore.bo.dispatch.CimFlowBatch> eqpFlowBatches = aMachine.allFlowBatches();
        int eqpFBLen = CimArrayUtils.getSize(eqpFlowBatches);
        List<ObjectIdentifier> eqpFlowBatchIDs = new ArrayList<>();
        for (int i = 0; i < eqpFBLen; i++) {
            com.fa.cim.newcore.bo.dispatch.CimFlowBatch cimFlowBatch = eqpFlowBatches.get(i);
            eqpFlowBatchIDs.add(
                    new ObjectIdentifier(cimFlowBatch.getIdentifier(), cimFlowBatch.getPrimaryKey()));
        }
        int lenCassette = 0;
        ObjectIdentifier loadingFBID = null;
        if (eqpFBLen > 0) {
            lenCassette = CimArrayUtils.getSize(startCassette.getLotInCassetteList());
            for (int i = 0; i < lenCassette; i++) {
                Infos.LotInCassette lotInCassette = startCassette.getLotInCassetteList().get(i);
                if (!lotInCassette.getMoveInFlag()) {
                    continue;
                }
                CimLot aLot = baseCoreFactory.getBO(CimLot.class, lotInCassette.getLotID());
                Validations.check(
                        aLot == null,
                        new OmCode(retCodeConfig.getNotFoundLot(), lotInCassette.getLotID().getValue()));
                com.fa.cim.newcore.bo.dispatch.CimFlowBatch aLotFlowBatch = aLot.getFlowBatch();
                ObjectIdentifier lotFlowBatchID = null;
                if (null != aLotFlowBatch) {
                    lotFlowBatchID =
                            new ObjectIdentifier(aLotFlowBatch.getIdentifier(), aLotFlowBatch.getPrimaryKey());
                }
                boolean findFBFlag = false;
                for (int m = 0; m < eqpFBLen; m++) {
                    if (ObjectIdentifier.equalsWithValue(eqpFlowBatchIDs.get(m), lotFlowBatchID)) {
                        findFBFlag = true;
                        break;
                    }
                }
                Validations.check(!findFBFlag, retCodeConfig.getFlowBatchLotsMissing());
                /*------------------------------*/
                /* Check Multiple Flow Batch ID */
                /*------------------------------*/
                if (ObjectIdentifier.isEmptyWithValue(loadingFBID)) {
                    loadingFBID = lotFlowBatchID;
                } else {
                    Validations.check(
                            !ObjectIdentifier.equalsWithValue(loadingFBID, lotFlowBatchID),
                            new OmCode(
                                    retCodeConfig.getMutipleFlowBatchLotsFound(),
                                    startCassette.getCassetteID().getValue()));
                }
            }
        }
        /*--------------------------------------*/
        /*                                      */
        /*   Check Flow Batch Condition - [2]   */
        /*                                      */
        /*--------------------------------------*/
        lenCassette = CimArrayUtils.getSize(startCassette.getLotInCassetteList());
        for (int i = 0; i < lenCassette; i++) {
            Infos.LotInCassette lotInCassette = startCassette.getLotInCassetteList().get(i);
            if (!lotInCassette.getMoveInFlag()) {
                continue;
            }
            CimLot aLot = baseCoreFactory.getBO(CimLot.class, lotInCassette.getLotID());
            Validations.check(
                    aLot == null,
                    new OmCode(retCodeConfig.getNotFoundLot(), lotInCassette.getLotID().getValue()));
            com.fa.cim.newcore.bo.pd.CimProcessOperation aPO = aLot.getProcessOperation();
            ProcessDTO.PosFlowBatchControl flowBatchControl = null;
            if (aPO != null) {
                flowBatchControl = aPO.getFlowBatchControl();
            }
            if (flowBatchControl != null) {
                continue;
            } else if (null != flowBatchControl && CimStringUtils.isEmpty(flowBatchControl.getName())) {
                continue;
            }
            com.fa.cim.newcore.bo.dispatch.CimFlowBatch aLotFlowBatch = aLot.getFlowBatch();
            Validations.check(aLotFlowBatch == null, new OmCode(retCodeConfig.getLotFlowBatchIdBlank()));
            CimMachine aReservedMachine = aLotFlowBatch.getMachine();
            Validations.check(aReservedMachine == null, retCodeConfig.getFlowBatchReservedEqpIdBlank());
            if (flowBatchControl != null && flowBatchControl.isTargetOperation()) {
                ObjectIdentifier reservedEquipmentID =
                        new ObjectIdentifier(
                                aReservedMachine.getIdentifier(), aReservedMachine.getPrimaryKey());
                Validations.check(
                        !ObjectIdentifier.equalsWithValue(reservedEquipmentID, equipmentID),
                        retCodeConfig.getEquipmentReservedForOtherFlowBatch());
            }
        }
    }

    @Override
    public Outputs.ObjEquipmentPriorityOrderGetByLotAvailabilityOut
    equipmentPriorityOrderGetByLotAvailability(
            Infos.ObjCommon objCommon,
            List<ObjectIdentifier> equipmentIDs,
            ObjectIdentifier lotID,
            Boolean checkInhibitFlag,
            Boolean checkMachineAvailabilityFlag) {
        Outputs.ObjEquipmentPriorityOrderGetByLotAvailabilityOut
                objEquipmentPriorityOrderGetByLotAvailabilityOut =
                new Outputs.ObjEquipmentPriorityOrderGetByLotAvailabilityOut();
        /*******************************/
        /*  Sort Equipments.           */
        /*******************************/
        List<Infos.WhereNextEqpStatus> baseEqpList = new ArrayList<>();
        List<Infos.WhereNextEqpStatus> priorDispEqpList = new ArrayList<>();
        List<Infos.WhereNextEqpStatus> otherDispEqpList = new ArrayList<>();
        List<Infos.WhereNextEqpStatus> inactiveEqpList = new ArrayList<>();
        Boolean activeEqpExistFlag = false;
        if (!CimObjectUtils.isEmpty(equipmentIDs)) {
            for (ObjectIdentifier equipmentID : equipmentIDs) {
                /************************************/
                /*  Get Equipment operation mode.   */
                /************************************/
                log.info("Step1 - equipment_operationMode_GetDR");
                String equipmentOperationModeGetDRResult =
                        equipmentOperationModeGetDR(objCommon, equipmentID);

                /****************************************/
                /*  Get Equipment status information.   */
                /****************************************/
                log.info("Step2 - equipment_statusInfo_GetDR__090");
                Infos.EqpStatusInfo equipmentStatusInfo = equipmentStatusInfoGetDR(objCommon, equipmentID);
                Infos.WhereNextEqpStatus priorDispEqp = new Infos.WhereNextEqpStatus();
                Infos.WhereNextEqpStatus otherDispEqp = new Infos.WhereNextEqpStatus();
                Infos.WhereNextEqpStatus inactiveEqp = new Infos.WhereNextEqpStatus();
                Infos.WhereNextEqpStatus baseEqp = new Infos.WhereNextEqpStatus();
                baseEqpList.add(baseEqp);
                baseEqp.setEquipmentID(equipmentID);
                baseEqp.setEquipmentMode(equipmentOperationModeGetDRResult);
                baseEqp.setEquipmentStatusCode(equipmentStatusInfo.getEquipmentStatusCode());
                baseEqp.setEquipmentStatusDescription(equipmentStatusInfo.getEquipmentStatusDescription());
                baseEqp.setEquipmentAvailableFlag(equipmentStatusInfo.getEquipmentAvailableFlag());
                baseEqp.setE10Status(new ObjectIdentifier(equipmentStatusInfo.getE10Status()));
                /**********************************************/
                /*  Get Equipment E10 availability for lot.   */
                /**********************************************/
                Boolean objMachineStateAvailabilityCheckOut = true;
                if (CimBooleanUtils.isTrue(checkMachineAvailabilityFlag)) {
                    log.info("Step3 - machineState_availability_Check");
                    Boolean objMachineStateAvailabilityCheckOutRetCode =
                            machineStateAvailabilityCheck(
                                    objCommon, equipmentStatusInfo.getEquipmentStatusCode(), lotID);

                    objMachineStateAvailabilityCheckOut = objMachineStateAvailabilityCheckOutRetCode;
                }
                baseEqp.setEquipmentAvailableFlag(objMachineStateAvailabilityCheckOut);
                /*****************************************/
                /*  Get Entity Inhibition for Lot/Eqp.   */
                /*****************************************/
                List<Infos.EntityInhibitInfo> entityInhibitInfoList = new ArrayList<>();
                if (CimBooleanUtils.isTrue(checkInhibitFlag)) {
                    log.info("Step4 - entityInhibit_CheckForLotDR");
                    List<Infos.EntityInhibitInfo> objEntityInhibitCheckForLotDRoutRetCode =
                            constraintMethod.constraintCheckForLotDR(objCommon, lotID, baseEqp.getEquipmentID());

                    entityInhibitInfoList = objEntityInhibitCheckForLotDRoutRetCode;
                }
                if (!CimObjectUtils.isEmpty(entityInhibitInfoList)) {
                    baseEqp.setEntityInhibitions(
                            entityInhibitInfoList.stream()
                                    .map(entityInhibitInfo -> entityInhibitInfo.getEntityInhibitAttributes())
                                    .collect(Collectors.toList()));
                } else {
                    baseEqp.setEntityInhibitions(new ArrayList<>());
                }
                /*************************************************************************************************************/
                /*  Both checkInhibitFlag and checkMachineAvailabilityFlag are false, then following sort logic is omitted.  */
                /*************************************************************************************************************/
                if (CimBooleanUtils.isFalse(checkInhibitFlag)
                        && CimBooleanUtils.isFalse(checkMachineAvailabilityFlag)) {
                    BeanUtils.copyProperties(baseEqp, priorDispEqp);
                    if (priorDispEqp != null) {
                        priorDispEqpList.add(priorDispEqp);
                    }
                    activeEqpExistFlag = true;
                    continue;
                }
                /*****************************************/
                /*  Check active equipment existance.    */
                /*****************************************/
                if (CimBooleanUtils.isTrue(baseEqp.isEquipmentAvailableFlag())
                        && CimObjectUtils.isEmpty(baseEqp.getEntityInhibitions())) {
                    activeEqpExistFlag = true;
                    /***************************************/
                    /*  Get Equipment Online Mode.         */
                    /***************************************/
                    // Semi-Start3 and Auto-3 are prior.
                    log.info("Step5 - equipment_portOperationMode_GetDR");
                    List<Infos.PortOperationMode> portOperationModeList =
                            equipmentPortOperationModeGetDR(objCommon, baseEqp.getEquipmentID());

                    Boolean autoDispPortFoundFlag = false;
                    if (!CimObjectUtils.isEmpty(portOperationModeList)) {
                        for (Infos.PortOperationMode portOperationMode : portOperationModeList) {
                            if (CimStringUtils.equals(
                                    portOperationMode.getOperationMode().getAccessMode(),
                                    BizConstant.SP_EQP_ACCESSMODE_AUTO)) {
                                BeanUtils.copyProperties(baseEqp, priorDispEqp);
                                if (priorDispEqp != null) {
                                    priorDispEqpList.add(priorDispEqp);
                                }
                                autoDispPortFoundFlag = true;
                                break;
                            }
                        }
                    }
                    if (CimBooleanUtils.isFalse(autoDispPortFoundFlag)) {
                        BeanUtils.copyProperties(baseEqp, otherDispEqp);
                        if (otherDispEqp != null) {
                            otherDispEqpList.add(otherDispEqp);
                        }
                    }
                } else {
                    BeanUtils.copyProperties(baseEqp, inactiveEqp);
                    if (inactiveEqp != null) {
                        inactiveEqpList.add(inactiveEqp);
                    }
                }
            }
        }
        /*********************************/
        /*  Set return structure         */
        /*********************************/
        List<Infos.WhereNextEqpStatus> whereNextEqpStatusList = new ArrayList<>();
        objEquipmentPriorityOrderGetByLotAvailabilityOut.setWhereNextEqpStatuseList(
                whereNextEqpStatusList);
        if (!CimObjectUtils.isEmpty(priorDispEqpList)) {
            whereNextEqpStatusList.addAll(priorDispEqpList);
        }
        if (!CimObjectUtils.isEmpty(otherDispEqpList)) {
            whereNextEqpStatusList.addAll(otherDispEqpList);
        }
        if (!CimObjectUtils.isEmpty(inactiveEqpList)) {
            whereNextEqpStatusList.addAll(inactiveEqpList);
        }
        objEquipmentPriorityOrderGetByLotAvailabilityOut.setAvailableEqpExistFlag(activeEqpExistFlag);
        return objEquipmentPriorityOrderGetByLotAvailabilityOut;
    }

    @Override
    public Boolean machineStateAvailabilityCheck(
            Infos.ObjCommon objCommon, ObjectIdentifier machineStateID, ObjectIdentifier lotID) {
        Boolean result = false;
        /*****************************/
        /*  Check input parameter    */
        /*****************************/
        Validations.check(
                ObjectIdentifier.isEmptyWithValue(machineStateID), retCodeConfig.getInvalidDataContents());

        /****************************************/
        /*  Check machine state availability    */
        /****************************************/
        CimMachineState aMachineState = baseCoreFactory.getBO(CimMachineState.class, machineStateID);
        result = aMachineState.isMachineAvailable();
        /****************************************************/
        /*  If machine state is available and lotID exists, */
        /*  check conditional availability for Lot          */
        /****************************************************/
        if (result && !ObjectIdentifier.isEmptyWithValue(lotID)) {
            Boolean condFlag = aMachineState.isConditionalAvailable();
            if (condFlag) {
                CimLot aLot = baseCoreFactory.getBO(CimLot.class, lotID);
                String subLotType = aLot.getSubLotType();
                result = aMachineState.isConditionalAvailableFor(subLotType);
            }
        }
        return result;
    }

    @Override
    public List<Infos.PortOperationMode> equipmentPortOperationModeGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        String sql =
                "SELECT  PORT.PORT_ID,\n"
                        + "                    PORT.ID PORTREFK,\n"
                        + "                    PORT.PORT_GRP,\n"
                        + "                    PORT.PORT_TYPE,\n"
                        + "                    OPEMODE.OPE_MODE_ID,\n"
                        + "                    OPEMODE.ID OPEMODEREFK,\n"
                        + "                    OPEMODE.ONLINE_MODE,\n"
                        + "                    OPEMODE.DESCRIPTION,\n"
                        + "                    OPEMODE.DISPATCH_MODE,\n"
                        + "                    OPEMODE.ACCESS_MODE,\n"
                        + "                    OPEMODE.MOVE_IN_MODE,\n"
                        + "                    OPEMODE.MOVE_OUT_MODE\n"
                        + "            FROM    OMPORT PORT,\n"
                        + "                    OMEQPOPEMODE OPEMODE\n"
                        + "            WHERE   PORT.EQP_ID=?\n"
                        + "            AND     OPEMODE.OPE_MODE_ID=PORT.EQP_OPE_MODE_ID";
        List<Object[]> queryResultList =
                cimJpaRepository.query(sql, new Object[]{equipmentID.getValue()});
        List<Infos.PortOperationMode> portOperationModeList = new ArrayList<>();
        if (!CimObjectUtils.isEmpty(queryResultList)) {
            for (Object[] object : queryResultList) {
                Infos.PortOperationMode portOperationMode = new Infos.PortOperationMode();
                portOperationMode.setPortID(new ObjectIdentifier((String) object[0], (String) object[1]));
                portOperationMode.setPortGroup((String) object[2]);
                portOperationMode.setPortUsage((String) object[3]);
                Infos.OperationMode operationMode = new Infos.OperationMode();
                portOperationMode.setOperationMode(operationMode);
                operationMode.setOperationMode(
                        new ObjectIdentifier((String) object[4], (String) object[5]));
                operationMode.setOnlineMode((String) object[6]);
                operationMode.setDescription((String) object[7]);
                operationMode.setDispatchMode((String) object[8]);
                operationMode.setAccessMode((String) object[9]);
                operationMode.setMoveInMode((String) object[10]);
                operationMode.setMoveOutMode((String) object[11]);
                portOperationModeList.add(portOperationMode);
            }
        }
        return portOperationModeList;
    }

    @Override
    public List<Infos.WhereNextEqpStatus> equipmentStockerOrderGetByLotStatus(
            Infos.ObjCommon objCommon,
            Infos.LotLocationInfo cassetteLocationInfo,
            Infos.LotStatusInfo lotStatusInfo,
            List<Infos.WhereNextEqpStatus> eqpStatusList) {
        List<Infos.WhereNextEqpStatus> whereNextEqpStatusList = new ArrayList<>();
        /*****************************************/
        /*  Check cassette availability for UTS  */
        /*****************************************/
        Boolean notCandidateForUTSFlag = false;
        int eqpLen = CimArrayUtils.getSize(eqpStatusList);
        if (eqpLen != 0) {
            /*******************************/
            /* Check the carrier status    */
            /*******************************/
            log.info("Step1 - cassette_getStatusDR");
            Outputs.ObjCassetteStatusOut cassetteStatusDR =
                    cassetteMethod.cassetteGetStatusDR(objCommon, cassetteLocationInfo.getCassetteID());
            if (!CimStringUtils.equals(
                    cassetteStatusDR.getDurableState(), BizConstant.SP_DRBL_STATE_AVAILABLE)) {
                notCandidateForUTSFlag = true;
            }
            /************************************************************/
            /* Check whether the carrier contains scrap wafer or not    */
            /************************************************************/
            List<ObjectIdentifier> cassetteIDList = new ArrayList<>();
            cassetteIDList.add(cassetteLocationInfo.getCassetteID());
            log.info("Step2 - cassette_scrapWafer_SelectDR");
            List<Infos.LotWaferMap> lotWaferMaps =
                    cassetteMethod.cassetteScrapWaferSelectDR(objCommon, cassetteIDList);
            if (!CimObjectUtils.isEmpty(lotWaferMaps)) {
                notCandidateForUTSFlag = true;
            }
            /***************************/
            /* Check the Lot status    */
            /***************************/
            if (CimBooleanUtils.isFalse(lotStatusInfo.isOnFloorFlag())
                    || CimBooleanUtils.isTrue(lotStatusInfo.isOnHoldFlag())) {
                notCandidateForUTSFlag = true;
            }
        }
        Boolean setCurrentStockerFlag = false;
        List<Infos.EqpStockerStatus> stockerList = new ArrayList<>();
        List<Infos.EqpStockerStatus> UTSstockerList = new ArrayList<>();
        if (eqpLen > 0) {
            for (Infos.WhereNextEqpStatus eqpStatus : eqpStatusList) {
                stockerList = new ArrayList<>();
                UTSstockerList = new ArrayList<>();
                /***************************/
                /* Check inhibit status    */
                /***************************/
                Boolean notCandidateForUTSByInhibitFlag = false;
                if (!CimObjectUtils.isEmpty(eqpStatus.getEntityInhibitions())
                        || CimBooleanUtils.isFalse(eqpStatus.isEquipmentAvailableFlag())) {
                    notCandidateForUTSByInhibitFlag = true;
                }
                /***********************************/
                /* Get all stocker of equipment    */
                /***********************************/
                log.info("Step3 - equipment_allStocker_GetByUTSPriorityDR(Get all stocker of equipment)");
                Outputs.ObjEquipmentAllStockerGetByUTSPriorityDROut
                        objEquipmentAllStockerGetByUTSPriorityDROutRetCode =
                        equipmentAllStockerGetByUTSPriorityDR(objCommon, eqpStatus.getEquipmentID());

                /**************************************************************/
                /*  Keep UTS and stocker list for force destination decision  */
                /**************************************************************/
                List<Infos.EqpStockerStatus> UTSstockers =
                        objEquipmentAllStockerGetByUTSPriorityDROutRetCode.getUTSstockers();
                if (CimArrayUtils.getSize(UTSstockers) > 0
                        && !notCandidateForUTSFlag
                        && !notCandidateForUTSByInhibitFlag) {
                    /***************************************/
                    /*  Sort UTS sequence by Lot status    */
                    /***************************************/
                    log.info(
                            "Step4 - stockerUTS_priorityOrder_GetByLotAvailability(Sort UTS sequence by Lot status)");
                    List<Infos.EqpStockerStatus> eqpStockerStatuses =
                            stockerMethod.stockerUTSPriorityOrderGetByLotAvailability(
                                    objCommon, UTSstockers, lotStatusInfo.getLotID());
                    UTSstockerList.addAll(eqpStockerStatuses);
                }
                List<Infos.EqpStockerStatus> stockers =
                        objEquipmentAllStockerGetByUTSPriorityDROutRetCode.getStockers();
                if (!CimObjectUtils.isEmpty(stockers)) {
                    /*******************************************/
                    /*  Sort stocker sequence by Lot status    */
                    /*******************************************/
                    log.info(
                            "Step5 - stocker_priorityOrder_GetByLotAvailability(Sort stocker sequence by Lot status)");
                    List<Infos.EqpStockerStatus> eqpStockerStatuses =
                            stockerMethod.stockerPriorityOrderGetByLotAvailability(
                                    objCommon, stockers, lotStatusInfo.getLotID());
                    stockerList.addAll(eqpStockerStatuses);
                }
                /*************************/
                /* Set return structure  */
                /*************************/
                int utsLen = CimArrayUtils.getSize(UTSstockerList);
                int stkLen = CimArrayUtils.getSize(stockerList);
                if (utsLen + stkLen == 0) {
                    /****************************************************************************************/
                    /*  Even if NextUTS is full or not available, set it by force when the cassette is EI   */
                    /****************************************************************************************/
                    whereNextEqpStatusList.add(eqpStatus);
                    if (CimStringUtils.equals(
                            cassetteLocationInfo.getTransferStatus(), BizConstant.SP_TRANSSTATE_EQUIPMENTIN)) {
                        if (!CimObjectUtils.isEmpty(UTSstockers)
                                && !notCandidateForUTSFlag
                                && !notCandidateForUTSByInhibitFlag) {
                            eqpStatus.setEqpStockerStatus(UTSstockers);
                        }
                        /*****************************************************************************/
                        /*  If cassette is EI, then try to get Stocker from cassette location info   */
                        /*****************************************************************************/
                        else {
                            log.info("Step6 - equipment_stockerInfo_GetDR");
                            Infos.EqpStockerInfo eqpStockerInfo =
                                    equipmentStockerInfoGetDR(objCommon, cassetteLocationInfo.getEquipmentID());
                            List<Infos.EqpStockerStatus> eqpStockerStatusList =
                                    eqpStockerInfo.getEqpStockerStatusList();
                            if (!CimObjectUtils.isEmpty(eqpStockerStatusList)) {
                                eqpStatus.setEqpStockerStatus(eqpStockerStatusList);
                            }
                        }
                    }
                    /******************************************/
                    /*  Equipment does not have any stocker.  */
                    /******************************************/
                    else {
                        eqpStatus.setEqpStockerStatus(new ArrayList<>());
                        setCurrentStockerFlag = true;
                    }
                } else {
                    /*********************************/
                    /*  Equipment has some stocker.  */
                    /*********************************/
                    whereNextEqpStatusList.add(eqpStatus);
                    List<Infos.EqpStockerStatus> eqpStockerStatusList = new ArrayList<>();
                    eqpStatus.setEqpStockerStatus(eqpStockerStatusList);
                    if (utsLen > 0) {
                        eqpStockerStatusList.addAll(UTSstockerList);
                    }
                    for (int stkCnt = 0; stkCnt < stkLen; stkCnt++) {
                        Infos.EqpStockerStatus eqpStockerStatus = stockerList.get(stkCnt);
                        /********************************/
                        /*  Reassign stocker priority   */
                        /********************************/
                        if (utsLen != 0) {
                            eqpStockerStatus.setStockerPriority(String.valueOf(stkCnt));
                        }
                        eqpStockerStatusList.add(eqpStockerStatus);
                    }
                }
            }
        }
        if (eqpLen == 0) {
            /*****************************/
            /* When Lot is on Floor.     */
            /*****************************/
            if (CimBooleanUtils.isTrue(lotStatusInfo.isOnFloorFlag())) {
                if (!ObjectIdentifier.isEmptyWithValue(cassetteLocationInfo.getStockerID())) {
                    log.info("The cassette is not in Equipment. Set current stocker for cassette.");
                    setCurrentStockerFlag = true;
                    whereNextEqpStatusList.add(new Infos.WhereNextEqpStatus());
                    whereNextEqpStatusList.get(0).setEqpStockerStatus(new ArrayList<>());
                } else {
                    log.info("The cassette is not in Equipment, and cannot find any stockers.");
                    // Already set stockers of equipment if the Lot is on Equipment.
                }
            }
            /**********************************/
            /* When Lot is in Bank.           */
            /*   => Stay in the current Bank. */
            /**********************************/
            else {
                CimLot aLot = baseCoreFactory.getBO(CimLot.class, lotStatusInfo.getLotID());
                CimBank aBank = aLot.getBank();
                Validations.check(aBank == null, retCodeConfig.getNotFoundBank());
                CimStorageMachine aStocker = aBank.getStorageMachine();
                if (aStocker != null) {
                    Infos.WhereNextEqpStatus whereNextEqpStatus = new Infos.WhereNextEqpStatus();
                    whereNextEqpStatusList.add(whereNextEqpStatus);
                    List<Infos.EqpStockerStatus> eqpStockerStatusList = new ArrayList<>();
                    whereNextEqpStatus.setEqpStockerStatus(eqpStockerStatusList);
                    Infos.EqpStockerStatus eqpStockerStatus = new Infos.EqpStockerStatus();
                    eqpStockerStatusList.add(eqpStockerStatus);
                    ObjectIdentifier stockerID =
                            new ObjectIdentifier(aStocker.getIdentifier(), aStocker.getPrimaryKey());
                    eqpStockerStatus.setStockerID(stockerID);
                    log.info("Step7 - stocker_baseInfo_Get__100");
                    Results.StockerInfoInqResult stockerInfoInq100ResultRetCode =
                            stockerMethod.stockerBaseInfoGet(objCommon, stockerID);
                    eqpStockerStatus.setStockerType(stockerInfoInq100ResultRetCode.getStockerType());
                    eqpStockerStatus.setStockerStatus(stockerInfoInq100ResultRetCode.getActualStatusCode());
                    eqpStockerStatus.setOhbFlag(stockerInfoInq100ResultRetCode.getUtsFlag());
                    eqpStockerStatus.setMaxOHBFlag(stockerInfoInq100ResultRetCode.getMaxUTSCapacity());
                    eqpStockerStatus.setStockerPriority("0");
                } else {
                    /**********************************************************************************************/
                    /*   Set the current Stocker if the Lot is in Bank(The bank has no stocker) and in Stocker.   */
                    /**********************************************************************************************/
                    if (!ObjectIdentifier.isEmptyWithValue(cassetteLocationInfo.getStockerID())) {
                        setCurrentStockerFlag = true;
                        whereNextEqpStatusList.add(new Infos.WhereNextEqpStatus());
                        whereNextEqpStatusList.get(0).setEqpStockerStatus(new ArrayList<>());
                    } else {
                        // Already set stockers of equipment if the Lot is on Equipment.
                    }
                }
            }
        }
        /********************************************************************************************/
        /*  At least one equipment doesn't have stocker. Get it from cassettte related equipment.   */
        /********************************************************************************************/
        if (CimBooleanUtils.isTrue(setCurrentStockerFlag)) {
            /********************************************/
            /* Get Current Machine detail information   */
            /********************************************/
            Infos.EqpStockerStatus aCurrentStockerInfo = new Infos.EqpStockerStatus();
            if (!ObjectIdentifier.isEmptyWithValue(cassetteLocationInfo.getStockerID())) {
                log.info("Step8 - stocker_baseInfo_Get__100");
                Results.StockerInfoInqResult stockerInfoInq100ResultRetCode =
                        stockerMethod.stockerBaseInfoGet(objCommon, cassetteLocationInfo.getStockerID());
                aCurrentStockerInfo.setStockerID(cassetteLocationInfo.getStockerID());
                aCurrentStockerInfo.setStockerType(stockerInfoInq100ResultRetCode.getStockerType());
                aCurrentStockerInfo.setOhbFlag(stockerInfoInq100ResultRetCode.getUtsFlag());
                aCurrentStockerInfo.setMaxOHBFlag(stockerInfoInq100ResultRetCode.getMaxUTSCapacity());
                aCurrentStockerInfo.setStockerPriority("0");
            }
            /********************************************/
            /*  If stocker type is "Auto", then set it. */
            /*  Else, no stocker is set.                */
            /********************************************/
            if (CimStringUtils.equals(
                    aCurrentStockerInfo.getStockerType(), BizConstant.SP_STOCKER_TYPE_AUTO)) {
                int eLen = CimArrayUtils.getSize(whereNextEqpStatusList);
                for (int i = 0; i < eLen; i++) {
                    int sLen = CimArrayUtils.getSize(whereNextEqpStatusList.get(i).getEqpStockerStatus());
                    if (sLen == 0) {
                        whereNextEqpStatusList.get(i).getEqpStockerStatus().add(aCurrentStockerInfo);
                    }
                }
            }
        }
        return whereNextEqpStatusList;
    }

    @Override
    public Outputs.ObjEquipmentAllStockerGetByUTSPriorityDROut equipmentAllStockerGetByUTSPriorityDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        Outputs.ObjEquipmentAllStockerGetByUTSPriorityDROut objEquipmentPortOperationModeGetDROut =
                new Outputs.ObjEquipmentAllStockerGetByUTSPriorityDROut();
        log.info("Step1 - Select UTS priority Flag of equipment ");
        CimMachine cimEquipmentDO = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        /******************************************************************/
        /*  If the equipment's UTS is prior than stocker, get UTS list.   */
        /******************************************************************/
        if (cimEquipmentDO.isUnderTrackStoragePriorityFlagOn()) {
            /************************/
            /*  get all UTS list.   */
            /************************/
            log.info("Step2 - equipment_UTSInfo_GetDR(get all UTS list) ");
            Infos.EqpStockerInfo eqpStockerInfo = equipmentUTSInfoGetDR(objCommon, equipmentID);
            objEquipmentPortOperationModeGetDROut.setUTSstockers(
                    eqpStockerInfo.getEqpStockerStatusList());
        }
        /****************************/
        /*  get all stocker list.   */
        /****************************/
        log.info("Step3 - equipment_stockerInfo_GetDR(get all stocker list) ");
        Infos.EqpStockerInfo eqpStockerInfo = equipmentStockerInfoGetDR(objCommon, equipmentID);
        objEquipmentPortOperationModeGetDROut.setStockers(eqpStockerInfo.getEqpStockerStatusList());
        return objEquipmentPortOperationModeGetDROut;
    }

    @Override
    public Infos.EqpStockerInfo equipmentUTSInfoGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        /**********************************************/
        /*  Select all UTSs from FREQP_UTS and FRSTK  */
        /**********************************************/
        String sql =
                "SELECT OMSTOCKER.STOCKER_ID,\n"
                        + "                   OMSTOCKER.STOCKER_TYPE,\n"
                        + "                   OMSTOCKER.E10_STATE_ID,\n"
                        + "                   OMSTOCKER.EQP_STATE_ID,\n"
                        + "                   OMSTOCKER.EQP_STATE_RKEY,\n"
                        + "                   OMSTOCKER.OHB_Flag,\n"
                        + "                   OMSTOCKER.MAX_OHB_CAPACITY\n"
                        + "            FROM   OMEQP_OHB, OMEQP, OMSTOCKER\n"
                        + "            WHERE  OMEQP.EQP_ID=?\n"
                        + "            AND    OMEQP.ID=OMEQP_OHB.REFKEY\n"
                        + "            AND    OMEQP_OHB.STOCKER_ID=OMSTOCKER.STOCKER_ID\n"
                        + "            ORDER BY OMEQP_OHB.IDX_NO";
        List<CimStockerDO> cimStockerDOList =
                cimJpaRepository.query(sql, CimStockerDO.class, equipmentID.getValue());
        Infos.EqpStockerInfo eqpUTSInfo = new Infos.EqpStockerInfo();
        List<Infos.EqpStockerStatus> eqpStockerStatusList = new ArrayList<>();
        eqpUTSInfo.setEqpStockerStatusList(eqpStockerStatusList);
        if (!CimObjectUtils.isEmpty(cimStockerDOList)) {
            int count = 0;
            for (CimStockerDO cimStockerDO : cimStockerDOList) {
                Infos.EqpStockerStatus eqpStockerStatus = new Infos.EqpStockerStatus();
                eqpStockerStatusList.add(eqpStockerStatus);
                eqpStockerStatus.setStockerID(
                        new ObjectIdentifier(cimStockerDO.getStockerID(), cimStockerDO.getId()));
                eqpStockerStatus.setStockerType(cimStockerDO.getStockerType());
                eqpStockerStatus.setE10Status(cimStockerDO.getCurE10State());
                eqpStockerStatus.setStockerStatus(
                        new ObjectIdentifier(cimStockerDO.getCurStateId(), cimStockerDO.getCurStateObj()));
                eqpStockerStatus.setOhbFlag(cimStockerDO.getUtsFlag());
                eqpStockerStatus.setMaxOHBFlag(cimStockerDO.getMaxUtsCapacity());
                /*****************************************************************************************************/
                /* Set stocker order. This is expressed just "count" because SQL result aligns by "ORDER BY D_SEQNO" */
                /*****************************************************************************************************/
                eqpStockerStatus.setStockerPriority(String.valueOf(count));
                count++;
            }
        }
        return eqpUTSInfo;
    }

    @Override
    public Results.OpeGuideInqResult equipmentOperationProcedureFillInTxPLQ007DR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        log.info("PPTManager_i::equipmentOperationProcedure_FillInTxPLQ007DR");
        Results.OpeGuideInqResult opeGuideInqResult = new Results.OpeGuideInqResult();
        List<Infos.OpeProcedureInfo> strOpeProcedureInfo = new ArrayList<>();
        opeGuideInqResult.setStrOpeProcedureInfo(strOpeProcedureInfo);
        opeGuideInqResult.setEquipmentID(equipmentID);

        String hFREQPPROCEDUREEQP_ID = equipmentID.getValue();
        CimEquipmentProcedureDO example = new CimEquipmentProcedureDO();
        example.setEquipmentID(hFREQPPROCEDUREEQP_ID);
        List<CimEquipmentProcedureDO> cimEquipmentProcedureDOS = cimJpaRepository.findAll(Example.of(example));

        if (CimArrayUtils.isNotEmpty(cimEquipmentProcedureDOS)) {
            for (CimEquipmentProcedureDO cimEquipmentProcedureDO : cimEquipmentProcedureDOS) {
                Infos.OpeProcedureInfo opeProcedureInfo = new Infos.OpeProcedureInfo();
                opeProcedureInfo.setReportUserID(
                        new ObjectIdentifier(
                                cimEquipmentProcedureDO.getOwnerID(), cimEquipmentProcedureDO.getOwnerObj()));
                opeProcedureInfo.setReportTimeStamp(
                        String.valueOf(cimEquipmentProcedureDO.getUpdateTime()));
                opeProcedureInfo.setTitle(cimEquipmentProcedureDO.getNoteTitle());
                opeProcedureInfo.setDocumentType(cimEquipmentProcedureDO.getNoteType());
                opeProcedureInfo.setContents(cimEquipmentProcedureDO.getNoteContents());
                strOpeProcedureInfo.add(opeProcedureInfo);
            }
        }

        return opeGuideInqResult;
    }

    @Override
    public void equipmentCheckAvailForDurable(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        /*---------------------------*/
        /*   get PosMachine object   */
        /*---------------------------*/
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        /*--------------------------------*/
        /*   get PosMachineState object   */
        /*--------------------------------*/
        CimMachineState aMachineState = aMachine.getCurrentMachineState();
        Validations.check(aMachineState == null, retCodeConfig.getEquipmentNotAvailableStat());

        /*----------------------*/
        /*   check avail flag   */
        /*----------------------*/
        Boolean availFlag = aMachineState.isMachineAvailable();
        Validations.check(!availFlag, retCodeConfig.getEquipmentNotAvailableStat());

        /*---------------------------------*/
        /*   check conditional avail flag  */
        /*---------------------------------*/
        Boolean condFlag = aMachineState.isConditionalAvailable();
        Validations.check(condFlag, retCodeConfig.getEquipmentNotAvailableStat());
    }

    @Override
    public List<ObjectIdentifier> equipmentReservedDurableControlJobIDGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        String sql =
                "SELECT  DCJ_ID,\n"
                        + "                ID\n"
                        + "        FROM    OMDCJ\n"
                        + "        WHERE   EQP_ID = ?\n"
                        + "        AND     STATUS = ?";
        List<CimDurableControlJobDO> queryResultList =
                cimJpaRepository.query(
                        sql,
                        CimDurableControlJobDO.class,
                        equipmentID.getValue(),
                        BizConstant.SP_DURABLECONTROLJOBSTATUS_CREATED);
        List<ObjectIdentifier> reservedDurableControlJobIDList = new ArrayList<>();
        if (!CimObjectUtils.isEmpty(queryResultList)) {
            for (CimDurableControlJobDO cimDurableControlJobDO : queryResultList) {
                reservedDurableControlJobIDList.add(
                        new ObjectIdentifier(
                                cimDurableControlJobDO.getDurableControlJobID(), cimDurableControlJobDO.getId()));
            }
        }
        return reservedDurableControlJobIDList;
    }

    @Override
    public List<Infos.StoredReticle> equipmentStoredReticleGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        String sql =
                "            SELECT  OMPDRBL.PDRBL_ID,\n"
                        + "                         OMPDRBL.ID,\n"
                        + "                         OMPDRBL.DESCRIPTION,\n"
                        + "                         OMPDRBL_PDRBLGRP.PDRBL_GRP_ID,\n"
                        + "                         OMPDRBL_PDRBLGRP.PDRBL_GRP_RKEY,\n"
                        + "                         OMPDRBL.PDRBL_STATE\n"
                        + "                  FROM   OMEQP,\n"
                        + "                         OMPDRBL,\n"
                        + "                         OMPDRBL_PDRBLGRP\n"
                        + "                  WHERE  OMPDRBL.EQP_ID = ?\n"
                        + "                    AND  OMPDRBL.MTRL_CONT_ID is null\n"
                        + "                    AND  OMPDRBL.ID = OMPDRBL_PDRBLGRP.REFKEY\n"
                        + "                    AND  OMPDRBL.XFER_STATE = ?\n"
                        + "                    AND  OMEQP.EQP_ID = OMPDRBL.EQP_ID";
        List<Object[]> queryResultList =
                cimJpaRepository.query(
                        sql, ObjectIdentifier.fetchValue(equipmentID), BizConstant.SP_TRANSSTATE_EQUIPMENTIN);
        return queryResultList.stream()
                .map(
                        object -> {
                            Infos.StoredReticle storedReticle = new Infos.StoredReticle();
                            storedReticle.setReticleID(
                                    new ObjectIdentifier((String) object[0], (String) object[1]));
                            storedReticle.setDescription((String) object[2]);
                            storedReticle.setReticleGroupID(
                                    new ObjectIdentifier((String) object[3], (String) object[4]));
                            storedReticle.setStatus((String) object[5]);
                            return storedReticle;
                        })
                .collect(Collectors.toList());
    }

    @Override
    public void equipmentCheckInhibitForDurableWithMachineRecipe(
            Infos.ObjCommon objCommon,
            Inputs.ObjEquipmentCheckInhibitForDurableWithMachineRecipeIn
                    objEquipmentCheckInhibitForDurableWithMachineRecipeIn) {
        CimMachine aMachine =
                baseCoreFactory.getBO(
                        CimMachine.class,
                        objEquipmentCheckInhibitForDurableWithMachineRecipeIn.getEquipmentID());
        Validations.check(
                aMachine == null,
                new OmCode(
                        retCodeConfig.getNotFoundEqp(),
                        objEquipmentCheckInhibitForDurableWithMachineRecipeIn.getEquipmentID().getValue()));
        List<Constrain.EntityIdentifier> entities = new ArrayList<>();
        if (!ObjectIdentifier.isEmptyWithValue(
                objEquipmentCheckInhibitForDurableWithMachineRecipeIn
                        .getDurableStartRecipe()
                        .getMachineRecipeId())) {
            Constrain.EntityIdentifier entityIdentifier = new Constrain.EntityIdentifier();
            entities.add(entityIdentifier);
            entityIdentifier.setClassName(BizConstant.SP_INHIBITCLASSID_MACHINERECIPE);
            entityIdentifier.setObjectId(
                    ObjectIdentifier.fetchValue(
                            objEquipmentCheckInhibitForDurableWithMachineRecipeIn
                                    .getDurableStartRecipe()
                                    .getMachineRecipeId()));
            entityIdentifier.setAttrib("");
        }
        List<ObjectIdentifier> durableIDs =
                objEquipmentCheckInhibitForDurableWithMachineRecipeIn.getDurableIDs();
        int DIDLen = CimArrayUtils.getSize(durableIDs);
        for (int iCnt = 0; iCnt < DIDLen; iCnt++) {
            if (!ObjectIdentifier.isEmptyWithValue(durableIDs.get(iCnt))) {
                List<CimRestriction> entityInhibitInfoList =
                        entityInhibitManager.allEntityInhibitsForDurableUsingSpecifiedEntities(
                                objEquipmentCheckInhibitForDurableWithMachineRecipeIn.getDurableCategory(),
                                durableIDs.get(iCnt),
                                aMachine,
                                entities);
                if (!CimObjectUtils.isEmpty(entityInhibitInfoList)) {
                    // making inhibit list to be returned as message
                    String inhibitList =
                            constraintMethod.makeInhibitListFromEntityInhibits(entityInhibitInfoList);
                    Validations.check(
                            true,
                            new OmCode(
                                    retCodeConfig.getInhibitDurable(), durableIDs.get(iCnt).getValue(), inhibitList));
                }
            }
        }
    }

    @Override
    public void equipmentAndPortStateCheckForDurableOperation(
            Infos.ObjCommon objCommon, Inputs.ObjEquipmentAndPortStateCheckForDurableOperationIn in) {
        String durableCategory = in.getDurableCategory();
        if (!CimStringUtils.equals(durableCategory, BizConstant.SP_DURABLECAT_CASSETTE)
                && !CimStringUtils.equals(durableCategory, BizConstant.SP_DURABLECAT_RETICLEPOD)
                && !CimStringUtils.equals(durableCategory, BizConstant.SP_DURABLECAT_RETICLE)) {
            throw new ServiceException(
                    new OmCode(retCodeConfig.getInvalidDurableCategory(), durableCategory));
        }
        int durableLen = CimArrayUtils.getSize(in.getStartDurables());
        if (CimStringUtils.equals(in.getOperation(), BizConstant.SP_OPERATION_STARTRESERVATION)) {
            if (CimStringUtils.equals(durableCategory, BizConstant.SP_DURABLECAT_CASSETTE)) {
                CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, in.getEquipmentId());
                Validations.check(
                        aMachine == null,
                        new OmCode(retCodeConfig.getNotFoundEqp(), in.getEquipmentId().getValue()));
                /*----------------------------------------------------*/
                /*   In-Parm's portGroupID must not have controlJobID */
                /*----------------------------------------------------*/
                List<com.fa.cim.newcore.bo.product.CimControlJob> controlJobs =
                        aMachine.allStartReservedControlJobs();
                Boolean cjFindFlag = false;
                int size = CimArrayUtils.getSize(controlJobs);
                int iCnt1 = 0;
                for (iCnt1 = 0; iCnt1 < size; iCnt1++) {
                    com.fa.cim.newcore.bo.product.CimControlJob cimControlJob = controlJobs.get(iCnt1);
                    Validations.check(null == cimControlJob, retCodeConfig.getNotFoundControlJob());
                    String cjPortGroupID = cimControlJob.getPortGroup();
                    if (CimStringUtils.equals(in.getPortGroupId(), cjPortGroupID)) {
                        cjFindFlag = true;
                        break;
                    }
                }
                Validations.check(
                        cjFindFlag,
                        new OmCode(
                                retCodeConfig.getAlreadyReservedPortGroup(),
                                in.getStartDurables().get(0).getStartDurablePort().getLoadPortID().getValue(),
                                in.getPortGroupId()));
                /*-----------------------------------------------------------*/
                /*   In-Parm's portGroupID must not have durableControlJobID */
                /*-----------------------------------------------------------*/
                List<com.fa.cim.newcore.bo.durable.CimDurableControlJob> durableControlJobs =
                        aMachine.allStartReservedDurableControlJobs();
                Boolean dcjFindFlag = false;
                int durableControlJobSize = CimArrayUtils.getSize(durableControlJobs);
                for (int iCnt2 = 0; iCnt2 < durableControlJobSize; iCnt2++) {
                    com.fa.cim.newcore.bo.durable.CimDurableControlJob durableControlJob =
                            durableControlJobs.get(iCnt2);
                    Validations.check(null == durableControlJob, retCodeConfig.getNotFoundDctrljob());
                    String durableCat = durableControlJob.getDurableCategory();
                    if (CimStringUtils.equals(durableCat, BizConstant.SP_DURABLECAT_CASSETTE)) {
                        List<DurableDTO.StartDurableInfo> startDurableSeq =
                                durableControlJob.getStartDurableInfo();
                        Inputs.ObjEquipmentPortGroupIDGetIn objEquipmentPortGroupIDGetIn =
                                new Inputs.ObjEquipmentPortGroupIDGetIn();
                        objEquipmentPortGroupIDGetIn.setEquipmentId(in.getEquipmentId());
                        objEquipmentPortGroupIDGetIn.setPortId(startDurableSeq.get(0).getLoadPortID());
                        Outputs.ObjEquipmentPortGroupIDGetOut strEquipmentPortGroupIDGetOut =
                                portMethod.equipmentPortGroupIDGet(objCommon, objEquipmentPortGroupIDGetIn);
                        String dcjPortGroupID = strEquipmentPortGroupIDGetOut.getPortGroupId();
                        if (CimStringUtils.equals(in.getPortGroupId(), dcjPortGroupID)) {
                            dcjFindFlag = true;
                            break;
                        }
                    }
                }
                Validations.check(
                        dcjFindFlag,
                        new OmCode(
                                retCodeConfig.getAlreadyReservedPortGroup(),
                                in.getStartDurables().get(0).getStartDurablePort().getLoadPortID().getValue(),
                                in.getPortGroupId()));
                Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoGet(objCommon, in.getEquipmentId());
                int lenEqpPort = CimArrayUtils.getSize(eqpPortInfo.getEqpPortStatuses());
                for (int iCnt3 = 0; iCnt3 < lenEqpPort; iCnt3++) {
                    Infos.EqpPortStatus eqpPortStatus = eqpPortInfo.getEqpPortStatuses().get(iCnt3);
                    if (!CimStringUtils.equals(eqpPortStatus.getPortGroup(), in.getPortGroupId())) {
                        continue;
                    }
                    /*-----------------------------------*/
                    /*   Get and Check Port's LoadMode   */
                    /*-----------------------------------*/
                    PortResource aPs = aMachine.findPortResourceNamed(eqpPortStatus.getPortID().getValue());
                    Validations.check(
                            null == aPs,
                            new OmCode(retCodeConfig.getNotFoundPort(), eqpPortStatus.getPortID().getValue()));
                    CimPortResource aPort = (CimPortResource) aPs;
                    Validations.check(
                            null == aPort,
                            new OmCode(retCodeConfig.getNotFoundPort(), eqpPortStatus.getPortID().getValue()));
                    String loadMode = aPort.getPortUsage();
                    Validations.check(
                            !CimStringUtils.equals(loadMode, CIMStateConst.CIM_PORT_RESOURCE_INPUT)
                                    && !CimStringUtils.equals(loadMode, CIMStateConst.CIM_PORT_RESOURCE_INPUTOUTPUT),
                            retCodeConfig.getInvalidPortLoadMode());
                    /*-----------------------------------------*/
                    /*   Get Equipment's Operation Mode Info   */
                    /*-----------------------------------------*/
                    Outputs.ObjPortResourceCurrentOperationModeGetOut
                            strPortResourceCurrentOperationModeGetOut =
                            portMethod.portResourceCurrentOperationModeGet(
                                    objCommon,
                                    in.getEquipmentId(),
                                    in.getStartDurables().get(iCnt1).getStartDurablePort().getLoadPortID());
                    /*-------------------------------------*/
                    /*   Get and Check Port's Port State   */
                    /*-------------------------------------*/
                    if (!CimStringUtils.equals(
                            strPortResourceCurrentOperationModeGetOut.getOperationMode().getOnlineMode(),
                            BizConstant.SP_EQP_ONLINEMODE_OFFLINE)) {
                        Validations.check(
                                !CimStringUtils.equals(
                                        eqpPortStatus.getPortState(), BizConstant.SP_PORTRSC_PORTSTATE_LOADAVAIL)
                                        && !CimStringUtils.equals(
                                        eqpPortStatus.getPortState(), BizConstant.SP_PORTRSC_PORTSTATE_LOADREQ),
                                new OmCode(
                                        retCodeConfig.getInvalidPortState(),
                                        eqpPortStatus.getPortID().getValue(),
                                        eqpPortStatus.getPortState()));
                    }
                    /*----------------------------------------*/
                    /*   Get Start Reserve Cassette on Port   */
                    /*----------------------------------------*/
                    String pStartRsvCastID = null;
                    for (int durableCnt = 0; durableCnt < durableLen; durableCnt++) {
                        if (ObjectIdentifier.equalsWithValue(
                                in.getStartDurables().get(durableCnt).getStartDurablePort().getLoadPortID(),
                                eqpPortInfo.getEqpPortStatuses().get(iCnt3).getPortID())) {
                            pStartRsvCastID = in.getStartDurables().get(durableCnt).getDurableId().getValue();
                            break;
                        }
                    }
                    /*------------------------------------*/
                    /*   Get and Check Cassette on Port   */
                    /*------------------------------------*/
                    if (!ObjectIdentifier.isEmptyWithValue(eqpPortStatus.getLoadedCassetteID())) {
                        Validations.check(
                                CimStringUtils.isEmpty(pStartRsvCastID)
                                        || !ObjectIdentifier.equalsWithValue(
                                        pStartRsvCastID, eqpPortStatus.getLoadedCassetteID()),
                                retCodeConfig.getPortHasLoadedCassette());
                    }
                    /*--------------------------------------------*/
                    /*   Check Load Reserved for Cassette on Port */
                    /*--------------------------------------------*/
                    if (!ObjectIdentifier.isEmptyWithValue(eqpPortStatus.getDispatchLoadCassetteID())) {
                        Validations.check(
                                CimStringUtils.isEmpty(pStartRsvCastID)
                                        || !ObjectIdentifier.equalsWithValue(
                                        pStartRsvCastID, eqpPortStatus.getLoadedCassetteID()),
                                new OmCode(
                                        retCodeConfig.getAlreadyReservedLoadPort(),
                                        eqpPortStatus.getPortID().getValue(),
                                        eqpPortStatus.getDispatchLoadCassetteID().getValue()));
                    }
                }
                for (int durableCnt = 0; durableCnt < durableLen; durableCnt++) {
                    for (int iCnt5 = 0; iCnt5 < lenEqpPort; iCnt5++) {
                        Infos.EqpPortStatus eqpPortStatus = eqpPortInfo.getEqpPortStatuses().get(iCnt5);
                        if (ObjectIdentifier.equalsWithValue(
                                in.getStartDurables().get(durableCnt).getStartDurablePort().getLoadPortID(),
                                eqpPortStatus.getPortID())) {
                            /*--------------------------------------------------------*/
                            /*    Check Eqp Port's PortGroup VS In-Parm's PortGroup   */
                            /*--------------------------------------------------------*/
                            Validations.check(
                                    !CimStringUtils.equals(in.getPortGroupId(), eqpPortStatus.getPortGroup()),
                                    new OmCode(
                                            retCodeConfig.getPortGroupMixed(), eqpPortStatus.getPortID().getValue()));
                            /*------------------------------------------------------------*/
                            /*    Check Eqp Port's LoadPurpose VS In-Parm's LoadPurpose   */
                            /*------------------------------------------------------------*/
                            if (CimStringUtils.equals(
                                    eqpPortStatus.getLoadPurposeType(), BizConstant.SP_LOADPURPOSETYPE_OTHER)) {
                                log.info("Eqp Port's LoadPurpose is SP_LoadPurposeType_Other");
                            } else if (CimStringUtils.equals(
                                    eqpPortStatus.getLoadPurposeType(), BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT)) {
                                if (CimStringUtils.equals(
                                        in.getStartDurables()
                                                .get(durableCnt)
                                                .getStartDurablePort()
                                                .getLoadPurposeType(),
                                        BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT)
                                        || CimStringUtils.equals(
                                        in.getStartDurables()
                                                .get(durableCnt)
                                                .getStartDurablePort()
                                                .getLoadPurposeType(),
                                        BizConstant.SP_LOADPURPOSETYPE_SLMRETRIEVING)
                                        || CimStringUtils.equals(
                                        in.getStartDurables()
                                                .get(durableCnt)
                                                .getStartDurablePort()
                                                .getLoadPurposeType(),
                                        BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT)) {
                                } else {
                                    Validations.check(
                                            true,
                                            new OmCode(
                                                    retCodeConfig.getNotSameLoadPurpose(),
                                                    in.getStartDurables().get(durableCnt).getDurableId().getValue(),
                                                    in.getStartDurables()
                                                            .get(durableCnt)
                                                            .getStartDurablePort()
                                                            .getLoadPurposeType(),
                                                    in.getStartDurables()
                                                            .get(durableCnt)
                                                            .getStartDurablePort()
                                                            .getLoadPortID()
                                                            .getValue(),
                                                    eqpPortStatus.getLoadPurposeType()));
                                }
                            } else if (CimStringUtils.equals(
                                    eqpPortStatus.getLoadPurposeType(), BizConstant.SP_LOADPURPOSETYPE_ANY)) {
                                if (CimStringUtils.equals(
                                        in.getStartDurables()
                                                .get(durableCnt)
                                                .getStartDurablePort()
                                                .getLoadPurposeType(),
                                        BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT)
                                        || CimStringUtils.equals(
                                        in.getStartDurables()
                                                .get(durableCnt)
                                                .getStartDurablePort()
                                                .getLoadPurposeType(),
                                        BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT)
                                        || CimStringUtils.equals(
                                        in.getStartDurables()
                                                .get(durableCnt)
                                                .getStartDurablePort()
                                                .getLoadPurposeType(),
                                        BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE)) {
                                } else {
                                    Validations.check(
                                            true,
                                            new OmCode(
                                                    retCodeConfig.getNotSameLoadPurpose(),
                                                    in.getStartDurables().get(durableCnt).getDurableId().getValue(),
                                                    in.getStartDurables()
                                                            .get(durableCnt)
                                                            .getStartDurablePort()
                                                            .getLoadPurposeType(),
                                                    in.getStartDurables()
                                                            .get(durableCnt)
                                                            .getStartDurablePort()
                                                            .getLoadPortID()
                                                            .getValue(),
                                                    eqpPortStatus.getLoadPurposeType()));
                                }
                            } else if (CimStringUtils.equals(
                                    in.getStartDurables().get(durableCnt).getStartDurablePort().getLoadPurposeType(),
                                    eqpPortStatus.getLoadPurposeType())) {
                            } else {
                                Validations.check(
                                        true,
                                        new OmCode(
                                                retCodeConfig.getNotSameLoadPurpose(),
                                                in.getStartDurables().get(durableCnt).getDurableId().getValue(),
                                                in.getStartDurables()
                                                        .get(durableCnt)
                                                        .getStartDurablePort()
                                                        .getLoadPurposeType(),
                                                in.getStartDurables()
                                                        .get(durableCnt)
                                                        .getStartDurablePort()
                                                        .getLoadPortID()
                                                        .getValue(),
                                                eqpPortStatus.getLoadPurposeType()));
                            }
                            /*--------------------------------------------------------*/
                            /*    Check Eqp Port's LoadSeqNo VS In-Parm's LoadSeqNo   */
                            /*--------------------------------------------------------*/
                            if (eqpPortStatus.getLoadSequenceNumber().intValue()
                                    != in.getStartDurables()
                                    .get(durableCnt)
                                    .getStartDurablePort()
                                    .getLoadSequenceNumber()
                                    .intValue()) {
                                Validations.check(
                                        true,
                                        new OmCode(
                                                retCodeConfig.getInvalidLoadingSequence(),
                                                in.getStartDurables().get(durableCnt).getDurableId().getValue()));
                            }
                        }
                    }
                }
            } else if (CimStringUtils.equals(
                    in.getDurableCategory(), BizConstant.SP_DURABLECAT_RETICLEPOD)) {
                /*---------------------------------------------------------*/
                /*    In-parm's portID must not have durableControlJobID   */
                /*---------------------------------------------------------*/
                List<ObjectIdentifier> reservedDurableControlJobIDs =
                        this.equipmentReservedDurableControlJobIDGetDR(objCommon, in.getEquipmentId());
                int durableControlJobIDSize = CimArrayUtils.getSize(reservedDurableControlJobIDs);
                for (int iCnt6 = 0; iCnt6 < durableControlJobIDSize; iCnt6++) {
                    List<Infos.StartDurable> startDurables =
                            durableMethod.durableControlJobDurableListGetDR(
                                    objCommon, reservedDurableControlJobIDs.get(iCnt6));
                    int startDurableSize = CimArrayUtils.getSize(startDurables);
                    for (int iCnt7 = 0; iCnt7 < startDurableSize; iCnt7++) {
                        for (int durableCnt = 0; durableCnt < durableLen; durableCnt++) {
                            Validations.check(
                                    ObjectIdentifier.equalsWithValue(
                                            startDurables.get(iCnt7).getStartDurablePort().getLoadPortID(),
                                            in.getStartDurables().get(durableCnt).getStartDurablePort().getLoadPortID()),
                                    new OmCode(
                                            retCodeConfig.getAttributeReservedDctrljob(),
                                            startDurables.get(iCnt7).getStartDurablePort().getLoadPortID().getValue()));
                        }
                    }
                }
                /*-----------------------------------------*/
                /*   Get Equipment's Operation Mode Info   */
                /*-----------------------------------------*/
                String strEquipmentOnlineModeGetOut =
                        this.equipmentOnlineModeGet(objCommon, in.getEquipmentId());
                Outputs.ObjEquipmentReticlePodPortInfoGetDROut strEquipmentReticlePodPortInfoGetDROut =
                        this.equipmentReticlePodPortInfoGetDR(objCommon, in.getEquipmentId());
                String accessMode = null;
                int rppLen =
                        CimArrayUtils.getSize(
                                strEquipmentReticlePodPortInfoGetDROut.getReticlePodPortInfoList());
                for (int iCnt9 = 0; iCnt9 < rppLen; iCnt9++) {
                    Infos.ReticlePodPortInfo reticlePodPortInfo =
                            strEquipmentReticlePodPortInfoGetDROut.getReticlePodPortInfoList().get(iCnt9);
                    for (int durableCnt = 0; durableCnt < durableLen; durableCnt++) {
                        if (CimObjectUtils.equals(
                                reticlePodPortInfo.getReticlePodPortID(),
                                in.getStartDurables().get(durableCnt).getStartDurablePort().getLoadPortID())) {
                            /*-----------------------------*/
                            /*   Check Port's Port State   */
                            /*-----------------------------*/
                            if (!CimStringUtils.equals(
                                    strEquipmentOnlineModeGetOut, BizConstant.SP_EQP_ONLINEMODE_OFFLINE)) {
                                if (!CimStringUtils.equals(
                                        reticlePodPortInfo.getPortStatus(),
                                        BizConstant.SP_PORTRSC_PORTSTATE_LOADAVAIL)
                                        && !CimStringUtils.equals(
                                        reticlePodPortInfo.getPortStatus(),
                                        BizConstant.SP_PORTRSC_PORTSTATE_LOADREQ)) {
                                    Validations.check(
                                            true,
                                            new OmCode(
                                                    retCodeConfig.getInvalidPortState(),
                                                    reticlePodPortInfo.getReticlePodPortID().getValue(),
                                                    reticlePodPortInfo.getPortStatus()));
                                }
                            }
                            /*-----------------------------------------------------------*/
                            /*    In-Parm's load port must not have loadedReticlePodID   */
                            /*-----------------------------------------------------------*/
                            if (!ObjectIdentifier.isEmptyWithValue(reticlePodPortInfo.getLoadedReticlePodID())) {
                                Validations.check(
                                        !ObjectIdentifier.equalsWithValue(
                                                in.getStartDurables().get(durableCnt).getDurableId(),
                                                reticlePodPortInfo.getLoadedReticlePodID()),
                                        retCodeConfig.getPortHasLoadedCassette());
                            }
                            /*--------------------------------------------------------------*/
                            /*    accessMode of all In-Parm's load ports must be the same   */
                            /*--------------------------------------------------------------*/
                            if (null == accessMode) {
                                accessMode = reticlePodPortInfo.getAccessMode();
                            } else if (!CimStringUtils.equals(accessMode, reticlePodPortInfo.getAccessMode())) {
                                Validations.check(
                                        true,
                                        new OmCode(
                                                retCodeConfig.getInvalidPortState(),
                                                reticlePodPortInfo.getReticlePodPortID().getValue(),
                                                reticlePodPortInfo.getAccessMode()));
                            }
                            break;
                        }
                    }
                }
            }
        } else if (CimStringUtils.equals(in.getOperation(), BizConstant.SP_OPERATION_OPESTART)) {
            if (CimStringUtils.equals(in.getDurableCategory(), BizConstant.SP_DURABLECAT_CASSETTE)) {
                CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, in.getEquipmentId());
                Validations.check(
                        null == aMachine,
                        new OmCode(retCodeConfig.getNotFoundEqp(), in.getEquipmentId().getValue()));
                for (int durableCnt = 0; durableCnt < durableLen; durableCnt++) {
                    /*----------------------*/
                    /*    Get Port Object   */
                    /*----------------------*/
                    Infos.StartDurable startDurable = in.getStartDurables().get(durableCnt);
                    PortResource aPs =
                            aMachine.findPortResourceNamed(
                                    startDurable.getStartDurablePort().getLoadPortID().getValue());
                    Validations.check(
                            aPs == null,
                            new OmCode(
                                    retCodeConfig.getNotFoundPort(),
                                    startDurable.getStartDurablePort().getLoadPortID().getValue()));
                    CimPortResource aPort = (CimPortResource) aPs;
                    Validations.check(
                            null == aPort,
                            new OmCode(
                                    retCodeConfig.getNotFoundPortResource(),
                                    startDurable.getStartDurablePort().getLoadPortID().getValue()));

                    /*-----------------------------------*/
                    /*   Get and Check Port's LoadMode   */
                    /*-----------------------------------*/
                    String loadMode = aPort.getPortUsage();
                    Validations.check(
                            !CimStringUtils.equals(loadMode, CIMStateConst.CIM_PORT_RESOURCE_INPUT)
                                    && !CimStringUtils.equals(loadMode, CIMStateConst.CIM_PORT_RESOURCE_INPUTOUTPUT),
                            retCodeConfig.getInvalidPortLoadMode());

                    /*-----------------------------------------*/
                    /*   Get Equipment's Operation Mode Info   */
                    /*-----------------------------------------*/
                    Outputs.ObjPortResourceCurrentOperationModeGetOut
                            strPortResourceCurrentOperationModeGetOut =
                            portMethod.portResourceCurrentOperationModeGet(
                                    objCommon,
                                    in.getEquipmentId(),
                                    startDurable.getStartDurablePort().getLoadPortID());

                    /*-------------------------------------*/
                    /*   Get and Check Port's Port State   */
                    /*-------------------------------------*/
                    String onlineMode =
                            strPortResourceCurrentOperationModeGetOut.getOperationMode().getOnlineMode();
                    if (!CimStringUtils.equals(onlineMode, BizConstant.SP_EQP_ONLINEMODE_OFFLINE)) {
                        String portState = aPort.getPortState();
                        ObjectIdentifier portID =
                                new ObjectIdentifier(aPort.getIdentifier(), aPort.getPrimaryKey());
                        Validations.check(
                                !CimStringUtils.equals(portState, BizConstant.SP_PORTRSC_PORTSTATE_LOADCOMP),
                                new OmCode(retCodeConfig.getInvalidPortState(), portID.getValue(), portState));
                    }

                    Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoGet(objCommon, in.getEquipmentId());
                    /*------------------------------------------------------------------*/
                    /*   Compare In-parm's Cassette/LoadPort vs Port's loadedCassette   */
                    /*------------------------------------------------------------------*/
                    Boolean findFlag = false;
                    String eqpInfoLoadPurposeType = null;
                    int lenEqpPort = CimArrayUtils.getSize(eqpPortInfo.getEqpPortStatuses());
                    for (int iCnt2 = 0; iCnt2 < lenEqpPort; iCnt2++) {
                        Infos.EqpPortStatus eqpPortStatus = eqpPortInfo.getEqpPortStatuses().get(iCnt2);
                        if (ObjectIdentifier.equalsWithValue(
                                startDurable.getStartDurablePort().getLoadPortID(), eqpPortStatus.getPortID())) {
                            if (ObjectIdentifier.equalsWithValue(
                                    startDurable.getDurableId(), eqpPortStatus.getLoadedCassetteID())) {
                                findFlag = true;
                                eqpInfoLoadPurposeType = eqpPortStatus.getCassetteLoadPurposeType();
                            }
                            break;
                        }
                    }
                    Validations.check(!findFlag, retCodeConfig.getInvalidCassettePortCombination());

                    /*------------------------------------------------------------*/
                    /*    Check Eqp Port's LoadPurpose VS In-Parm's LoadPurpose   */
                    /*------------------------------------------------------------*/
                    if (CimStringUtils.equals(eqpInfoLoadPurposeType, BizConstant.SP_LOADPURPOSETYPE_OTHER)) {
                        log.info("Eqp Port's LoadPurpose is SP_LoadPurposeType_Other");
                    } else if (CimStringUtils.equals(
                            eqpInfoLoadPurposeType, BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT)) {
                        if (CimStringUtils.equals(
                                startDurable.getStartDurablePort().getLoadPurposeType(),
                                BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT)
                                || CimStringUtils.equals(
                                startDurable.getStartDurablePort().getLoadPurposeType(),
                                BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT)) {
                        } else {
                            Validations.check(
                                    true,
                                    new OmCode(
                                            retCodeConfig.getNotSameLoadPurpose(),
                                            startDurable.getDurableId().getValue(),
                                            startDurable.getStartDurablePort().getLoadPurposeType(),
                                            startDurable.getStartDurablePort().getLoadPortID().getValue()));
                        }
                    } else if (CimStringUtils.equals(
                            eqpInfoLoadPurposeType, BizConstant.SP_LOADPURPOSETYPE_ANY)) {
                        if (CimStringUtils.equals(
                                startDurable.getStartDurablePort().getLoadPurposeType(),
                                BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT)
                                || CimStringUtils.equals(
                                startDurable.getStartDurablePort().getLoadPurposeType(),
                                BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT)
                                || CimStringUtils.equals(
                                startDurable.getStartDurablePort().getLoadPurposeType(),
                                BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE)) {
                        } else {
                            Validations.check(
                                    true,
                                    new OmCode(
                                            retCodeConfig.getNotSameLoadPurpose(),
                                            startDurable.getDurableId().getValue(),
                                            startDurable.getStartDurablePort().getLoadPurposeType(),
                                            startDurable.getStartDurablePort().getLoadPortID().getValue()));
                        }
                    } else if (CimStringUtils.equals(
                            eqpInfoLoadPurposeType, startDurable.getStartDurablePort().getLoadPurposeType())) {

                    } else {
                        Validations.check(
                                true,
                                new OmCode(
                                        retCodeConfig.getNotSameLoadPurpose(),
                                        startDurable.getDurableId().getValue(),
                                        startDurable.getStartDurablePort().getLoadPurposeType(),
                                        startDurable.getStartDurablePort().getLoadPortID().getValue()));
                    }
                }
            } else if (CimStringUtils.equals(
                    in.getDurableCategory(), BizConstant.SP_DURABLECAT_RETICLEPOD)) {
                /*-----------------------------------------*/
                /*   Get Equipment's Operation Mode Info   */
                /*-----------------------------------------*/
                String strEquipmentOnlineModeGetOut =
                        this.equipmentOnlineModeGet(objCommon, in.getEquipmentId());
                Outputs.ObjEquipmentReticlePodPortInfoGetDROut equipmentReticlePodPortInfoGetDROut =
                        this.equipmentReticlePodPortInfoGetDR(objCommon, in.getEquipmentId());
                int rppLen =
                        CimArrayUtils.getSize(equipmentReticlePodPortInfoGetDROut.getReticlePodPortInfoList());
                for (int iCnt3 = 0; iCnt3 < rppLen; iCnt3++) {
                    Infos.ReticlePodPortInfo reticlePodPortInfo =
                            equipmentReticlePodPortInfoGetDROut.getReticlePodPortInfoList().get(iCnt3);
                    for (int durableCnt = 0; durableCnt < durableLen; durableCnt++) {
                        Infos.StartDurable startDurable = in.getStartDurables().get(durableCnt);
                        if (ObjectIdentifier.equalsWithValue(
                                reticlePodPortInfo.getReticlePodPortID(),
                                startDurable.getStartDurablePort().getLoadPortID())) {
                            /*-----------------------------*/
                            /*   Check Port's Port State   */
                            /*-----------------------------*/
                            if (!CimStringUtils.equals(
                                    strEquipmentOnlineModeGetOut, BizConstant.SP_EQP_ONLINEMODE_OFFLINE)) {
                                Validations.check(
                                        !CimStringUtils.equals(
                                                reticlePodPortInfo.getPortStatus(),
                                                BizConstant.SP_PORTRSC_PORTSTATE_LOADCOMP),
                                        new OmCode(
                                                retCodeConfig.getInvalidPortState(),
                                                reticlePodPortInfo.getReticlePodPortID().getValue(),
                                                reticlePodPortInfo.getPortStatus()));
                            }
                            /*------------------------------------------------------------------------*/
                            /*    Check In-Parm's reticlePod/load port vs Port's loadedReticlePodID   */
                            /*------------------------------------------------------------------------*/
                            Validations.check(
                                    !ObjectIdentifier.equalsWithValue(
                                            startDurable.getDurableId(), reticlePodPortInfo.getLoadedReticlePodID()),
                                    new OmCode(
                                            retCodeConfig.getReticleLoadedRtclpod(),
                                            startDurable.getDurableId().getValue(),
                                            reticlePodPortInfo.getLoadedReticlePodID().getValue(),
                                            in.getEquipmentId().getValue(),
                                            reticlePodPortInfo.getReticlePodPortID().getValue()));
                            break;
                        }
                    }
                }
            }
        } else if (CimStringUtils.equals(in.getOperation(), BizConstant.SP_OPERATION_OPERATIONCOMP)) {
            if (CimStringUtils.equals(in.getDurableCategory(), BizConstant.SP_DURABLECAT_CASSETTE)) {
                /*--------------------------*/
                /*   Get Port Information   */
                /*--------------------------*/
                Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoGet(objCommon, in.getEquipmentId());
                /*----------------------------------------*/
                /*   For-Loop for strStartDurables Info   */
                /*----------------------------------------*/
                for (int durableCnt = 0; durableCnt < durableLen; durableCnt++) {
                    Infos.StartDurable startDurable = in.getStartDurables().get(durableCnt);
                    /*-------------------------*/
                    /*   Find Specified Port   */
                    /*-------------------------*/
                    Boolean findFlag = false;
                    int EPSLength = CimArrayUtils.getSize(eqpPortInfo.getEqpPortStatuses());
                    int iCnt2 = 0;
                    for (iCnt2 = 0; iCnt2 < EPSLength; iCnt2++) {
                        Infos.EqpPortStatus eqpPortStatus = eqpPortInfo.getEqpPortStatuses().get(iCnt2);
                        String EPSIdent = eqpPortStatus.getPortID().getValue();
                        String PIDIdent = startDurable.getStartDurablePort().getUnloadPortID().getValue();
                        if (CimStringUtils.equals(EPSIdent, PIDIdent)) {
                            findFlag = true;
                            break;
                        }
                    }
                    Validations.check(
                            !findFlag,
                            new OmCode(
                                    retCodeConfig.getNotFoundPort(),
                                    startDurable.getStartDurablePort().getUnloadPortID().getValue()));
                    /*------------------------*/
                    /*   Compare CassetteID   */
                    /*------------------------*/
                    String EPSIdent =
                            eqpPortInfo.getEqpPortStatuses().get(iCnt2).getLoadedCassetteID().getValue();
                    String CIDIdent = startDurable.getDurableId().getValue();
                    Validations.check(
                            !CimStringUtils.equals(EPSIdent, CIDIdent),
                            retCodeConfig.getInvalidCassettePortCombination());
                }
            } else if (CimStringUtils.equals(
                    in.getDurableCategory(), BizConstant.SP_DURABLECAT_RETICLEPOD)) {
                /*------------------------------------*/
                /*   Get reticlePodPort Information   */
                /*------------------------------------*/
                Outputs.ObjEquipmentReticlePodPortInfoGetDROut strEquipmentReticlePodPortInfoGetDROut =
                        this.equipmentReticlePodPortInfoGetDR(objCommon, in.getEquipmentId());

                /*----------------------------------------*/
                /*   For-Loop for strStartDurables Info   */
                /*----------------------------------------*/
                for (int durableCnt = 0; durableCnt < durableLen; durableCnt++) {
                    Infos.StartDurable startDurable = in.getStartDurables().get(durableCnt);
                    /*-------------------------*/
                    /*   Find Specified Port   */
                    /*-------------------------*/
                    Boolean findFlag = false;
                    int rppLen =
                            CimArrayUtils.getSize(
                                    strEquipmentReticlePodPortInfoGetDROut.getReticlePodPortInfoList());
                    int iCnt2 = 0;
                    for (iCnt2 = 0; iCnt2 < rppLen; iCnt2++) {
                        Infos.ReticlePodPortInfo reticlePodPortInfo =
                                strEquipmentReticlePodPortInfoGetDROut.getReticlePodPortInfoList().get(iCnt2);
                        String RPPIdent = reticlePodPortInfo.getReticlePodPortID().getValue();
                        String PIDIdent = startDurable.getStartDurablePort().getUnloadPortID().getValue();
                        if (CimStringUtils.equals(RPPIdent, PIDIdent)) {
                            findFlag = true;
                            break;
                        }
                    }
                    Validations.check(
                            !findFlag,
                            new OmCode(
                                    retCodeConfig.getNotFoundPort(),
                                    startDurable.getStartDurablePort().getUnloadPortID().getValue()));

                    /*------------------------*/
                    /*   Compare CassetteID   */
                    /*------------------------*/
                    String RPPIdent =
                            strEquipmentReticlePodPortInfoGetDROut
                                    .getReticlePodPortInfoList()
                                    .get(iCnt2)
                                    .getLoadedReticlePodID()
                                    .getValue();
                    String CIDIdent = startDurable.getDurableId().getValue();
                    Validations.check(
                            !CimStringUtils.equals(RPPIdent, CIDIdent),
                            retCodeConfig.getInvalidCassettePortCombination());
                }
            }
        } else if (CimStringUtils.equals(in.getOperation(), BizConstant.SP_OPERATION_LOADING)) {
            if (CimStringUtils.equals(in.getDurableCategory(), BizConstant.SP_DURABLECAT_CASSETTE)) {
                Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoGet(objCommon, in.getEquipmentId());
                int lenPortInfo = CimArrayUtils.getSize(eqpPortInfo.getEqpPortStatuses());
                /*-----------------------------------------*/
                /*   Get Equipment's durableControlJobID   */
                /*-----------------------------------------*/
                CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, in.getEquipmentId());
                Validations.check(
                        null == aMachine,
                        new OmCode(retCodeConfig.getNotFoundEqp(), in.getEquipmentId().getValue()));
                List<com.fa.cim.newcore.bo.durable.CimDurableControlJob> durableControlJobs =
                        aMachine.allStartReservedDurableControlJobs();
                ObjectIdentifier mDurableCJID = null;
                int durableControlJobSize = CimArrayUtils.getSize(durableControlJobs);
                for (int iCnt2 = 0; iCnt2 < durableControlJobSize; iCnt2++) {
                    com.fa.cim.newcore.bo.durable.CimDurableControlJob durableControlJob =
                            durableControlJobs.get(iCnt2);
                    Validations.check(null == durableControlJob, retCodeConfig.getNotFoundDctrljob());
                    String durableCat = durableControlJob.getDurableCategory();
                    if (CimStringUtils.equals(durableCat, BizConstant.SP_DURABLECAT_CASSETTE)) {
                        List<DurableDTO.StartDurableInfo> startDurableSeq =
                                durableControlJob.getStartDurableInfo();
                        Inputs.ObjEquipmentPortGroupIDGetIn objEquipmentPortGroupIDGetIn =
                                new Inputs.ObjEquipmentPortGroupIDGetIn();
                        objEquipmentPortGroupIDGetIn.setEquipmentId(in.getEquipmentId());
                        objEquipmentPortGroupIDGetIn.setPortId(startDurableSeq.get(0).getLoadPortID());
                        Outputs.ObjEquipmentPortGroupIDGetOut strEquipmentPortGroupIDGetOut =
                                portMethod.equipmentPortGroupIDGet(objCommon, objEquipmentPortGroupIDGetIn);
                        String dcjPortGroupID = strEquipmentPortGroupIDGetOut.getPortGroupId();
                        if (CimStringUtils.equals(in.getPortGroupId(), dcjPortGroupID)) {
                            mDurableCJID =
                                    new ObjectIdentifier(
                                            durableControlJob.getIdentifier(), durableControlJob.getPrimaryKey());
                            break;
                        }
                    }
                }
                for (int durableCnt = 0; durableCnt < durableLen; durableCnt++) {
                    Infos.StartDurable startDurable = in.getStartDurables().get(durableCnt);
                    CimCassette aCassette =
                            baseCoreFactory.getBO(CimCassette.class, startDurable.getDurableId());
                    Validations.check(
                            null == aCassette,
                            new OmCode(
                                    retCodeConfig.getNotFoundCassette(), startDurable.getDurableId().getValue()));
                    com.fa.cim.newcore.bo.durable.CimDurableControlJob aDurableControlJob =
                            aCassette.getDurableControlJob();
                    /*----------------------------------------------------------------*/
                    /*   Check Combination of durableControlJob, Port, and Cassette   */
                    /*----------------------------------------------------------------*/
                    ObjectIdentifier cDurableCJID = null;
                    if (null == aDurableControlJob) {
                        Validations.check(
                                !ObjectIdentifier.isEmpty(mDurableCJID),
                                new OmCode(
                                        retCodeConfig.getAlreadyReservedPortGroup(),
                                        ObjectIdentifier.fetchValue(startDurable.getStartDurablePort().getLoadPortID()),
                                        ObjectIdentifier.fetchValue(mDurableCJID)));
                    } else {
                        cDurableCJID =
                                new ObjectIdentifier(
                                        aDurableControlJob.getIdentifier(), aDurableControlJob.getPrimaryKey());
                        if (ObjectIdentifier.equalsWithValue(cDurableCJID, mDurableCJID)) {
                            List<DurableDTO.StartDurableInfo> startDurableSeq =
                                    aDurableControlJob.getStartDurableInfo();
                            Boolean bFound = false;
                            for (int startDurableCnt = 0;
                                 startDurableCnt < CimArrayUtils.getSize(startDurableSeq);
                                 startDurableCnt++) {
                                DurableDTO.StartDurableInfo startDurableInfo = startDurableSeq.get(startDurableCnt);
                                if (ObjectIdentifier.equalsWithValue(
                                        startDurableInfo.getDurableID(), startDurable.getDurableId())) {
                                    if (ObjectIdentifier.equalsWithValue(
                                            startDurableInfo.getLoadPortID(),
                                            startDurable.getStartDurablePort().getLoadPortID())) {
                                        bFound = true;
                                        break;
                                    } else {
                                        Validations.check(
                                                true,
                                                new OmCode(
                                                        retCodeConfig.getInvalidLoadingPort(),
                                                        startDurable.getStartDurablePort().getLoadPortID().getValue(),
                                                        startDurable.getDurableId().getValue(),
                                                        startDurableInfo.getLoadPortID().getValue()));
                                    }
                                }
                            }
                            Validations.check(
                                    !bFound,
                                    new OmCode(
                                            retCodeConfig.getEquipmentCastUnmatch(),
                                            mDurableCJID.getValue(),
                                            startDurable.getDurableId().getValue()));
                        } else {
                            CimMachine aReserveMachine = aDurableControlJob.getMachine();
                            ObjectIdentifier resvEqpID =
                                    new ObjectIdentifier(
                                            aReserveMachine.getIdentifier(), aReserveMachine.getPrimaryKey());
                            Validations.check(
                                    true,
                                    new OmCode(retCodeConfig.getCastResvedForAnotherEqp(), resvEqpID.getValue()));
                        }
                    }
                    /*------------------------------------------*/
                    /*   Check Condition for Loading Sequence   */
                    /*------------------------------------------*/
                    int saveSeqNo = 0;
                    String basePortGroupID = null;
                    for (int portCnt = 0; portCnt < lenPortInfo; portCnt++) {
                        Infos.EqpPortStatus eqpPortStatus = eqpPortInfo.getEqpPortStatuses().get(portCnt);
                        if (ObjectIdentifier.equalsWithValue(
                                eqpPortStatus.getPortID(), startDurable.getStartDurablePort().getLoadPortID())) {
                            basePortGroupID = eqpPortStatus.getPortGroup();
                            saveSeqNo = portCnt;
                            break;
                        }
                    }
                    /*----------------------------------*/
                    /*   Check for Access Mode : Auto   */
                    /*----------------------------------*/
                    if (CimStringUtils.equals(
                            eqpPortInfo.getEqpPortStatuses().get(saveSeqNo).getAccessMode(),
                            BizConstant.SP_EQP_ACCESSMODE_AUTO)) {
                        /*--------------------------------*/
                        /*   Check Port is Empty or Not   */
                        /*--------------------------------*/
                        Validations.check(
                                !ObjectIdentifier.isEmptyWithValue(
                                        eqpPortInfo.getEqpPortStatuses().get(saveSeqNo).getLoadedCassetteID()),
                                retCodeConfig.getPortHasLoadedCassette());

                        /*----------------------------------------------------*/
                        /*   Check durableControlJobID of Cassette and Port   */
                        /*----------------------------------------------------*/
                        Validations.check(
                                ObjectIdentifier.isEmptyWithValue(cDurableCJID),
                                retCodeConfig.getDurableControlJobBlank());
                        Validations.check(
                                ObjectIdentifier.isEmptyWithValue(mDurableCJID),
                                retCodeConfig.getNotReservedDctrljobPortgrp());
                        Validations.check(
                                !ObjectIdentifier.equalsWithValue(cDurableCJID, mDurableCJID),
                                new OmCode(
                                        retCodeConfig.getDurableEQPDrbCtrljobUnmatch(),
                                        startDurable.getDurableId().getValue()));
                    } else {
                        /*----------------------------------*/
                        /*   Check for Access Mode : Manu   */
                        /*----------------------------------*/
                        int sequenceCondition = StandardProperties.OM_CARRIER_LOAD_SEQ_CHK.getIntValue();
                        if (sequenceCondition == 0) {
                            /*-----------------------------------------*/
                            /*   Get Next Loading Port in Port Group   */
                            /*-----------------------------------------*/
                            Long minLoadSeqNo = 999L;
                            ObjectIdentifier nextPortID = null;
                            for (int portCnt = 0; portCnt < lenPortInfo; portCnt++) {
                                if (CimStringUtils.equals(
                                        eqpPortInfo.getEqpPortStatuses().get(portCnt).getPortGroup(),
                                        basePortGroupID)
                                        && ObjectIdentifier.isEmptyWithValue(
                                        eqpPortInfo.getEqpPortStatuses().get(portCnt).getLoadedCassetteID())
                                        && eqpPortInfo.getEqpPortStatuses().get(portCnt).getLoadSequenceNumber()
                                        < minLoadSeqNo) {
                                    minLoadSeqNo =
                                            eqpPortInfo.getEqpPortStatuses().get(portCnt).getLoadSequenceNumber();
                                    nextPortID = eqpPortInfo.getEqpPortStatuses().get(portCnt).getPortID();
                                }
                            }
                            /*-------------------------*/
                            /*   Judge Loading Order   */
                            /*-------------------------*/
                            Validations.check(
                                    !ObjectIdentifier.equalsWithValue(
                                            nextPortID, startDurable.getStartDurablePort().getLoadPortID()),
                                    new OmCode(retCodeConfig.getInvalidLoadingSequence(), ""));

                            /*-----------------------------------------------------*/
                            /*   Check Cassette On Port for 1st Loading Cassette   */
                            /*-----------------------------------------------------*/
                            if (1 == eqpPortInfo.getEqpPortStatuses().get(saveSeqNo).getLoadSequenceNumber()) {
                                for (int portCnt = 0; portCnt < lenPortInfo; portCnt++) {
                                    Validations.check(
                                            CimStringUtils.equals(
                                                    eqpPortInfo.getEqpPortStatuses().get(portCnt).getPortGroup(),
                                                    basePortGroupID)
                                                    && !ObjectIdentifier.isEmptyWithValue(
                                                    eqpPortInfo.getEqpPortStatuses().get(portCnt).getLoadedCassetteID()),
                                            retCodeConfig.getPortHasLoadedCassette());
                                }
                            }
                        }
                    }
                    /*------------------------------------*/
                    /*   Check Condition for Port Usage   */
                    /*------------------------------------*/
                    Validations.check(
                            !CimStringUtils.equals(
                                    eqpPortInfo.getEqpPortStatuses().get(saveSeqNo).getPortUsage(),
                                    CIMStateConst.CIM_PORT_RESOURCE_INPUT)
                                    && !CimStringUtils.equals(
                                    eqpPortInfo.getEqpPortStatuses().get(saveSeqNo).getPortUsage(),
                                    CIMStateConst.CIM_PORT_RESOURCE_INPUTOUTPUT),
                            new OmCode(
                                    retCodeConfig.getInvalidPortUsage(),
                                    startDurable.getStartDurablePort().getLoadPortID().getValue()));
                    /*-------------------------------------------*/
                    /*   Check Condition for Load Purpose Type   */
                    /*-------------------------------------------*/
                    // Eqp Port's LoadPurpose should be the same as In-Parm's LoadPurpose
                    Validations.check(
                            !CimStringUtils.equals(
                                    eqpPortInfo.getEqpPortStatuses().get(saveSeqNo).getLoadPurposeType(),
                                    startDurable.getStartDurablePort().getLoadPurposeType()),
                            new OmCode(
                                    retCodeConfig.getNotSameLoadPurpose(),
                                    startDurable.getDurableId().getValue(),
                                    startDurable.getStartDurablePort().getLoadPurposeType(),
                                    startDurable.getStartDurablePort().getLoadPortID().getValue(),
                                    eqpPortInfo.getEqpPortStatuses().get(saveSeqNo).getLoadPurposeType()));
                    // StartDurableCassette's LoadPurpose is the same as In-Parm's LoadPurpose
                    if (null != aDurableControlJob) {
                        List<DurableDTO.StartDurableInfo> startDurableSeq =
                                aDurableControlJob.getStartDurableInfo();
                        for (int startDurableCnt = 0;
                             startDurableCnt < CimArrayUtils.getSize(startDurableSeq);
                             startDurableCnt++) {
                            if (ObjectIdentifier.equalsWithValue(
                                    startDurableSeq.get(startDurableCnt).getDurableID(),
                                    startDurable.getDurableId())) {
                                Validations.check(
                                        !CimStringUtils.equals(
                                                startDurableSeq.get(startDurableCnt).getLoadPurposeType(),
                                                startDurable.getStartDurablePort().getLoadPurposeType()),
                                        new OmCode(
                                                retCodeConfig.getNotSameLoadPurpose(),
                                                startDurable.getDurableId().getValue(),
                                                startDurable.getStartDurablePort().getLoadPurposeType(),
                                                startDurable.getStartDurablePort().getLoadPortID().getValue(),
                                                startDurableSeq.get(startDurableCnt).getLoadPurposeType()));
                            }
                        }
                    }
                    /*--------------------------------------*/
                    /*   Check Condition for Port Status    */
                    /*--------------------------------------*/
                    if (!CimStringUtils.equals(
                            eqpPortInfo.getEqpPortStatuses().get(saveSeqNo).getOnlineMode(),
                            BizConstant.SP_EQP_ONLINEMODE_OFFLINE)) {
                        /*===== portState Check =====*/
                        Validations.check(
                                !CimStringUtils.equals(
                                        eqpPortInfo.getEqpPortStatuses().get(saveSeqNo).getPortState(),
                                        BizConstant.SP_PORTRSC_PORTSTATE_LOADCOMP),
                                new OmCode(
                                        retCodeConfig.getInvalidPortState(),
                                        startDurable.getStartDurablePort().getLoadPortID().getValue(),
                                        eqpPortInfo.getEqpPortStatuses().get(saveSeqNo).getPortState()));

                        /*===== Cassette on Port Check =====*/
                        Validations.check(
                                !ObjectIdentifier.isEmptyWithValue(
                                        eqpPortInfo.getEqpPortStatuses().get(saveSeqNo).getLoadedCassetteID()),
                                retCodeConfig.getPortHasLoadedCassette());
                    }
                }
            }
        }
        if (CimStringUtils.equals(in.getOperation(), BizConstant.SP_OPERATION_OPESTART)
                || CimStringUtils.equals(in.getOperation(), BizConstant.SP_OPERATION_OPERATIONCOMP)
                || CimStringUtils.equals(in.getOperation(), BizConstant.SP_OPERATION_STARTRESERVATIONCANCEL)
                || CimStringUtils.equals(in.getOperation(), BizConstant.SP_OPERATION_OPESTARTCANCEL)) {
            for (int durableCnt = 0; durableCnt < durableLen; durableCnt++) {
                Infos.StartDurable startDurable = in.getStartDurables().get(durableCnt);
                com.fa.cim.newcore.bo.durable.CimDurableControlJob aDurableControlJob = null;
                if (CimStringUtils.equals(in.getDurableCategory(), BizConstant.SP_DURABLECAT_CASSETTE)) {
                    com.fa.cim.newcore.bo.durable.CimCassette aCassette =
                            baseCoreFactory.getBO(
                                    com.fa.cim.newcore.bo.durable.CimCassette.class, startDurable.getDurableId());
                    Validations.check(
                            null == aCassette,
                            new OmCode(
                                    retCodeConfig.getNotFoundCassette(), startDurable.getDurableId().getValue()));
                    aDurableControlJob = aCassette.getDurableControlJob();
                } else if (CimStringUtils.equals(
                        in.getDurableCategory(), BizConstant.SP_DURABLECAT_RETICLEPOD)) {
                    com.fa.cim.newcore.bo.durable.CimReticlePod aReticlePod =
                            baseCoreFactory.getBO(
                                    com.fa.cim.newcore.bo.durable.CimReticlePod.class, startDurable.getDurableId());
                    Validations.check(
                            null == aReticlePod,
                            new OmCode(
                                    retCodeConfig.getNotFoundReticlePod(), startDurable.getDurableId().getValue()));
                    aDurableControlJob = aReticlePod.getDurableControlJob();
                } else if (CimStringUtils.equals(
                        in.getDurableCategory(), BizConstant.SP_DURABLECAT_RETICLE)) {
                    com.fa.cim.newcore.bo.durable.CimProcessDurable aReticle =
                            baseCoreFactory.getBO(
                                    com.fa.cim.newcore.bo.durable.CimProcessDurable.class,
                                    startDurable.getDurableId());
                    Validations.check(
                            null == aReticle,
                            new OmCode(
                                    retCodeConfig.getNotFoundReticle(), startDurable.getDurableId().getValue()));
                    aDurableControlJob = aReticle.getDurableControlJob();
                }
                Validations.check(null == aDurableControlJob, retCodeConfig.getDurableControlJobBlank());

                CimMachine aDurableMachine = aDurableControlJob.getMachine();
                Validations.check(
                        null == aDurableMachine, new OmCode(retCodeConfig.getNotFoundEqp(), "*****"));
                ObjectIdentifier durableEquipmentID =
                        new ObjectIdentifier(aDurableMachine.getIdentifier(), aDurableMachine.getPrimaryKey());
                Validations.check(
                        !ObjectIdentifier.equalsWithValue(in.getEquipmentId(), durableEquipmentID),
                        new OmCode(retCodeConfig.getNotFoundEqpFromCtrljob(), "*****"));
            }
        }
    }

    @Override
    public void equipmentAndPortStateCheckForDurableOperationForInternalBuffer(
            Infos.ObjCommon objCommon, Inputs.ObjEquipmentAndPortStateCheckForDurableOperationIn in) {
        String durableCategory = in.getDurableCategory();
        if (!CimStringUtils.equals(durableCategory, BizConstant.SP_DURABLECAT_CASSETTE)
                && !CimStringUtils.equals(durableCategory, BizConstant.SP_DURABLECAT_RETICLEPOD)
                && !CimStringUtils.equals(durableCategory, BizConstant.SP_DURABLECAT_RETICLE)) {
            throw new ServiceException(
                    new OmCode(retCodeConfig.getInvalidDurableCategory(), durableCategory));
        }
        int durableLen = CimArrayUtils.getSize(in.getStartDurables());
        if (CimStringUtils.equals(in.getOperation(), BizConstant.SP_OPERATION_STARTRESERVATION)) {
            if (CimStringUtils.equals(durableCategory, BizConstant.SP_DURABLECAT_CASSETTE)) {
                CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, in.getEquipmentId());
                Validations.check(
                        aMachine == null,
                        new OmCode(retCodeConfig.getNotFoundEqp(), in.getEquipmentId().getValue()));
                /*----------------------------------------------------*/
                /*   In-Parm's portGroupID must not have controlJobID */
                /*----------------------------------------------------*/
                List<com.fa.cim.newcore.bo.product.CimControlJob> controlJobs =
                        aMachine.allStartReservedControlJobs();
                Boolean cjFindFlag = false;
                int size = CimArrayUtils.getSize(controlJobs);
                int iCnt1 = 0;
                for (iCnt1 = 0; iCnt1 < size; iCnt1++) {
                    com.fa.cim.newcore.bo.product.CimControlJob cimControlJob = controlJobs.get(iCnt1);
                    Validations.check(null == cimControlJob, retCodeConfig.getNotFoundControlJob());
                    String cjPortGroupID = cimControlJob.getPortGroup();
                    if (CimStringUtils.equals(in.getPortGroupId(), cjPortGroupID)) {
                        cjFindFlag = true;
                        break;
                    }
                }
                Validations.check(
                        cjFindFlag,
                        new OmCode(
                                retCodeConfig.getAlreadyReservedPortGroup(),
                                in.getStartDurables().get(0).getStartDurablePort().getLoadPortID().getValue(),
                                in.getPortGroupId()));
                Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoGet(objCommon, in.getEquipmentId());
                int lenEqpPort = CimArrayUtils.getSize(eqpPortInfo.getEqpPortStatuses());
                for (int iCnt3 = 0; iCnt3 < lenEqpPort; iCnt3++) {
                    Infos.EqpPortStatus eqpPortStatus = eqpPortInfo.getEqpPortStatuses().get(iCnt3);
                    if (!CimStringUtils.equals(eqpPortStatus.getPortGroup(), in.getPortGroupId())) {
                        continue;
                    }
                    /*-----------------------------------*/
                    /*   Get and Check Port's LoadMode   */
                    /*-----------------------------------*/
                    PortResource aPs = aMachine.findPortResourceNamed(eqpPortStatus.getPortID().getValue());
                    Validations.check(
                            null == aPs,
                            new OmCode(retCodeConfig.getNotFoundPort(), eqpPortStatus.getPortID().getValue()));
                    CimPortResource aPort = (CimPortResource) aPs;
                    Validations.check(
                            null == aPort,
                            new OmCode(retCodeConfig.getNotFoundPort(), eqpPortStatus.getPortID().getValue()));
                    String loadMode = aPort.getPortUsage();
                    Validations.check(
                            !CimStringUtils.equals(loadMode, CIMStateConst.CIM_PORT_RESOURCE_INPUT)
                                    && !CimStringUtils.equals(loadMode, CIMStateConst.CIM_PORT_RESOURCE_INPUTOUTPUT),
                            retCodeConfig.getInvalidPortLoadMode());
                    /*-----------------------------------------*/
                    /*   Get Equipment's Operation Mode Info   */
                    /*-----------------------------------------*/
                    Outputs.ObjPortResourceCurrentOperationModeGetOut
                            strPortResourceCurrentOperationModeGetOut =
                            portMethod.portResourceCurrentOperationModeGet(
                                    objCommon,
                                    in.getEquipmentId(),
                                    in.getStartDurables().get(iCnt1).getStartDurablePort().getLoadPortID());
                    /*-------------------------------------*/
                    /*   Get and Check Port's Port State   */
                    /*-------------------------------------*/
                    if (!CimStringUtils.equals(
                            strPortResourceCurrentOperationModeGetOut.getOperationMode().getOnlineMode(),
                            BizConstant.SP_EQP_ONLINEMODE_OFFLINE)) {
                        Validations.check(
                                !CimStringUtils.equals(
                                        eqpPortStatus.getPortState(), BizConstant.SP_PORTRSC_PORTSTATE_LOADAVAIL)
                                        && !CimStringUtils.equals(
                                        eqpPortStatus.getPortState(), BizConstant.SP_PORTRSC_PORTSTATE_LOADREQ),
                                new OmCode(
                                        retCodeConfig.getInvalidPortState(),
                                        eqpPortStatus.getPortID().getValue(),
                                        eqpPortStatus.getPortState()));
                    }
                    /*----------------------------------------*/
                    /*   Get Start Reserve Cassette on Port   */
                    /*----------------------------------------*/
                    String pStartRsvCastID = null;
                    for (int durableCnt = 0; durableCnt < durableLen; durableCnt++) {
                        if (ObjectIdentifier.equalsWithValue(
                                in.getStartDurables().get(durableCnt).getStartDurablePort().getLoadPortID(),
                                eqpPortInfo.getEqpPortStatuses().get(iCnt3).getPortID())) {
                            pStartRsvCastID = in.getStartDurables().get(durableCnt).getDurableId().getValue();
                            break;
                        }
                    }
                    /*------------------------------------*/
                    /*   Get and Check Cassette on Port   */
                    /*------------------------------------*/
                    if (!ObjectIdentifier.isEmptyWithValue(eqpPortStatus.getLoadedCassetteID())) {
                        Validations.check(
                                CimStringUtils.isEmpty(pStartRsvCastID)
                                        || !ObjectIdentifier.equalsWithValue(
                                        pStartRsvCastID, eqpPortStatus.getLoadedCassetteID()),
                                retCodeConfig.getPortHasLoadedCassette());
                    }
                    /*--------------------------------------------*/
                    /*   Check Load Reserved for Cassette on Port */
                    /*--------------------------------------------*/
                    if (!ObjectIdentifier.isEmptyWithValue(eqpPortStatus.getDispatchLoadCassetteID())) {
                        Validations.check(
                                CimStringUtils.isEmpty(pStartRsvCastID)
                                        || !ObjectIdentifier.equalsWithValue(
                                        pStartRsvCastID, eqpPortStatus.getLoadedCassetteID()),
                                new OmCode(
                                        retCodeConfig.getAlreadyReservedLoadPort(),
                                        eqpPortStatus.getPortID().getValue(),
                                        eqpPortStatus.getDispatchLoadCassetteID().getValue()));
                    }
                }
                for (int durableCnt = 0; durableCnt < durableLen; durableCnt++) {
                    for (int iCnt5 = 0; iCnt5 < lenEqpPort; iCnt5++) {
                        Infos.EqpPortStatus eqpPortStatus = eqpPortInfo.getEqpPortStatuses().get(iCnt5);
                        if (ObjectIdentifier.equalsWithValue(
                                in.getStartDurables().get(durableCnt).getStartDurablePort().getLoadPortID(),
                                eqpPortStatus.getPortID())) {
                            /*------------------------------------------------------------*/
                            /*    Check Eqp Port's LoadPurpose VS In-Parm's LoadPurpose   */
                            /*------------------------------------------------------------*/
                            if (CimStringUtils.equals(
                                    eqpPortStatus.getLoadPurposeType(), BizConstant.SP_LOADPURPOSETYPE_OTHER)) {
                                log.info("Eqp Port's LoadPurpose is SP_LoadPurposeType_Other");
                            } else if (CimStringUtils.equals(
                                    eqpPortStatus.getLoadPurposeType(), BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT)) {
                                if (CimStringUtils.equals(
                                        in.getStartDurables()
                                                .get(durableCnt)
                                                .getStartDurablePort()
                                                .getLoadPurposeType(),
                                        BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT)
                                        || CimStringUtils.equals(
                                        in.getStartDurables()
                                                .get(durableCnt)
                                                .getStartDurablePort()
                                                .getLoadPurposeType(),
                                        BizConstant.SP_LOADPURPOSETYPE_SLMRETRIEVING)
                                        || CimStringUtils.equals(
                                        in.getStartDurables()
                                                .get(durableCnt)
                                                .getStartDurablePort()
                                                .getLoadPurposeType(),
                                        BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT)) {
                                } else {
                                    Validations.check(
                                            true,
                                            new OmCode(
                                                    retCodeConfig.getNotSameLoadPurpose(),
                                                    in.getStartDurables().get(durableCnt).getDurableId().getValue(),
                                                    in.getStartDurables()
                                                            .get(durableCnt)
                                                            .getStartDurablePort()
                                                            .getLoadPurposeType(),
                                                    in.getStartDurables()
                                                            .get(durableCnt)
                                                            .getStartDurablePort()
                                                            .getLoadPortID()
                                                            .getValue(),
                                                    eqpPortStatus.getLoadPurposeType()));
                                }
                            } else if (CimStringUtils.equals(
                                    eqpPortStatus.getLoadPurposeType(), BizConstant.SP_LOADPURPOSETYPE_ANY)) {
                                if (CimStringUtils.equals(
                                        in.getStartDurables()
                                                .get(durableCnt)
                                                .getStartDurablePort()
                                                .getLoadPurposeType(),
                                        BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT)
                                        || CimStringUtils.equals(
                                        in.getStartDurables()
                                                .get(durableCnt)
                                                .getStartDurablePort()
                                                .getLoadPurposeType(),
                                        BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT)
                                        || CimStringUtils.equals(
                                        in.getStartDurables()
                                                .get(durableCnt)
                                                .getStartDurablePort()
                                                .getLoadPurposeType(),
                                        BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE)) {
                                } else {
                                    Validations.check(
                                            true,
                                            new OmCode(
                                                    retCodeConfig.getNotSameLoadPurpose(),
                                                    in.getStartDurables().get(durableCnt).getDurableId().getValue(),
                                                    in.getStartDurables()
                                                            .get(durableCnt)
                                                            .getStartDurablePort()
                                                            .getLoadPurposeType(),
                                                    in.getStartDurables()
                                                            .get(durableCnt)
                                                            .getStartDurablePort()
                                                            .getLoadPortID()
                                                            .getValue(),
                                                    eqpPortStatus.getLoadPurposeType()));
                                }
                            } else if (CimStringUtils.equals(
                                    in.getStartDurables().get(durableCnt).getStartDurablePort().getLoadPurposeType(),
                                    eqpPortStatus.getLoadPurposeType())) {
                            } else {
                                Validations.check(
                                        true,
                                        new OmCode(
                                                retCodeConfig.getNotSameLoadPurpose(),
                                                in.getStartDurables().get(durableCnt).getDurableId().getValue(),
                                                in.getStartDurables()
                                                        .get(durableCnt)
                                                        .getStartDurablePort()
                                                        .getLoadPurposeType(),
                                                in.getStartDurables()
                                                        .get(durableCnt)
                                                        .getStartDurablePort()
                                                        .getLoadPortID()
                                                        .getValue(),
                                                eqpPortStatus.getLoadPurposeType()));
                            }
                            /*--------------------------------------------------------*/
                            /*    Check Eqp Port's LoadSeqNo VS In-Parm's LoadSeqNo   */
                            /*--------------------------------------------------------*/
                            if (CimNumberUtils.intValue(eqpPortStatus.getLoadSequenceNumber())
                                    != CimNumberUtils.intValue(
                                    in.getStartDurables()
                                            .get(durableCnt)
                                            .getStartDurablePort()
                                            .getLoadSequenceNumber())) {
                                Validations.check(
                                        true,
                                        new OmCode(
                                                retCodeConfig.getInvalidLoadingSequence(),
                                                in.getStartDurables().get(durableCnt).getDurableId().getValue()));
                            }
                        }
                    }
                }
            } else if (CimStringUtils.equals(
                    in.getDurableCategory(), BizConstant.SP_DURABLECAT_RETICLEPOD)) {
                /*---------------------------------------------------------*/
                /*    In-parm's portID must not have durableControlJobID   */
                /*---------------------------------------------------------*/
                List<ObjectIdentifier> reservedDurableControlJobIDs =
                        this.equipmentReservedDurableControlJobIDGetDR(objCommon, in.getEquipmentId());
                int durableControlJobIDSize = CimArrayUtils.getSize(reservedDurableControlJobIDs);
                for (int iCnt6 = 0; iCnt6 < durableControlJobIDSize; iCnt6++) {
                    List<Infos.StartDurable> startDurables =
                            durableMethod.durableControlJobDurableListGetDR(
                                    objCommon, reservedDurableControlJobIDs.get(iCnt6));
                    int startDurableSize = CimArrayUtils.getSize(startDurables);
                    for (int iCnt7 = 0; iCnt7 < startDurableSize; iCnt7++) {
                        for (int durableCnt = 0; durableCnt < durableLen; durableCnt++) {
                            Validations.check(
                                    ObjectIdentifier.equalsWithValue(
                                            startDurables.get(iCnt7).getStartDurablePort().getLoadPortID(),
                                            in.getStartDurables().get(durableCnt).getStartDurablePort().getLoadPortID()),
                                    new OmCode(
                                            retCodeConfig.getAttributeReservedDctrljob(),
                                            startDurables.get(iCnt7).getStartDurablePort().getLoadPortID().getValue()));
                        }
                    }
                }
                /*-----------------------------------------*/
                /*   Get Equipment's Operation Mode Info   */
                /*-----------------------------------------*/
                String strEquipmentOnlineModeGetOut =
                        this.equipmentOnlineModeGet(objCommon, in.getEquipmentId());
                Outputs.ObjEquipmentReticlePodPortInfoGetDROut strEquipmentReticlePodPortInfoGetDROut =
                        this.equipmentReticlePodPortInfoGetDR(objCommon, in.getEquipmentId());
                String accessMode = null;
                int rppLen =
                        CimArrayUtils.getSize(
                                strEquipmentReticlePodPortInfoGetDROut.getReticlePodPortInfoList());
                for (int iCnt9 = 0; iCnt9 < rppLen; iCnt9++) {
                    Infos.ReticlePodPortInfo reticlePodPortInfo =
                            strEquipmentReticlePodPortInfoGetDROut.getReticlePodPortInfoList().get(iCnt9);
                    for (int durableCnt = 0; durableCnt < durableLen; durableCnt++) {
                        if (CimObjectUtils.equals(
                                reticlePodPortInfo.getReticlePodPortID(),
                                in.getStartDurables().get(durableCnt).getStartDurablePort().getLoadPortID())) {
                            /*-----------------------------*/
                            /*   Check Port's Port State   */
                            /*-----------------------------*/
                            if (!CimStringUtils.equals(
                                    strEquipmentOnlineModeGetOut, BizConstant.SP_EQP_ONLINEMODE_OFFLINE)) {
                                if (!CimStringUtils.equals(
                                        reticlePodPortInfo.getPortStatus(),
                                        BizConstant.SP_PORTRSC_PORTSTATE_LOADAVAIL)
                                        && !CimStringUtils.equals(
                                        reticlePodPortInfo.getPortStatus(),
                                        BizConstant.SP_PORTRSC_PORTSTATE_LOADREQ)) {
                                    Validations.check(
                                            true,
                                            new OmCode(
                                                    retCodeConfig.getInvalidPortState(),
                                                    reticlePodPortInfo.getReticlePodPortID().getValue(),
                                                    reticlePodPortInfo.getPortStatus()));
                                }
                            }
                            /*-----------------------------------------------------------*/
                            /*    In-Parm's load port must not have loadedReticlePodID   */
                            /*-----------------------------------------------------------*/
                            if (!ObjectIdentifier.isEmptyWithValue(reticlePodPortInfo.getLoadedReticlePodID())) {
                                Validations.check(
                                        !ObjectIdentifier.equalsWithValue(
                                                in.getStartDurables().get(durableCnt).getDurableId(),
                                                reticlePodPortInfo.getLoadedReticlePodID()),
                                        retCodeConfig.getPortHasLoadedCassette());
                            }
                            /*--------------------------------------------------------------*/
                            /*    accessMode of all In-Parm's load ports must be the same   */
                            /*--------------------------------------------------------------*/
                            if (null == accessMode) {
                                accessMode = reticlePodPortInfo.getAccessMode();
                            } else if (!CimStringUtils.equals(accessMode, reticlePodPortInfo.getAccessMode())) {
                                Validations.check(
                                        true,
                                        new OmCode(
                                                retCodeConfig.getInvalidPortState(),
                                                reticlePodPortInfo.getReticlePodPortID().getValue(),
                                                reticlePodPortInfo.getAccessMode()));
                            }
                            break;
                        }
                    }
                }
            }
        } else if (CimStringUtils.equals(in.getOperation(), BizConstant.SP_OPERATION_OPESTART)) {
            if (CimStringUtils.equals(in.getDurableCategory(), BizConstant.SP_DURABLECAT_CASSETTE)) {
                CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, in.getEquipmentId());
                Validations.check(
                        null == aMachine,
                        new OmCode(retCodeConfig.getNotFoundEqp(), in.getEquipmentId().getValue()));
                for (int durableCnt = 0; durableCnt < durableLen; durableCnt++) {
                    /*----------------------*/
                    /*    Get Port Object   */
                    /*----------------------*/
                    Infos.StartDurable startDurable = in.getStartDurables().get(durableCnt);
                    PortResource aPs =
                            aMachine.findPortResourceNamed(
                                    startDurable.getStartDurablePort().getLoadPortID().getValue());
                    Validations.check(
                            aPs == null,
                            new OmCode(
                                    retCodeConfig.getNotFoundPort(),
                                    startDurable.getStartDurablePort().getLoadPortID().getValue()));
                    CimPortResource aPort = (CimPortResource) aPs;
                    Validations.check(
                            null == aPort,
                            new OmCode(
                                    retCodeConfig.getNotFoundPortResource(),
                                    startDurable.getStartDurablePort().getLoadPortID().getValue()));

                    /*-----------------------------------*/
                    /*   Get and Check Port's LoadMode   */
                    /*-----------------------------------*/
                    String loadMode = aPort.getPortUsage();
                    Validations.check(
                            !CimStringUtils.equals(loadMode, CIMStateConst.CIM_PORT_RESOURCE_INPUT)
                                    && !CimStringUtils.equals(loadMode, CIMStateConst.CIM_PORT_RESOURCE_INPUTOUTPUT),
                            retCodeConfig.getInvalidPortLoadMode());

                    /*-----------------------------------------*/
                    /*   Get Equipment's Operation Mode Info   */
                    /*-----------------------------------------*/
                    Outputs.ObjPortResourceCurrentOperationModeGetOut
                            strPortResourceCurrentOperationModeGetOut =
                            portMethod.portResourceCurrentOperationModeGet(
                                    objCommon,
                                    in.getEquipmentId(),
                                    startDurable.getStartDurablePort().getLoadPortID());

                    /*-------------------------------------*/
                    /*   Get and Check Port's Port State   */
                    /*-------------------------------------*/
                    String onlineMode =
                            strPortResourceCurrentOperationModeGetOut.getOperationMode().getOnlineMode();
                    if (!CimStringUtils.equals(onlineMode, BizConstant.SP_EQP_ONLINEMODE_OFFLINE)) {
                        String portState = aPort.getPortState();
                        ObjectIdentifier portID =
                                new ObjectIdentifier(aPort.getIdentifier(), aPort.getPrimaryKey());
                        Validations.check(
                                !CimStringUtils.equals(portState, BizConstant.SP_PORTRSC_PORTSTATE_LOADCOMP),
                                new OmCode(retCodeConfig.getInvalidPortState(), portID.getValue(), portState));
                    }

                    Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoGet(objCommon, in.getEquipmentId());
                    /*------------------------------------------------------------------*/
                    /*   Compare In-parm's Cassette/LoadPort vs Port's loadedCassette   */
                    /*------------------------------------------------------------------*/
                    String eqpInfoLoadPurposeType = null;
                    int lenEqpPort = CimArrayUtils.getSize(eqpPortInfo.getEqpPortStatuses());
                    for (int iCnt2 = 0; iCnt2 < lenEqpPort; iCnt2++) {
                        Infos.EqpPortStatus eqpPortStatus = eqpPortInfo.getEqpPortStatuses().get(iCnt2);
                        if (ObjectIdentifier.equalsWithValue(
                                startDurable.getStartDurablePort().getLoadPortID(), eqpPortStatus.getPortID())) {
                            if (CimStringUtils.equals(
                                    startDurable.getStartDurablePort().getLoadPurposeType(),
                                    eqpPortStatus.getLoadPurposeType())) {
                                eqpInfoLoadPurposeType = eqpPortStatus.getCassetteLoadPurposeType();
                            }
                            break;
                        }
                    }

                    /*------------------------------------------------------------*/
                    /*    Check Eqp Port's LoadPurpose VS In-Parm's LoadPurpose   */
                    /*------------------------------------------------------------*/
                    if (CimStringUtils.equals(eqpInfoLoadPurposeType, BizConstant.SP_LOADPURPOSETYPE_OTHER)) {
                        log.info("Eqp Port's LoadPurpose is SP_LoadPurposeType_Other");
                    } else if (CimStringUtils.equals(
                            eqpInfoLoadPurposeType, BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT)) {
                        if (CimStringUtils.equals(
                                startDurable.getStartDurablePort().getLoadPurposeType(),
                                BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT)
                                || CimStringUtils.equals(
                                startDurable.getStartDurablePort().getLoadPurposeType(),
                                BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT)) {
                        } else {
                            Validations.check(
                                    true,
                                    new OmCode(
                                            retCodeConfig.getNotSameLoadPurpose(),
                                            startDurable.getDurableId().getValue(),
                                            startDurable.getStartDurablePort().getLoadPurposeType(),
                                            startDurable.getStartDurablePort().getLoadPortID().getValue()));
                        }
                    } else if (CimStringUtils.equals(
                            eqpInfoLoadPurposeType, BizConstant.SP_LOADPURPOSETYPE_ANY)) {
                        if (CimStringUtils.equals(
                                startDurable.getStartDurablePort().getLoadPurposeType(),
                                BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT)
                                || CimStringUtils.equals(
                                startDurable.getStartDurablePort().getLoadPurposeType(),
                                BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT)
                                || CimStringUtils.equals(
                                startDurable.getStartDurablePort().getLoadPurposeType(),
                                BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE)) {
                        } else {
                            Validations.check(
                                    true,
                                    new OmCode(
                                            retCodeConfig.getNotSameLoadPurpose(),
                                            startDurable.getDurableId().getValue(),
                                            startDurable.getStartDurablePort().getLoadPurposeType(),
                                            startDurable.getStartDurablePort().getLoadPortID().getValue()));
                        }
                    } else if (CimStringUtils.equals(
                            eqpInfoLoadPurposeType, startDurable.getStartDurablePort().getLoadPurposeType())) {

                    } else {
                        Validations.check(
                                true,
                                retCodeConfig.getNotSameLoadPurpose(),
                                startDurable.getDurableId().getValue(),
                                startDurable.getStartDurablePort().getLoadPurposeType(),
                                startDurable.getStartDurablePort().getLoadPortID().getValue());
                    }
                }
            } else if (CimStringUtils.equals(
                    in.getDurableCategory(), BizConstant.SP_DURABLECAT_RETICLEPOD)) {
                /*-----------------------------------------*/
                /*   Get Equipment's Operation Mode Info   */
                /*-----------------------------------------*/
                String strEquipmentOnlineModeGetOut =
                        this.equipmentOnlineModeGet(objCommon, in.getEquipmentId());
                Outputs.ObjEquipmentReticlePodPortInfoGetDROut equipmentReticlePodPortInfoGetDROut =
                        this.equipmentReticlePodPortInfoGetDR(objCommon, in.getEquipmentId());
                int rppLen =
                        CimArrayUtils.getSize(equipmentReticlePodPortInfoGetDROut.getReticlePodPortInfoList());
                for (int iCnt3 = 0; iCnt3 < rppLen; iCnt3++) {
                    Infos.ReticlePodPortInfo reticlePodPortInfo =
                            equipmentReticlePodPortInfoGetDROut.getReticlePodPortInfoList().get(iCnt3);
                    for (int durableCnt = 0; durableCnt < durableLen; durableCnt++) {
                        Infos.StartDurable startDurable = in.getStartDurables().get(durableCnt);
                        if (ObjectIdentifier.equalsWithValue(
                                reticlePodPortInfo.getReticlePodPortID(),
                                startDurable.getStartDurablePort().getLoadPortID())) {
                            /*-----------------------------*/
                            /*   Check Port's Port State   */
                            /*-----------------------------*/
                            if (!CimStringUtils.equals(
                                    strEquipmentOnlineModeGetOut, BizConstant.SP_EQP_ONLINEMODE_OFFLINE)) {
                                Validations.check(
                                        !CimStringUtils.equals(
                                                reticlePodPortInfo.getPortStatus(),
                                                BizConstant.SP_PORTRSC_PORTSTATE_LOADCOMP),
                                        new OmCode(
                                                retCodeConfig.getInvalidPortState(),
                                                reticlePodPortInfo.getReticlePodPortID().getValue(),
                                                reticlePodPortInfo.getPortStatus()));
                            }
                            /*------------------------------------------------------------------------*/
                            /*    Check In-Parm's reticlePod/load port vs Port's loadedReticlePodID   */
                            /*------------------------------------------------------------------------*/
                            Validations.check(
                                    !ObjectIdentifier.equalsWithValue(
                                            startDurable.getDurableId(), reticlePodPortInfo.getLoadedReticlePodID()),
                                    new OmCode(
                                            retCodeConfig.getReticleLoadedRtclpod(),
                                            startDurable.getDurableId().getValue(),
                                            reticlePodPortInfo.getLoadedReticlePodID().getValue(),
                                            in.getEquipmentId().getValue(),
                                            reticlePodPortInfo.getReticlePodPortID().getValue()));
                            break;
                        }
                    }
                }
            }
        } else if (CimStringUtils.equals(in.getOperation(), BizConstant.SP_OPERATION_OPERATIONCOMP)) {
            if (CimStringUtils.equals(in.getDurableCategory(), BizConstant.SP_DURABLECAT_CASSETTE)) {
                /*--------------------------*/
                /*   Get Port Information   */
                /*--------------------------*/
                Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoGet(objCommon, in.getEquipmentId());
                /*----------------------------------------*/
                /*   For-Loop for strStartDurables Info   */
                /*----------------------------------------*/
                for (int durableCnt = 0; durableCnt < durableLen; durableCnt++) {
                    Infos.StartDurable startDurable = in.getStartDurables().get(durableCnt);
                    /*-------------------------*/
                    /*   Find Specified Port   */
                    /*-------------------------*/
                    Boolean findFlag = false;
                    int EPSLength = CimArrayUtils.getSize(eqpPortInfo.getEqpPortStatuses());
                    int iCnt2 = 0;
                    for (iCnt2 = 0; iCnt2 < EPSLength; iCnt2++) {
                        Infos.EqpPortStatus eqpPortStatus = eqpPortInfo.getEqpPortStatuses().get(iCnt2);
                        String EPSIdent = eqpPortStatus.getPortID().getValue();
                        String PIDIdent = startDurable.getStartDurablePort().getUnloadPortID().getValue();
                        if (CimStringUtils.equals(EPSIdent, PIDIdent)) {
                            findFlag = true;
                            break;
                        }
                    }
                    Validations.check(
                            !findFlag,
                            new OmCode(
                                    retCodeConfig.getNotFoundPort(),
                                    startDurable.getStartDurablePort().getUnloadPortID().getValue()));
                }
            } else if (CimStringUtils.equals(
                    in.getDurableCategory(), BizConstant.SP_DURABLECAT_RETICLEPOD)) {
                /*------------------------------------*/
                /*   Get reticlePodPort Information   */
                /*------------------------------------*/
                Outputs.ObjEquipmentReticlePodPortInfoGetDROut strEquipmentReticlePodPortInfoGetDROut =
                        this.equipmentReticlePodPortInfoGetDR(objCommon, in.getEquipmentId());

                /*----------------------------------------*/
                /*   For-Loop for strStartDurables Info   */
                /*----------------------------------------*/
                for (int durableCnt = 0; durableCnt < durableLen; durableCnt++) {
                    Infos.StartDurable startDurable = in.getStartDurables().get(durableCnt);
                    /*-------------------------*/
                    /*   Find Specified Port   */
                    /*-------------------------*/
                    Boolean findFlag = false;
                    int rppLen =
                            CimArrayUtils.getSize(
                                    strEquipmentReticlePodPortInfoGetDROut.getReticlePodPortInfoList());
                    int iCnt2 = 0;
                    for (iCnt2 = 0; iCnt2 < rppLen; iCnt2++) {
                        Infos.ReticlePodPortInfo reticlePodPortInfo =
                                strEquipmentReticlePodPortInfoGetDROut.getReticlePodPortInfoList().get(iCnt2);
                        String RPPIdent = reticlePodPortInfo.getReticlePodPortID().getValue();
                        String PIDIdent = startDurable.getStartDurablePort().getUnloadPortID().getValue();
                        if (CimStringUtils.equals(RPPIdent, PIDIdent)) {
                            findFlag = true;
                            break;
                        }
                    }
                    Validations.check(
                            !findFlag,
                            new OmCode(
                                    retCodeConfig.getNotFoundPort(),
                                    startDurable.getStartDurablePort().getUnloadPortID().getValue()));

                    /*------------------------*/
                    /*   Compare CassetteID   */
                    /*------------------------*/
                    String RPPIdent =
                            strEquipmentReticlePodPortInfoGetDROut
                                    .getReticlePodPortInfoList()
                                    .get(iCnt2)
                                    .getLoadedReticlePodID()
                                    .getValue();
                    String CIDIdent = startDurable.getDurableId().getValue();
                    Validations.check(
                            !CimStringUtils.equals(RPPIdent, CIDIdent),
                            retCodeConfig.getInvalidCassettePortCombination());
                }
            }
        } else if (CimStringUtils.equals(in.getOperation(), BizConstant.SP_OPERATION_LOADING)) {
            if (CimStringUtils.equals(in.getDurableCategory(), BizConstant.SP_DURABLECAT_CASSETTE)) {
                Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoGet(objCommon, in.getEquipmentId());
                int lenPortInfo = CimArrayUtils.getSize(eqpPortInfo.getEqpPortStatuses());
                /*-----------------------------------------*/
                /*   Get Equipment's durableControlJobID   */
                /*-----------------------------------------*/
                CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, in.getEquipmentId());
                Validations.check(
                        null == aMachine,
                        new OmCode(retCodeConfig.getNotFoundEqp(), in.getEquipmentId().getValue()));
                List<com.fa.cim.newcore.bo.durable.CimDurableControlJob> durableControlJobs =
                        aMachine.allStartReservedDurableControlJobs();
                ObjectIdentifier mDurableCJID = null;
                int durableControlJobSize = CimArrayUtils.getSize(durableControlJobs);
                for (int iCnt2 = 0; iCnt2 < durableControlJobSize; iCnt2++) {
                    com.fa.cim.newcore.bo.durable.CimDurableControlJob durableControlJob =
                            durableControlJobs.get(iCnt2);
                    Validations.check(null == durableControlJob, retCodeConfig.getNotFoundDctrljob());
                    String durableCat = durableControlJob.getDurableCategory();
                    if (CimStringUtils.equals(durableCat, BizConstant.SP_DURABLECAT_CASSETTE)) {
                        List<DurableDTO.StartDurableInfo> startDurableSeq =
                                durableControlJob.getStartDurableInfo();
                        Inputs.ObjEquipmentPortGroupIDGetIn objEquipmentPortGroupIDGetIn =
                                new Inputs.ObjEquipmentPortGroupIDGetIn();
                        objEquipmentPortGroupIDGetIn.setEquipmentId(in.getEquipmentId());
                        objEquipmentPortGroupIDGetIn.setPortId(startDurableSeq.get(0).getLoadPortID());
                        Outputs.ObjEquipmentPortGroupIDGetOut strEquipmentPortGroupIDGetOut =
                                portMethod.equipmentPortGroupIDGet(objCommon, objEquipmentPortGroupIDGetIn);
                        String dcjPortGroupID = strEquipmentPortGroupIDGetOut.getPortGroupId();
                        if (CimStringUtils.equals(in.getPortGroupId(), dcjPortGroupID)) {
                            mDurableCJID =
                                    new ObjectIdentifier(
                                            durableControlJob.getIdentifier(), durableControlJob.getPrimaryKey());
                            break;
                        }
                    }
                }
                for (int durableCnt = 0; durableCnt < durableLen; durableCnt++) {
                    Infos.StartDurable startDurable = in.getStartDurables().get(durableCnt);
                    com.fa.cim.newcore.bo.durable.CimCassette aCassette =
                            baseCoreFactory.getBO(
                                    com.fa.cim.newcore.bo.durable.CimCassette.class, startDurable.getDurableId());
                    Validations.check(
                            null == aCassette,
                            new OmCode(
                                    retCodeConfig.getNotFoundCassette(), startDurable.getDurableId().getValue()));
                    com.fa.cim.newcore.bo.durable.CimDurableControlJob aDurableControlJob =
                            aCassette.getDurableControlJob();
                    /*----------------------------------------------------------------*/
                    /*   Check Combination of durableControlJob, Port, and Cassette   */
                    /*----------------------------------------------------------------*/
                    ObjectIdentifier cDurableCJID = null;
                    if (null == aDurableControlJob) {
                        Validations.check(
                                !ObjectIdentifier.isEmpty(mDurableCJID),
                                new OmCode(
                                        retCodeConfig.getAlreadyReservedPortGroup(),
                                        ObjectIdentifier.fetchValue(startDurable.getStartDurablePort().getLoadPortID()),
                                        ObjectIdentifier.fetchValue(mDurableCJID)));
                    } else {
                        cDurableCJID =
                                new ObjectIdentifier(
                                        aDurableControlJob.getIdentifier(), aDurableControlJob.getPrimaryKey());
                        if (ObjectIdentifier.equalsWithValue(cDurableCJID, mDurableCJID)) {
                            List<DurableDTO.StartDurableInfo> startDurableSeq =
                                    aDurableControlJob.getStartDurableInfo();
                            Boolean bFound = false;
                            for (int startDurableCnt = 0;
                                 startDurableCnt < CimArrayUtils.getSize(startDurableSeq);
                                 startDurableCnt++) {
                                DurableDTO.StartDurableInfo startDurableInfo = startDurableSeq.get(startDurableCnt);
                                if (ObjectIdentifier.equalsWithValue(
                                        startDurableInfo.getDurableID(), startDurable.getDurableId())) {
                                    if (ObjectIdentifier.equalsWithValue(
                                            startDurableInfo.getLoadPortID(),
                                            startDurable.getStartDurablePort().getLoadPortID())) {
                                        bFound = true;
                                        break;
                                    } else {
                                        Validations.check(
                                                true,
                                                new OmCode(
                                                        retCodeConfig.getInvalidLoadingPort(),
                                                        startDurable.getStartDurablePort().getLoadPortID().getValue(),
                                                        startDurable.getDurableId().getValue(),
                                                        startDurableInfo.getLoadPortID().getValue()));
                                    }
                                }
                            }
                            Validations.check(
                                    !bFound,
                                    new OmCode(
                                            retCodeConfig.getEquipmentCastUnmatch(),
                                            mDurableCJID.getValue(),
                                            startDurable.getDurableId().getValue()));
                        } else {
                            CimMachine aReserveMachine = aDurableControlJob.getMachine();
                            ObjectIdentifier resvEqpID =
                                    new ObjectIdentifier(
                                            aReserveMachine.getIdentifier(), aReserveMachine.getPrimaryKey());
                            Validations.check(
                                    true,
                                    new OmCode(retCodeConfig.getCastResvedForAnotherEqp(), resvEqpID.getValue()));
                        }
                    }
                    /*------------------------------------------*/
                    /*   Check Condition for Loading Sequence   */
                    /*------------------------------------------*/
                    int saveSeqNo = 0;
                    String basePortGroupID = null;
                    for (int portCnt = 0; portCnt < lenPortInfo; portCnt++) {
                        Infos.EqpPortStatus eqpPortStatus = eqpPortInfo.getEqpPortStatuses().get(portCnt);
                        if (ObjectIdentifier.equalsWithValue(
                                eqpPortStatus.getPortID(), startDurable.getStartDurablePort().getLoadPortID())) {
                            basePortGroupID = eqpPortStatus.getPortGroup();
                            saveSeqNo = portCnt;
                            break;
                        }
                    }
                    /*----------------------------------*/
                    /*   Check for Access Mode : Auto   */
                    /*----------------------------------*/
                    if (CimStringUtils.equals(
                            eqpPortInfo.getEqpPortStatuses().get(saveSeqNo).getAccessMode(),
                            BizConstant.SP_EQP_ACCESSMODE_AUTO)) {
                        /*--------------------------------*/
                        /*   Check Port is Empty or Not   */
                        /*--------------------------------*/
                        Validations.check(
                                ObjectIdentifier.isEmptyWithValue(
                                        eqpPortInfo.getEqpPortStatuses().get(saveSeqNo).getLoadedCassetteID()),
                                retCodeConfig.getPortHasLoadedCassette());

                        /*----------------------------------------------------*/
                        /*   Check durableControlJobID of Cassette and Port   */
                        /*----------------------------------------------------*/
                        Validations.check(
                                ObjectIdentifier.isEmptyWithValue(cDurableCJID),
                                retCodeConfig.getDurableControlJobBlank());
                        Validations.check(
                                ObjectIdentifier.isEmptyWithValue(mDurableCJID),
                                retCodeConfig.getNotReservedDctrljobPortgrp());
                        Validations.check(
                                !ObjectIdentifier.equalsWithValue(cDurableCJID, mDurableCJID),
                                new OmCode(
                                        retCodeConfig.getDurableEQPDrbCtrljobUnmatch(),
                                        startDurable.getDurableId().getValue()));
                    } else {
                        /*----------------------------------*/
                        /*   Check for Access Mode : Manu   */
                        /*----------------------------------*/
                        int sequenceCondition = StandardProperties.OM_CARRIER_LOAD_SEQ_CHK.getIntValue();
                        if (sequenceCondition == 0) {
                            /*-----------------------------------------*/
                            /*   Get Next Loading Port in Port Group   */
                            /*-----------------------------------------*/
                            Long minLoadSeqNo = 999L;
                            ObjectIdentifier nextPortID = null;
                            for (int portCnt = 0; portCnt < lenPortInfo; portCnt++) {
                                if (CimStringUtils.equals(
                                        eqpPortInfo.getEqpPortStatuses().get(portCnt).getPortGroup(),
                                        basePortGroupID)
                                        && ObjectIdentifier.isEmptyWithValue(
                                        eqpPortInfo.getEqpPortStatuses().get(portCnt).getLoadedCassetteID())
                                        && eqpPortInfo.getEqpPortStatuses().get(portCnt).getLoadSequenceNumber()
                                        < minLoadSeqNo) {
                                    minLoadSeqNo =
                                            eqpPortInfo.getEqpPortStatuses().get(portCnt).getLoadSequenceNumber();
                                    nextPortID = eqpPortInfo.getEqpPortStatuses().get(portCnt).getPortID();
                                }
                            }
                            /*-------------------------*/
                            /*   Judge Loading Order   */
                            /*-------------------------*/
                            Validations.check(
                                    !ObjectIdentifier.equalsWithValue(
                                            nextPortID, startDurable.getStartDurablePort().getLoadPortID()),
                                    new OmCode(retCodeConfig.getInvalidLoadingSequence(), ""));

                            /*-----------------------------------------------------*/
                            /*   Check Cassette On Port for 1st Loading Cassette   */
                            /*-----------------------------------------------------*/
                            if (1 == eqpPortInfo.getEqpPortStatuses().get(saveSeqNo).getLoadSequenceNumber()) {
                                for (int portCnt = 0; portCnt < lenPortInfo; portCnt++) {
                                    Validations.check(
                                            CimStringUtils.equals(
                                                    eqpPortInfo.getEqpPortStatuses().get(portCnt).getPortGroup(),
                                                    basePortGroupID)
                                                    && !ObjectIdentifier.isEmptyWithValue(
                                                    eqpPortInfo.getEqpPortStatuses().get(portCnt).getLoadedCassetteID()),
                                            retCodeConfig.getPortHasLoadedCassette());
                                }
                            }
                        }
                    }
                    /*------------------------------------*/
                    /*   Check Condition for Port Usage   */
                    /*------------------------------------*/
                    Validations.check(
                            !CimStringUtils.equals(
                                    eqpPortInfo.getEqpPortStatuses().get(saveSeqNo).getPortUsage(),
                                    CIMStateConst.CIM_PORT_RESOURCE_INPUT)
                                    && !CimStringUtils.equals(
                                    eqpPortInfo.getEqpPortStatuses().get(saveSeqNo).getPortUsage(),
                                    CIMStateConst.CIM_PORT_RESOURCE_INPUTOUTPUT),
                            new OmCode(
                                    retCodeConfig.getInvalidPortUsage(),
                                    startDurable.getStartDurablePort().getLoadPortID().getValue()));
                    /*-------------------------------------------*/
                    /*   Check Condition for Load Purpose Type   */
                    /*-------------------------------------------*/
                    // Eqp Port's LoadPurpose should be the same as In-Parm's LoadPurpose
                    Validations.check(
                            !CimStringUtils.equals(
                                    eqpPortInfo.getEqpPortStatuses().get(saveSeqNo).getLoadPurposeType(),
                                    startDurable.getStartDurablePort().getLoadPurposeType()),
                            new OmCode(
                                    retCodeConfig.getNotSameLoadPurpose(),
                                    startDurable.getDurableId().getValue(),
                                    startDurable.getStartDurablePort().getLoadPurposeType(),
                                    startDurable.getStartDurablePort().getLoadPortID().getValue(),
                                    eqpPortInfo.getEqpPortStatuses().get(saveSeqNo).getLoadPurposeType()));
                    // StartDurableCassette's LoadPurpose is the same as In-Parm's LoadPurpose
                    if (null != aDurableControlJob) {
                        List<DurableDTO.StartDurableInfo> startDurableSeq =
                                aDurableControlJob.getStartDurableInfo();
                        for (int startDurableCnt = 0;
                             startDurableCnt < CimArrayUtils.getSize(startDurableSeq);
                             startDurableCnt++) {
                            if (ObjectIdentifier.equalsWithValue(
                                    startDurableSeq.get(startDurableCnt).getDurableID(),
                                    startDurable.getDurableId())) {
                                Validations.check(
                                        !CimStringUtils.equals(
                                                startDurableSeq.get(startDurableCnt).getLoadPurposeType(),
                                                startDurable.getStartDurablePort().getLoadPurposeType()),
                                        new OmCode(
                                                retCodeConfig.getNotSameLoadPurpose(),
                                                startDurable.getDurableId().getValue(),
                                                startDurable.getStartDurablePort().getLoadPurposeType(),
                                                startDurable.getStartDurablePort().getLoadPortID().getValue(),
                                                startDurableSeq.get(startDurableCnt).getLoadPurposeType()));
                            }
                        }
                    }
                    /*--------------------------------------*/
                    /*   Check Condition for Port Status    */
                    /*--------------------------------------*/
                    if (!CimStringUtils.equals(
                            eqpPortInfo.getEqpPortStatuses().get(saveSeqNo).getOnlineMode(),
                            BizConstant.SP_EQP_ONLINEMODE_OFFLINE)) {
                        /*===== portState Check =====*/
                        Validations.check(
                                !CimStringUtils.equals(
                                        eqpPortInfo.getEqpPortStatuses().get(saveSeqNo).getPortState(),
                                        BizConstant.SP_PORTRSC_PORTSTATE_LOADCOMP),
                                new OmCode(
                                        retCodeConfig.getInvalidPortState(),
                                        startDurable.getStartDurablePort().getLoadPortID().getValue(),
                                        eqpPortInfo.getEqpPortStatuses().get(saveSeqNo).getPortState()));

                        /*===== Cassette on Port Check =====*/
                        Validations.check(
                                !ObjectIdentifier.isEmptyWithValue(
                                        eqpPortInfo.getEqpPortStatuses().get(saveSeqNo).getLoadedCassetteID()),
                                retCodeConfig.getPortHasLoadedCassette());
                    }
                }
            }
        }
        if (CimStringUtils.equals(in.getOperation(), BizConstant.SP_OPERATION_OPESTART)
                || CimStringUtils.equals(in.getOperation(), BizConstant.SP_OPERATION_OPERATIONCOMP)
                || CimStringUtils.equals(in.getOperation(), BizConstant.SP_OPERATION_STARTRESERVATIONCANCEL)
                || CimStringUtils.equals(in.getOperation(), BizConstant.SP_OPERATION_OPESTARTCANCEL)) {
            for (int durableCnt = 0; durableCnt < durableLen; durableCnt++) {
                Infos.StartDurable startDurable = in.getStartDurables().get(durableCnt);
                com.fa.cim.newcore.bo.durable.CimDurableControlJob aDurableControlJob = null;
                if (CimStringUtils.equals(in.getDurableCategory(), BizConstant.SP_DURABLECAT_CASSETTE)) {
                    com.fa.cim.newcore.bo.durable.CimCassette aCassette =
                            baseCoreFactory.getBO(
                                    com.fa.cim.newcore.bo.durable.CimCassette.class, startDurable.getDurableId());
                    Validations.check(
                            null == aCassette,
                            new OmCode(
                                    retCodeConfig.getNotFoundCassette(), startDurable.getDurableId().getValue()));
                    aDurableControlJob = aCassette.getDurableControlJob();
                } else if (CimStringUtils.equals(
                        in.getDurableCategory(), BizConstant.SP_DURABLECAT_RETICLEPOD)) {
                    com.fa.cim.newcore.bo.durable.CimReticlePod aReticlePod =
                            baseCoreFactory.getBO(
                                    com.fa.cim.newcore.bo.durable.CimReticlePod.class, startDurable.getDurableId());
                    Validations.check(
                            null == aReticlePod,
                            new OmCode(
                                    retCodeConfig.getNotFoundReticlePod(), startDurable.getDurableId().getValue()));
                    aDurableControlJob = aReticlePod.getDurableControlJob();
                } else if (CimStringUtils.equals(
                        in.getDurableCategory(), BizConstant.SP_DURABLECAT_RETICLE)) {
                    com.fa.cim.newcore.bo.durable.CimProcessDurable aReticle =
                            baseCoreFactory.getBO(
                                    com.fa.cim.newcore.bo.durable.CimProcessDurable.class,
                                    startDurable.getDurableId());
                    Validations.check(
                            null == aReticle,
                            new OmCode(
                                    retCodeConfig.getNotFoundReticle(), startDurable.getDurableId().getValue()));
                    aDurableControlJob = aReticle.getDurableControlJob();
                }
                Validations.check(null == aDurableControlJob, retCodeConfig.getDurableControlJobBlank());

                CimMachine aDurableMachine = aDurableControlJob.getMachine();
                Validations.check(
                        null == aDurableMachine, new OmCode(retCodeConfig.getNotFoundEqp(), "*****"));
                ObjectIdentifier durableEquipmentID =
                        new ObjectIdentifier(aDurableMachine.getIdentifier(), aDurableMachine.getPrimaryKey());
                Validations.check(
                        !ObjectIdentifier.equalsWithValue(in.getEquipmentId(), durableEquipmentID),
                        new OmCode(retCodeConfig.getNotFoundEqpFromCtrljob(), "*****"));
            }
        }
    }

    @Override
    public boolean equipmentRecipeBodyManageFlagGet(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        /*--------------------------*/
        /*   Get Equipment Object   */
        /*--------------------------*/
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                aMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        return aMachine.isRecipeBodyManageFlagOn();
    }

    @Override
    public void equipmentPortStateCheckForStartReservation(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            String portGroupID,
            List<Infos.StartCassette> strStartCassette,
            Boolean autoMoveInReserveFlag) {

        log.info("inPara [equipmentID] ---> {}", equipmentID);
        log.info("inPara [portGroupID] ---> {}", portGroupID);

        /*----------------------------------------*/
        /*   Get Equipment and Port Information   */
        /*----------------------------------------*/
        Validations.check(
                CimObjectUtils.isEmpty(strStartCassette), retCodeConfig.getInvalidInputParam());

        /*-----------------------------------------*/
        /*   Get Equipment's Operation Mode Info   */
        /*-----------------------------------------*/
        log.info("Get Equipment's Operation Mode Info");
        Outputs.ObjPortResourceCurrentOperationModeGetOut getPortResourceCurrentOperationMode =
                portMethod.portResourceCurrentOperationModeGet(
                        objCommon, equipmentID, strStartCassette.get(0).getLoadPortID());

        /*----------------------------------*/
        /*   Get ControlJob for PortGroup   */
        /*----------------------------------*/
        log.info("Get ControlJob for PortGroup");
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                aMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        // --------------------------------------------------
        // Get Equipment attributes
        // --------------------------------------------------
        String strMachineCategory = aMachine.getCategory();
        // --------------------------------------------------
        // Check Equipment Type
        // --------------------------------------------------
        log.info("Check Equipment Type: Category = {}", strMachineCategory);
        List<com.fa.cim.newcore.bo.product.CimControlJob> controlJobSeq =
                aMachine.allStartReservedControlJobs();
        boolean cjFindFlag = false;
        int cjLen = CimArrayUtils.getSize(controlJobSeq);
        for (int i = 0; i < cjLen; i++) {
            com.fa.cim.newcore.bo.product.CimControlJob cimControlJob = controlJobSeq.get(i);
            if (cimControlJob == null) {
                throw new ServiceException(retCodeConfig.getNotFoundControlJob());
            }
            String portGroup_id = cimControlJob.getPortGroup();
            if (CimStringUtils.equals(portGroupID, portGroup_id)) {
                cjFindFlag = true;
                break;
            }
        }
        // -------------------------------------------------------------
        // If equipment category is SP_Mc_Category_WaferBonding,
        //   Judge whether it is NPW Reserve for SLM Retrieving or not
        // -------------------------------------------------------------
        boolean bSLMRetrieveForWB = false;
        if (CimStringUtils.equals(
                strMachineCategory, BizConstant.SP_MC_CATEGORY_WAFERBONDING)) {
            log.info("machineCategory is SP_Mc_Category_WaferBonding. ");
            boolean bCheck =
                    CimObjectUtils.isEmpty(
                            strStartCassette.stream()
                                    .filter(
                                            x ->
                                                    CimObjectUtils.isEmpty(x.getLoadPurposeType())
                                                            || !CimStringUtils.equals(
                                                            x.getLoadPurposeType(),
                                                            BizConstant.SP_LOADPURPOSETYPE_SLMRETRIEVING))
                                    .collect(Collectors.toList()));
            bSLMRetrieveForWB =
                    !CimObjectUtils.isEmpty(strStartCassette) && CimBooleanUtils.isTrue(bCheck);
        }
        Validations.check(
                !bSLMRetrieveForWB && cjFindFlag,
                new OmCode(
                        retCodeConfig.getAlreadyReservedPortGroup(),
                        strStartCassette.get(0).getLoadPortID().getValue(),
                        portGroupID));

        /*------------------------------------*/
        /*   Get and Check Cassette on Port   */
        /*------------------------------------*/
        log.info("Get and Check Cassette on Port");
        Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoGet(objCommon, equipmentID);

        /*----------------------------*/
        /*   Check Port Information   */
        /*----------------------------*/
        log.info("Check Port Information");
        List<Infos.EqpPortStatus> eqpPortStatuses = eqpPortInfo.getEqpPortStatuses();
        for (Infos.EqpPortStatus eqpPortStatus : eqpPortStatuses) {
            /*-------------------------------------*/
            /*   Omit Deferent Port Group's Port   */
            /*-------------------------------------*/
            log.info("Omit Deferent Port Group's Port");
            if (!CimStringUtils.equals(eqpPortStatus.getPortGroup(), portGroupID)) {
                log.info("continue!!");
                continue;
            }

            /*-----------------------------------*/
            /*   Get and Check Port's LoadMode   */
            /*-----------------------------------*/
            log.info("Get and Check Port's LoadMode");
            CimMachine aPosMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
            Validations.check(
                    aPosMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));

            CimPortResource aPort =
                    baseCoreFactory.getBO(CimPortResource.class, eqpPortStatus.getPortID());
            Validations.check(
                    aPort == null,
                    new OmCode(retCodeConfig.getNotFoundPort(), eqpPortStatus.getPortID().getValue()));

            String loadMode = aPort.getPortUsage();
            Validations.check(
                    !CimStringUtils.equals(loadMode, CIMStateConst.CIM_PORT_RESOURCE_INPUT)
                            && !CimStringUtils.equals(
                            loadMode, CIMStateConst.CIM_PORT_RESOURCE_INPUTOUTPUT),
                    retCodeConfig.getInvalidPortLoadMode());

            if (CimStringUtils.equals(
                    strMachineCategory, BizConstant.SP_MC_CATEGORY_WAFERSORTER)) {
                log.info("machineCategory is offRoute sorter. ");
                if (CimObjectUtils.isEmpty(
                        strStartCassette.stream()
                                .filter(
                                        x ->
                                                ObjectIdentifier.equalsWithValue(
                                                        eqpPortStatus.getPortID(), x.getLoadPortID()))
                                .collect(Collectors.toList()))) {
                    continue;
                }
            }
            /*--------------------------------------------------------------------------------*/
            /*  If equipment category is SP_Mc_Category_WaferBonding                          */
            /*   Allow NPW Reserve for SLMRetrieving for target port.                         */
            /*   Check should be done only target port. Other ports in port group are skipped.*/
            /*--------------------------------------------------------------------------------*/
            if (CimBooleanUtils.isTrue(bSLMRetrieveForWB)) {
                if (CimObjectUtils.isEmpty(
                        strStartCassette.stream()
                                .filter(
                                        x ->
                                                ObjectIdentifier.equalsWithValue(
                                                        eqpPortStatus.getPortID(), x.getLoadPortID()))
                                .collect(Collectors.toList()))) {
                    continue;
                }
            }

            /*-------------------------------------*/
            /*   Get and Check Port's Port State   */
            /*-------------------------------------*/
            log.info("Get and Check Port's Port State");
            Infos.OperationMode strOperationMode = getPortResourceCurrentOperationMode.getOperationMode();
            if (!CimStringUtils.equals(
                    strOperationMode.getOnlineMode(), BizConstant.SP_EQP_ONLINEMODE_OFFLINE)) {
                log.info(
                        "strPortResource_currentOperationMode_Get_out.strOperationMode.onlineMode = SP_Eqp_OnlineMode_Offline");
                // qiandao autoMoveInReserve Requirement: add autoMoveInReserveFlag logical to suport
                // autoMoveInReserve loadComp portStatus to reserve
                if (CimBooleanUtils.isFalse(autoMoveInReserveFlag)) {
                    Validations.check(
                            !CimStringUtils.equals(
                                    eqpPortStatus.getPortState(), BizConstant.SP_PORTRSC_PORTSTATE_LOADAVAIL)
                                    && !CimStringUtils.equals(
                                    eqpPortStatus.getPortState(), BizConstant.SP_PORTRSC_PORTSTATE_LOADREQ),
                            new OmCode(
                                    retCodeConfig.getInvalidPortState(),
                                    eqpPortStatus.getPortID().getValue(),
                                    eqpPortStatus.getPortState()));
                }
            }
            /*------------------------------------*/
            /*   Get and Check Cassette on Port   */
            /*------------------------------------*/
            log.info("Get and Check Cassette on Port");
            Validations.check(
                    !ObjectIdentifier.isEmptyWithValue(eqpPortStatus.getLoadedCassetteID()),
                    retCodeConfig.getPortGroupHasLoadedCast());

            /*--------------------------------------------*/
            /*   Check Load Reserved for Cassette on Port */
            /*--------------------------------------------*/
            log.info("Check Load Reserved for Cassette on Port");
            Validations.check(
                    eqpPortStatus.getDispatchLoadCassetteID() != null
                            && !ObjectIdentifier.isEmptyWithValue(eqpPortStatus.getDispatchLoadCassetteID()),
                    new OmCode(
                            retCodeConfig.getAlreadyReservedLoadPort(),
                            eqpPortStatus.getPortID().getValue(),
                            eqpPortStatus.getDispatchLoadCassetteID() == null
                                    ? ""
                                    : eqpPortStatus.getDispatchLoadCassetteID().getValue()));

            /*-------------------------------------------------------------------------------*/
            /*  If equipment category is SP_Mc_Category_WaferBonding                         */
            /*   Check Reserved Cassette when Port Group has Control Job for SLMRetrieving   */
            /*-------------------------------------------------------------------------------*/
            Validations.check(
                    cjFindFlag
                            && bSLMRetrieveForWB
                            && !ObjectIdentifier.isEmptyWithValue(eqpPortStatus.getLoadResrvedCassetteID()),
                    new OmCode(
                            retCodeConfig.getAlreadyReservedPortGroup(),
                            strStartCassette.get(0).getLoadPortID().getValue(),
                            portGroupID));
        }
        /*---------------------------------------------------*/
        /*   Check Eqp's Port - In-Parm's Port Combination   */
        /*---------------------------------------------------*/
        log.info("Check Eqp's Port - In-Parm's Port Combination");
        for (Infos.StartCassette startCassette : strStartCassette) {
            for (Infos.EqpPortStatus eqpPortStatus : eqpPortStatuses) {

                if (ObjectIdentifier.equalsWithValue(
                        startCassette.getLoadPortID(), eqpPortStatus.getPortID())) {
                    /*--------------------------------------------------------*/
                    /*    Check Eqp Port's PortGroup VS In-Parm's PortGroup   */
                    /*--------------------------------------------------------*/
                    log.info("Check Eqp Port's PortGroup VS In-Parm's PortGroup");
                    Validations.check(
                            !CimStringUtils.equals(portGroupID, eqpPortStatus.getPortGroup()),
                            new OmCode(retCodeConfig.getPortGroupMixed(), eqpPortStatus.getPortID().getValue()));

                    /*------------------------------------------------------------*/
                    /*    Check Eqp Port's LoadPurpose VS In-Parm's LoadPurpose   */
                    /*------------------------------------------------------------*/
                    log.info("Check Eqp Port's LoadPurpose VS In-Parm's LoadPurpose");
                    String loadPurposeType = eqpPortStatus.getLoadPurposeType();
                    if (CimStringUtils.equals(
                            loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_OTHER)) {
                        log.info("set!! rc = RC_OK");
                    } else if (CimStringUtils.equals(
                            loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT)) {
                        Validations.check(
                                !CimStringUtils.equals(
                                        loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT)
                                        && !CimStringUtils.equals(
                                        loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_SLMRETRIEVING)
                                        && !CimStringUtils.equals(
                                        loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT),
                                new OmCode(
                                        retCodeConfig.getNotSameLoadPurpose(),
                                        startCassette.getCassetteID().getValue(),
                                        startCassette.getLoadPurposeType(),
                                        startCassette.getLoadPortID().getValue(),
                                        eqpPortStatus.getLoadPurposeType()));

                    } else if (CimStringUtils.equals(
                            loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_ANY)) {
                        Validations.check(
                                !CimStringUtils.equals(
                                        startCassette.getLoadPurposeType(),
                                        BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT)
                                        && !CimStringUtils.equals(
                                        startCassette.getLoadPurposeType(),
                                        BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT)
                                        && !CimStringUtils.equals(
                                        startCassette.getLoadPurposeType(),
                                        BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE),
                                new OmCode(
                                        retCodeConfig.getNotSameLoadPurpose(),
                                        startCassette.getCassetteID().getValue(),
                                        startCassette.getLoadPurposeType(),
                                        startCassette.getLoadPortID().getValue(),
                                        eqpPortStatus.getLoadPurposeType()));
                    } else if (CimStringUtils.equals(
                            loadPurposeType, startCassette.getLoadPurposeType())) {
                        log.info("set!! rc = RC_OK");
                    } else {
                        log.info("return RC_NOT_SAME_LOAD_PURPOSE");
                        Validations.check(
                                true,
                                new OmCode(
                                        retCodeConfig.getNotSameLoadPurpose(),
                                        startCassette.getCassetteID().getValue(),
                                        startCassette.getLoadPurposeType(),
                                        startCassette.getLoadPortID().getValue(),
                                        eqpPortStatus.getLoadPurposeType()));
                    }

                    /*--------------------------------------------------------*/
                    /*    Check Eqp Port's LoadSeqNo VS In-Parm's LoadSeqNo   */
                    /*--------------------------------------------------------*/
                    log.info("Check Eqp Port's LoadSeqNo VS In-Parm's LoadSeqNo");
                    Validations.check(
                            !eqpPortStatus.getLoadSequenceNumber().equals(startCassette.getLoadSequenceNumber()),
                            new OmCode(
                                    retCodeConfig.getInvalidLoadingSequence(),
                                    startCassette.getCassetteID().getValue()));
                }
            }
        }
    }

    /**
     * description: change history: date defect# person comments
     * ---------------------------------------------------------------------------------------------------------------------
     * 2019/7/12 Neyo create file
     *
     * @author: Neyo
     * @date: 2019/7/12 16:46
     * @copyright: 2019, FA Software (Shanghai) Co., Ltd. All Rights Reserved.
     */
    @Override
    public void equipmentMonitorCreationFlagGet(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        CimMachine anEquipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Boolean isMonitorCreation = anEquipment.isMonitorCreation();
        if (CimBooleanUtils.isFalse(isMonitorCreation)) {
            Validations.check(true, retCodeConfigEx.getMonitorCreatNotReqd());
        } else {
            Validations.check(true, retCodeConfigEx.getMonitorCreatReqd());
        }
    }

    @Override
    public void eqpMonitorJobLotReserve(
            Infos.ObjCommon objCommon, Params.AMJobLotReserveReqInParams params) {
        /*----------------*/
        /*   Initialize   */
        /*----------------*/

        // --------------------//
        // Trace InParameters //
        // --------------------//

        // --------------------------------//
        //  Get Auto Monitor Object  //
        // --------------------------------//
        CimEqpMonitor anEqpMonitor =
                baseCoreFactory.getBO(CimEqpMonitor.class, params.getEqpMonitorID());
        Validations.check(
                null == anEqpMonitor, retCodeConfig.getNotFoundEqpMonitor(), objCommon.getTransactionID());

        CimEqpMonitorJob anEqpMonitorJob =
                baseCoreFactory.getBO(CimEqpMonitorJob.class, params.getEqpMonitorJobID());
        Validations.check(
                null == anEqpMonitorJob,
                retCodeConfig.getNotFoundEqpMonitorJob(),
                objCommon.getTransactionID());

        MachineDTO.EqpMonitorLotInfo anEqpMonitorLotInfo = new MachineDTO.EqpMonitorLotInfo();
        int nProdLotMap = CimArrayUtils.getSize(params.getStrProductLotMap());
        log.info("nProdLotMap ： {}", nProdLotMap);
        for (int i = 0; i < nProdLotMap; i++) {
            Infos.EqpMonitorProductLotMap anEqpMonProdLotMap = params.getStrProductLotMap().get(i);
            log.info("Product ID : {}", anEqpMonProdLotMap.getStrEqpMonitorProductInfo().getProductID());
            int nLots = CimArrayUtils.getSize(anEqpMonProdLotMap.getEqpMonitorLotIDs());
            log.info("nLots : {}", nLots);
            for (int j = 0; j < nLots; j++) {
                anEqpMonitorLotInfo.setLotID(anEqpMonProdLotMap.getEqpMonitorLotIDs().get(j));
                log.info("Get Lot ID : {}", anEqpMonProdLotMap.getEqpMonitorLotIDs().get(j));
                CimLot aPosLot =
                        baseCoreFactory.getBO(CimLot.class, anEqpMonProdLotMap.getEqpMonitorLotIDs().get(j));
                Validations.check(
                        null == aPosLot, retCodeConfig.getNotFoundLot(), objCommon.getTransactionID());

                com.fa.cim.newcore.bo.pd.CimProcessOperation aPosPO = aPosLot.getProcessOperation();
                Validations.check(
                        null == aPosPO,
                        retCodeConfig.getNotFoundProcessOperation(),
                        objCommon.getTransactionID());

                String strOPNumber = aPosPO.getOperationNumber();

                com.fa.cim.newcore.bo.pd.CimProcessFlowContext aPFX = aPosLot.getProcessFlowContext();
                ;
                Validations.check(
                        null == aPFX, retCodeConfig.getNotFoundPfx(), objCommon.getTransactionID());

                String strMonOpeKey = aPFX.getEqpMonOperationKey(strOPNumber);

                anEqpMonitorLotInfo.setMonitorLotStatus(BizConstant.SP_EQPMONITOR_LOTSTATUS_RESERVED);
                anEqpMonitorLotInfo.setStartSeqNo(
                        anEqpMonProdLotMap.getStrEqpMonitorProductInfo().getStartSeqNo());
                anEqpMonitorLotInfo.setMonitorOpeKey(strMonOpeKey);
                anEqpMonitorLotInfo.setExitFlag(false);
                anEqpMonitorLotInfo.setResult(0);

                // Add Auto Monitor Job Lot Info
                anEqpMonitorJob.addEqpMonitorLot(anEqpMonitorLotInfo);
            }
        }

        anEqpMonitorJob.setLastClaimedTimeStamp(objCommon.getTimeStamp().getReportTimeStamp());
        CimPerson personBO = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());
        anEqpMonitorJob.setLastClaimedUser(personBO);
    }

    /**
     * description: change history: date defect# person comments
     * ---------------------------------------------------------------------------------------------------------------------
     * 2019/7/5 Neyo create file
     *
     * @author: Neyo
     * @date: 2019/7/5 11:17
     * @copyright: 2019, FA Software (Shanghai) Co., Ltd. All Rights Reserved.
     */
    @Override
    public void equipmentPortStateCheckForCassetteDelivery(
            Infos.ObjCommon objCommonIn,
            Inputs.ObjEquipmentPortStateCheckForCassetteDeliveryIn deliveryIn) {
        /*----------------*/
        /*                */
        /*   Initialize   */
        /*                */
        /*----------------*/
        /*--------------------------*/
        /*   Get Port Information   */
        /*--------------------------*/
        // 【step1】 - equipment_portInfo_Get
        Infos.EqpPortInfo eqpPortInfo =
                this.equipmentPortInfoGet(objCommonIn, deliveryIn.getEquipmentID());
        /*-------------------------------------------------*/
        /*                                                 */
        /*   Check Port's Port State / Dispatch State      */
        /*                                                 */
        /*-------------------------------------------------*/
        int nPortLen = CimArrayUtils.getSize(eqpPortInfo.getEqpPortStatuses());
        List<Infos.EqpPortStatus> content = eqpPortInfo.getEqpPortStatuses();
        for (int i = 0; i < nPortLen; i++) {
            if (CimStringUtils.equals(
                    deliveryIn.getPortID().getValue(), content.get(i).getPortID().getValue())) {
                Validations.check(
                        !CimStringUtils.equals(
                                BizConstant.SP_PORTRSC_PORTSTATE_UNLOADREQ, content.get(i).getPortState()),
                        retCodeConfig.getInvalidPortState());
                Validations.check(
                        !CimStringUtils.equals(
                                BizConstant.SP_PORTRSC_DISPATCHSTATE_REQUIRED, content.get(i).getDispatchState()),
                        new OmCode(
                                retCodeConfigEx.getInvalidPortDispatchStatus(),
                                deliveryIn.getPortID().getValue(),
                                content.get(i).getDispatchState()));
            }
        }
    }

    /**
     * description: change history: date defect# person comments
     * ---------------------------------------------------------------------------------------------------------------------
     * 2019/7/8 Neyo create file
     *
     * @author: Neyo
     * @date: 2019/7/8 18:28
     * @copyright: 2019, FA Software (Shanghai) Co., Ltd. All Rights Reserved.
     */
    @Override
    public Infos.EqpTargetPortInfo equipmentTargetPortPickupForTakeOutIn(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            Infos.EqpTargetPortInfo strEqpTargetPortInfo) {

        // ---------------------
        //   Initialization
        // ---------------------
        Infos.EqpTargetPortInfo strEqpTargetPortInfoOut = new Infos.EqpTargetPortInfo();
        strEqpTargetPortInfoOut.setEquipmentID(strEqpTargetPortInfo.getEquipmentID());
        List<Infos.PortGroup> portGroups = new ArrayList<>();
        strEqpTargetPortInfoOut.setPortGroups(portGroups);

        Infos.EqpTargetPortInfo strUnloadingPortInfo = new Infos.EqpTargetPortInfo();
        strUnloadingPortInfo = strEqpTargetPortInfo;
        int unloadPortGroupLen = CimArrayUtils.getSize(strUnloadingPortInfo.getPortGroups());
        Validations.check(0 == unloadPortGroupLen, retCodeConfig.getInvalidInputParam());
        String orgPortGrp = strUnloadingPortInfo.getPortGroups().get(0).getPortGroup();
        for (int i = 0; i < unloadPortGroupLen; i++) {
            Validations.check(
                    !CimStringUtils.equals(
                            strUnloadingPortInfo.getPortGroups().get(i).getPortGroup(), orgPortGrp),
                    retCodeConfig.getInvalidInputParam());
        }
        /*-------------------------------------*/
        /*   Get Equipment Port Infomation     */
        /*-------------------------------------*/
        // 【step1】 - equipment_portInfo_GetDR
        Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoGet(objCommon, equipmentID);
        /*------------------------------------------*/
        /*   Check equipment Online Mode            */
        /*------------------------------------------*/
        int nILen = CimArrayUtils.getSize(eqpPortInfo.getEqpPortStatuses());
        for (int i = 0; i < nILen; i++) {
            Validations.check(
                    CimStringUtils.equals(
                            BizConstant.SP_EQP_ONLINEMODE_OFFLINE,
                            eqpPortInfo.getEqpPortStatuses().get(i).getOnlineMode()),
                    retCodeConfig.getInvalidEquipmentMode(),
                    ObjectIdentifier.fetchValue(equipmentID),
                    eqpPortInfo.getEqpPortStatuses().get(i).getOnlineMode());
        }
        /*-------------------------------------------*/
        /*   Sorting Port Group Info by Port Group   */
        /*-------------------------------------------*/
        // 【step2】 - equipment_portInfo_SortByGroup
        Infos.EqpPortInfoOrderByGroup eqpPortInfoOrderByGroupRetCode =
                this.equipmentPortInfoSortByGroup(objCommon, equipmentID, eqpPortInfo.getEqpPortStatuses());

        // ----------------------------------------
        //  Check Equipment Special Control Type
        // ----------------------------------------
        CimMachine aPosMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Boolean bFurnace = false;
        bFurnace = aPosMachine.isFurnace();
        String variableLoadState = null;
        if (CimBooleanUtils.isFalse(bFurnace)) {
            variableLoadState = BizConstant.SP_PORTRSC_PORTSTATE_LOADREQ;
        } else {
            variableLoadState = BizConstant.SP_PORTRSC_PORTSTATE_LOADAVAIL;
        }
        /*------------------------------------------------------------------------------*/
        /*   Check other port group availability.                                       */
        /*   If all port included in other port group state is "LoadReq + Required",    */
        /*   then takeOutIn transfer is not done.                                       */
        /*------------------------------------------------------------------------------*/
        Boolean bLoadPortFoundFlag = false;
        Infos.EqpPortInfoOrderByGroup tmpEqpPortInfoOrderByGroup = new Infos.EqpPortInfoOrderByGroup();
        tmpEqpPortInfoOrderByGroup = eqpPortInfoOrderByGroupRetCode;
        int nPortGrpLen = CimArrayUtils.getSize(tmpEqpPortInfoOrderByGroup.getStrPortGroup());
        for (int i = 0; i < nPortGrpLen; i++) {
            // ------------------------------------------------------------------
            //  Omit check for takeOutIn target port group
            // ------------------------------------------------------------------
            if (CimStringUtils.equals(
                    tmpEqpPortInfoOrderByGroup.getStrPortGroup().get(i).getPortGroup(), orgPortGrp)) {
                log.info("This port group is unloading port group. No need to check.");
                continue;
            }
            // ------------------------------------------------------------------
            //  Check PortGroup Status
            // ------------------------------------------------------------------
            Boolean bCheckDispatchMode = true;
            int nEqpPortGrpLen = CimArrayUtils.getSize(eqpPortInfo.getEqpPortStatuses());
            for (int j = 0; j < nEqpPortGrpLen; j++) {
                // check is targetPortInfo only
                if (CimStringUtils.equals(
                        tmpEqpPortInfoOrderByGroup.getStrPortGroup().get(i).getPortGroup(),
                        eqpPortInfo.getEqpPortStatuses().get(j).getPortGroup())) {
                    log.info("TergetPortGropuID == EqpInfoPortGroupID");
                    if (!BizConstant.equalsIgnoreCase(
                            BizConstant.SP_EQP_DISPATCHMODE_AUTO,
                            eqpPortInfo.getEqpPortStatuses().get(j).getDispatchMode())
                            || !BizConstant.equalsIgnoreCase(
                            BizConstant.SP_EQP_ACCESSMODE_AUTO,
                            eqpPortInfo.getEqpPortStatuses().get(j).getAccessMode())
                            || BizConstant.equalsIgnoreCase(
                            BizConstant.SP_EQP_ONLINEMODE_OFFLINE,
                            eqpPortInfo.getEqpPortStatuses().get(j).getOnlineMode())) {
                        bCheckDispatchMode = false;
                        break;
                    }
                } else {
                    log.info("onlineMode is OK,{}", eqpPortInfo.getEqpPortStatuses().get(j).getOnlineMode());
                }
            }
            if (CimBooleanUtils.isFalse(bCheckDispatchMode)) {
                log.error("ERROR!! dispatchMode ---> continue next PortGroup...");
                log.info("(P3100020) Add Check PortGroup Status end [NG NG NG NG NG]");
                continue;
            } else {
                log.info("(P3100020) Add Check PortGroup Status end [OK OK OK OK OK]");
            }
            int nPortLen =
                    CimArrayUtils.getSize(tmpEqpPortInfoOrderByGroup.getStrPortGroup().get(i).getStrPortID());
            int nLoadReqPortCnt = 0;
            for (int m = 0; m < nPortLen; m++) {
                // -----------------------------------------------------------------------------
                //  Find out one strPortGroup in which all strPortID have "LoadReq" portState
                //  value and also the earliest dispatchState_TimeStamp.
                //  In case of Furnace equipment, Use "LoadAvail" portState value.
                // -----------------------------------------------------------------------------
                // ------------------------
                //  Data Condition Check
                // ------------------------
                if (!CimStringUtils.equals(
                        tmpEqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(i)
                                .getStrPortID()
                                .get(m)
                                .getPortState(),
                        variableLoadState)) {
                    log.info("Port State is not Good.");
                    break;
                }
                if (!CimStringUtils.equals(
                        CIMStateConst.CIM_PORT_RESOURCE_INPUT,
                        tmpEqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(i)
                                .getStrPortID()
                                .get(m)
                                .getPortUsage())
                        && !CimStringUtils.equals(
                        CIMStateConst.CIM_PORT_RESOURCE_INPUTOUTPUT,
                        tmpEqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(i)
                                .getStrPortID()
                                .get(m)
                                .getPortUsage())) {
                    log.info("Port Usage is not Input or InputOutput.");
                    break;
                }
                if (!CimStringUtils.equals(
                        BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT,
                        tmpEqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(i)
                                .getStrPortID()
                                .get(m)
                                .getLoadPurposeType())
                        && !CimStringUtils.equals(
                        BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT,
                        tmpEqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(i)
                                .getStrPortID()
                                .get(m)
                                .getLoadPurposeType())
                        && !CimStringUtils.equals(
                        BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE,
                        tmpEqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(i)
                                .getStrPortID()
                                .get(m)
                                .getLoadPurposeType())
                        && !CimStringUtils.equals(
                        BizConstant.SP_LOADPURPOSETYPE_ANY,
                        tmpEqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(i)
                                .getStrPortID()
                                .get(m)
                                .getLoadPurposeType())) {
                    log.info(
                            "loadPurposeType is not [ProcessLot] or [ProcessMonitorLot] or [EmptyCassette] or [Any]");
                    break;
                }
                if (!CimStringUtils.equals(
                        BizConstant.SP_PORTRSC_DISPATCHSTATE_REQUIRED,
                        tmpEqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(i)
                                .getStrPortID()
                                .get(m)
                                .getDispatchState())) {
                    log.info("Dispatch State is not 'Required'.");
                    break;
                }
                nLoadReqPortCnt++;
            }
            if (nLoadReqPortCnt == nPortLen) {
                bLoadPortFoundFlag = true;
                break;
            }
        }
        Validations.check(
                CimBooleanUtils.isTrue(bLoadPortFoundFlag), retCodeConfig.getNotFoundTargetPort());

        // -------------------------------------------------------------------------------------
        //  Check target Port condition for TakeOutIn transfer.
        // -------------------------------------------------------------------------------------
        bLoadPortFoundFlag = false;
        int nOutPortGrpLen = 0;
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        log.info("Total count of temporary sorted port group.");
        for (int i = 0; i < nPortGrpLen; i++) {
            // ------------------------------------------------------------------
            //  Omit Not TakeOutIn target port group
            // ------------------------------------------------------------------
            if (!CimStringUtils.equals(
                    tmpEqpPortInfoOrderByGroup.getStrPortGroup().get(i).getPortGroup(), orgPortGrp)) {
                log.info("This port group is unloading port group. No need to check.");
                continue;
            }
            // ------------------------------------------------------------------
            //  Check PortGroup Status
            // ------------------------------------------------------------------
            Boolean bCheckDispatchMode = true;
            int nEqpPortGrpLen = CimArrayUtils.getSize(eqpPortInfo.getEqpPortStatuses());
            for (int j = 0; j < nEqpPortGrpLen; j++) {
                // check is targetPortInfo only
                if (CimStringUtils.equals(
                        tmpEqpPortInfoOrderByGroup.getStrPortGroup().get(i).getPortGroup(),
                        eqpPortInfo.getEqpPortStatuses().get(j).getPortGroup())) {
                    if (!BizConstant.equalsIgnoreCase(
                            BizConstant.SP_EQP_DISPATCHMODE_AUTO,
                            eqpPortInfo.getEqpPortStatuses().get(j).getDispatchMode())
                            || !BizConstant.equalsIgnoreCase(
                            BizConstant.SP_EQP_ACCESSMODE_AUTO,
                            eqpPortInfo.getEqpPortStatuses().get(j).getAccessMode())
                            || BizConstant.equalsIgnoreCase(
                            BizConstant.SP_EQP_ONLINEMODE_OFFLINE,
                            eqpPortInfo.getEqpPortStatuses().get(j).getOnlineMode())) {
                        log.info("Port Status Error !!");
                        bCheckDispatchMode = false;
                        break;
                    }
                } else {
                    log.info("NoCheck ignore [PortGropuID]");
                }
            }
            if (CimBooleanUtils.isFalse(bCheckDispatchMode)) {
                log.error("ERROR!! dispatchMode ---> continue next PortGroup...");
                break;
            } else {
                log.info("Add Check PortGroup Status end [OK OK OK OK OK]");
            }
            // ------------------------------------------------------------------
            //  Check ControlJob existence
            // ------------------------------------------------------------------
            List<CimControlJob> controlJobSeq = aMachine.allStartReservedControlJobs();
            Boolean cjFindFlag = false;
            int cjLen = CimArrayUtils.getSize(controlJobSeq);
            for (int cjCnt = 0; cjCnt < cjLen; cjCnt++) {
                Validations.check(
                        CimObjectUtils.isEmpty(controlJobSeq.get(cjCnt)),
                        retCodeConfig.getNotFoundControlJob());

                String portGroupID = controlJobSeq.get(cjCnt).getPortGroup();
                if (CimStringUtils.equals(
                        tmpEqpPortInfoOrderByGroup.getStrPortGroup().get(i).getPortGroup(), portGroupID)) {
                    log.info("portGroupID == portGroup_id");
                    cjFindFlag = true;
                    break;
                }
            }
            if (CimBooleanUtils.isTrue(cjFindFlag)) {
                log.info("Control Job is found!");
                break;
            }
            int nPortLen =
                    CimArrayUtils.getSize(tmpEqpPortInfoOrderByGroup.getStrPortGroup().get(i).getStrPortID());
            int nLoadReqPortCnt = 0;
            for (int m = 0; m < nPortLen; m++) {
                // ------------------------
                //  Data Condition Check
                // ------------------------
                if (!(CimStringUtils.equals(
                        BizConstant.SP_PORTRSC_PORTSTATE_UNLOADREQ,
                        tmpEqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(i)
                                .getStrPortID()
                                .get(m)
                                .getPortState())
                        && CimStringUtils.equals(
                        BizConstant.SP_PORTRSC_DISPATCHSTATE_REQUIRED,
                        tmpEqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(i)
                                .getStrPortID()
                                .get(m)
                                .getDispatchState()))
                        && !(CimStringUtils.equals(
                        variableLoadState,
                        tmpEqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(i)
                                .getStrPortID()
                                .get(m)
                                .getPortState())
                        && CimStringUtils.equals(
                        BizConstant.SP_PORTRSC_DISPATCHSTATE_REQUIRED,
                        tmpEqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(i)
                                .getStrPortID()
                                .get(m)
                                .getDispatchState()))
                        && !(CimStringUtils.equals(
                        variableLoadState,
                        tmpEqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(i)
                                .getStrPortID()
                                .get(m)
                                .getPortState())
                        && CimStringUtils.equals(
                        BizConstant.SP_PORTRSC_DISPATCHSTATE_NOTDISPATCHED,
                        tmpEqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(i)
                                .getStrPortID()
                                .get(m)
                                .getDispatchState()))) {
                    log.info("Port State is not Good.");
                    break;
                }
                if (!CimStringUtils.equals(
                        CIMStateConst.CIM_PORT_RESOURCE_INPUT,
                        tmpEqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(i)
                                .getStrPortID()
                                .get(m)
                                .getPortUsage())
                        && !CimStringUtils.equals(
                        CIMStateConst.CIM_PORT_RESOURCE_INPUTOUTPUT,
                        tmpEqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(i)
                                .getStrPortID()
                                .get(m)
                                .getPortUsage())) {
                    log.info("Port Usage is not Input or CIMStateConst.");
                    break;
                }
                if (!CimStringUtils.equals(
                        BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT,
                        tmpEqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(i)
                                .getStrPortID()
                                .get(m)
                                .getLoadPurposeType())
                        && !CimStringUtils.equals(
                        BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT,
                        tmpEqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(i)
                                .getStrPortID()
                                .get(m)
                                .getLoadPurposeType())
                        && !CimStringUtils.equals(
                        BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE,
                        tmpEqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(i)
                                .getStrPortID()
                                .get(m)
                                .getLoadPurposeType())
                        && !CimStringUtils.equals(
                        BizConstant.SP_LOADPURPOSETYPE_ANY,
                        tmpEqpPortInfoOrderByGroup
                                .getStrPortGroup()
                                .get(i)
                                .getStrPortID()
                                .get(m)
                                .getLoadPurposeType())) {
                    log.info(
                            "loadPurposeType is not [ProcessLot] or [ProcessMonitorLot] or [EmptyCassette] or [Any]");
                    break;
                }
                nLoadReqPortCnt++;
            }
            if (nLoadReqPortCnt == nPortLen) {
                // ---------------------------------------------
                //  Set pptPortGroup data of output structure
                //  after sorting by loadSequenceNoInPortGroup
                // ---------------------------------------------
                Infos.PortGroup portGroup = new Infos.PortGroup();
                portGroups.add(nOutPortGrpLen, portGroup);
                portGroup.setPortGroup(tmpEqpPortInfoOrderByGroup.getStrPortGroup().get(i).getPortGroup());

                int nTmpPortLen =
                        CimArrayUtils.getSize(
                                tmpEqpPortInfoOrderByGroup.getStrPortGroup().get(i).getStrPortID());
                List<Infos.PortID> list = new ArrayList<>();
                portGroup.setStrPortID(list);
                for (int n = 0; n < nTmpPortLen; n++) {
                    Boolean bTmpAddFlag = false;
                    for (int o = 0; o < n; o++) {
                        if (CimNumberUtils.longValue(
                                tmpEqpPortInfoOrderByGroup
                                        .getStrPortGroup()
                                        .get(i)
                                        .getStrPortID()
                                        .get(n)
                                        .getLoadSequenceNoInPortGroup())
                                < portGroup.getStrPortID().get(o).getLoadSequenceNoInPortGroup()) {
                            for (int p = n; p > o; p--) {
                                list.set(p, list.get(p - 1));
                                bTmpAddFlag = true;
                            }
                            list.set(
                                    o, tmpEqpPortInfoOrderByGroup.getStrPortGroup().get(i).getStrPortID().get(n));
                        }
                    }
                    if (CimBooleanUtils.isFalse(bTmpAddFlag)) {
                        list.add(n, tmpEqpPortInfoOrderByGroup.getStrPortGroup().get(i).getStrPortID().get(n));
                    }
                }
                bLoadPortFoundFlag = true;
                nOutPortGrpLen++;
                break;
            }
        }
        // -----------------------
        //  Set data to return.
        // -----------------------
        Validations.check(
                CimBooleanUtils.isFalse(bLoadPortFoundFlag), retCodeConfig.getNotFoundTargetPort());

        return strEqpTargetPortInfoOut;
    }

    /**
     * description: change history: date defect# person comments
     * ---------------------------------------------------------------------------------------------------------------------
     * 2019/7/18 Neyo create file
     *
     * @author: Neyo
     * @date: 2019/7/18 15:52
     * @copyright: 2019, FA Software (Shanghai) Co., Ltd. All Rights Reserved.
     */
    @Override
    public void equipmentPortStateCheckForTakeOutIn(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            String portGroupID,
            List<Infos.StartCassette> strStartCassette) {
        /*----------------*/
        /*                */
        /*   Initialize   */
        /*                */
        /*----------------*/
        /*----------------------------------------*/
        /*                                        */
        /*   Get Equipment and Port Information   */
        /*                                        */
        /*----------------------------------------*/
        int lenCassette = CimArrayUtils.getSize(strStartCassette);
        Validations.check(0 >= lenCassette, retCodeConfig.getInvalidInputParam());
        /*-----------------------------------------*/
        /*   Get Equipment's Operation Mode Info   */
        /*-----------------------------------------*/
        log.info("Get Equipment's Operation Mode Info");
        // 【step1】 - portResource_currentOperationMode_Get
        Outputs.ObjPortResourceCurrentOperationModeGetOut portResourceCurrentOperationModeRetCode =
                portMethod.portResourceCurrentOperationModeGet(
                        objCommon, equipmentID, strStartCassette.get(0).getLoadPortID());

        /*----------------------------------*/
        /*   Get ControlJob for PortGroup   */
        /*----------------------------------*/
        log.info("Get ControlJob for PortGroup");
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(CimObjectUtils.isEmpty(aMachine), retCodeConfig.getNotFoundEqp());

        // --------------------------------------------------
        // Check Control job existence
        // --------------------------------------------------
        List<CimControlJob> controlJobSeq = aMachine.allStartReservedControlJobs();
        int cjLen = CimArrayUtils.getSize(controlJobSeq);
        Boolean cjFindFlag = false;
        for (int i = 0; i < cjLen; i++) {
            Validations.check(
                    CimObjectUtils.isEmpty(controlJobSeq.get(i)), retCodeConfig.getNotFoundControlJob());

            String portGroupId = controlJobSeq.get(i).getPortGroup();
            if (CimStringUtils.equals(portGroupID, portGroupId)) {
                log.info("portGroupID == portGroup_id");
                cjFindFlag = true;
                break;
            }
        }
        Validations.check(
                CimBooleanUtils.isTrue(cjFindFlag), retCodeConfig.getAlreadyReservedPortGroup());

        /*------------------------------------*/
        /*   Get and Check Cassette on Port   */
        /*------------------------------------*/
        log.info("Get and Check Cassette on Port");
        // 【step2】 - equipment_portInfo_Get
        Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoGet(objCommon, equipmentID);
        /*----------------------------*/
        /*                            */
        /*   Check Port Information   */
        /*                            */
        /*----------------------------*/
        log.info("Check Port Information");
        int lenEqpPort = CimArrayUtils.getSize(eqpPortInfo.getEqpPortStatuses());
        for (int j = 0; j < lenEqpPort; j++) {
            /*-------------------------------------*/
            /*   Omit Deferent Port Group's Port   */
            /*-------------------------------------*/
            log.info("Omit Deferent Port Group's Port");
            if (!CimStringUtils.equals(
                    eqpPortInfo.getEqpPortStatuses().get(j).getPortGroup(), portGroupID)) {
                log.info("continue !!");
                continue;
            }
            /*-----------------------------------*/
            /*   Get and Check Port's LoadMode   */
            /*-----------------------------------*/
            log.info("Get and Check Port's LoadMode");
            CimMachine aPosMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
            Validations.check(CimObjectUtils.isEmpty(aPosMachine), retCodeConfig.getNotFoundEqp());

            ObjectIdentifier portID = eqpPortInfo.getEqpPortStatuses().get(j).getPortID();
            Validations.check(ObjectIdentifier.isEmptyWithValue(portID), retCodeConfig.getNotFoundPort());

            PortResource aPs = aMachine.findPortResourceNamed(portID.getValue());
            CimPortResource aport = (CimPortResource) aPs;
            Validations.check(CimObjectUtils.isEmpty(aport), retCodeConfig.getNotFoundPort());

            String loadMode = aport.getPortUsage();
            if (CimStringUtils.equals(CIMStateConst.CIM_PORT_RESOURCE_INPUT, loadMode)
                    || CimStringUtils.equals(CIMStateConst.CIM_PORT_RESOURCE_INPUTOUTPUT, loadMode)) {
                log.info("loadMode = CIMFW_PortRsc_Input and loadMode = CIMFW_PortRsc_InputOutput");

            } else {
                log.info("ELSE!!");
                Validations.check(true, retCodeConfig.getInvalidPortLoadMode());
            }
            /*-------------------------------------*/
            /*   Get and Check Port's Port State   */
            /*-------------------------------------*/
            log.info("Get and Check Port's Port State");
            if (!CimStringUtils.equals(
                    BizConstant.SP_EQP_ONLINEMODE_OFFLINE,
                    portResourceCurrentOperationModeRetCode.getOperationMode().getOnlineMode())) {
                log.info(
                        "strPortResource_currentOperationMode_Get_out.strOperationMode.onlineMode = SP_Eqp_OnlineMode_Offline");
                String portState = eqpPortInfo.getEqpPortStatuses().get(j).getPortState();
                if (CimStringUtils.equals(BizConstant.SP_PORTRSC_PORTSTATE_LOADAVAIL, portState)
                        || CimStringUtils.equals(BizConstant.SP_PORTRSC_PORTSTATE_LOADREQ, portState)
                        || CimStringUtils.equals(BizConstant.SP_PORTRSC_PORTSTATE_UNLOADREQ, portState)) {
                    log.info(
                            ".strEqpPortInfo.strEqpPortStatus[j].portState = SP_PortRsc_PortState_LoadAvail or SP_PortRsc_PortState_LoadReq or SP_PortRsc_PortState_UnloadReq");

                } else {
                    Validations.check(true, retCodeConfig.getInvalidPortState());
                }
            }
            /*--------------------------------------------*/
            /*   Check Load Reserved for Cassette on Port */
            /*--------------------------------------------*/
            log.info("Check Load Reserved for Cassette on Port");
            if (ObjectIdentifier.isEmptyWithValue(
                    eqpPortInfo.getEqpPortStatuses().get(j).getDispatchLoadCassetteID())) {
            } else {
                log.error("return RC_ALREADY_RESERVED_LOADPORT");
                Validations.check(true, retCodeConfig.getAlreadyReservedLoadPort());
            }
        }
        /*---------------------------------------------------*/
        /*                                                   */
        /*   Check Eqp's Port - In-Parm's Port Combination   */
        /*                                                   */
        /*---------------------------------------------------*/
        int lenStartCassette = CimArrayUtils.getSize(strStartCassette);
        log.info("Check Eqp's Port - In-Parm's Port Combination");
        for (int i = 0; i < lenStartCassette; i++) {
            for (int j = 0; j < lenEqpPort; j++) {
                String portId = eqpPortInfo.getEqpPortStatuses().get(j).getPortID().getValue();
                if (CimStringUtils.equals(strStartCassette.get(i).getLoadPortID().getValue(), portId)) {
                    /*--------------------------------------------------------*/
                    /*    Check Eqp Port's PortGroup VS In-Parm's PortGroup   */
                    /*--------------------------------------------------------*/
                    log.info("Check Eqp Port's PortGroup VS In-Parm's PortGroup");
                    if (CimStringUtils.equals(
                            portGroupID, eqpPortInfo.getEqpPortStatuses().get(j).getPortGroup())) {
                        log.info("set!! rc = RC_OK");
                    } else {
                        log.error("return RC_PORT_GROUP_MIXED");
                        Validations.check(true, retCodeConfig.getPortGroupMixed());
                    }
                    /*------------------------------------------------------------*/
                    /*    Check Eqp Port's LoadPurpose VS In-Parm's LoadPurpose   */
                    /*------------------------------------------------------------*/
                    log.info("Check Eqp Port's LoadPurpose VS In-Parm's LoadPurpose");
                    if (CimStringUtils.equals(
                            BizConstant.SP_LOADPURPOSETYPE_OTHER,
                            eqpPortInfo.getEqpPortStatuses().get(j).getLoadPurposeType())) {
                        log.info("set!! rc = RC_OK");
                    } else if (CimStringUtils.equals(
                            BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT,
                            eqpPortInfo.getEqpPortStatuses().get(j).getLoadPurposeType())) {
                        if (CimStringUtils.equals(
                                BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT,
                                strStartCassette.get(i).getLoadPurposeType())
                                || CimStringUtils.equals(
                                BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT,
                                strStartCassette.get(i).getLoadPurposeType())) {
                            log.info("set!! rc = RC_OK");
                        } else {
                            log.error("return RC_NOT_SAME_LOAD_PURPOSE");
                            Validations.check(
                                    true,
                                    retCodeConfig.getNotSameLoadPurpose(),
                                    strStartCassette.get(i).getCassetteID(),
                                    strStartCassette.get(i).getLoadPurposeType(),
                                    strStartCassette.get(i).getLoadPortID(),
                                    eqpPortInfo.getEqpPortStatuses().get(j).getLoadPurposeType());
                        }
                    } else if (CimStringUtils.equals(
                            BizConstant.SP_LOADPURPOSETYPE_ANY,
                            eqpPortInfo.getEqpPortStatuses().get(j).getLoadPurposeType())) {
                        if (CimStringUtils.equals(
                                BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT,
                                strStartCassette.get(i).getLoadPurposeType())
                                || CimStringUtils.equals(
                                BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT,
                                strStartCassette.get(i).getLoadPurposeType())
                                || CimStringUtils.equals(
                                BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE,
                                strStartCassette.get(i).getLoadPurposeType())) {
                            log.info("set!! rc = RC_OK");
                        } else {
                            log.error("return RC_NOT_SAME_LOAD_PURPOSE");
                            Validations.check(
                                    true,
                                    retCodeConfig.getNotSameLoadPurpose(),
                                    strStartCassette.get(i).getCassetteID(),
                                    strStartCassette.get(i).getLoadPurposeType(),
                                    strStartCassette.get(i).getLoadPortID(),
                                    eqpPortInfo.getEqpPortStatuses().get(j).getLoadPurposeType());
                        }
                    } else if (CimStringUtils.equals(
                            strStartCassette.get(i).getLoadPurposeType(),
                            eqpPortInfo.getEqpPortStatuses().get(j).getLoadPurposeType())) {
                        log.info("set!! rc = RC_OK");
                    } else {
                        log.error("return RC_NOT_SAME_LOAD_PURPOSE");
                        Validations.check(
                                true,
                                retCodeConfig.getNotSameLoadPurpose(),
                                strStartCassette.get(i).getCassetteID(),
                                strStartCassette.get(i).getLoadPurposeType(),
                                strStartCassette.get(i).getLoadPortID(),
                                eqpPortInfo.getEqpPortStatuses().get(j).getLoadPurposeType());
                    }
                    /*--------------------------------------------------------*/
                    /*    Check Eqp Port's LoadSeqNo VS In-Parm's LoadSeqNo   */
                    /*--------------------------------------------------------*/
                    log.info("Check Eqp Port's LoadSeqNo VS In-Parm's LoadSeqNo");
                    if (CimNumberUtils.longValue(
                            eqpPortInfo.getEqpPortStatuses().get(j).getLoadSequenceNumber())
                            != CimNumberUtils.longValue(strStartCassette.get(i).getLoadSequenceNumber())) {
                        log.error("return RC_INVALID_LOADING_SEQ");
                        Validations.check(true, retCodeConfig.getInvalidLoadingSequence());
                    }
                }
            }
        }
    }

    /**
     * description: change history: date defect# person comments
     * ---------------------------------------------------------------------------------------------------------------------
     * 2019/7/22 Neyo create file
     *
     * @author: Neyo
     * @date: 2019/7/22 15:04
     * @copyright: 2019, FA Software (Shanghai) Co., Ltd. All Rights Reserved.
     */
    @Override
    public Outputs.EquipmentTargetPortPickupOut equipmentTargetPortPickupForInternalBuffer(
            Infos.ObjCommon objCommonIn,
            ObjectIdentifier equipmentID,
            List<Infos.EqpInternalBufferInfo> strEqpInternalBufferInfos,
            List<Infos.EqpPortStatus> strPortInfos) {

        // Initialize Flag
        Outputs.EquipmentTargetPortPickupOut out = new Outputs.EquipmentTargetPortPickupOut();

        out.setWhatsNextRequireFlag(false);
        out.setEmptyCassetteRequireFlag(false);
        Infos.EqpTargetPortInfo strEqpTargetPortInfo = new Infos.EqpTargetPortInfo();
        out.setEqpTargetPortInfo(strEqpTargetPortInfo);
        strEqpTargetPortInfo.setEquipmentID(equipmentID);
        List<Infos.PortGroup> portGroups = new ArrayList<>();
        strEqpTargetPortInfo.setPortGroups(portGroups);

        int nPortLen = CimArrayUtils.getSize(strPortInfos);
        Boolean bPortFoundFlag = false;
        int nIdx = 0;
        /*--------------------------------------------------------*/
        /*   Check OSEQAUTODISPATCHSET Table                        */
        /*--------------------------------------------------------*/
        String tmpUseCDRForAutoDispatchFlag =
                StandardProperties.OM_XFER_CARRIER_WITH_AUTO3_DISPATCH.getValue();
        Boolean loadEventExistFlag = false;
        Boolean unloadEventExistFlag = false;

        Infos.PortGroup portGroup = new Infos.PortGroup();
        portGroups.add(portGroup);
        List<Infos.PortID> strPortID = new ArrayList<>();
        portGroup.setStrPortID(strPortID);
        if (CimStringUtils.equals(tmpUseCDRForAutoDispatchFlag, "1")) {
            log.info("OM_XFER_CARRIER_WITH_AUTO3_DISPATCH=1");
            List<ObjectIdentifier> equipmentIDs = new ArrayList<>();
            equipmentIDs.add(equipmentID);
            // 【step1】 - equipment_auto3DispatchSettingList_GetDR
            List<Infos.EqpAuto3SettingInfo> strEqpAuto3SettingInfoSeq =
                    this.equipmentAuto3DispatchSettingListGetDR(objCommonIn, equipmentIDs);

            int strEqpAuto3SettingInfoSeqlen = CimArrayUtils.getSize(strEqpAuto3SettingInfoSeq);
            for (int nCnt = 0; nCnt < strEqpAuto3SettingInfoSeqlen; nCnt++) {
                if (BizConstant.equalsIgnoreCase(
                        BizConstant.SP_EQPAUTO3SETTING_EVENTTYPE_UNLOADREQ,
                        strEqpAuto3SettingInfoSeq.get(nCnt).getCarrierTransferRequestEvent())) {
                    log.info("# Existing auto3Setting for UnloadReq");
                    unloadEventExistFlag = true;
                } else if (BizConstant.equalsIgnoreCase(
                        BizConstant.SP_EQPAUTO3SETTING_EVENTTYPE_LOADREQ,
                        strEqpAuto3SettingInfoSeq.get(nCnt).getCarrierTransferRequestEvent())) {
                    log.info("# Existing auto3Setting for LoadReq");
                    loadEventExistFlag = true;
                }
            }
            Validations.check(
                    CimBooleanUtils.isFalse(loadEventExistFlag)
                            && CimBooleanUtils.isFalse(unloadEventExistFlag),
                    retCodeConfig.getNotFoundTargetPort());
        }
        if (!CimStringUtils.equals(tmpUseCDRForAutoDispatchFlag, "1")
                || (CimStringUtils.equals(tmpUseCDRForAutoDispatchFlag, "1")
                && CimBooleanUtils.isTrue(unloadEventExistFlag))) {
            /******************************************************************************************/
            /*                                                                                        */
            /*     Search Unload Port                                                                 */
            /*                                                                                        */
            /******************************************************************************************/
            log.info("Search Unload Port");
            for (int i = 0; i < nPortLen; i++) {
                /*----------------------*/
                /*   Check Port State   */
                /*----------------------*/
                log.info("Check Port State");
                if (!CimStringUtils.equals(
                        CIMStateConst.CIM_PORT_RESOURCE_OUTPUT, strPortInfos.get(i).getPortUsage())
                        && !CimStringUtils.equals(
                        CIMStateConst.CIM_PORT_RESOURCE_INPUTOUTPUT, strPortInfos.get(i).getPortUsage())) {
                    log.info("portUsage != [Output] && [InputOutput]  ...<<continue>>");
                    continue;
                }
                if (ObjectIdentifier.isEmptyWithValue(strPortInfos.get(i).getLoadedCassetteID())) {
                    log.info("strPortInfos[i].loadedCassetteID is NULL  ...<<continue>>");
                    continue;
                }
                if (!BizConstant.equalsIgnoreCase(
                        BizConstant.SP_EQP_ACCESSMODE_AUTO, strPortInfos.get(i).getAccessMode())
                        || BizConstant.equalsIgnoreCase(
                        BizConstant.SP_EQP_ONLINEMODE_OFFLINE, strPortInfos.get(i).getOnlineMode())) {
                    log.info("accessMode != [Auto] or onlineMode == [Offline]  ...<<continue>>");
                    continue;
                }
                if (!ObjectIdentifier.isEmptyWithValue(strPortInfos.get(i).getDispatchUnloadCassetteID())) {
                    log.info("dispatchUnloadCassetteID != NULL  ...<<continue>>");
                    continue;
                }
                if (!CimStringUtils.equals(
                        BizConstant.SP_PORTRSC_PORTSTATE_UNLOADREQ, strPortInfos.get(i).getPortState())) {
                    log.info("portState != [UnloadReq]  ...<<continue>>");
                    continue;
                }
                if (ObjectIdentifier.isEmptyWithValue(strPortInfos.get(i).getLoadedCassetteID())) {
                    log.info("loadedCassetteID is NULL  ...<<continue>>");
                    continue;
                }
                /*-----------------------------*/
                /*   Check Lot Process State   */
                /*-----------------------------*/
                log.info("Check Lot Process State");
                Boolean bLotCheck = true;
                int nLotOnPortLen = CimArrayUtils.getSize(strPortInfos.get(i).getLotOnPorts());
                for (int j = 0; j < nLotOnPortLen; j++) {
                    // 【step2】 - lot_processState_Get
                    String lotProcessStateGetRetCode =
                            lotMethod.lotProcessStateGet(
                                    objCommonIn, strPortInfos.get(i).getLotOnPorts().get(j).getLotID());
                    if (CimStringUtils.equals(
                            BizConstant.SP_LOT_PROCSTATE_PROCESSING, lotProcessStateGetRetCode)) {
                        log.info("LotProcessState == [Processing]");
                        bLotCheck = false;
                        break;
                    }
                }
                if (CimBooleanUtils.isFalse(bLotCheck)) {
                    log.info("LotProcessState == [Processing]  ...<<continue>>");
                    continue;
                }
                /*------------------------------------*/
                /*   Found Good Condition UnloadReq   */
                /*------------------------------------*/
                log.info("Found Good Condition UnloadReq");

                Infos.PortID portID = new Infos.PortID();
                strPortID.add(nIdx, portID);
                portID.setPortID(strPortInfos.get(i).getPortID());
                portID.setCassetteID(strPortInfos.get(i).getLoadedCassetteID());
                portID.setPortState(BizConstant.SP_PORTRSC_PORTSTATE_UNLOADREQ);
                portID.setLoadPurposeType(strPortInfos.get(i).getLoadPurposeType());
                portID.setCategoryCapability(strPortInfos.get(i).getCassetteCategoryCapability());
                nIdx++;
                bPortFoundFlag = true;
            }
        }
        if (CimBooleanUtils.isTrue(bPortFoundFlag)) {
            log.info("Found UnloadPort");
            out.setTargetPortType(BizConstant.SP_PORTRSC_PORTSTATE_UNLOADREQ);
        } else {
            if (!CimStringUtils.equals(tmpUseCDRForAutoDispatchFlag, "1")
                    || (CimStringUtils.equals(tmpUseCDRForAutoDispatchFlag, "1")
                    && CimBooleanUtils.isTrue(loadEventExistFlag))) {
                /******************************************************************************************/
                /*                                                                                        */
                /*     Search Load Port                                                                   */
                /*                                                                                        */
                /******************************************************************************************/
                log.info(" Search Load Port");
                nIdx = 0;
                /*----------------------*/
                /*   Check Port State   */
                /*----------------------*/
                log.info("Check Port State");
                for (int i = 0; i < nPortLen; i++) {
                    /*----------------------------------------------------*/
                    /*   Check reservedUnloadPort inside InternalBuffer   */
                    /*----------------------------------------------------*/
                    log.info("Check reservedUnloadPort inside InternalBuffer ");
                    Boolean bContinuePort = false;
                    int lenBufCategory = CimArrayUtils.getSize(strEqpInternalBufferInfos);
                    for (int j = 0; j < lenBufCategory; j++) {
                        int nShelfLen =
                                CimArrayUtils.getSize(strEqpInternalBufferInfos.get(j).getShelfInBufferList());
                        // Loop of Cassette in Buffer
                        for (int k = 0; k < nShelfLen; k++) {
                            if (strPortInfos
                                    .get(i)
                                    .getPortID()
                                    .equals(
                                            strEqpInternalBufferInfos
                                                    .get(j)
                                                    .getShelfInBufferList()
                                                    .get(k)
                                                    .getReservedUnloadPortID())) {
                                log.info("Exist port reservedUnloadPortID   ...<<continue>>");
                                bContinuePort = true;
                                break;
                            }
                        }
                        if (CimBooleanUtils.isTrue(bContinuePort)) {
                            log.info("TRUE == bContinuePort");
                            break;
                        }
                    }
                    if (CimBooleanUtils.isTrue(bContinuePort)) {
                        log.info("TRUE == bContinuePort   ...<<continue>>  NextPortID");
                        continue;
                    }
                    if (!CimStringUtils.equals(
                            CIMStateConst.CIM_PORT_RESOURCE_INPUT, strPortInfos.get(i).getPortUsage())
                            && !CimStringUtils.equals(
                            CIMStateConst.CIM_PORT_RESOURCE_INPUTOUTPUT,
                            strPortInfos.get(i).getPortUsage())) {
                        log.info("portUsage != [Output] && [InputOutput]  ...<<continue>>");
                        continue;
                    }
                    if (!BizConstant.equalsIgnoreCase(
                            BizConstant.SP_EQP_DISPATCHMODE_AUTO, strPortInfos.get(i).getDispatchMode())
                            || !BizConstant.equalsIgnoreCase(
                            BizConstant.SP_EQP_ACCESSMODE_AUTO, strPortInfos.get(i).getAccessMode())
                            || BizConstant.equalsIgnoreCase(
                            BizConstant.SP_EQP_ONLINEMODE_OFFLINE, strPortInfos.get(i).getOnlineMode())) {
                        log.info("accessMode != [Auto] or dispatchMode != [Auto]  ...<<continue>>");
                        continue;
                    }
                    if (CimStringUtils.equals(
                            BizConstant.SP_PORTRSC_PORTSTATE_LOADREQ, strPortInfos.get(i).getPortState())
                            || CimStringUtils.equals(
                            BizConstant.SP_PORTRSC_PORTSTATE_LOADAVAIL, strPortInfos.get(i).getPortState())) {
                        log.info("portState == LoadReq or LoadAvail");
                        /*----------------------------------*/
                        /*   Found Good Condition LoadReq   */
                        /*----------------------------------*/
                        log.info("Found Good Condition LoadReq");
                        Infos.PortID portID = new Infos.PortID();
                        strPortID.add(nIdx, portID);
                        portID.setPortID(strPortInfos.get(i).getPortID());
                        portID.setCassetteID(strPortInfos.get(i).getLoadedCassetteID());
                        portID.setPortState(BizConstant.SP_PORTRSC_PORTSTATE_LOADREQ);
                        portID.setLoadPurposeType(strPortInfos.get(i).getLoadPurposeType());
                        portID.setCategoryCapability(strPortInfos.get(i).getCassetteCategoryCapability());
                        nIdx++;
                        bPortFoundFlag = true;
                    }
                }
            }
            if (CimBooleanUtils.isTrue(bPortFoundFlag)) {
                log.info("Found LoadPort");
                out.setTargetPortType(BizConstant.SP_PORTRSC_PORTSTATE_LOADREQ);
            }
        }
        Validations.check(
                CimBooleanUtils.isFalse(bPortFoundFlag), retCodeConfig.getNotFoundTargetPort());
        /*----------------------*/
        /*   Return to Caller   */
        /*----------------------*/
        return out;
    }

    @Override
    public void equipmentContainerPositionProcessJobStatusSet(
            Infos.ObjCommon objCommon, Inputs.EquipmentContainerPositionProcessJobStatusSetIn in) {
        // Initialize
        // -------------------------------
        //  Get Machine Object
        // -------------------------------
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, in.getEquipmentID());
        Validations.check(
                null == aMachine, retCodeConfig.getNotFoundMachine(), objCommon.getTransactionID());

        // -------------------------------
        //  Get all MachineContainers
        // -------------------------------
        List<CimMachineContainer> aMachineContainerSeq = aMachine.allMachineContainers();

        int nCtnLen = CimArrayUtils.getSize(aMachineContainerSeq);
        log.info("nCtnLen : {}", nCtnLen);

        for (int i = 0; i < nCtnLen; i++) {
            int nWaferLen = CimArrayUtils.getSize(in.getWaferSeq());
            for (int j = 0; j < nWaferLen; j++) {
                // -----------------------------------------------------------
                //  Get MachineContainerPosition by Wafer
                // -----------------------------------------------------------
                CimMachineContainerPosition aMachineContainerPosition =
                        aMachineContainerSeq
                                .get(i)
                                .findMachineContainerPositionForWafer(
                                        ObjectIdentifier.fetchValue(in.getWaferSeq().get(j)));
                Validations.check(
                        null == aMachineContainerPosition,
                        retCodeConfig.getNotFoundEquipmentContainerPosition());
                // -----------------------------------------------------------
                //  Set timestamp to MachineContainerPosition
                // -----------------------------------------------------------

                if (CimStringUtils.equals(
                        in.getActionCode(), BizConstant.SP_SLM_ACTIONCODE_PROCESSSTART)
                        || CimStringUtils.equals(
                        in.getActionCode(), BizConstant.SP_PROCESSJOBACTIONSTARTED)) {
                    log.info("actionCode = Process Start. ");
                    aMachineContainerPosition.setProcessStartTimeStamp(
                            objCommon.getTimeStamp().getReportTimeStamp());

                } else if (CimStringUtils.equals(
                        in.getActionCode(), BizConstant.SP_SLM_ACTIONCODE_PROCESSINGCOMP)
                        || CimStringUtils.equals(
                        in.getActionCode(), BizConstant.SP_PROCESSJOBACTIONCOMPLETED)) {
                    log.info("actionCode = Processing Comp. ");
                    aMachineContainerPosition.setProcessCompTimeStamp(
                            objCommon.getTimeStamp().getReportTimeStamp());
                } else {
                    Validations.check(true, retCodeConfig.getInvalidActionCode());
                }

                com.fa.cim.newcore.bo.person.CimPerson aPosPerson =
                        baseCoreFactory.getBO(
                                com.fa.cim.newcore.bo.person.CimPerson.class, objCommon.getUser().getUserID());
                Validations.check(
                        null == aPosPerson, retCodeConfig.getNotFoundPerson(), objCommon.getTransactionID());
                aMachineContainerPosition.setLastClaimedUser(aPosPerson);
                aMachineContainerPosition.setLastClaimedTimeStamp(
                        objCommon.getTimeStamp().getReportTimeStamp());
            }
        }
    }

    @Override
    public void equipmentLotInCassetteAdjust(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, ObjectIdentifier cassetteID) {
        /*********************************************/
        /*  Get equipment and cassette object        */
        /*********************************************/
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == aMachine, retCodeConfig.getNotFoundEqp(), objCommon.getTransactionID());

        /*********************************************/
        /*  Get equipment cassette/lot current info  */
        /*********************************************/
        List<MachineDTO.MachineCassette> strMachineCassetteSeq = aMachine.allCassettes();
        /*********************************************/
        /*  Check input parameter cassette existence */
        /*********************************************/
        MachineDTO.MachineCassette adjustedMachineCassetteInfo = new MachineDTO.MachineCassette();
        int machineCastLen = CimArrayUtils.getSize(strMachineCassetteSeq);
        Boolean castFoundFlag = false;

        for (int castCnt = 0; castCnt < machineCastLen; castCnt++) {
            if (ObjectIdentifier.equalsWithValue(
                    strMachineCassetteSeq.get(castCnt).getCassetteID(), cassetteID)) {
                com.fa.cim.newcore.bo.durable.CimCassette aCassette =
                        baseCoreFactory.getBO(com.fa.cim.newcore.bo.durable.CimCassette.class, cassetteID);
                Validations.check(
                        null == aCassette, retCodeConfig.getNotFoundCassette(), objCommon.getTransactionID());

                /********************************************************************************/
                /*  If exists, get actual lot in cassette information.                          */
                /*  And set other information for update structure from current information.    */
                /********************************************************************************/

                // ----------------------
                // Set cassette Info
                // ----------------------
                adjustedMachineCassetteInfo = strMachineCassetteSeq.get(castCnt);
                int curMachineCastLotLen =
                        CimArrayUtils.getSize(adjustedMachineCassetteInfo.getMachineCassetteLots());

                // ----------------------
                // Get actual lot Info
                // ----------------------
                List<Lot> aLotSequence = aCassette.allLots();
                int actualCastLotLen = CimArrayUtils.getSize(aLotSequence);

                // -------------------------------------
                // Prepare adjusted lot info sequence
                // -------------------------------------
                List<MachineDTO.MachineCassetteLot> adjustedMachineCastLotInfoSeq = new ArrayList<>();

                for (int lotCnt = 0; lotCnt < actualCastLotLen; lotCnt++) {
                    // -----------------------------------------------------------------------
                    // Set LotID and temporary value (operationStartFlag/monitorLotFlag)
                    // * If actual lot in cassette information is not found in equipment,
                    // then operationStartFlag/monitorLotFlag are set false
                    // -----------------------------------------------------------------------
                    MachineDTO.MachineCassetteLot e = new MachineDTO.MachineCassetteLot();
                    com.fa.cim.newcore.bo.product.CimLot cimLot =
                            (com.fa.cim.newcore.bo.product.CimLot) aLotSequence.get(lotCnt);
                    e.setLotID(new ObjectIdentifier(cimLot.getIdentifier(), cimLot.getPrimaryKey()));
                    e.setOperationStartFlag(false);
                    e.setMonitorLotFlag(false);

                    for (int curLotCnt = 0; curLotCnt < curMachineCastLotLen; curLotCnt++) {
                        // -----------------------------------------------------------------------------------------
                        //  If lotID is found in current equipment info, then reset opeStaFlag and
                        // monitorLotFlag
                        // -----------------------------------------------------------------------------------------
                        if (ObjectIdentifier.equalsWithValue(
                                e.getLotID(),
                                adjustedMachineCassetteInfo.getMachineCassetteLots().get(curLotCnt).getLotID())) {
                            e.setOperationStartFlag(
                                    adjustedMachineCassetteInfo
                                            .getMachineCassetteLots()
                                            .get(curLotCnt)
                                            .isOperationStartFlag());
                            e.setMonitorLotFlag(
                                    adjustedMachineCassetteInfo
                                            .getMachineCassetteLots()
                                            .get(curLotCnt)
                                            .isMonitorLotFlag());
                            break;
                        }
                    }
                    adjustedMachineCastLotInfoSeq.add(e);
                }

                // ------------------------
                // Set adjusted Lot Info
                // ------------------------
                adjustedMachineCassetteInfo.setMachineCassetteLots(adjustedMachineCastLotInfoSeq);

                castFoundFlag = true;
                break;
            }
        }

        Validations.check(CimBooleanUtils.isFalse(castFoundFlag), retCodeConfig.getNotFoundCassette());

        /*************************************************/
        /*  Set adjusted lot information for equipment   */
        /*************************************************/
        aMachine.updateCassette(adjustedMachineCassetteInfo);
    }

    @Override
    public Infos.EqpStockerInfo equipmentSLMUTSInfoGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        List<Infos.EqpStockerStatus> eqpStockerStatuses = new ArrayList<>();
        List<Object[]> objs =
                cimJpaRepository.query(
                        "SELECT OMSTOCKER.STOCKER_ID,\n"
                                + "       OMSTOCKER.ID,\n"
                                + "       OMSTOCKER.STOCKER_TYPE,\n"
                                + "       OMSTOCKER.E10_STATE_ID,\n"
                                + "       OMSTOCKER.ACTUAL_STATE_ID,\n"
                                + "       OMSTOCKER.ACTUAL_STATE_RKEY,\n"
                                + "       OMSTOCKER.OHB_Flag,\n"
                                + "       OMSTOCKER.MAX_OHB_CAPACITY\n"
                                + "  FROM OMEQP_FMCOHB, OMEQP, OMSTOCKER\n"
                                + " WHERE OMEQP.EQP_ID = ?1\n"
                                + "   AND OMEQP.ID = OMEQP_FMCOHB.REFKEY\n"
                                + "   AND OMEQP_FMCOHB.STOCKER_ID = OMSTOCKER.STOCKER_ID\n"
                                + " ORDER BY OMEQP_FMCOHB.IDX_NO",
                        ObjectIdentifier.fetchValue(equipmentID));
        if (!CimObjectUtils.isEmpty(objs)) {
            for (int i = 0; i < objs.size(); i++) {
                Object[] objects = objs.get(i);
                Infos.EqpStockerStatus eqpStockerStatus = new Infos.EqpStockerStatus();
                eqpStockerStatus.setStockerID(
                        new ObjectIdentifier(String.valueOf(objects[0]), String.valueOf(objects[1])));
                eqpStockerStatus.setStockerType(String.valueOf(objects[2]));
                eqpStockerStatus.setE10Status(String.valueOf(objects[3]));
                eqpStockerStatus.setStockerStatus(
                        new ObjectIdentifier(String.valueOf(objects[4]), String.valueOf(objects[5])));
                eqpStockerStatus.setOhbFlag(Boolean.valueOf(String.valueOf(objects[6])));
                eqpStockerStatus.setMaxOHBFlag(CimNumberUtils.longValue((Number) objects[7]));
                eqpStockerStatus.setStockerPriority(String.valueOf(i));
                eqpStockerStatuses.add(eqpStockerStatus);
            }
        }
        Infos.EqpStockerInfo eqpStockerInfo = new Infos.EqpStockerInfo();
        eqpStockerInfo.setEqpStockerStatusList(eqpStockerStatuses);
        return eqpStockerInfo;
    }

    @Override
    public List<ObjectIdentifier> equipmentInprocessingDurableControlJobIDGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        List<CimDurableControlJobDO> durableControlJobs =
                cimJpaRepository.query(
                        "SELECT ID, DCJ_ID FROM OMDCJ WHERE EQP_ID = ?1 AND (STATUS <> ?2 AND STATUS <> ?3)",
                        CimDurableControlJobDO.class,
                        ObjectIdentifier.fetchValue(equipmentID),
                        BizConstant.SP_DURABLECONTROLJOBSTATUS_CREATED,
                        BizConstant.SP_DURABLECONTROLJOBSTATUS_DELETE);
        if (CimObjectUtils.isEmpty(durableControlJobs)) return Collections.emptyList();
        return durableControlJobs.stream()
                .map(x -> ObjectIdentifier.build(x.getDurableControlJobID(), x.getId()))
                .collect(Collectors.toList());
    }

    /**
     * description: change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param *                        @param objCommon
     * @param equipmentID
     * @param strPortOperationModeList -
     * @return com.fa.cim.dto.RetCode<Outputs.ObjEquipmentOperationModeCombinationCheck>
     * @author Lin
     * @date 2018/12/29 16:13
     */
    @Override
    public Outputs.ObjEquipmentOperationModeCombinationCheck equipmentOperationModeCombinationCheck(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            List<Infos.PortOperationMode> strPortOperationModeList) {
        Outputs.ObjEquipmentOperationModeCombinationCheck out =
                new Outputs.ObjEquipmentOperationModeCombinationCheck();
        List<String> portGroups = new ArrayList<>();
        List<String> modeChangeTypes = new ArrayList<>();
        out.setPortGroup(portGroups);
        out.setModeChangeType(modeChangeTypes);

        log.info("equipmentOperationModeCombinationCheck");
        log.info(
                "equipmentOperationModeCombinationCheck",
                "Get object reference of Equipment object reference must be retrieved");

        CimMachine aPosMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(aPosMachine == null, retCodeConfig.getNotFoundMachine());
        int lenModeSeq =
                CimObjectUtils.isEmpty(strPortOperationModeList)
                        ? 0
                        : CimArrayUtils.getSize(strPortOperationModeList);
        log.info(
                "equipmentOperationModeCombinationCheck",
                "Get object reference of PosPortResource",
                lenModeSeq);
        List<Infos.PortOperationMode> tmpPortOperationModeSeq = new ArrayList<>();

        int i, j, k;
        for (i = 0; i < lenModeSeq; i++) {
            CimPortResource aPosPort =
                    baseCoreFactory.getBO(CimPortResource.class, strPortOperationModeList.get(i).getPortID());
            Validations.check(CimObjectUtils.isEmpty(aPosPort), retCodeConfig.getNotFoundPortResource());
            CimMachineOperationMode aMachineMode = aPosPort.getMachineOperationMode();
            Validations.check(
                    CimObjectUtils.isEmpty(aMachineMode), retCodeConfig.getNotFoundMachineOperationMode());
            CodeDTO.OperationModeInfo anOperationModeInfo = aMachineMode.getOperationModeInfo();

            Infos.OperationMode operationModes = new Infos.OperationMode();
            operationModes.setOperationMode(
                    new ObjectIdentifier(aMachineMode.getIdentifier(), aMachineMode.getPrimaryKey()));
            operationModes.setOnlineMode(anOperationModeInfo.getOnlineMode());
            operationModes.setDispatchMode(anOperationModeInfo.getDispatchMode());
            operationModes.setAccessMode(anOperationModeInfo.getAccessMode());
            operationModes.setMoveInMode(anOperationModeInfo.getOperationStartMode());
            operationModes.setMoveOutMode(anOperationModeInfo.getOperationCompMode());

            Infos.PortOperationMode portOperationMode = new Infos.PortOperationMode();
            portOperationMode.setPortID(
                    new ObjectIdentifier(aPosPort.getIdentifier(), aPosPort.getPrimaryKey()));
            portOperationMode.setPortGroup(aPosPort.getPortGroup());
            portOperationMode.setOperationMode(operationModes);

            tmpPortOperationModeSeq.add(portOperationMode);
        }
        int lenTmpModeSeq =
                CimObjectUtils.isEmpty(tmpPortOperationModeSeq)
                        ? 0
                        : CimArrayUtils.getSize(tmpPortOperationModeSeq);
        log.info(
                "equipmentOperationModeCombinationCheck", "Check OperationMode Combination", lenTmpModeSeq);
        for (i = 0; i < lenModeSeq; i++) {
            for (j = 0; j < lenTmpModeSeq; j++) {
                if (CimStringUtils.equals(
                        strPortOperationModeList.get(i).getPortID().getValue(),
                        tmpPortOperationModeSeq.get(j).getPortID().getValue())) {
                    log.error(
                            "equipmentOperationModeCombinationCheck",
                            "strPortOperationModeSeq[i].portID == tmpPortOperationModeSeq[j].portID");
                    if (!CimStringUtils.equals(
                            strPortOperationModeList.get(i).getPortGroup(),
                            tmpPortOperationModeSeq.get(j).getPortGroup())) {
                        throw new ServiceException(retCodeConfig.getInvalidInputParam());
                    }
                }
            }
        }
        List<String> tmpPortGroupSeq = new ArrayList<>();
        List<ObjectIdentifier> tmpOperationModeSeq = new ArrayList<>();
        for (i = 0; i < lenModeSeq; i++) {
            int nTmpPortGroupPos = 0;
            Boolean bPortGroupAdded = false;
            int lenGroupSeq = tmpPortGroupSeq.size();
            for (j = 0; j < lenGroupSeq; j++) {
                if (CimStringUtils.equals(
                        strPortOperationModeList.get(i).getPortGroup(), tmpPortGroupSeq.get(j))) {
                    log.error(
                            "equipmentOperationModeCombinationCheck",
                            "strPortOperationModeSeq[i].portGroup == tmpPortGroupSeq[j]");
                    nTmpPortGroupPos = j;
                    bPortGroupAdded = true;
                    break;
                }
            }
            if (CimBooleanUtils.isFalse(bPortGroupAdded)) {
                log.error("equipmentOperationModeCombinationCheck", "bPortGroupAdded = false");
                tmpPortGroupSeq.add(lenGroupSeq, strPortOperationModeList.get(i).getPortGroup());
                tmpOperationModeSeq.add(
                        strPortOperationModeList.get(i).getOperationMode().getOperationMode());
            } else {
                log.error("equipmentOperationModeCombinationCheck", "bPortGroupAdded == TRUE");
                if (!CimStringUtils.equals(
                        strPortOperationModeList.get(i).getOperationMode().getOperationMode().getValue(),
                        tmpOperationModeSeq.get(nTmpPortGroupPos).getValue())) {
                    throw new ServiceException(retCodeConfig.getInvalidPortModeCombination());
                }
            }
        }
        log.error("equipmentOperationModeCombinationCheck", "Check OperationMode Change Type");
        lenModeSeq = CimArrayUtils.getSize(strPortOperationModeList);
        lenTmpModeSeq = CimArrayUtils.getSize(tmpPortOperationModeSeq);
        for (i = 0; i < lenModeSeq; i++) {
            for (j = 0; j < lenModeSeq; j++) {
                String modeChangeType = null;
                if (CimStringUtils.equals(
                        strPortOperationModeList.get(i).getPortID().getValue(),
                        tmpPortOperationModeSeq.get(j).getPortID().getValue())) {
                    log.error(
                            "equipmentOperationModeCombinationCheck",
                            "strPortOperationModeSeq[i].portID == tmpPortOperationModeSeq[j].portID");
                    if (!CimStringUtils.equals(
                            strPortOperationModeList.get(i).getOperationMode().getOnlineMode(),
                            tmpPortOperationModeSeq.get(j).getOperationMode().getOnlineMode())
                            && !CimStringUtils.equals(
                            modeChangeType, BizConstant.SP_EQP_OPERATION_ONLINEMODE_CHANGE)) {
                        log.error(
                                "equipmentOperationModeCombinationCheck",
                                "set modeChangeType = SP_Eqp_Operation_OnlineMode_Change");
                        modeChangeType = BizConstant.SP_EQP_OPERATION_ONLINEMODE_CHANGE;
                    }
                    if (CimStringUtils.equals(
                            strPortOperationModeList.get(i).getOperationMode().getOnlineMode(),
                            tmpPortOperationModeSeq.get(j).getOperationMode().getOnlineMode())
                            && !CimStringUtils.equals(
                            strPortOperationModeList.get(i).getOperationMode().getAccessMode(),
                            tmpPortOperationModeSeq.get(j).getOperationMode().getAccessMode())
                            && !CimStringUtils.equals(
                            modeChangeType, BizConstant.SP_EQP_OPERATION_ONLINEMODE_CHANGE)
                            && !CimStringUtils.equals(
                            modeChangeType, BizConstant.SP_EQP_OPERATION_ACCESSMODE_CHANGE)) {
                        log.error(
                                "equipmentOperationModeCombinationCheck",
                                "set modeChangeType = SP_Eqp_Operation_AccessMode_Change");
                        modeChangeType = BizConstant.SP_EQP_OPERATION_ACCESSMODE_CHANGE;
                    }
                    if (CimStringUtils.equals(
                            strPortOperationModeList.get(i).getOperationMode().getOnlineMode(),
                            tmpPortOperationModeSeq.get(j).getOperationMode().getOnlineMode())
                            && CimStringUtils.equals(
                            strPortOperationModeList.get(i).getOperationMode().getAccessMode(),
                            tmpPortOperationModeSeq.get(j).getOperationMode().getAccessMode())
                            && !CimStringUtils.equals(
                            modeChangeType, BizConstant.SP_EQP_OPERATION_ONLINEMODE_CHANGE)
                            && !CimStringUtils.equals(
                            modeChangeType, BizConstant.SP_EQP_OPERATION_ACCESSMODE_CHANGE)) {
                        log.error(
                                "equipmentOperationModeCombinationCheck",
                                "set modeChangeType = SP_Eqp_Operation_OtherMode_Change");
                        modeChangeType = BizConstant.SP_EQP_OPERATION_OTHERMODE_CHANGE;
                    }
                    Boolean bPortGroupAdded = false;
                    int lenPortGroup = CimArrayUtils.getSize(out.getPortGroup());
                    for (k = 0; k < lenPortGroup; k++) {
                        if (CimStringUtils.equals(
                                out.getPortGroup().get(k), tmpPortOperationModeSeq.get(j).getPortGroup())) {
                            log.error(
                                    "equipmentOperationModeCombinationCheck",
                                    "portGroup[k] == tmpPortOperationModeSeq[j].portGroup");
                            bPortGroupAdded = true;
                            break;
                        }
                    }
                    if (CimBooleanUtils.isFalse(bPortGroupAdded)) {
                        log.error("equipmentOperationModeCombinationCheck", "bPortGroupAdded == false");
                        portGroups.add(strPortOperationModeList.get(i).getPortGroup());
                        modeChangeTypes.add(modeChangeType);
                    }
                    break;
                }
            }
        }
        log.error(
                "equipmentOperationModeCombinationCheck",
                "Check requested Operation mode change type combination");
        Boolean bModeChangeTypeOnline = false;
        int lenChgType = CimArrayUtils.getSize(out.getModeChangeType());
        for (i = 0; i < lenChgType; i++) {
            if (CimStringUtils.equals(
                    out.getModeChangeType().get(i), BizConstant.SP_EQP_OPERATION_ONLINEMODE_CHANGE)) {
                log.error(
                        "equipmentOperationModeCombinationCheck",
                        "modeChangeType[i] == SP_Eqp_Operation_OnlineMode_Change");
                bModeChangeTypeOnline = true;
                break;
            }
        }
        int nChangeOperationModeSeqLen = strPortOperationModeList.size();
        if (CimBooleanUtils.isTrue(bModeChangeTypeOnline) && nChangeOperationModeSeqLen > 1) {
            log.error("equipmentOperationModeCombinationCheck", "bModeChangeTypeOnline == TRUE");
            for (i = 1; i < nChangeOperationModeSeqLen; i++) {
                if (!CimStringUtils.equals(
                        strPortOperationModeList.get(0).getOperationMode().getOnlineMode(),
                        strPortOperationModeList.get(i).getOperationMode().getOnlineMode())) {
                    throw new ServiceException(retCodeConfig.getInvalidPortModeCombination());
                }
            }
        }
        return out;
    }

    @Override
    public String equipmentGetTypeDR(Infos.ObjCommon objCommon, ObjectIdentifier eqipmentID) {
        CimMachine cimMachine = baseCoreFactory.getBO(CimMachine.class, eqipmentID);
        Validations.check(
                cimMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), eqipmentID.getValue()));
        return cimMachine.getMachineType();
    }

    @Override
    public void equipmentUsageCountUpdateForPostProc(
            Infos.ObjCommon objCommon, Inputs.ObjEquipmentUsageCountUpdateForPostProcIn in) {
        /*------------------------*/
        /*   Get Machine Object   */
        /*------------------------*/
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, in.getEquipmentID());
        Validations.check(
                aMachine == null,
                new OmCode(retCodeConfig.getNotFoundEqp(), in.getEquipmentID().getValue()));
        /*------------------------------*/
        /*   Update Usage Information   */
        /*------------------------------*/
        /*===== runWafer count =====*/
        if (in.getWaferCnt() > 0) {
            Long runWaferCnt = aMachine.getRunWafer().longValue();
            if (CimStringUtils.equals(in.getAction(), BizConstant.SP_EQPATTR_UPDATE_ACTION_INCREASE)) {
                runWaferCnt += in.getWaferCnt();
            } else if (CimStringUtils.equals(
                    in.getAction(), BizConstant.SP_EQPATTR_UPDATE_ACTION_DECREASE)) {
                runWaferCnt -= in.getWaferCnt();
            }
            aMachine.setRunWafer(runWaferCnt.intValue());
        }
        /*===== operationStart count =====*/
        if (in.getOpeStartCnt() > 0) {
            Integer opeStartCnt = aMachine.getOperationStart();
            if (CimStringUtils.equals(in.getAction(), BizConstant.SP_EQPATTR_UPDATE_ACTION_INCREASE)) {
                opeStartCnt += (int) in.getOpeStartCnt();
            } else if (CimStringUtils.equals(
                    in.getAction(), BizConstant.SP_EQPATTR_UPDATE_ACTION_DECREASE)) {
                opeStartCnt -= (int) in.getOpeStartCnt();
            }
            aMachine.setOperationStart(opeStartCnt);
        }
    }

    @Override
    public List<Outputs.NPWReserveInfo> equipmentNPWReserveInfoGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        //  Initialize
        List<Outputs.NPWReserveInfo> npwReserveInfosOut = new ArrayList<>();
        String sql =
                " SELECT EQP_CATEGORY\n"
                        + "                 FROM   OMEQP\n"
                        + "                 WHERE  EQP_ID =  ?";

        CimEquipmentDO eqpCate =
                cimJpaRepository.queryOne(sql, CimEquipmentDO.class, equipmentID.getValue());
        Validations.check(
                eqpCate == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));

        if (!CimStringUtils.equals(
                eqpCate.getEquipmentCategory(), BizConstant.SP_MC_CATEGORY_INTERNALBUFFER)) {
            //  get NPWReserve Info for Fixed Buffer
            log.info("Get NPWReserve Info for Fixed Buffer. {} ", equipmentID.getValue());
            sql =
                    "SELECT DISPATCH_LOAD_CARRIER_ID,\n"
                            + "                            DISPATCH_LOAD_CARRIER_RKEY,\n"
                            + "                            PORT_ID,\n"
                            + "                            PORT_LOAD_PURPOSE\n"
                            + "                     FROM   OMPORT\n"
                            + "                     WHERE  DISPATCH_LOAD_CARRIER_ID != ''\n"
                            + "                     AND    (    PORT_LOAD_PURPOSE!= ? \n"
                            + "                             AND PORT_LOAD_PURPOSE!= ? \n"
                            + "                             AND PORT_LOAD_PURPOSE!= ? \n"
                            + "                             AND PORT_LOAD_PURPOSE!= ? )\n"
                            + "                     AND    EQP_ID = ? ";

            List<CimPortDO> portDOList =
                    cimJpaRepository.query(
                            sql,
                            CimPortDO.class,
                            BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT,
                            BizConstant.SP_LOADPURPOSETYPE_PROCESSMONITORLOT,
                            BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE,
                            BizConstant.SP_LOADPURPOSETYPE_ANY,
                            equipmentID.getValue());

            for (CimPortDO portDO : portDOList) {
                sql =
                        "SELECT COUNT(OMCJ_CARRIER.CARRIER_ID)\n"
                                + "                         FROM   OMCJ,\n"
                                + "                                OMCJ_CARRIER\n"
                                + "                         WHERE  OMCJ.EQP_ID= ? \n"
                                + "                         AND    OMCJ.ID = OMCJ_CARRIER.REFKEY\n"
                                + "                         AND    OMCJ_CARRIER.CARRIER_ID = ? ";

                long countCJ =
                        cimJpaRepository.count(sql, equipmentID.getValue(), portDO.getLoadDispatchCassetteID());

                if (countCJ > 0) {
                    log.info(
                            "The cast {} is reserved for start reservation. Not for NPW reservation. continue !!",
                            portDO.getLoadDispatchCassetteID());
                    continue;
                }

                Outputs.NPWReserveInfo npwReserveInfo = new Outputs.NPWReserveInfo();
                npwReserveInfo.setEquipmentID(equipmentID);
                npwReserveInfo.setCassetteID(
                        new ObjectIdentifier(
                                portDO.getLoadDispatchCassetteID(), portDO.getLoadDispatchCassetteObj()));
                npwReserveInfo.setReservedLoadPortID(new ObjectIdentifier(portDO.getPortID()));
                npwReserveInfo.setLoadPurposeType(portDO.getLoadPurposeType());

                npwReserveInfosOut.add(npwReserveInfo);
            }
        } else {
            //  get NPWReserve Info for Internal Buffer
            sql =
                    "SELECT A.RSV_MTRL_ID,\n"
                            + "                            A.RSV_LOAD_PORT_ID,\n"
                            + "                            B.BUFFRES_ID\n"
                            + "                     FROM   OMMATLOC A,\n"
                            + "                            OMEQPBUFFRES B\n"
                            + "                     WHERE  A.ENTITY_MGR = B.ID\n"
                            + "                     AND    A.RSV_MTRL_ID IS NOT NULL\n"
                            + "                     AND    B.EQP_ID = ?\n"
                            + "                     AND    (   B.BUFFRES_TYPE = ? \n"
                            + "                             OR B.BUFFRES_TYPE = ? \n"
                            + "                             OR B.BUFFRES_TYPE = ? )\n"
                            + "                     AND    A.CJ_ID IS NULL";

            List<Object[]> infoList =
                    cimJpaRepository.query(
                            sql,
                            equipmentID.getValue(),
                            BizConstant.SP_LOADPURPOSETYPE_FILLERDUMMY,
                            BizConstant.SP_LOADPURPOSETYPE_SIDEDUMMYLOT,
                            BizConstant.SP_LOADPURPOSETYPE_WAITINGMONITORLOT);

            for (Object[] info : infoList) {
                Outputs.NPWReserveInfo npwReserveInfo = new Outputs.NPWReserveInfo();
                npwReserveInfo.setEquipmentID(equipmentID);
                npwReserveInfo.setCassetteID(new ObjectIdentifier(CimObjectUtils.toString(info[0])));
                npwReserveInfo.setReservedLoadPortID(
                        new ObjectIdentifier(CimObjectUtils.toString(info[1])));
                npwReserveInfo.setLoadPurposeType(CimObjectUtils.toString(info[2]));

                npwReserveInfosOut.add(npwReserveInfo);
            }
        }
        return npwReserveInfosOut;
    }

    @Override
    public Long eqpMonitorJobretryCountIncrement(
            Infos.ObjCommon objCommon, ObjectIdentifier eqpMonitorID, ObjectIdentifier eqpMonitorJobID) {
        // --------------------//
        // Trace InParameters //
        // --------------------//
        log.debug("in para eqpMonitorID : {}", eqpMonitorID);
        log.debug("in para eqpMonitorJobID : {}", eqpMonitorJobID);

        // --------------------------------//
        //  Get Auto Monitor Object  //
        // --------------------------------//
        CimEqpMonitor anEqpMonitor = baseCoreFactory.getBO(CimEqpMonitor.class, eqpMonitorID);

        CimEqpMonitorJob anEqpMonitorJob =
                baseCoreFactory.getBO(CimEqpMonitorJob.class, eqpMonitorJobID);
        ;

        Long nRetryCount = 0L;

        nRetryCount = anEqpMonitorJob.getRetryCount();

        nRetryCount++;

        log.debug("nRetryCount : {}", nRetryCount);
        anEqpMonitorJob.setRetryCount(nRetryCount);
        return nRetryCount;
    }

    @Override
    public List<ObjectIdentifier> eqpMonitorJobLotRemove(
            Infos.ObjCommon objCommon, ObjectIdentifier eqpMonitorID, ObjectIdentifier eqpMonitorJobID) {
        // --------------------//
        // Trace InParameters //
        // --------------------//
        log.debug("in para eqpMonitorID : {}", eqpMonitorID);
        log.debug("in para eqpMonitorJobID : {}", eqpMonitorJobID);

        // --------------------------------//
        //  Get Auto Monitor Object  //
        // --------------------------------//
        CimEqpMonitor anEqpMonitor = baseCoreFactory.getBO(CimEqpMonitor.class, eqpMonitorID);

        CimEqpMonitorJob anEqpMonitorJob =
                baseCoreFactory.getBO(CimEqpMonitorJob.class, eqpMonitorJobID);
        ;

        List<MachineDTO.EqpMonitorLotInfo> lotInfoSeq = anEqpMonitorJob.allEqpMonitorLots();
        List<ObjectIdentifier> lots = new ArrayList<>();
        for (int i = 0; i < CimArrayUtils.getSize(lotInfoSeq); i++) {
            lots.add(lotInfoSeq.get(i).getLotID());
        }

        anEqpMonitorJob.removeAllEqpMonitorLots();
        anEqpMonitorJob.setLastClaimedTimeStamp(objCommon.getTimeStamp().getReportTimeStamp());

        CimPerson aPosPerson = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());
        anEqpMonitorJob.setLastClaimedUser(aPosPerson);
        return lots;
    }

    @Override
    public void equipmentArrivalCarrierCancelForInternalBuffer(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            ObjectIdentifier controlJobID,
            List<Infos.NPWXferCassette> strNPWXferCassette) {
        /*-------------------------------------------------*/
        /*   Clear MaterialLocations(shelf of equipment)   */
        /*-------------------------------------------------*/
        log.info(
                "equipmentArrivalCarrierCancelForInternalBuffer: Clear MaterialLocations(shelf of equipment)");
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(aMachine == null, retCodeConfig.getNotFoundEqp());
        List<BufferResource> bufferResources = aMachine.allBufferResources();
        for (BufferResource bufferResource : bufferResources) {
            CimBufferResource aBufferResource = (CimBufferResource) bufferResource;
            Validations.check(aBufferResource == null, retCodeConfig.getNotFoundBufferResource());
            List<MaterialLocation> materialLocations = aBufferResource.allMaterialLocations();
            for (MaterialLocation materialLocation : materialLocations) {
                CimMaterialLocation aMaterialLocation = (CimMaterialLocation) materialLocation;
                Validations.check(aMaterialLocation == null, retCodeConfig.getNotFoundMaterialLocation());
                Material aMaterial = aMaterialLocation.getAllocatedMaterial();
                CimCassette aReserveCassette = (CimCassette) aMaterial;
                if (aReserveCassette == null) {
                    log.info("equipmentArrivalCarrierCancelForInternalBuffer: aReservedCassette is null");
                    continue;
                }
                String reservedCassetteIdent = aReserveCassette.getIdentifier();
                CimPortResource aPortResource = aMaterialLocation.getReservedLoadPort();
                log.info(
                        "equipmentArrivalCarrierCancelForInternalBuffer: aMaterialLocation->getReservedLoadPort is Called");
                if (aPortResource == null) {
                    log.info("equipmentArrivalCarrierCancelForInternalBuffer: aPortResource == null");
                    continue;
                }
                for (int i = 0; i < CimArrayUtils.getSize(strNPWXferCassette); i++) {
                    if (ObjectIdentifier.equalsWithValue(
                            reservedCassetteIdent, strNPWXferCassette.get(i).getCassetteID())) {
                        aMaterialLocation.materialSent();
                        aMaterialLocation.makeNotAllocated();
                        aMaterialLocation.setReservedLoadPort(null);
                        aMaterialLocation.setReservedUnloadPort(null);
                    }
                }
            }
        }
    }

    @Override
    public void equipmentContainerPositionProcessJobSet(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            List<Infos.ProcessJobMapInfo> strProcessJobMapInfoSeq) {
        // -------------------------------
        //  Get Machine Object
        // -------------------------------
        CimMachine equipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(equipment == null, retCodeConfig.getNotFoundEquipment());

        // -------------------------------
        //  Get all MachineContainers
        // -------------------------------
        List<com.fa.cim.newcore.bo.machine.CimMachineContainer> aMachineContainerSeq =
                equipment.allMachineContainers();
        for (com.fa.cim.newcore.bo.machine.CimMachineContainer equipmentContainer :
                aMachineContainerSeq) {
            for (Infos.ProcessJobMapInfo processJobMapInfo : strProcessJobMapInfoSeq) {
                List<ObjectIdentifier> waferSeq = processJobMapInfo.getWaferSeq();
                for (ObjectIdentifier waferID : waferSeq) {
                    // ------------------------------------------------
                    //  Get MachineContainerPosition by Wafer
                    // ------------------------------------------------
                    com.fa.cim.newcore.bo.machine.CimMachineContainerPosition equipmentContainerPosition =
                            equipmentContainer.findMachineContainerPositionForWafer(
                                    ObjectIdentifier.fetchValue(waferID));
                    Validations.check(
                            equipmentContainerPosition == null,
                            retCodeConfig.getNotFoundEquipmentContainerPosition());

                    // ------------------------------------------------
                    //  Set ProcessJob to MachineContainerPosition
                    // ------------------------------------------------
                    equipmentContainerPosition.setProcessJob(processJobMapInfo.getProcessJobID());
                }
            }
        }
    }

    @Override
    public Results.WhatNextLotListResult equipmentLotsWhatNextDR(
            Inputs.ObjEquipmentLotsWhatNextDRIn objEquipmentLotsWhatNextDRIn, Infos.ObjCommon objCommon) {
        // result  initialization

        StopWatch stopWatch = new StopWatch();

        Results.WhatNextLotListResult out = new Results.WhatNextLotListResult();
        List<Infos.WhatNextAttributes> tmpWhatNextAttributes = new ArrayList<>();
        // ---------------------------------------------
        //  Set input parameters into local variable
        // ---------------------------------------------
        ObjectIdentifier equipmentID = objEquipmentLotsWhatNextDRIn.getEquipmentID();
        String selectCriteria = objEquipmentLotsWhatNextDRIn.getSelectCriteria();
        log.info("equipmentID = {}", equipmentID);
        log.info("selectCriteria = {}", selectCriteria);
        boolean adoptFPCInfo = false;

        String environmentVariable = StandardProperties.OM_DOC_ENABLE_FLAG.getValue();
        if (BizConstant.CONSTANT_QUANTITY_ONE.equals(environmentVariable)) {
            log.info("Use DOC Infomation.");
            adoptFPCInfo = true;
        }
        log.info("environmentVariable = {}", environmentVariable);

        List<Infos.StartSeqNo> strEqpMonJobMinStartSeqNoSeq = new ArrayList<>();

        List<Infos.EqpMonitorDetailInfo> eqpMonitorListGetDROut = null;
        if (BizConstant.SP_DP_SELECTCRITERIA_EQPMONKIT.equals(selectCriteria)
                || BizConstant.SP_DP_SELECTCRITERIA_EQPMONNOKIT.equals(selectCriteria)) {
            log.info("selectCriteria is EqpMonKit or EqpMonNoKit, prepare EqpMonitor information.");
            Inputs.ObjEqpMonitorListGetDRIn eqpMonitorListGetDRIn = new Inputs.ObjEqpMonitorListGetDRIn();
            eqpMonitorListGetDRIn.setEquipmentID(objEquipmentLotsWhatNextDRIn.getEquipmentID());
            eqpMonitorListGetDRIn.setEqpMonitorID(objEquipmentLotsWhatNextDRIn.getEqpMonitorID());
            eqpMonitorListGetDROut = this.eqpMonitorListGetDR(eqpMonitorListGetDRIn, objCommon);
        }

        ObjectIdentifier inhibitMachineRecipe = null;
        String strSearchCondition = StandardProperties.OM_CONSTRAINT_CHK_WITH_SEARCH.getValue();
        int searchCondition =
                CimStringUtils.isEmpty(strSearchCondition) ? 0 : Integer.parseInt(strSearchCondition);
        log.info("searchCondition {}", searchCondition);
        log.info("searchCondition {}", strSearchCondition);
        // -------------------------------------
        // Step 1 - select Machine information
        // -------------------------------------
        stopWatch.start("What's Next - Step 1 - select Machine information");
        List<Object[]> equipmentInfo =
                cimJpaRepository.query(
                        "SELECT OMEQP.ID, "
                                + // 0
                                "                        OMEQP.LAST_USED_RECIPE_ID, "
                                + // 1
                                "                        OMEQP.LAST_USED_RECIPE_RKEY, "
                                + // 2
                                "                        OMEQP.MAX_BATCH_SIZE, "
                                + // 3
                                "                        OMEQP.MIN_BATCH_SIZE, "
                                + // 4
                                "                        OMEQP.DISP_RKEY, "
                                + // 5
                                "                        OMEQP.EQP_STATE_ID, "
                                + // 6
                                "                        OMEQP.EQP_STATE_RKEY, "
                                + // 7
                                "                        OMEQP.RTCL_NEED_FLAG, "
                                + // 8
                                "                        OMEQP.MULTI_RECIPE_CAPABLE, "
                                + // 9
                                "                        OMEQP.EQP_CATEGORY "
                                + // 10
                                "                 FROM   OMEQP "
                                + "                 WHERE  OMEQP.EQP_ID = ?1",
                        equipmentID.getValue());

        Validations.check(null == equipmentInfo, retCodeConfig.getNotFoundEqp());

        equipmentID.setReferenceKey(CimObjectUtils.toString(equipmentInfo.get(0)[0]));
        out.setEquipmentID(
                new ObjectIdentifier(
                        equipmentID.getValue(), CimObjectUtils.toString(equipmentInfo.get(0)[0])));
        out.setEquipmentCategory(CimObjectUtils.toString(equipmentInfo.get(0)[10]));

        // pass variables
        String dispatcherObj = CimObjectUtils.toString(equipmentInfo.get(0)[5]);
        String eqpCurStateID = CimObjectUtils.toString(equipmentInfo.get(0)[6]);
        String eqpCurStateObj = CimObjectUtils.toString(equipmentInfo.get(0)[7]);
        Boolean eqpReticlReq =
                CimBooleanUtils.getBoolean(CimObjectUtils.toString(equipmentInfo.get(0)[8]));
        String eqpMultiRcpCapa = CimObjectUtils.toString(equipmentInfo.get(0)[9]);

        String envVariable = StandardProperties.OM_UPDATE_LAST_USED_RECIPE.getValue();
        log.info("environmentVariable = {}", envVariable);

        if (!BizConstant.CONSTANT_QUANTITY_ONE.equals(environmentVariable)) {
            log.info("set recipeID");
            out.setLastRecipeID(
                    new ObjectIdentifier(
                            CimObjectUtils.toString(equipmentInfo.get(0)[1]),
                            CimObjectUtils.toString(equipmentInfo.get(0)[2])));
        }

        out.setProcessRunSizeMaximum(Integer.valueOf(CimObjectUtils.toString(equipmentInfo.get(0)[3])));
        out.setProcessRunSizeMinimum(Integer.valueOf(CimObjectUtils.toString(equipmentInfo.get(0)[4])));

        boolean bondingEqpFlag = false;
        if (CIMStateConst.CIM_MC_CATEGORY_WAFER_BONDING.equals(out.getEquipmentCategory())) {
            log.info("Equipment Category is SP_Mc_Category_WaferBonding");
            bondingEqpFlag = true;
        }
        stopWatch.stop();

        // -------------------------------------
        // Step 2 - select Dispatching Rule information
        // -------------------------------------
        stopWatch.start("What's Next - Step 2 - select Dispatching Rule information");
        List<Object> dispatchParam =
                cimJpaRepository.queryOneColumn(
                        "SELECT OMWNXT.WNXT_RULE_EXPR "
                                + "                 FROM   OMWNXT "
                                + "                 WHERE  OMWNXT.ID = ?1",
                        dispatcherObj);
        if (null == dispatchParam) {
            throw new ServiceException(retCodeConfig.getNotFoundEqpDispatcher());
        }
        log.info("dispatch params = {}", dispatchParam.get(0));
        out.setDispatchRule(CimObjectUtils.toString(dispatchParam.get(0)));
        stopWatch.stop();

        stopWatch.start("What's Next - Step 3 - Check Some rule about chamber,EQP state etc.");
        // -------------------------------------
        // check machine has chamber or not
        // -------------------------------------
        Boolean bMultiChamberMachineFlag = false;
        Boolean saveMultiChamberMachineFlag = false;
        long nProcessResourceCount = 0;

        long totalCount;
        List<Infos.WhatNextChamberInfoInfo> tmpChamberInfo = new ArrayList<>();
        totalCount = cimJpaRepository.count(
                        "SELECT COUNT(OMPROCRES.EQP_ID) FROM OMPROCRES WHERE OMPROCRES.EQP_ID = ?1",
                        equipmentID.getValue());
        if (0 < totalCount) {
            log.info("The equipment has MultiChamber");
            int maxTotal = BizConstant.SP_MAX_CHAMBER_LEN;
            if (maxTotal < totalCount) {
                log.info(
                        "Chamber count is over SP_MAX_CHAMBER_LEN(Default 20). Adjust it to SP_MAX_CHAMBER_LEN.");
                totalCount = maxTotal;
            }
            bMultiChamberMachineFlag = true;
            saveMultiChamberMachineFlag = true;
            nProcessResourceCount = totalCount;
        }
        // -------------------------------------
        // check Conditional Available condition
        // and if machine is multi chamber type,
        // collect chamber information here.
        // -------------------------------------
        boolean bConditionalAvailableFlagForChamber = false;
        boolean bConditionalAvailableFlagForEqp = false;
        boolean bMachineIsAvailableForLot = false;
        List<String> availableSubLotTypesForEqp = new ArrayList<>();
        // ----------------------------------------
        // Check Eqp's chamber available State
        // ----------------------------------------
        if (bMultiChamberMachineFlag) {
            String sql =
                    " SELECT OMPROCRES.ID,\n"
                            + "        OMPROCRES.PROCRES_ID,\n"
                            + "        OMPROCRES.EQP_STATE_ID,\n"
                            + "        OMPROCRES.EQP_STATE_RKEY,\n"
                            + "        OMEQPST.EQP_AVAIL_FLAG,\n"
                            + "        OMEQPST.COND_AVAIL_FLAG\n"
                            + "   FROM OMPROCRES, OMEQPST\n"
                            + "  WHERE OMEQPST.EQP_STATE_ID = OMPROCRES.EQP_STATE_ID\n"
                            + "    AND OMPROCRES.EQP_ID = ?1 ";
            List<Object[]> eqpChamberQuery = cimJpaRepository.query(sql, equipmentID.getValue());
            if (!CimArrayUtils.isEmpty(eqpChamberQuery)) {
                for (Object[] objects : eqpChamberQuery) {
                    Infos.WhatNextChamberInfoInfo whatNextChamberInfoInfo =
                            new Infos.WhatNextChamberInfoInfo();
                    whatNextChamberInfoInfo.setChamberID(objects[1].toString());
                    whatNextChamberInfoInfo.setCurrentStateID(objects[2].toString());
                    whatNextChamberInfoInfo.setCurrentStateObjRef(objects[3].toString());
                    boolean availableFlag = CimStringUtils.equals("1", objects[4].toString());
                    whatNextChamberInfoInfo.setAvailableFlag(availableFlag);
                    boolean conditionalAvailable = CimStringUtils.equals("1", objects[5].toString());
                    whatNextChamberInfoInfo.setConditionalAvailable(conditionalAvailable);
                    tmpChamberInfo.add(whatNextChamberInfoInfo);
                    if (conditionalAvailable) {
                        log.info("conditionalAvailable == TRUE");
                        bConditionalAvailableFlagForChamber = true;
                    }
                }
            }
        }

        // -----------------------------------
        // Check available State Eqp itself
        // -----------------------------------
        String sql =
                "SELECT OMEQPST.ID, OMEQPST.EQP_AVAIL_FLAG, OMEQPST.COND_AVAIL_FLAG\n"
                        + "  FROM OMEQPST\n"
                        + " WHERE OMEQPST.ID = ?1";
        List<Object[]> eqpSTQuery = cimJpaRepository.query(sql, eqpCurStateObj);
        boolean condtnAvailableFlag = false;
        boolean availableFlag = false;
        if (!CimArrayUtils.isEmpty(eqpSTQuery)) {
            if (1 < CimArrayUtils.getSize(eqpSTQuery)) {
                throw new ServiceException(retCodeConfig.getError());
            }
            condtnAvailableFlag = CimStringUtils.equals("1", eqpSTQuery.get(0)[2].toString());
            availableFlag = CimStringUtils.equals("1", eqpSTQuery.get(0)[1].toString());
        }
        if (condtnAvailableFlag) {
            // --------------------------------------------
            //  Eqp is conditional available
            //  Get all subLotTypes
            // --------------------------------------------
            log.info("OMEQPST.COND_AVAIL_FLAG = TRUE");
            bConditionalAvailableFlagForEqp = true;
            //   List<CimEquipmentStateSltDO> equipmentStateSlts =
            // equipmentStateCore.findEquipmentStateSltByRefKey(eqpSTQuery.get(0)[0].toString());
            List<Object> eqpStateSubLotTypeList =
                    cimJpaRepository.queryOneColumn(
                            " SELECT SUB_LOT_TYPE FROM OMEQPST_SLTYP WHERE REFKEY = ?1",
                            eqpSTQuery.get(0)[0].toString());
            if (!CimArrayUtils.isEmpty(eqpStateSubLotTypeList)) {
                for (Object equipmentStateSlt : eqpStateSubLotTypeList) {
                    availableSubLotTypesForEqp.add(CimObjectUtils.toString(equipmentStateSlt));
                }
            }
        } else {
            // ---------------------------------------------------------------
            //  Eqp is available for all Lots or not available for all Lots
            // ---------------------------------------------------------------
            bConditionalAvailableFlagForEqp = false;
            bMachineIsAvailableForLot = availableFlag;
            log.info("bMachineIsAvailableForLot = {}", bMachineIsAvailableForLot);
            if (!bMachineIsAvailableForLot) {
                // ------------------------------------------------------------------------------------------------
                // If select criteria is "SP_DP_SelectCriteria_CanBeProcessed" or
                // "SP_DP_SelectCriteria_Auto3",
                // then it means all Lots are NOT operable on this eqp.
                // What'sNext Process is not necessary to continue any more.
                // ------------------------------------------------------------------------------------------------
                if (BizConstant.SP_DP_SELECTCRITERIA_CANBEPROCESSED.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_EQPMONNOKIT.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_AUTO3.equals(selectCriteria)) return out;
            }
        }

        stopWatch.stop();

        // ----------------------------------------------
        // Use Framework Method in order to retrieve
        // lot Sequence which is sorted by sort logic
        // ----------------------------------------------
        stopWatch.start("What's Next - Step 4 - Get the Candidate Lot by Core Methods");
        CimDispatcher aDispatcher = baseCoreFactory.getBO(CimDispatcher.class, dispatcherObj);
        Validations.check(
                CimObjectUtils.isEmpty(aDispatcher), retCodeConfig.getNotFoundEqpDispatcher());

        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, out.getEquipmentID());

        List<DispatcherDTO.DispatchDecision> aDispatchDecisionSequence;
        if (BizConstant.SP_DP_SELECTCRITERIA_HOLD.equals(selectCriteria)) {
            log.info("DP_SELECTCRITERIA_HOLD == selectCriteria");
            aDispatchDecisionSequence = aDispatcher.whatNextHoldLotForMachine(aMachine);
        } else {
            log.info("DP_SELECTCRITERIA_HOLD != selectCriteria");

            aDispatchDecisionSequence = aDispatcher.whatNextForMachine(aMachine);
            log.info("aDispatchDecisionSequence = {}", aDispatchDecisionSequence);
        }
        stopWatch.stop();

        // ------------------------------------------
        // set length of output lot info structure
        // Initiate parameters for output lot info.
        // ------------------------------------------
        stopWatch.start("What's Next - Step 5 - Loop CandidateLot");
        int nCandidateLotCount = CimArrayUtils.getSize(aDispatchDecisionSequence);
        log.info("nCandidateLotCount : " + nCandidateLotCount);
        List<Inputs.ObjEntityInhibiteffectiveForLotGetDRIn> entityInhibiteffectiveForLotGetDRIns =
                new ArrayList<>();
        List<String> subLotTypeSeq = new ArrayList<>();
        List<String> reticleSetSeq = new ArrayList<>();
        List<Boolean> fPCApplied = new ArrayList<>();
        int nWhatNextLotCount = 0;
        List<Infos.WhatNextAttributes> tmpWhatNextAttributesForCheck = new ArrayList<>();
        List<Boolean> FPCAppliedForCheck = new ArrayList<>();
        List<Boolean> inhibitCollectedBeforeContinue = new ArrayList<>();
        List<String> subLotTypeSeqForCheck = new ArrayList<>();
        List<String> reticleSetSeqForCheck = new ArrayList<>();
        List<Boolean> bLotHasAssignedMRecipeSeq = new ArrayList<>();
        Map<String, Object> durableSubStatusList = new HashMap<>();
        boolean bReticleGroupListQueryDone = false;
        int nWhatNextLotCountForCheck = 0;
        List<Infos.DefaultRecipeSetting> strDefaultRecipeSetSeq = new ArrayList<>();
        List<Infos.FoundReticle> eqpInReticleSeq = new ArrayList<>();
        int eqpInReticleCnt = 0;
        for (int i = 0; i < nCandidateLotCount; i++) {
            bLotHasAssignedMRecipeSeq.add(true);
        }
        String tmpFPCCategory = null;
        for (int i = 0; i < nCandidateLotCount; i++) {
            int size = CimArrayUtils.getSize(tmpWhatNextAttributes);

            log.info("Loop for WIP Lot start. round {}", i);
            bMultiChamberMachineFlag = saveMultiChamberMachineFlag;
            // -------------------------------------
            // select lot info
            // -------------------------------------
            if (null == aDispatchDecisionSequence.get(i).getActivity()) {
                throw new ServiceException(retCodeConfig.getError());
            }
            ProcessDTO.ProcessActivity processActivity =
                    (ProcessDTO.ProcessActivity) aDispatchDecisionSequence.get(i).getActivity();

            // -------------------------------------
            // select lot info
            // -------------------------------------
            ObjectIdentifier tmpLotID = processActivity.getProcessMaterialGroups().get(0);

            // CimLotDO lot = lotCore.findLotByLotID(tmpLotID);
            CimLot aLot = baseCoreFactory.getBO(CimLot.class, tmpLotID);
            log.info("lot: {}", aLot);
            if (null == aLot) {
                continue;
            }
            // --------------------------
            // lot Status Check
            // --------------------------
            try {
                this.whatNextLotStateCheck(aLot, selectCriteria);
            } catch (ServiceException e) {
                continue;
            }

            // get eqp monitor switch environment variable value.
            String environmentVariableValue = StandardProperties.OM_AUTOMON_FLAG.getValue();

            boolean bMonitorOperationFlag = false;
            String strEqpMonitorJobID = null;
            int nStartSeq = 0;
            if (BizConstant.CONSTANT_QUANTITY_ONE.equals(environmentVariableValue)
                    && (BizConstant.SP_LOT_TYPE_EQUIPMENTMONITORLOT.equals(aLot.getLotType())
                    || BizConstant.SP_LOT_TYPE_DUMMYLOT.equals(aLot.getLotType()))) {
                log.info("Equipment monitor SWITCH is 1 and lot type is EquipmentMonitor or Dummy");

                // Check logic for WhatNextAMLotInq
                if (BizConstant.SP_DP_SELECTCRITERIA_EQPMONKIT.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_EQPMONNOKIT.equals(selectCriteria)) {
                    log.info("selectCriteria is EqpMonKit or EqpMonNoKit, checking product type");
                    boolean bFoundProd = false;
                    if (!CimArrayUtils.isEmpty(eqpMonitorListGetDROut)
                            && !CimArrayUtils.isEmpty(
                            eqpMonitorListGetDROut.get(0).getStrEqpMonitorProductInfoSeq())) {
                        for (int j = 0;
                             j < eqpMonitorListGetDROut.get(0).getStrEqpMonitorProductInfoSeq().size();
                             j++) {
                            log.info(
                                    "loop {} through strEqpMonitorProductInfoSeq {}",
                                    j,
                                    eqpMonitorListGetDROut
                                            .get(0)
                                            .getStrEqpMonitorProductInfoSeq()
                                            .get(j)
                                            .getProductID());

                            ObjectIdentifier machineRecipeId = null;
                            try {
                                Outputs.ObjLotRecipeGetOut objLotRecipeGetOut =
                                        lotMethod.lotRecipeGet(
                                                objCommon,
                                                equipmentID,
                                                ObjectIdentifier.build(aLot.getIdentifier(), aLot.getPrimaryKey()));
                                machineRecipeId = objLotRecipeGetOut.getMachineRecipeId();
                            } catch (ServiceException ex) {
                                continue;
                            }
                            if (!ObjectIdentifier.isEmptyWithValue(machineRecipeId)
                                    && !ObjectIdentifier.equalsWithValue(
                                    machineRecipeId,
                                    eqpMonitorListGetDROut
                                            .get(0)
                                            .getStrEqpMonitorProductInfoSeq()
                                            .get(j)
                                            .getRecipeID())) {
                                continue;
                            }

                            if (aLot.getProductSpecificationID() != null
                                    && aLot.getProductSpecificationID()
                                    .getValue()
                                    .equals(
                                            ObjectIdentifier.fetchValue(
                                                    eqpMonitorListGetDROut
                                                            .get(0)
                                                            .getStrEqpMonitorProductInfoSeq()
                                                            .get(j)
                                                            .getProductID()))) {
                                log.info("Found productID {}.", aLot.getProductSpecificationID());
                                bFoundProd = true;
                                break;
                            }
                        }
                        if (!bFoundProd) {
                            log.info("Product is not matched.");
                            continue;
                        }
                    }
                }

                String monitorJobEqp = null;
                String monitorJobStatus = null;
                String monitorOpeKey = null;
                String sqlEqpmonJob =
                        " SELECT a.AM_JOB_ID,\n"
                                + "          a.EQP_ID,\n"
                                + "          a.AM_JOB_STATUS,\n"
                                + "          b.START_SEQ_NO,\n"
                                + "          b.AM_OPE_KEY,\n"
                                + "          b.AM_LOT_STATUS\n"
                                + "     FROM OMAMJOB a, OMAMJOB_LOT b\n"
                                + "    WHERE b.LOT_ID = ?1 \n"
                                + "      AND a.ID = b.REFKEY\n";
                List<Object[]> eqpMonJobAndEqpMonJobLot =
                        cimJpaRepository.query(sqlEqpmonJob, aLot.getIdentifier());
                if (!CimArrayUtils.isEmpty(eqpMonJobAndEqpMonJobLot)) {
                    for (Object[] list : eqpMonJobAndEqpMonJobLot) {
                        strEqpMonitorJobID = list[0].toString();
                        monitorJobEqp = list[1].toString();
                        monitorJobStatus = list[2].toString();
                        nStartSeq = CimNumberUtils.intValue((Number) list[3]);
                        monitorOpeKey = list[4].toString();
                        log.info("Lot is included in EqpMonitor job");
                    }
                    if (BizConstant.SP_EQPMONITOR_LEVEL_EQPMONKIT.equals(selectCriteria)
                            || BizConstant.SP_EQPMONITOR_LEVEL_EQPMONNOKIT.equals(selectCriteria)) {
                        continue;
                    }
                } else {
                    log.info("Can't find equipment monitor job information of Lot.");
                }
                // Check monitor process or not
                int nLOTIDs;
                String sql2 =
                        "SELECT COUNT(*)\n"
                                + "  FROM OMPRSS_AM a, OMLOT b, OMPROPE c\n"
                                + " WHERE b.LOT_ID = ?1 \n"
                                + "   AND b.PROPE_RKEY = c.ID\n"
                                + "   AND a.OPE_TAG = ?2 ";
                long monitorList =
                        cimJpaRepository.count(
                                sql2, aLot.getIdentifier(), BizConstant.SP_EQPMONITOR_SECTIONLABEL_MONITOR);
                nLOTIDs = (int) monitorList;
                if (0 < nLOTIDs) {
                    log.info("nLOTIDs > 0");
                    bMonitorOperationFlag = true;
                }

                // Check logic for WhatNextAMLotInq
                if (BizConstant.SP_DP_SELECTCRITERIA_EQPMONKIT.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_EQPMONNOKIT.equals(selectCriteria)) {
                    log.info("selectCriteria is EqpMonKit or EqpMonNoKit");
                    if (!bMonitorOperationFlag) {
                        log.info("Lot's current operation isn't Monitor");
                        continue;
                    }
                }
                if (BizConstant.SP_DP_SELECTCRITERIA_AUTO3.equals(selectCriteria)
                        && CimStringUtils.isEmpty(strEqpMonitorJobID)
                        && bMonitorOperationFlag) {
                    log.info("Lot's current operation isn't Monitor without eqpMonitorJob.");
                    continue;
                }
                if (BizConstant.SP_DP_SELECTCRITERIA_AUTO3.equals(selectCriteria)
                        && !CimStringUtils.isEmpty(strEqpMonitorJobID)
                        && bMonitorOperationFlag) {
                    String sql3 =
                            " SELECT OMPROPE.MAIN_PROCESS_ID, OMPROPE.OPE_NO \n"
                                    + "   FROM OMLOT, OMPRFCX, OMPRFCX_BCKPROPESEQ, OMPROPE \n"
                                    + "  WHERE OMLOT.LOT_ID = ? \n"
                                    + "    AND OMLOT.PRFCX_RKEY = OMPRFCX.ID \n"
                                    + "    AND OMPRFCX.ID = OMPRFCX_BCKPROPESEQ.REFKEY \n"
                                    + "    AND OMPROPE.ID = OMPRFCX_BCKPROPESEQ.PROPE_RKEY \n"
                                    + "  ORDER BY OMPRFCX_BCKPROPESEQ.IDX_NO";
                    List<Object[]> list3 = cimJpaRepository.query(sql3, aLot.getIdentifier());
                    StringBuffer strMonOpeKey = null;
                    if (!CimArrayUtils.isEmpty(list3)) {
                        for (Object[] list : list3) {
                            if (null == strMonOpeKey) {
                                log.info("strMonOpeKey is empty, copy {}", CimObjectUtils.toString(list[0]));
                                strMonOpeKey = new StringBuffer();
                                strMonOpeKey.append(list[0].toString());
                            } else {
                                strMonOpeKey.append(BizConstant.SP_EQPMONITOROPERATIONKEY_SEPARATOR_CHAR);
                                strMonOpeKey.append(list[0].toString());
                            }
                            strMonOpeKey.append(BizConstant.SP_EQPMONITOROPERATIONKEY_SEPARATOR_CHAR);
                            strMonOpeKey.append(list[1].toString());
                            strMonOpeKey.append(BizConstant.SP_EQPMONITOROPERATIONKEY_SEPARATOR_CHAR);
                        }
                    }
                    String sql4 =
                            "SELECT OMPROPE.MAIN_PROCESS_ID, OMPROPE.OPE_NO\n"
                                    + "  FROM OMPROPE, OMLOT \n"
                                    + " WHERE OMLOT.LOT_ID = ?\n"
                                    + "   AND OMLOT.PROPE_RKEY = OMPROPE.ID";
                    List<Object[]> list4 = cimJpaRepository.query(sql4, aLot.getIdentifier());
                    if (!CimArrayUtils.isEmpty(list4)) {
                        for (Object[] list : list4) {
                            if (null == strMonOpeKey) {
                                strMonOpeKey = new StringBuffer();
                                strMonOpeKey.append(list[0].toString());
                            } else {
                                strMonOpeKey.append(BizConstant.SP_EQPMONITOROPERATIONKEY_SEPARATOR_CHAR);
                                strMonOpeKey.append(list[0].toString());
                            }
                            strMonOpeKey.append(BizConstant.SP_EQPMONITOROPERATIONKEY_SEPARATOR_CHAR);
                            strMonOpeKey.append(list[1].toString());
                            if (!strMonOpeKey.toString().equals(monitorOpeKey)) {
                                bMonitorOperationFlag = false;
                            } else {
                                // The lot is on "Monitor" process for EqpMonitor job
                                // Check of EqpMonitor Information
                                if (!monitorJobEqp.equals(equipmentID.getValue())) {
                                    continue;
                                }
                                // Check of EqpMonitor Job Status
                                if (!BizConstant.SP_EQPMONITORJOB_STATUS_READY.equals(monitorJobStatus)
                                        && !BizConstant.SP_EQPMONITORJOB_STATUS_EXECUTING.equals(monitorJobStatus)) {
                                    continue;
                                }
                                // Check StartSeq number
                                boolean bEqpMonJobFound = false;
                                boolean bIsMin = false;
                                for (Infos.StartSeqNo startSeqNo : strEqpMonJobMinStartSeqNoSeq) {
                                    if (strEqpMonitorJobID.equals(startSeqNo.getKey())) {
                                        bEqpMonJobFound = true;
                                        if (nStartSeq == startSeqNo.getStartSeqNo()) {
                                            bIsMin = true;
                                        }
                                        break;
                                    }
                                }

                                if (!bEqpMonJobFound) {
                                    Integer nMinStartSeqNo = 0;
                                    String sql5 =
                                            "SELECT MIN(OMAMJOB_LOT.START_SEQ_NO)\n"
                                                    + "  FROM OMAMJOB, OMAMJOB_LOT\n"
                                                    + " WHERE OMAMJOB.AM_JOB_ID = ?\n"
                                                    + "   AND OMAMJOB_LOT.AM_LOT_STATUS = 'Reserved'\n"
                                                    + "   AND OMAMJOB.ID = OMAMJOB_LOT.REFKEY";
                                    List<Object[]> list5 = cimJpaRepository.query(sql5, strEqpMonitorJobID);
                                    if (!CimArrayUtils.isEmpty(list5)) {
                                        Infos.StartSeqNo startSeqNo = new Infos.StartSeqNo();
                                        startSeqNo.setKey(strEqpMonitorJobID);
                                        startSeqNo.setStartSeqNo((CimNumberUtils.intValue((Number) list5.get(0)[0])));
                                        strEqpMonJobMinStartSeqNoSeq.add(startSeqNo);
                                        if (nStartSeq != (CimNumberUtils.intValue((Number) list5.get(0)[0]))) {
                                            log.info("It's not minimal startSeqNo, bypass this lot");
                                            continue;
                                        }
                                    }
                                } else if (!bIsMin) {
                                    continue;
                                }
                            }
                        }
                    }
                }
            }
            // ------------------------------------------------------------------
            // Check whether Lot is operable on this Eqp with current status
            // ------------------------------------------------------------------
            if (bConditionalAvailableFlagForEqp) {
                int j;
                int slotLen = CimArrayUtils.getSize(availableSubLotTypesForEqp);
                for (j = 0; j < slotLen; j++) {
                    if (aLot.getSubLotType().equals(availableSubLotTypesForEqp.get(j))) {
                        // -------------------------------
                        //  The Lot is operable.
                        // -------------------------------
                        bMachineIsAvailableForLot = true;
                        break;
                    }
                }
                if (j == slotLen) {
                    // ------------------------------------------------------------------------------------------------
                    //  The Lot is not operable.
                    //  If select criteria is "SP_DP_SelectCriteria_CanBeProcessed" or
                    // "SP_DP_SelectCriteria_Auto3",
                    //  then it means this lot don't have to be set in return structure. Continue to next Lot
                    // !!
                    // ------------------------------------------------------------------------------------------------
                    if (BizConstant.SP_DP_SELECTCRITERIA_CANBEPROCESSED.equals(selectCriteria)
                            || BizConstant.SP_DP_SELECTCRITERIA_EQPMONNOKIT.equals(selectCriteria)
                            || BizConstant.SP_DP_SELECTCRITERIA_AUTO3.equals(selectCriteria)) {
                        log.info("operableFlagForCurrentMachineState is not TRUE");
                        continue;
                    }
                    bMachineIsAvailableForLot = false;
                }
            }

            // --------------------------------------------------------------------
            //  Eqp is NOT conditional available.
            //  It means bMachineIsAvailableForLot can be shared for all Lots.
            //  bMachineIsAvailableForLot is not necessary to switch TRUE or false.
            // --------------------------------------------------------------------

            // -------------------------------------------------------------------------
            //  When Lot is in post process, it is not included in return structure
            // -------------------------------------------------------------------------
            if (CimBooleanUtils.isTrue(aLot.isPostProcessFlagOn())) {
                if (BizConstant.SP_DP_SELECTCRITERIA_CANBEPROCESSED.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_EQPMONKIT.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_EQPMONNOKIT.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_AUTO3.equals(selectCriteria)) {
                    continue;
                }
            }

            boolean isLotInBondingFlow = !CimStringUtils.isEmpty(aLot.getBondingFlowName());
            String bondingGroupId = "";
            if (isLotInBondingFlow || bondingEqpFlag) {
                log.info("Lot is in a Bonding Flow Section or Equipment is WaferBonding.");
                // ---------------------------------------------------------------------------------
                //  Get Bonding Group ID
                // ---------------------------------------------------------------------------------
                bondingGroupId = lotMethod.lotBondingGroupIDGetDR(objCommon, tmpLotID);

                if (BizConstant.SP_DP_SELECTCRITERIA_CANBEPROCESSED.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_EQPMONNOKIT.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_AUTO3.equals(selectCriteria)) {
                    if (CimStringUtils.isEmpty(bondingGroupId)) {
                        log.info("Lot {} is not bonding grouped. ", tmpLotID.getValue());
                        // ---------------------------------------------------------------------------------
                        //  When the Lot does not belong to any Bonding Group,
                        //  it is not included in return structure if it is in Bonding Flow Section.
                        // ---------------------------------------------------------------------------------
                        if (!bondingEqpFlag) {
                            log.info("Lot is in a Bonding Flow Section.");
                            continue;
                        }
                    } else {
                        log.info("Lot belongs to a bonding group {}. ", bondingGroupId);
                        // ---------------------------------------------------------------------------------
                        //  When the Lot belongs to a Bonding Group,
                        //  it is not included in return structure if the Bonding Group has Error State.
                        // ---------------------------------------------------------------------------------
                        Outputs.ObjBondingGroupInfoGetDROut strBondingGroupInfoGetDROut =
                                bondingGroupMethod.bondingGroupInfoGetDR(objCommon, bondingGroupId, false);
                        if (CimStringUtils.equals(
                                strBondingGroupInfoGetDROut.getBondingGroupInfo().getBondingGroupState(),
                                BizConstant.SP_BONDINGGROUPSTATE_ERROR)) {
                            continue;
                        }

                        if (bondingEqpFlag
                                && ObjectIdentifier.isNotEmpty(
                                strBondingGroupInfoGetDROut.getBondingGroupInfo().getTargetEquipmentID())
                                && !CimStringUtils.equals(
                                strBondingGroupInfoGetDROut
                                        .getBondingGroupInfo()
                                        .getTargetEquipmentID()
                                        .getValue(),
                                equipmentID.getValue())) {
                            log.info(
                                    "Target Equipment of Bonding Group differs {}.",
                                    strBondingGroupInfoGetDROut
                                            .getBondingGroupInfo()
                                            .getTargetEquipmentID()
                                            .getValue());
                            continue;
                        }
                    }
                }
            }

            // --------------------------------------------
            //  Get Auto Dispatch Control Information
            // --------------------------------------------
            boolean bAutoDispatchDisableFlag = false;
            Inputs.ObjAutoDispatchControlInfoGetDRIn objAutoDispatchControlInfoGetDRIn =
                    new Inputs.ObjAutoDispatchControlInfoGetDRIn();
            objAutoDispatchControlInfoGetDRIn.setLotID(
                    new ObjectIdentifier(aLot.getIdentifier(), aLot.getPrimaryKey()));
            List<Infos.LotAutoDispatchControlInfo> objAutoDispatchControlInfoGetDROut =
                    autoDispatchControlMethod.autoDispatchControlInfoGetDR(
                            objCommon, objAutoDispatchControlInfoGetDRIn);

            for (Infos.LotAutoDispatchControlInfo lotAutoDispatchControlInfo :
                    objAutoDispatchControlInfoGetDROut) {
                if (CimStringUtils.equals(
                        aLot.getMainProcessDefinition().getIdentifier(),
                        ObjectIdentifier.fetchValue(lotAutoDispatchControlInfo.getRouteID()))
                        && aLot.getOperationNumber().equals(lotAutoDispatchControlInfo.getOperationNumber())) {
                    bAutoDispatchDisableFlag = true;
                    break;
                } else if (aLot.getMainProcessDefinition()
                        .getIdentifier()
                        .equals(ObjectIdentifier.fetchValue(lotAutoDispatchControlInfo.getRouteID()))
                        && BizConstant.SP_DEFAULT_CHAR.equals(
                        lotAutoDispatchControlInfo.getOperationNumber())) {
                    bAutoDispatchDisableFlag = true;
                    break;
                } else if (BizConstant.SP_DEFAULT_CHAR.equals(
                        ObjectIdentifier.fetchValue(lotAutoDispatchControlInfo.getRouteID()))
                        && BizConstant.SP_DEFAULT_CHAR.equals(
                        lotAutoDispatchControlInfo.getOperationNumber())) {
                    bAutoDispatchDisableFlag = true;
                    break;
                }
            }

            if (BizConstant.SP_DP_SELECTCRITERIA_AUTO3.equals(selectCriteria)) {
                if (bAutoDispatchDisableFlag) {
                    log.info("Auto Dispatch Control Information is exist. continue...");
                    continue;
                }
            }
            Infos.WhatNextAttributes whatNextAttributes = new Infos.WhatNextAttributes();
            whatNextAttributes.setOperableFlagForCurrentMachineState(bMachineIsAvailableForLot);
            whatNextAttributes.setLotID(new ObjectIdentifier(aLot.getIdentifier(), aLot.getPrimaryKey()));
            whatNextAttributes.setLotType(aLot.getLotType());
            if (!CimObjectUtils.isEmpty(aLot.getFlowBatch())) {
                whatNextAttributes.setFlowBatchID(
                        new ObjectIdentifier(
                                aLot.getFlowBatch().getIdentifier(), aLot.getFlowBatch().getPrimaryKey()));
            }
            // productID is set to productspecID;
            whatNextAttributes.setProductID(aLot.getProductSpecificationID());
            if (!CimObjectUtils.isEmpty(aLot.getMainProcessDefinition())) {
                whatNextAttributes.setRouteID(
                        new ObjectIdentifier(
                                aLot.getMainProcessDefinition().getIdentifier(),
                                aLot.getMainProcessDefinition().getPrimaryKey()));
            }
            whatNextAttributes.setOperationNumber(aLot.getOperationNumber());
            // in DB totalwafercount should be FRLOT.QTY
            whatNextAttributes.setTotalWaferCount(aLot.getAllWaferInfo().size());
            ;
            whatNextAttributes.setLastClaimedTimeStamp(aLot.getLastClaimedTimeStamp());
            whatNextAttributes.setStateChangeTimeStamp(aLot.getStateChangedTimeStamp());
            whatNextAttributes.setQueuedTimeStamp(aLot.getQueuedTimeStamp());
            whatNextAttributes.setDueTimeStamp(aLot.getPlannedCompletionDateTime());
            whatNextAttributes.setInventoryChangeTimeStamp(aLot.getInventoryStateChangedTimeStamp());
            whatNextAttributes.setProcessHoldFlag(false);
            whatNextAttributes.setTotalGoodDieCount(0);
            whatNextAttributes.setRequiredCassetteCategory(aLot.getRequiredCassetteCategory());
            whatNextAttributes.setInPostProcessFlagOfLot(aLot.isPostProcessFlagOn());
            whatNextAttributes.setBondingFlowSectionName(aLot.getBondingFlowName());
            whatNextAttributes.setBondingGroupID(bondingGroupId);
            whatNextAttributes.setMonitorOperationFlag(bMonitorOperationFlag);
            whatNextAttributes.setEqpMonitorJobID(strEqpMonitorJobID);
            whatNextAttributes.setStartSeqNo(nStartSeq);
            // ----------------------------------
            //  Set Auto Dispatch Disable Flag
            // ----------------------------------
            whatNextAttributes.setAutoDispatchDisableFlag(bAutoDispatchDisableFlag);

            whatNextAttributes.setPriorityClass(
                    null != aLot.getPriorityClass() ? aLot.getPriorityClass().toString() : "");
            whatNextAttributes.setExternalPriority(
                    null != aLot.getPriority() ? aLot.getPriority().toString() : "");
            Infos.LotNoteFlagInfo lotNoteFlagInfo = new Infos.LotNoteFlagInfo();
            whatNextAttributes.setStrLotNoteFlagInfo(lotNoteFlagInfo);
            lotNoteFlagInfo.setLotCommentFlag(false);

            com.fa.cim.newcore.bo.product.CimLotComment aLotComment = aLot.getLotComment();
            if (!CimObjectUtils.isEmpty(aLotComment)) {
                log.info("OMLOT.COMMENT_OBJ is not null");
                if (!CimStringUtils.isEmpty(aLotComment.getContents())) {
                    lotNoteFlagInfo.setLotCommentFlag(true);
                }
            }

            long lotNoteCount =
                    cimJpaRepository.count(
                            " SELECT COUNT(ID) FROM OMLOT_MEMO WHERE REFKEY = ?1", aLot.getPrimaryKey());
            lotNoteFlagInfo.setLotNoteFlag(lotNoteCount > 0);

            // if Note of the lot one the Step exists set the  LotOperationNoteflag to true, otherwise
            // false.
            long lotOpeNotesCount =
                    cimJpaRepository.count(
                            "SELECT COUNT(ID) FROM OMLOTOPEMEMO WHERE  LOT_ID = ?1 AND\n"
                                    + "                            MAIN_PROCESS_ID = ?2 AND\n"
                                    + "                            OPE_NO = ?3",
                            aLot.getIdentifier(),
                            aLot.getMainProcessDefinition().getIdentifier(),
                            aLot.getOperationNumber());
            lotNoteFlagInfo.setLotOperationNoteFlag(lotOpeNotesCount > 0L);

            subLotTypeSeq.add(aLot.getSubLotType());
            reticleSetSeq.add(aLot.getReticleSet() == null ? "" : aLot.getReticleSet().getIdentifier());

            Outputs.ObjLotEffectiveFPCInfoGetOut strLotEffectiveFPCInfoGetOut;
            if (adoptFPCInfo) {
                try {
                    strLotEffectiveFPCInfoGetOut =
                            lotMethod.lotEffectiveFPCInfoGet(
                                    objCommon,
                                    BizConstant.SP_FPC_EXCHANGETYPE_ALL,
                                    equipmentID,
                                    whatNextAttributes.getLotID());
                } catch (ServiceException e) {
                    continue;
                }
                if (strLotEffectiveFPCInfoGetOut.isEquipmentActionRequiredFlag()
                        || strLotEffectiveFPCInfoGetOut.isMachineRecipeActionRequiredFlag()
                        || strLotEffectiveFPCInfoGetOut.isRecipeParameterActionRequiredFlag()
                        || strLotEffectiveFPCInfoGetOut.isDcDefActionRequiredFlag()
                        || strLotEffectiveFPCInfoGetOut.isDcSpecActionRequiredFlag()
                        || strLotEffectiveFPCInfoGetOut.isReticleActionRequiredFlag()) {
                    log.info("Effective FPCInfo found.");
                    fPCApplied.add(true);
                } else {
                    log.info("Effective FPCInfo NOT found.");
                    fPCApplied.add(false);
                }
            } else {
                log.info("adoptFPCInfo == false");
                Outputs.ObjLotEffectiveFPCInfoGetOut fpcInfoGetOut1 =
                        new Outputs.ObjLotEffectiveFPCInfoGetOut();
                fpcInfoGetOut1.setEquipmentActionRequiredFlag(false);
                fpcInfoGetOut1.setMachineRecipeActionRequiredFlag(false);
                fpcInfoGetOut1.setRecipeParameterActionRequiredFlag(false);
                fpcInfoGetOut1.setDcDefActionRequiredFlag(false);
                fpcInfoGetOut1.setDcSpecActionRequiredFlag(false);
                fpcInfoGetOut1.setReticleActionRequiredFlag(false);
                strLotEffectiveFPCInfoGetOut = fpcInfoGetOut1;
                fPCApplied.add(false);
            }
            /* *** end of lot information *****/

            // ---------------------------------------
            // select cassette information
            // ---------------------------------------
            CimCassetteDO cassette = null;
            String sql1 =
                    "SELECT OMCARRIER.*\n"
                            + "  FROM OMCARRIER, OMCARRIER_LOT\n"
                            + " WHERE OMCARRIER_LOT.LOT_ID = ?\n"
                            + "   AND OMCARRIER.ID = OMCARRIER_LOT.REFKEY";
            List<CimCassetteDO> list1 =
                    cimJpaRepository.query(sql1, CimCassetteDO.class, aLot.getIdentifier());

            for (CimCassetteDO tmpCassette : list1) {
                cassette = tmpCassette;
            }

            // ---------------------------------------------------------------------------------------------
            //  When Cassette related to Lot is in post process, Lot is not included in return structure
            // ---------------------------------------------------------------------------------------------
            if (null == cassette) {
                continue;
            }
            boolean postProcessingFlag = cassette.getPostProcessingFlag();

            if (postProcessingFlag) {
                log.info("Cassette related to Lot is in PostProcess.");
                if (BizConstant.SP_DP_SELECTCRITERIA_CANBEPROCESSED.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_EQPMONKIT.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_EQPMONNOKIT.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_AUTO3.equals(selectCriteria)) {
                    log.info("SelectCriteria {} is CanBeProcessed or Auto3. ", selectCriteria);
                    continue;
                }
            }
            if (!CimStringUtils.isEmpty(cassette.getDurableSubStateID())) {
                log.info("cassetteSubStateID : {}", cassette.getDurableSubStateID());
                if (BizConstant.SP_DP_SELECTCRITERIA_CANBEPROCESSED.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_EQPMONKIT.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_EQPMONNOKIT.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_AUTO3.equals(selectCriteria)) {
                    log.info("selectCriteria == CanBeProcessed or EqpMonKit or EqpMonNoKit or Auto3");
                    if (!durableSubStatusList.containsKey(cassette.getDurableSubStateID())) {
                        log.info("durableSubStatusList.find() return false");
                        Inputs.ObjDurableSubStateDBInfoGetDRIn in =
                                new Inputs.ObjDurableSubStateDBInfoGetDRIn();
                        in.setDurableSubStatus(cassette.getDurableSubStateID());
                        in.setAvailableSubLotTypeInfoFlag(true);
                        in.setNextTransitionDurableSubStatusInfoFlag(false);
                        Infos.DurableSubStatusInfo dbInfoGetDROut =
                                durableMethod.durableSubStateDBInfoGetDR(objCommon, in);
                        durableSubStatusList.put(cassette.getDurableSubStateID(), dbInfoGetDROut);
                    }
                    Infos.DurableSubStatusInfo durableSubStatusInfo =
                            (Infos.DurableSubStatusInfo)
                                    durableSubStatusList.get(cassette.getDurableSubStateID());
                    if (durableSubStatusInfo.getConditionalAvailableFlag()) {
                        log.info("conditionalAvailableFlag == TRUE");
                        boolean existSubLotTypeFlag = false;
                        if (!CimArrayUtils.isEmpty(durableSubStatusInfo.getAvailableSubLotTypes())) {
                            for (String type : durableSubStatusInfo.getAvailableSubLotTypes()) {
                                log.info("subLotType : {}", type);
                                if (type.equals(aLot.getSubLotType())) {
                                    existSubLotTypeFlag = true;
                                    break;
                                }
                            }
                        }
                        if (!existSubLotTypeFlag) {
                            log.info("existSubLotTypeFlag == false");
                            continue;
                        }
                    }
                }
            }
            if (BizConstant.SP_DP_SELECTCRITERIA_AUTO3.equals(selectCriteria)) {
                if (CimStringUtils.isEmpty(cassette.getCassetteID())) {
                    log.info("OMCARRIER is blank");
                    continue;
                }
                ObjectIdentifier cassetteID =
                        new ObjectIdentifier(cassette.getCassetteID(), cassette.getId());
                /*-----------------------------------------*/
                /*   Get cassette associated information   */
                /*-----------------------------------------*/
                Infos.LotListInCassetteInfo cassetteLotListGetResult =
                        cassetteMethod.cassetteGetLotList(objCommon, cassetteID);

                boolean bSkipFlag = false;
                if (!CimObjectUtils.isEmpty(cassetteLotListGetResult)) {
                    for (ObjectIdentifier lotID : cassetteLotListGetResult.getLotIDList()) {
                        log.info("call lot_currentOperationInfo_Get()");
                        Outputs.ObjLotCurrentOperationInfoGetOut lotCurrentOperationInfoOut =
                                lotMethod.lotCurrentOperationInfoGet(objCommon, lotID);

                        // --------------------------------------------
                        //  Get Auto Dispatch Control Information
                        // --------------------------------------------
                        Inputs.ObjAutoDispatchControlInfoGetDRIn in =
                                new Inputs.ObjAutoDispatchControlInfoGetDRIn();
                        in.setLotID(lotID);
                        List<Infos.LotAutoDispatchControlInfo> strAutoDispatchControlInfoGetDROut =
                                autoDispatchControlMethod.autoDispatchControlInfoGetDR(objCommon, in);
                        for (Infos.LotAutoDispatchControlInfo lotAutoDispatchControlInfo :
                                strAutoDispatchControlInfoGetDROut) {
                            if (aLot.getMainProcessDefinition()
                                    .getIdentifier()
                                    .equals(
                                            ObjectIdentifier.fetchValue(lotAutoDispatchControlInfo.getRouteID()))
                                    && aLot.getOperationNumber()
                                    .equals(lotAutoDispatchControlInfo.getOperationNumber())) {
                                bSkipFlag = true;
                                break;
                            } else if (aLot.getMainProcessDefinition()
                                    .getIdentifier()
                                    .equals(
                                            ObjectIdentifier.fetchValue(lotAutoDispatchControlInfo.getRouteID()))
                                    && BizConstant.SP_ADCSETTING_ASTERISK.equals(
                                    lotAutoDispatchControlInfo.getOperationNumber())) {
                                bSkipFlag = true;
                                break;
                            } else if (BizConstant.SP_ADCSETTING_ASTERISK.equals(
                                    ObjectIdentifier.fetchValue(lotAutoDispatchControlInfo.getRouteID()))
                                    && BizConstant.SP_ADCSETTING_ASTERISK.equals(
                                    lotAutoDispatchControlInfo.getOperationNumber())) {
                                bSkipFlag = true;
                                break;
                            }
                        }
                    }
                }
                if (bSkipFlag) {
                    log.info("Auto Dispatch Control Lot : {}", aLot.getIdentifier());
                    continue;
                }
            }
            whatNextAttributes.setCassetteID(
                    new ObjectIdentifier(cassette.getCassetteID(), cassette.getId()));
            whatNextAttributes.setTransferStatus(cassette.getTransferState());
            whatNextAttributes.setTransferReserveUserID(
                    new ObjectIdentifier(cassette.getReserveUserID(), cassette.getReserveUserObj()));
            whatNextAttributes.setMultiLotType(cassette.getMultiLotType());
            whatNextAttributes.setCassetteCategory(cassette.getCassetteCategory());
            whatNextAttributes.setInPostProcessFlagOfCassette(cassette.getPostProcessingFlag());
            log.info("transferStatus : {}", cassette.getTransferState());
            if (BaseStaticMethod.memcmp(cassette.getTransferState(), "E", 1)) {
                whatNextAttributes.setEquipmentID(
                        new ObjectIdentifier(cassette.getEquipmentID(), cassette.getEquipmentObj()));
            } else {
                whatNextAttributes.setStockerID(
                        new ObjectIdentifier(cassette.getEquipmentID(), cassette.getEquipmentObj()));
            }
            if (BizConstant.SP_DP_SELECTCRITERIA_AUTO3.equals(selectCriteria)
                    || BizConstant.SP_DP_SELECTCRITERIA_EQPMONNOKIT.equals(selectCriteria)) {
                if (!CimStringUtils.isEmpty(cassette.getReserveUserID())) {
                    log.info("Cassette is already reserved for transfering. now passing through");
                    continue;
                }
                // Check Cassette state
                if (BizConstant.SP_DP_SELECTCRITERIA_EQPMONNOKIT.equals(selectCriteria)) {
                    if (!CIMStateConst.CIM_DURABLE_AVAILABLE.equals(cassette.getDurableState())
                            && !CIMStateConst.CIM_DURABLE_INUSE.equals(cassette.getDurableState())) {
                        log.info("Cassette is NotAvailable. now passing through");
                        continue;
                    }
                }
                // ---------------------------------------------------------------------------------------------
                //  When the cassette related to lots is reserved for retrieving lots, lot is not included
                // in
                //  return structure.
                // ---------------------------------------------------------------------------------------------
                if (!CimStringUtils.isEmpty(cassette.getSlmReservedEquipmentID())) {
                    log.info("Cassette related to Lot is reserved for SLM operation.");
                    continue;
                }
                if (CimStringUtils.equals(
                        BizConstant.SP_INTERFAB_XFERSTATE_REQUIRED, aLot.getInterFabTransferState())
                        || CimStringUtils.equals(
                        BizConstant.SP_INTERFAB_XFERSTATE_TRANSFERRING, aLot.getInterFabTransferState())) {
                    log.info("#### The lot INTERFAB_XFER_STATE == Required or Transferring. Skip this Lot. ");
                    continue;
                }
                String envRerouteXferFlag = StandardProperties.OM_XFER_REROUTE_FLAG.getValue();
                log.info("OM_XFER_REROUTE_FLAG : {}", envRerouteXferFlag);
                if (null != envRerouteXferFlag) {
                    if ("1".equals(envRerouteXferFlag)) {
                        if (BizConstant.SP_TRANSSTATE_MANUALIN.equals(cassette.getTransferState())
                                || BizConstant.SP_TRANSSTATE_STATIONIN.equals(cassette.getTransferState())
                                || BizConstant.SP_TRANSSTATE_BAYIN.equals(cassette.getTransferState())
                                || BizConstant.SP_TRANSSTATE_INTERMEDIATEIN.equals(cassette.getTransferState())
                                || BizConstant.SP_TRANSSTATE_ABNORMALIN.equals(cassette.getTransferState())
                                || BizConstant.SP_TRANSSTATE_BAYOUT.equals(cassette.getTransferState())) {
                            log.info("transferStatus allows re-route. : {}", cassette.getTransferState());
                        } else if (BizConstant.SP_TRANSSTATE_STATIONOUT.equals(cassette.getTransferState())
                                || BizConstant.SP_TRANSSTATE_EQUIPMENTOUT.equals(cassette.getTransferState())) {
                            log.info(" check transfer job existence.");
                            List<Object> singleSqlResult =
                                    cimJpaRepository.queryOneColumn(
                                            "SELECT DEST_MACHINE_ID\n"
                                                    + "                            FROM   OTXFERREQ\n"
                                                    + "                            WHERE  CARRIER_ID= ?1 \n"
                                                    + "                            AND ROWNUM = 1",
                                            cassette.getCassetteID());
                            if (singleSqlResult.size() == 0 || CimObjectUtils.isEmpty(singleSqlResult.get(0))) {
                                log.info("Transfer job does not exist. continue...");
                                continue;
                            }
                            String fxtrnReqToMachineID = CimObjectUtils.toString(singleSqlResult.get(0));

                            log.info("Transfer job exists. Next, confirm the to_machine is stocker.");
                            singleSqlResult =
                                    cimJpaRepository.queryOneColumn(
                                            "SELECT ID\n"
                                                    + "                                 FROM   OMSTOCKER\n"
                                                    + "                                 WHERE  STOCKER_ID= ?1 ",
                                            fxtrnReqToMachineID);
                            if (singleSqlResult.size() == 0 || CimObjectUtils.isEmpty(singleSqlResult.get(0))) {
                                log.info("To machine is NOT stocker. continue...");
                                continue;
                            }

                            log.info("transferStatus {} allows re-route. ", cassette.getTransferState());

                        } else {
                            log.info(
                                    "transferStatus is not MI, SI, BI, II, AI, BO, SO, EO : {}",
                                    cassette.getTransferState());
                            continue;
                        }
                    } else {
                        if (!BizConstant.SP_TRANSSTATE_MANUALIN.equals(cassette.getTransferState())
                                && !BizConstant.SP_TRANSSTATE_STATIONIN.equals(cassette.getTransferState())
                                && !BizConstant.SP_TRANSSTATE_BAYIN.equals(cassette.getTransferState())
                                && !BizConstant.SP_TRANSSTATE_INTERMEDIATEIN.equals(cassette.getTransferState())
                                && !BizConstant.SP_TRANSSTATE_ABNORMALIN.equals(cassette.getTransferState())) {
                            log.info("transferStatus is not MI, SI, BI, II, AI: {}", cassette.getTransferState());
                            continue;
                        }
                    }
                }
            } else if (BizConstant.SP_DP_SELECTCRITERIA_EQPMONKIT.equals(selectCriteria)) {
                log.info("selectCriteria == EqpMonKit");
                // Check Cassette Resereved state
                if (!CimStringUtils.isEmpty(cassette.getReserveUserID())) {
                    log.info("Cassette is already reserved for transfering. now passing through");
                    continue;
                }
                // Check Cassette Dispatch state
                if (cassette.getDispatchReserved()) {
                    log.info("Cassette is already dispatched.");
                    continue;
                }
                // Check Cassette Xfer state
                if (CimStringUtils.equals(
                        BizConstant.SP_INTERFAB_XFERSTATE_TRANSFERRING, cassette.getInterFabTransferState())) {
                    log.info("Cassette INTERFAB_XFER_STATE is Transferring. now passing through");
                    continue;
                }
                // Check Lot Xfer state
                if (BizConstant.SP_INTERFAB_XFERSTATE_REQUIRED.equals(aLot.getInterFabTransferState())
                        || BizConstant.SP_INTERFAB_XFERSTATE_TRANSFERRING.equals(
                        aLot.getInterFabTransferState())) {
                    log.info("The lot INTERFAB_XFER_STATE == Required or Transferring. Skip this Lot.");
                    continue;
                }
                if (!BizConstant.SP_TRANSSTATE_MANUALIN.equals(cassette.getTransferState())
                        && !BizConstant.SP_TRANSSTATE_STATIONIN.equals(cassette.getTransferState())
                        && !BizConstant.SP_TRANSSTATE_BAYIN.equals(cassette.getTransferState())) {
                    log.info("transferStatus is not MI, SI, BI : {}", cassette.getTransferState());
                    continue;
                }
            }
            whatNextAttributes.setOperableFlagForMultiRecipeCapability(true);
            log.info("MultiRecipeCapability : {}", eqpMultiRcpCapa);
            if (BizConstant.SP_EQP_MULTIRECIPECAPABILITY_BATCH.equals(eqpMultiRcpCapa)) {
                log.info("MultiRecipeCapability == Batch");
                if (BizConstant.SP_CAS_MULTILOTTYPE_MULTILOTMULTIRECIPE.equals(
                        cassette.getMultiLotType())) {
                    log.info("MultiLotType == MultiLotMultiRecipe");
                    whatNextAttributes.setOperableFlagForMultiRecipeCapability(false);
                }
            }
            log.info(
                    "operableFlagForMultiRecipeCapability : {}",
                    whatNextAttributes.getOperableFlagForMultiRecipeCapability());
            if (BizConstant.SP_DP_SELECTCRITERIA_CANBEPROCESSED.equals(selectCriteria)
                    || BizConstant.SP_DP_SELECTCRITERIA_EQPMONNOKIT.equals(selectCriteria)
                    || BizConstant.SP_DP_SELECTCRITERIA_AUTO3.equals(selectCriteria)) {
                if (!whatNextAttributes.getOperableFlagForMultiRecipeCapability()) {
                    log.info("operableFlagForMultiRecipeCapability is not TRUE");
                    continue; // continue Loop of candidate lots
                }
            }

            // -------------------------------------
            // select CTRLJOB information
            // -------------------------------------
            CimControlJobDO cimControlJobExample = new CimControlJobDO();
            cimControlJobExample.setControlJobID(ObjectIdentifier.fetchValue(aLot.getControlJobID()));
            CimControlJobDO controlJob = cimJpaRepository.findOne(Example.of(cimControlJobExample)).orElse(null);
            if (null != controlJob) {
                whatNextAttributes.setControlJob(
                        new ObjectIdentifier(controlJob.getControlJobID(), controlJob.getId()));
                whatNextAttributes.setProcessReserveEquipmentID(
                        new ObjectIdentifier(controlJob.getEquipmentID(), controlJob.getEquipmentObject()));
                whatNextAttributes.setProcessReserveUserID(
                        new ObjectIdentifier(controlJob.getOwnerID(), controlJob.getOwnerObject()));
                if (BizConstant.SP_DP_SELECTCRITERIA_CANBEPROCESSED.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_EQPMONNOKIT.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_EQPMONKIT.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_SORTER.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_AUTO3.equals(selectCriteria)) {
                    if (!CimStringUtils.isEmpty(controlJob.getControlJobID())) {
                        log.info("controlJob is not nil");
                        continue;
                    }
                }
            }
            // ------------------------
            // Set sorter information
            // ------------------------
            com.fa.cim.sorter.Params.ObjSorterJobListGetDRIn in =
                    new com.fa.cim.sorter.Params.ObjSorterJobListGetDRIn();
            in.setLotID(whatNextAttributes.getLotID());
            List<Info.SortJobListAttributes> objSorterJobListGetDROut =
                    sorterMethod.sorterJobListGetDR(objCommon, in);
            if (0 == CimArrayUtils.getSize(objSorterJobListGetDROut)) {
                whatNextAttributes.setSorterJobExistFlag(false);
            } else {
                if (BizConstant.SP_DP_SELECTCRITERIA_CANBEPROCESSED.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_EQPMONNOKIT.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_SORTER.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_AUTO3.equals(selectCriteria)) {
                    log.info("SorterJob exists.");
                    continue;
                }
                whatNextAttributes.setSorterJobExistFlag(false);
            }
            // -----------------------
            // select PO information
            // -----------------------
            CimProcessOperationDO processOperation =
                    cimJpaRepository.queryOne(
                            "SELECT OMPROPE.MPROCESS_PRSS_RKEY,\n"
                                    + "                            OMPROPE.ROUTE_ID,\n"
                                    + "                            OMPROPE.ROUTE_PRSS_RKEY,\n"
                                    + "                            OMPROPE.ROUTE_NO,\n"
                                    + "                            OMPROPE.ROUTE_OPE_NO,\n"
                                    + "                            OMPROPE.ROUTE_PRF_RKEY,\n"
                                    + "                            OMPROPE.MROUTE_PRF_RKEY,\n"
                                    + "                            OMPROPE.STEP_ID,\n"
                                    + "                            OMPROPE.STEP_RKEY,\n"
                                    + "                            OMPROPE.PLAN_START_TIME,\n"
                                    + "                            OMPROPE.PLAN_END_TIME,\n"
                                    + "                            OMPROPE.PLAN_EQP_ID,\n"
                                    + "                            OMPROPE.PLAN_EQP_RKEY,\n"
                                    + "                            OMPROPE.REMAIN_CYCLE_TIME,\n"
                                    + "                            OMPROPE.MPROCESS_PRF_RKEY,\n"
                                    + "                            OMPROPE.OPE_NO,\n"
                                    + "                            OMPROPE.ALLOC_LRCP_ID,\n"
                                    + "                            OMPROPE.ALLOC_LRCP_RKEY,\n"
                                    + "                            OMPROPE.ALLOC_MRCP_ID, \n"
                                    + "                            OMPROPE.ALLOC_MRCP_RKEY,\n"
                                    + "                            OMPROPE.ALLOC_PRCP_ID\n"
                                    + "                     FROM   OMPROPE\n"
                                    + "                     WHERE  OMPROPE.ID = ?1",
                            CimProcessOperationDO.class,
                            aLot.getProcessOperation() == null ? "" : aLot.getProcessOperation().getPrimaryKey());
            if (null == processOperation) {
                throw new ServiceException(retCodeConfig.getNotFoundProcessOperation());
            }
            log.info("Assigned LogicalRecipe at PO : {}", processOperation.getAssignLogicalRecipeID());
            log.info("Assigned MachineRecipe at PO : {}", processOperation.getAssignRecipeID());
            if (CimStringUtils.isEmpty(processOperation.getAssignRecipeID())) {
                bLotHasAssignedMRecipeSeq.set(i, false);
            }
            // -------------------------------------------------------------------------------------------------
            //  if current module PF is inactive, search current module POS and PD_ID from an active
            // module PF
            // -------------------------------------------------------------------------------------------------
            // --- Check state of current module PF
            CimProcessFlowDO processFlow =
                    cimJpaRepository.queryOne(
                            "SELECT PRP_ID, ACTIVE_FLAG\n"
                                    + "            FROM OMPRF\n"
                                    + "            WHERE ID = ?1",
                            CimProcessFlowDO.class,
                            processOperation.getModuleProcessFlowObj());
            if (null == processFlow) {
                throw new ServiceException(retCodeConfig.getNotFoundProcessFlow());
            }
            // --- if current module PF is inactive, get an active module POS in active current module PF
            String posID = null;
            if (!processFlow.getState()) {
                String sql2 =
                        "SELECT OMPRF_PRSSSEQ.PRSS_RKEY \n"
                                + "                FROM  OMPRF, OMPRF_PRSSSEQ\n"
                                + "                WHERE OMPRF.PRP_ID = ?\n"
                                + "                AND OMPRF.ACTIVE_FLAG = 1\n"
                                + "                AND OMPRF.ID = OMPRF_PRSSSEQ.REFKEY\n"
                                + "                AND OMPRF_PRSSSEQ.LINK_KEY = ?\n"
                                + "                AND OMPRF.PRP_LEVEL = ?";
                List<Object[]> list2 =
                        cimJpaRepository.query(
                                sql2,
                                processFlow.getMainProcessDefinitionID(),
                                processOperation.getModuleOperationNumber(),
                                CIMStateConst.SP_PD_FLOWLEVEL_MODULE);
                if (!CimArrayUtils.isEmpty(list2)) {
                    posID = String.valueOf(list2.get(0));
                }
            }

            whatNextAttributes.setOperationID(
                    new ObjectIdentifier(
                            processOperation.getProcessDefinitionID(),
                            processOperation.getProcessDefinitionObj()));
            Timestamp planStartTime = processOperation.getPlanStartTime();
            planStartTime = null == planStartTime ? new Timestamp(0L) : planStartTime;
            if (!"1901-01-01 00:00:00.000".equals(planStartTime.toString())) {
                log.info("set planStartTimeStamp");
                whatNextAttributes.setPlanStartTimeStamp(processOperation.getPlanStartTime());
            }
            Timestamp planEndTime = processOperation.getPlanEndTime();
            planEndTime = null == planEndTime ? new Timestamp(0L) : planEndTime;
            if (!"1901-01-01 00:00:00.000".equals(planEndTime.toString())) {
                log.info("set planEndTimeStamp");
                whatNextAttributes.setPlanEndTimeStamp(processOperation.getPlanEndTime());
            }
            whatNextAttributes.setPlannedEquipmentID(
                    new ObjectIdentifier(
                            processOperation.getPlanEuipmentID(), processOperation.getPlanEuipmentObj()));
            // *********** end PO ***************/

            // -------------------------------------
            // select previous PO information
            // -------------------------------------

            com.fa.cim.newcore.bo.pd.CimProcessOperation previousPO = aLot.getPreviousProcessOperation();
            if (null != previousPO) {
                whatNextAttributes.setPreOperationCompTimeStamp(previousPO.getActualCompTimeStamp());
            }
            // **** end of previous PO ****/

            // -------------------------------------
            // calculate internal priority
            // -------------------------------------
            Timestamp aCurrentTime = new Timestamp(System.currentTimeMillis());
            Timestamp aPlannedCompDataTime = aLot.getPlannedCompletionDateTime();
            Long aPlannedCompDuration =
                    CimDateUtils.substractTimeStamp(
                            aPlannedCompDataTime.getTime(), aCurrentTime.getTime());
            Double aRemainingCycleTime = processOperation.getRemainCycleTime();
            aRemainingCycleTime = CimObjectUtils.isEmpty(aRemainingCycleTime) ? 0 : aRemainingCycleTime;
            log.info("aPlannedCompDuration : {}", aPlannedCompDuration);
            log.info("aRemainingCycleTime : {}", aRemainingCycleTime);
            if (0 == aRemainingCycleTime) {
                log.info("OMPROPE.REMAIN_CYCLE_TIME == 0");
                whatNextAttributes.setInternalPriority(0);
            } else {
                double dInternalPriority = aPlannedCompDuration / (aRemainingCycleTime * 60 * 1000);
                whatNextAttributes.setInternalPriority(Math.abs(dInternalPriority));
            }
            // *** end of internal priority ****/

            // -----------------------------------------
            // select POS information (get photo_layer)
            // -----------------------------------------
            CimPFPosListDO processFlowPosList =
                    cimJpaRepository.queryOne(
                            "SELECT PRSS_RKEY FROM OMPRF_PRSSSEQ WHERE " + " REFKEY = ?1 " + " AND LINK_KEY= ?2",
                            CimPFPosListDO.class,
                            processOperation.getProcessFlowObj(),
                            processOperation.getOperationNumber());
            if (null != processFlowPosList) {
                posID = processFlowPosList.getProcessOperationSpecificationsObj();
            }
            String posPhotoLayer = null;
            CimProcessOperationSpecificationDO pos =
                    cimJpaRepository.queryOne(
                            "SELECT PHOTO_LAYER\n"
                                    + "                     FROM   OMPRSS\n"
                                    + "                     WHERE  OMPRSS.ID = ?1",
                            CimProcessOperationSpecificationDO.class,
                            posID);
            if (null != pos) {
                posPhotoLayer = pos.getPhotoLayer();
            }

            // ---------------------------------------------------
            // select Module POS information (get mandatory_flag)
            // ---------------------------------------------------
            Boolean mandatoryFlag = false;
            CimProcessOperationSpecificationDO modulePos =
                    cimJpaRepository.queryOne(
                            "SELECT COMPULSORY_FLAG\n"
                                    + "                     FROM   OMPRSS\n"
                                    + "                     WHERE  OMPRSS.ID = ?1",
                            CimProcessOperationSpecificationDO.class,
                            processOperation.getModuleProcessOperationSpecificationsObj());
            if (null != modulePos) {
                mandatoryFlag = modulePos.getMandatoryFlag();
            }
            whatNextAttributes.setMandatoryOperationFlag(mandatoryFlag);

            // ------------------------------------------------------------------------------
            // select Main PF information (get stage_id, stage_obj, current seqno in mainPF)
            // ------------------------------------------------------------------------------
            CimPFDefinitionListDO mianPfPdList =
                    cimJpaRepository.queryOne(
                            "SELECT IDX_NO, STAGE_ID, STAGE_RKEY\n"
                                    + "                     FROM   OMPRF_ROUTESEQ\n"
                                    + "                     WHERE  REFKEY = ?1 \n"
                                    + "                     AND    LINK_KEY = ?2",
                            CimPFDefinitionListDO.class,
                            processOperation.getMainProcessFlowObj(),
                            processOperation.getModuleNumber());
            if (null != mianPfPdList) {
                whatNextAttributes.setStageID(
                        new ObjectIdentifier(mianPfPdList.getStageID(), mianPfPdList.getStageObj()));
            }
            // -----------------------------------------------------
            // check lot's routeID and operation NO and productID
            // -----------------------------------------------------
            boolean bEntityInhibitInfoCollected = false;
            boolean bNextOperationInfoRetrieved = false;
            boolean bondingInfoRetrieved = false;

            // warning: nWhatNextLotCountForCheck and tmpWhatNextAttributesForCheck are never get
            // updated???
            for (int wnCnt = 0; wnCnt < nWhatNextLotCountForCheck; wnCnt++) {
                if (!ObjectIdentifier.isEmpty(tmpWhatNextAttributesForCheck.get(wnCnt).getControlJob())
                        || !ObjectIdentifier.isEmpty(whatNextAttributes.getControlJob())) {
                    log.info("Exist Control Job, Continue !");
                    continue;
                }
                if (ObjectIdentifier.fetchValue(tmpWhatNextAttributesForCheck.get(wnCnt).getRouteID())
                        .equals(ObjectIdentifier.fetchValue(whatNextAttributes.getRouteID()))
                        && tmpWhatNextAttributesForCheck
                        .get(wnCnt)
                        .getOperationNumber()
                        .equals(whatNextAttributes.getOperationNumber())
                        && ObjectIdentifier.fetchValue(
                        tmpWhatNextAttributesForCheck.get(wnCnt).getProductID())
                        .equals(ObjectIdentifier.fetchValue(whatNextAttributes.getProductID()))
                        && ObjectIdentifier.fetchValue(
                        tmpWhatNextAttributesForCheck.get(wnCnt).getOperationID())
                        .equals(ObjectIdentifier.fetchValue(whatNextAttributes.getOperationID()))) {
                    log.info("Same Type Lot Found");
                    if (!bNextOperationInfoRetrieved) {
                        log.info("First Found");
                        whatNextAttributes.setNext2EquipmentID(
                                tmpWhatNextAttributesForCheck.get(wnCnt).getNext2EquipmentID());
                        whatNextAttributes.setNext2LogicalRecipeID(
                                tmpWhatNextAttributesForCheck.get(wnCnt).getNext2LogicalRecipeID());
                        whatNextAttributes.setNext2requiredCassetteCategory(
                                tmpWhatNextAttributesForCheck.get(wnCnt).getNext2requiredCassetteCategory());
                        bNextOperationInfoRetrieved = true;
                    }
                    if (!bondingInfoRetrieved) {
                        log.info("First Found");
                        whatNextAttributes.setBondingCategory(
                                tmpWhatNextAttributesForCheck.get(wnCnt).getBondingCategory());
                        whatNextAttributes.setTopProductID(
                                tmpWhatNextAttributesForCheck.get(wnCnt).getTopProductID());
                        bondingInfoRetrieved = true;
                    }
                    if (CimStringUtils.equals(subLotTypeSeqForCheck.get(wnCnt), subLotTypeSeq.get(size))
                            && CimStringUtils.equals(reticleSetSeqForCheck.get(wnCnt), reticleSetSeq.get(size))
                            && (!FPCAppliedForCheck.get(wnCnt) && !fPCApplied.get(size))
                            && (inhibitCollectedBeforeContinue.get(wnCnt))) {
                        log.info(
                                "SubLotType :{} & ReticleSet Matching : {}",
                                subLotTypeSeq.get(i),
                                reticleSetSeq.get(i));
                        Inputs.ObjEntityInhibiteffectiveForLotGetDRIn strEntityInhibitEffectiveForLotGetDRIn =
                                new Inputs.ObjEntityInhibiteffectiveForLotGetDRIn();
                        strEntityInhibitEffectiveForLotGetDRIn.setLotID(whatNextAttributes.getLotID());
                        strEntityInhibitEffectiveForLotGetDRIn.setStrEntityInhibitInfos(
                                entityInhibiteffectiveForLotGetDRIns.get(wnCnt).getStrEntityInhibitInfos());
                        List<Infos.EntityInhibitInfo> strEntityInhibitEffectiveForLotGetDROut =
                                constraintMethod.constraintEffectiveForLotGetDR(
                                        objCommon,
                                        strEntityInhibitEffectiveForLotGetDRIn.getStrEntityInhibitInfos(),
                                        strEntityInhibitEffectiveForLotGetDRIn.getLotID());

                        int nInhibit = CimArrayUtils.getSize(strEntityInhibitEffectiveForLotGetDROut);
                        List<Infos.EntityInhibitAttributes> entityInhibitAttributes = new ArrayList<>();
                        for (int k = 0; k < nInhibit; k++) {
                            log.info("Loop for Inhibits : {}", k);
                            Infos.EntityInhibitAttributes entityInhibitAttribute =
                                    strEntityInhibitEffectiveForLotGetDROut.get(k).getEntityInhibitAttributes();
                            entityInhibitAttributes.add(entityInhibitAttribute);
                        }
                        whatNextAttributes.setEntityInhibitions(entityInhibitAttributes);
                        bEntityInhibitInfoCollected = true;
                        break;
                    }
                }
            }
            int checkI = CimArrayUtils.getSize(whatNextAttributes.getEntityInhibitions());
            if (bEntityInhibitInfoCollected && 0 < checkI) {
                log.info("whatNextAttributes.getEntityInhibitions().getSiez > 0");
                if (BizConstant.SP_DP_SELECTCRITERIA_CANBEPROCESSED.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_EQPMONNOKIT.equals(selectCriteria)
                        || BizConstant.SP_DP_SELECTCRITERIA_AUTO3.equals(selectCriteria)) {
                    log.info("found entity inhibition, but ignore this lot because of Auto3 mode");
                    continue;
                }
            }

            // -------------------------------------
            // select next 2 EQP information
            // -------------------------------------
            if (!bNextOperationInfoRetrieved) {
                log.info("bNextOperationInfoRetrieved == false");
                boolean searchDirection = true;
                boolean posSearchFlag = true;
                int searchCount = 1;
                boolean currentFlag = false;
                ObjectIdentifier lotID = new ObjectIdentifier(aLot.getIdentifier(), aLot.getPrimaryKey());

                Inputs.ObjProcessOperationProcessRefListForLotIn refListForLotIn =
                        new Inputs.ObjProcessOperationProcessRefListForLotIn();
                refListForLotIn.setSearchDirection(searchDirection);
                refListForLotIn.setPosSearchFlag(posSearchFlag);
                refListForLotIn.setSearchCount(searchCount);
                refListForLotIn.setCurrentFlag(currentFlag);
                refListForLotIn.setLotID(lotID);
                List<Infos.OperationProcessRefListAttributes> refListForLotRepeatRetCode =
                        processMethod.processOperationProcessRefListForLot(objCommon, refListForLotIn);

                String tmpPosID = null;
                String tmpModulePosID = null;
                if (!CimArrayUtils.isEmpty(refListForLotRepeatRetCode)) {
                    tmpPosID =
                            refListForLotRepeatRetCode.get(0).getProcessRef().getProcessOperationSpecification();
                    tmpModulePosID = refListForLotRepeatRetCode.get(0).getProcessRef().getModulePOS();
                }
                // --- Get main POS information ( get REQD_CAST_CTGRY )
                CimProcessOperationSpecificationDO tmpMainPos =
                        cimJpaRepository.queryOne(
                                "SELECT CARRIER_CATEGORY\n"
                                        + "                         FROM   OMPRSS\n"
                                        + "                         WHERE  ID = ?1",
                                CimProcessOperationSpecificationDO.class,
                                tmpPosID);
                String requiredCassetteCategory = null;
                if (null != tmpMainPos) {
                    requiredCassetteCategory = tmpMainPos.getRequiredCassetteCategory();
                }
                // --- Get module POS information ( get PD_OBJ )
                CimProcessOperationSpecificationDO tmpModulePos =
                        cimJpaRepository.queryOne(
                                "SELECT STEP_RKEY\n"
                                        + "                         FROM   OMPRSS\n"
                                        + "                         WHERE  OMPRSS.ID = ?1",
                                CimProcessOperationSpecificationDO.class,
                                tmpModulePosID);
                String pdRefKey = null;
                if (null != tmpModulePos) {
                    pdRefKey = tmpModulePos.getProcessDefinitionObj();
                }

                // TODO: 2019/10/24. 3488 - 3506 if condition is missing.
                // -----------------------------------------------------
                // Provide Specific EQP by Product Group and Technology
                // -----------------------------------------------------

                // --------------------------------------------------------------------
                // Search Logic of FRPRODSPEC by Product Spec ID for get Product Group
                // --------------------------------------------------------------------
                CimProductSpecificationDO productSpecification =
                        cimJpaRepository.queryOne(
                                "SELECT * "
                                        + "                             FROM   OMPRODINFO\n"
                                        + "                             WHERE  OMPRODINFO.PROD_ID = ?1",
                                CimProductSpecificationDO.class,
                                aLot.getProductSpecificationID().getValue());

                CimProcessDefinitionDO processDefinition =
                        cimJpaRepository.queryOne(
                                "SELECT * "
                                        + "                             FROM   OMPRP\n"
                                        + "                             WHERE  ID = ?1",
                                CimProcessDefinitionDO.class,
                                pdRefKey);

                if (null != processDefinition && null != productSpecification) {
                    List<CimEquipmentDO> equipments = null;
                    CimLogicalRecipeDO logicalRecipe = null;
                    List<CimEquipmentDO> outEquipments =
                            processMethod.getEquipmentsByprocessDefinitionAndEquipment(
                                    processDefinition, productSpecification);
                    if (!CimArrayUtils.isEmpty(outEquipments)) {
                        equipments = outEquipments;
                        for (CimEquipmentDO tmpEquipment : equipments) {
                            whatNextAttributes.setNext2EquipmentID(
                                    new ObjectIdentifier(tmpEquipment.getEquipmentID(), tmpEquipment.getId()));
                            whatNextAttributes.setNext2requiredCassetteCategory(requiredCassetteCategory);
                        }
                    } else {
                        logicalRecipe =
                                this.whatNextProcessDefinitionInfo(processDefinition, productSpecification);
                        if (null != logicalRecipe) {
                            List<CimEquipmentDO> logicalRecepeSpecificRecipeSettingCode =
                                    processMethod.getAllMachinesBySpecificRecipeSetting(logicalRecipe);
                            if (!CimArrayUtils.isEmpty(logicalRecepeSpecificRecipeSettingCode)) {
                                equipments = logicalRecepeSpecificRecipeSettingCode;
                                for (CimEquipmentDO tmpEquipment : equipments) {
                                    whatNextAttributes.setNext2EquipmentID(
                                            new ObjectIdentifier(tmpEquipment.getEquipmentID(), tmpEquipment.getId()));
                                    whatNextAttributes.setNext2requiredCassetteCategory(requiredCassetteCategory);
                                    whatNextAttributes.setNext2LogicalRecipeID(
                                            new ObjectIdentifier(
                                                    logicalRecipe.getLogicalRecipeID(), logicalRecipe.getId()));
                                }
                            } else {
                                List<CimMachineRecipeDO> machineRecipes =
                                        processMethod.getAllMachineRecipe(logicalRecipe);
                                if (!CimArrayUtils.isEmpty(machineRecipes)) {
                                    for (CimMachineRecipeDO mRecipe : machineRecipes) {
                                        List<CimEquipmentDO> eqpListByRecipe = processMethod.getAllMachines(mRecipe);

                                        for (CimEquipmentDO tmpEquipment : eqpListByRecipe) {
                                            whatNextAttributes.setNext2EquipmentID(
                                                    new ObjectIdentifier(
                                                            tmpEquipment.getEquipmentID(), tmpEquipment.getId()));
                                            whatNextAttributes.setNext2requiredCassetteCategory(requiredCassetteCategory);
                                            whatNextAttributes.setNext2LogicalRecipeID(
                                                    new ObjectIdentifier(
                                                            logicalRecipe.getLogicalRecipeID(), logicalRecipe.getId()));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            // -------------------------------------
            // select qtime information
            // -------------------------------------
            int nLotQtimeInfoAdded = 0;
            // ---------------------------------------
            //  Check current route.
            // ---------------------------------------
            // Max Q-Time
            List<Infos.LotQtimeInfo> objLotQtimeGetForRouteDROut =
                    lotMethod.lotQtimeGetForRouteDR(
                            objCommon,
                            whatNextAttributes.getLotID(),
                            processOperation.getMainProcessFlowObj(),
                            processOperation.getModuleProcessFlowObj(),
                            processOperation.getOperationNumber());
            List<Infos.LotQtimeInfo> lotQTimeInfos = new ArrayList<>();
            objLotQtimeGetForRouteDROut.stream()
                    .filter(
                            qTimeInfo ->
                                    !CimDateUtils.convertTo(qTimeInfo.getQrestrictionTargetTimeStamp())
                                            .equals(CimDateUtils.initialTime()))
                    .forEach(lotQTimeInfos::add);
            whatNextAttributes.setStrLotQtimeInfo(lotQTimeInfos);

            // Min Q-Time
            List<Infos.LotQtimeInfo> minQTimeInfos =
                    minQTimeMethod.getRestrictInProcessArea(
                            whatNextAttributes.getLotID(), processOperation.getMainProcessFlowObj());
            whatNextAttributes.setMinQTimeInfos(minQTimeInfos);

            // --------------------------------------------------------
            //  Select QTime restriction for Lot on Branch Route.
            // --------------------------------------------------------
            List<CimProcessFlowContextReturnDO> processFlowContextReturnDOS =
                    cimJpaRepository.query(
                            "SELECT MROUTE_PRF_RKEY, OPE_NO, ROUTE_PRF_RKEY FROM OMPRFCX_RTNSEQ WHERE REFKEY = ?1",
                            CimProcessFlowContextReturnDO.class,
                            aLot.getProcessFlowContext().getPrimaryKey());

            for (CimProcessFlowContextReturnDO processFlowContextReturnDO : processFlowContextReturnDOS) {
                List<Infos.LotQtimeInfo> strLotQtimeGetForRouteDROut;
                try {
                    strLotQtimeGetForRouteDROut =
                            lotMethod.lotQtimeGetForRouteDR(
                                    objCommon,
                                    whatNextAttributes.getLotID(),
                                    processFlowContextReturnDO.getMainProcessFlowObj(),
                                    processFlowContextReturnDO.getModuleProcessFlowObj(),
                                    processFlowContextReturnDO.getOperationNumber());
                } catch (ServiceException e) {
                    log.error("lotMethod.lotQtimeGetForRouteDR() != ok");
                    break;
                }

                strLotQtimeGetForRouteDROut.stream()
                        .filter(
                                qTimeInfo ->
                                        !CimDateUtils.convertTo(qTimeInfo.getQrestrictionTargetTimeStamp())
                                                .equals(CimDateUtils.initialTime()))
                        .forEach(lotQTimeInfos::add);
                // 这行代码无意义, 可以删除
                // whatNextAttributes.setStrLotQtimeInfo(lotQtimeInfos);

                minQTimeInfos.addAll(
                        minQTimeMethod.getRestrictInProcessArea(
                                whatNextAttributes.getLotID(), processFlowContextReturnDO.getMainProcessFlowObj()));
            }

            whatNextAttributes.setQtimeFlag(CimArrayUtils.isNotEmpty(lotQTimeInfos));
            whatNextAttributes.setMinQTimeFlag(CimArrayUtils.isNotEmpty(minQTimeInfos));

            // -------------------------------------
            // select PD information
            // -------------------------------------
            CimProductSpecificationDO productSpecification =
                    cimJpaRepository.queryOne(
                            "SELECT * FROM OMPRODINFO WHERE PROD_ID = ?1",
                            CimProductSpecificationDO.class,
                            ObjectIdentifier.fetchValue(aLot.getProductSpecificationID()));
            CimProcessDefinitionDO processDefinition =
                    cimJpaRepository.queryOne(
                            "SELECT * FROM OMPRP WHERE ID = ?1 ",
                            CimProcessDefinitionDO.class,
                            processOperation.getProcessDefinitionObj());

            CimLogicalRecipeDO logicalRecipe =
                    this.whatNextProcessDefinitionInfo(processDefinition, productSpecification);
            whatNextAttributes.setInspectionType(processDefinition.getInspectionType());
            // ---------------------
            // Lot Reservation Check
            // ---------------------
            if (!ObjectIdentifier.isEmptyWithValue(aLot.getControlJobID())) {
                log.info(
                        "Lot was Reserved. So set Assigned LogicalRecipe From PO : {}",
                        aLot.getControlJobID().getValue());
                whatNextAttributes.setLogicalRecipeID(
                        new ObjectIdentifier(
                                processOperation.getAssignLogicalRecipeID(),
                                processOperation.getAssignLogicalRecipeObj()));
            } else {
                whatNextAttributes.setLogicalRecipeID(
                        new ObjectIdentifier(logicalRecipe.getLogicalRecipeID(), logicalRecipe.getId()));
            }
            log.info("Logical Recipe and Object : {}", whatNextAttributes.getLogicalRecipeID());
            if (!bondingInfoRetrieved) {
                ObjectIdentifier bondingTargetOperationID = null;
                if (bondingEqpFlag) {
                    bondingTargetOperationID = whatNextAttributes.getOperationID();
                } else if (isLotInBondingFlow) {
                    // --------------------------------------
                    // Get Target Operation of Bonding Flow.
                    // --------------------------------------
                    Outputs.ObjLotBondingOperationInfoGetDROut lotBondingOperationInfoGetDROut =
                            lotMethod.lotBondingOperationInfoGetDR(objCommon, whatNextAttributes.getLotID());
                    if (null != lotBondingOperationInfoGetDROut) {
                        bondingTargetOperationID = lotBondingOperationInfoGetDROut.getTargetOperationID();
                    }
                }

                if (!ObjectIdentifier.isEmptyWithValue(bondingTargetOperationID)) {
                    // --------------------------------------------
                    // Check if the Lot is on Bonding Operation
                    // --------------------------------------------
                    List<Infos.BOMPartsInfo> bomPartsInfos = null;
                    try {
                        bomPartsInfos =
                                processMethod.processBOMPartsInfoGetDR(
                                        objCommon, whatNextAttributes.getProductID(), bondingTargetOperationID);
                    } catch (ServiceException e) {
                        if (!Validations.isEquals(e.getCode(), retCodeConfig.getBomNotDefined())
                                && !Validations.isEquals(
                                e.getCode(), retCodeConfigEx.getPartsNotDefinedForProcess())) {
                            throw e;
                        }
                    }
                    if (CimArrayUtils.isEmpty(bomPartsInfos)) {
                        whatNextAttributes.setBondingCategory(BizConstant.SP_LOT_BONDINGCATEGORY_TOP);
                    }
                    if (CimArrayUtils.getSize(bomPartsInfos) == 1) {
                        whatNextAttributes.setBondingCategory(BizConstant.SP_LOT_BONDINGCATEGORY_BASE);
                        whatNextAttributes.setTopProductID(bomPartsInfos.get(0).getPartID().getValue());
                    }
                }
            }
            Infos.WhatNextAttributes tmpWhatNextAttributeForCheck = new Infos.WhatNextAttributes();
            tmpWhatNextAttributeForCheck.setRouteID(whatNextAttributes.getRouteID());
            tmpWhatNextAttributeForCheck.setOperationNumber(whatNextAttributes.getOperationNumber());
            tmpWhatNextAttributeForCheck.setProductID(whatNextAttributes.getProductID());
            tmpWhatNextAttributeForCheck.setOperationID(whatNextAttributes.getOperationID());
            tmpWhatNextAttributeForCheck.setControlJob(whatNextAttributes.getControlJob());
            tmpWhatNextAttributeForCheck.setNext2EquipmentID(whatNextAttributes.getNext2EquipmentID());
            tmpWhatNextAttributeForCheck.setNext2requiredCassetteCategory(
                    whatNextAttributes.getNext2requiredCassetteCategory());
            tmpWhatNextAttributeForCheck.setBondingCategory(whatNextAttributes.getBondingCategory());
            tmpWhatNextAttributeForCheck.setTopProductID(whatNextAttributes.getTopProductID());
            tmpWhatNextAttributeForCheck.setNext2LogicalRecipeID(
                    whatNextAttributes.getNext2LogicalRecipeID());
            tmpWhatNextAttributeForCheck.setRouteID(whatNextAttributes.getRouteID());
            tmpWhatNextAttributesForCheck.add(tmpWhatNextAttributeForCheck);
            subLotTypeSeqForCheck.add(subLotTypeSeq.get(size));
            reticleSetSeqForCheck.add(reticleSetSeq.get(size));
            FPCAppliedForCheck.add(fPCApplied.get(size));
            inhibitCollectedBeforeContinue.add(false);
            nWhatNextLotCountForCheck++;

            // Collect reticle/reticleGroup informations
            int InhibitReticleIDLen = 0;
            List<Infos.FoundReticle> reticleSeq = new ArrayList<>();
            if (!strLotEffectiveFPCInfoGetOut.isReticleActionRequiredFlag()) {
                log.info("FPCInfo does not change reticles.");
                if (eqpReticlReq && !CimStringUtils.isEmpty(posPhotoLayer)) {
                    // --------------------------------------------------------------------------
                    // Set reticle group sequence from reticle set
                    // --------------------------------------------------------------------------
                    int rtclGrpLen = 0;
                    int rgCnt = 0;
                    List<ObjectIdentifier> reticleGroupIDs = new ArrayList<>();
                    // --------------------------------------------------------------
                    // Get FRPEC.prodspec_id
                    // --------------------------------------------------------------
                    String reticalSetID =
                            aLot.getReticleSet() == null ? "" : aLot.getReticleSet().getIdentifier();
                    log.info("OMLOT.rtclset_id : {}", reticalSetID);
                    CimReticleSetDO cimReticleSetExample = new CimReticleSetDO();
                    cimReticleSetExample.setReticleSetID(reticalSetID);
                    CimReticleSetDO reticleSetDO = cimJpaRepository.findOne(Example.of(cimReticleSetExample)).orElse(null);

                    if (null != reticleSetDO) {
                        int reticleDfSequenceNumber = 0;
                        boolean reticleDFOverrideFlag = false;
                        CimReticleSetDefinitionDO cimReticleSetDefinitionExample =
                                new CimReticleSetDefinitionDO();
                        cimReticleSetDefinitionExample.setReferenceKey(reticleSetDO.getId());
                        cimReticleSetDefinitionExample.setPhotoLayer(posPhotoLayer);
                        CimReticleSetDefinitionDO reticleSetDefinitionDO =
                                cimJpaRepository.findOne(Example.of(cimReticleSetDefinitionExample)).orElse(null);
                        if (null != reticleSetDefinitionDO) {
                            reticleDfSequenceNumber = reticleSetDefinitionDO.getSequenceNumber();
                            reticleDFOverrideFlag = reticleSetDefinitionDO.getOverrideFlag();
                        }

                        // ---------------------------------------------------------------------------
                        // Search Specific Reticle Group when override flag is TRUE.
                        // ---------------------------------------------------------------------------
                        if (reticleDFOverrideFlag) {
                            boolean foundFlag = false;
                            // ---------------------------------------------------------------------------
                            // Check product ID + equipment ID
                            // ---------------------------------------------------------------------------
                            CimReticleSetSpecificationDO cimReticleSetSpecExam =
                                    new CimReticleSetSpecificationDO();
                            cimReticleSetSpecExam.setReferenceKey(reticleSetDO.getId());
                            cimReticleSetSpecExam.setEquipmentID(
                                    ObjectIdentifier.fetchValue(objEquipmentLotsWhatNextDRIn.getEquipmentID()));
                            cimReticleSetSpecExam.setPhotoLayer(posPhotoLayer);
                            cimReticleSetSpecExam.setProductSpecificationID(
                                    ObjectIdentifier.fetchValue(aLot.getProductSpecificationID()));
                            CimReticleSetSpecificationDO reticleGroupDataDO =
                                    cimJpaRepository.findOne(Example.of(cimReticleSetSpecExam)).orElse(null);
                            if (null != reticleGroupDataDO) {
                                foundFlag = true;
                            }
                            // ---------------------------------------------------------------------------
                            //  Check product ID + equipment ID "*"
                            // ---------------------------------------------------------------------------
                            if (!foundFlag) {
                                CimReticleSetSpecificationDO cimReticleSetSpecExam1 =
                                        new CimReticleSetSpecificationDO();
                                cimReticleSetSpecExam1.setReferenceKey(reticleSetDO.getId());
                                cimReticleSetSpecExam1.setEquipmentID("*");
                                cimReticleSetSpecExam1.setPhotoLayer(posPhotoLayer);
                                cimReticleSetSpecExam1.setProductSpecificationID(
                                        ObjectIdentifier.fetchValue(aLot.getProductSpecificationID()));
                                reticleGroupDataDO = cimJpaRepository.findOne(Example.of(cimReticleSetSpecExam1)).orElse(null);

                                if (null != reticleGroupDataDO) {
                                    foundFlag = true;
                                }
                            }
                            // -------------------------------------------------------------------------------
                            // Set objectIdentifier of specific reticle groups when any record is found.
                            // -------------------------------------------------------------------------------
                            if (foundFlag) {
                                CimReticleSetSpecificGroupDO cimReticleSetSpecificGroupExam =
                                        new CimReticleSetSpecificGroupDO();
                                cimReticleSetSpecificGroupExam.setReferenceKey(reticleSetDO.getId());
                                cimReticleSetSpecificGroupExam.setTheTableMarker(
                                        String.valueOf(reticleGroupDataDO.getSequenceNumber()));
                                List<CimReticleSetSpecificGroupDO> reticleSetSpecificGroupDOS =
                                        cimJpaRepository.findAll(Example.of(cimReticleSetSpecificGroupExam));

                                for (CimReticleSetSpecificGroupDO reticleSetSpecificGroupDO :
                                        reticleSetSpecificGroupDOS) {
                                    reticleGroupIDs.add(
                                            new ObjectIdentifier(
                                                    reticleSetSpecificGroupDO.getIdentifier(),
                                                    reticleSetSpecificGroupDO.getObjectRef()));
                                }
                            }
                        }
                        // -----------------------------------------------------------------------------------
                        // Set default reticle groups, when override flag is false, or any specific reticle
                        // group is not found.
                        // -----------------------------------------------------------------------------------
                        if (0 == rgCnt) {
                            CimReticleSetDFReticleGroupDO cimReticleSetDFReticleGroupExam =
                                    new CimReticleSetDFReticleGroupDO();
                            cimReticleSetDFReticleGroupExam.setReferenceKey(reticleSetDO.getId());
                            cimReticleSetDFReticleGroupExam.setTheTableMarker(
                                    String.valueOf(reticleDfSequenceNumber));
                            List<CimReticleSetDFReticleGroupDO> reticleSetDFReticleGroupDOS =
                                    cimJpaRepository.findAll(Example.of(cimReticleSetDFReticleGroupExam));
                            // todo:check
                            // cimReticleSet.findReticleSetDFReticleGroupDOSByRefKeyAndTheTableMarker(reticleSetDO.getId(), String.valueOf(reticleDfSequenceNumber));
                            for (CimReticleSetDFReticleGroupDO reticleSetDFReticleGroupDO :
                                    reticleSetDFReticleGroupDOS) {
                                reticleGroupIDs.add(
                                        ObjectIdentifier.build(
                                                reticleSetDFReticleGroupDO.getIdentifier(),
                                                reticleSetDFReticleGroupDO.getObjectRef()));
                            }
                        }
                    }

                    whatNextAttributes.setReticleGroupIDs(reticleGroupIDs);
                    // -----------------------------
                    // Check Reticle availability
                    // -----------------------------
                    whatNextAttributes.setReticleExistFlag(false);
                    boolean bReticleIsAvailable = false;
                    boolean bReticleCheckFlag = false;
                    int nCandidateReticleGroupLen =
                            CimArrayUtils.getSize(whatNextAttributes.getReticleGroupIDs());
                    if (0 < nCandidateReticleGroupLen) {
                        log.info("nCandidateReticleGroupLen > 0");
                        if (eqpReticlReq) {
                            log.info("OMEQP.AVAILABLE_FLAG == TRUE");
                            bReticleCheckFlag = true;
                        } else {
                            log.info("OMEQP.AVAILABLE_FLAG == false");
                            bReticleIsAvailable = true;
                        }
                    }
                    if (bReticleCheckFlag) {
                        if (!bReticleGroupListQueryDone) {
                            String drblSql =
                                    "SELECT OMPDRBL_PDRBLGRP.PDRBL_GRP_ID,\n"
                                            + "       OMPDRBL_PDRBLGRP.PDRBL_GRP_RKEY,\n"
                                            + "       OMPDRBL.PDRBL_ID,\n"
                                            + "       OMPDRBL.PDRBL_SUB_STATE_ID,\n"
                                            + "       OMPDRBL.PDRBL_SUB_STATE_RKEY\n"
                                            + "  FROM OMPDRBL, OMPDRBL_PDRBLGRP\n"
                                            + " WHERE OMPDRBL.EQP_ID = ?1 \n"
                                            + "   AND OMPDRBL.XFER_STATE = ?2 \n"
                                            + "   AND OMPDRBL.ID = OMPDRBL_PDRBLGRP.REFKEY";
                            List<Object[]> drblQuery =
                                    cimJpaRepository.query(
                                            drblSql,
                                            ObjectIdentifier.fetchValue(equipmentID),
                                            BizConstant.SP_TRANSSTATE_EQUIPMENTIN);

              /*
              if (ArrayUtils.isEmpty(drblQuery)) {
                  log.info("DRBL_DRBLGRP1 is NOT_FOUND");
                  break;
              }
              */
                            for (Object[] objects : drblQuery) {
                                String durableGroupID = (String) objects[0];
                                String durableGroupOBJ = (String) objects[1];
                                String durableID = objects[2].toString();
                                String durableStateID = (String) objects[3];
                                String durableStateOBJ = (String) objects[4];
                                Infos.FoundReticle strReticleInfo = new Infos.FoundReticle();
                                strReticleInfo.setReticleID(new ObjectIdentifier(durableID));
                                strReticleInfo.setReticleGroupID(
                                        new ObjectIdentifier(durableGroupID, durableGroupOBJ));
                                Infos.ReticleStatusInfo reticleStatusInfo = new Infos.ReticleStatusInfo();
                                reticleStatusInfo.setReticleStatus(durableStateID);
                                strReticleInfo.setReticleStatusInfo(reticleStatusInfo);
                                eqpInReticleSeq.add(strReticleInfo);
                            }

                            bReticleGroupListQueryDone = true;
                            eqpInReticleCnt = CimArrayUtils.getSize(eqpInReticleSeq);
                        }
                        for (int j = 0; j < nCandidateReticleGroupLen; j++) {
                            bReticleIsAvailable = false;
                            for (int k = 0; k < eqpInReticleCnt; k++) {
                                if (CimObjectUtils.equals(
                                        whatNextAttributes.getReticleGroupIDs().get(j),
                                        eqpInReticleSeq.get(k).getReticleGroupID())) {
                                    String durableSubStatus =
                                            ObjectIdentifier.fetchValue(
                                                    eqpInReticleSeq.get(k).getReticleStatusInfo().getDurableSubStatus());
                                    Boolean restrictionFlag = false;
                                    if (!CimStringUtils.isEmpty(durableSubStatus)) {
                                        log.info("durableSubStatus {}", durableSubStatus);
                                        Infos.DurableSubStatusInfo strDurableSubStatusInfo =
                                                new Infos.DurableSubStatusInfo();
                                        if (!durableSubStatusList.containsKey(durableSubStatus)) {
                                            Inputs.ObjDurableSubStateDBInfoGetDRIn durableSubStateDBInfoGetDRIn =
                                                    new Inputs.ObjDurableSubStateDBInfoGetDRIn();
                                            durableSubStateDBInfoGetDRIn.setDurableSubStatus(durableSubStatus);
                                            durableSubStateDBInfoGetDRIn.setAvailableSubLotTypeInfoFlag(true);
                                            durableSubStateDBInfoGetDRIn.setNextTransitionDurableSubStatusInfoFlag(false);
                                            // duplicate code   Infos.DurableSubStatusInfo dbInfoGetDROut =
                                            // durableMethod.durableSubStateDBInfoGetDR(objCommon,
                                            // durableSubStateDBInfoGetDRIn);
                                            strDurableSubStatusInfo =
                                                    durableMethod.durableSubStateDBInfoGetDR(
                                                            objCommon, durableSubStateDBInfoGetDRIn);
                                            durableSubStatusList.put(durableSubStatus, strDurableSubStatusInfo);
                                        }
                                        if (strDurableSubStatusInfo.getConditionalAvailableFlag()) {
                                            log.info("conditionalAvailableFlag == TRUE");
                                            restrictionFlag = true;
                                            int subLotTypeNum =
                                                    CimArrayUtils.getSize(strDurableSubStatusInfo.getAvailableSubLotTypes());
                                            for (int l = 0; l < subLotTypeNum; l++) {
                                                if (CimStringUtils.equals(
                                                        aLot.getSubLotType(),
                                                        strDurableSubStatusInfo.getAvailableSubLotTypes().get(l))) {
                                                    log.info("Exist SubLotType :{}", aLot.getSubLotType());
                                                    restrictionFlag = false;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    if (!restrictionFlag) {
                                        log.info("restrictionFlag is false");
                                        bReticleIsAvailable = true;
                                        break;
                                    }
                                }
                            }
                            if (!bReticleIsAvailable) {
                                log.info("bReticleIsAvailable == false");
                                break;
                            }
                        }
                    }
                    if (bReticleIsAvailable) {
                        log.info("reticleExistFlag == TRUE");
                        whatNextAttributes.setReticleExistFlag(true);
                    } else {
                        log.info("reticleExistFlag == false");
                        whatNextAttributes.setReticleExistFlag(false);
                    }
                    if (CimStringUtils.equals(selectCriteria, BizConstant.SP_DP_SELECTCRITERIA_CANBEPROCESSED)
                            || CimStringUtils.equals(selectCriteria, BizConstant.SP_DP_SELECTCRITERIA_EQPMONNOKIT)
                            || CimStringUtils.equals(selectCriteria, BizConstant.SP_DP_SELECTCRITERIA_AUTO3)) {
                        if (bReticleCheckFlag && !whatNextAttributes.getReticleExistFlag()) {
                            log.info("reticleExistFlag is not TRUE");
                            continue;
                        }
                    }
                } else {
                    whatNextAttributes.setReticleExistFlag(false);
                }
            } else {
                int fpcReticleCount =
                        CimArrayUtils.getSize(strLotEffectiveFPCInfoGetOut.getFpcInfo().getReticleInfoList());
                List<ObjectIdentifier> reticleGroupIDs = new ArrayList<>();
                for (int j = 0; j < fpcReticleCount; j++) {
                    Infos.ReticleInfo reticleInfo =
                            strLotEffectiveFPCInfoGetOut.getFpcInfo().getReticleInfoList().get(j);
                    reticleGroupIDs.add(reticleInfo.getReticleGroup());
                }
                whatNextAttributes.setReticleExistFlag(true);
                whatNextAttributes.setReticleGroupIDs(reticleGroupIDs);
                ObjectIdentifier drblID;
                for (int j = 0; j < fpcReticleCount; j++) {
                    Infos.ReticleInfo reticleInfo =
                            strLotEffectiveFPCInfoGetOut.getFpcInfo().getReticleInfoList().get(j);
                    drblID = reticleInfo.getReticleID();
                    String drblSql =
                            " SELECT A.EQP_ID,\n"
                                    + "        A.XFER_STATE,\n"
                                    + "        A.PDRBL_STATE,\n"
                                    + "        A.PDRBL_SUB_STATE_ID,\n"
                                    + "        B.PDRBL_GRP_ID,\n"
                                    + "        B.PDRBL_GRP_RKEY\n"
                                    + "   FROM OMPDRBL A, OMPDRBL_PDRBLGRP B\n"
                                    + "  WHERE A.PDRBL_ID = ?1 \n"
                                    + "    AND A.ID = B.REFKEY\n";
                    List<Object[]> drblQuery =
                            cimJpaRepository.query(drblSql, ObjectIdentifier.fetchValue(drblID));
                    String drblEqpID = null;
                    String drblState = null;
                    String drblTranState = null;
                    String drblSubState = null;
                    String drblgrpID = null;
                    String drblgrpOBJ = null;
                    if (CimArrayUtils.isNotEmpty(drblQuery)) {
                        for (Object[] objects : drblQuery) {
                            drblEqpID = (String) objects[0];
                            drblState = (String) objects[1];
                            drblTranState = (String) objects[2];
                            drblSubState = (String) objects[3];
                            drblgrpID = (String) objects[4];
                            drblgrpOBJ = (String) objects[5];
                        }
                    }
                    Boolean restrictionFlag = false;
                    if (CimStringUtils.isNotEmpty(drblSubState)) {
                        Infos.DurableSubStatusInfo strDurableSubStatusInfo = new Infos.DurableSubStatusInfo();
                        if (!durableSubStatusList.containsKey(drblSubState)) {
                            Inputs.ObjDurableSubStateDBInfoGetDRIn durableSubStateDBInfoGetDRIn =
                                    new Inputs.ObjDurableSubStateDBInfoGetDRIn();
                            durableSubStateDBInfoGetDRIn.setDurableSubStatus(drblSubState);
                            durableSubStateDBInfoGetDRIn.setAvailableSubLotTypeInfoFlag(true);
                            durableSubStateDBInfoGetDRIn.setNextTransitionDurableSubStatusInfoFlag(false);
                            strDurableSubStatusInfo =
                                    durableMethod.durableSubStateDBInfoGetDR(objCommon, durableSubStateDBInfoGetDRIn);
                            durableSubStatusList.put(drblSubState, strDurableSubStatusInfo);
                        }
                        if (CimBooleanUtils.isTrue(strDurableSubStatusInfo.getConditionalAvailableFlag())) {
                            restrictionFlag = true;
                            int subLotTypeNum =
                                    CimArrayUtils.getSize(strDurableSubStatusInfo.getAvailableSubLotTypes());
                            for (int l = 0; l < subLotTypeNum; l++) {
                                if (CimStringUtils.equals(
                                        aLot.getSubLotType(),
                                        strDurableSubStatusInfo.getAvailableSubLotTypes().get(l))) {
                                    restrictionFlag = false;
                                    break;
                                }
                            }
                        }
                    }
                    if (ObjectIdentifier.equalsWithValue(equipmentID, drblEqpID)
                            && CimStringUtils.equals(drblState, BizConstant.SP_TRANSSTATE_EQUIPMENTIN)
                            && !restrictionFlag
                            && (CimStringUtils.equals(drblState, CIMStateConst.CIM_DURABLE_AVAILABLE)
                            || CimStringUtils.equals(drblState, CIMStateConst.CIM_DURABLE_INUSE))) {
                        Infos.FoundReticle foundReticle = new Infos.FoundReticle();
                        foundReticle.setReticleID(drblID);
                        foundReticle.setReticleGroupID(new ObjectIdentifier(drblgrpID, drblgrpOBJ));
                        Infos.ReticleStatusInfo reticleStatusInfo = new Infos.ReticleStatusInfo();
                        reticleStatusInfo.setReticleStatus(drblState);
                        reticleStatusInfo.setTransferStatus(drblTranState);
                        reticleStatusInfo.setEquipmentID(equipmentID);
                        foundReticle.setReticleStatusInfo(reticleStatusInfo);
                        reticleSeq.add(foundReticle);
                    } else {
                        whatNextAttributes.setReticleExistFlag(false);
                    }
                    if (!ObjectIdentifier.equalsWithValue(drblgrpID, reticleInfo.getReticleGroup())) {
                        whatNextAttributes.setReticleExistFlag(false);
                    }
                }
                if (CimStringUtils.equals(selectCriteria, BizConstant.SP_DP_SELECTCRITERIA_CANBEPROCESSED)
                        || CimStringUtils.equals(selectCriteria, BizConstant.SP_DP_SELECTCRITERIA_EQPMONNOKIT)
                        || CimStringUtils.equals(selectCriteria, BizConstant.SP_DP_SELECTCRITERIA_AUTO3)) {
                    if (!whatNextAttributes.getReticleExistFlag()) {
                        log.info("reticleExistFlag is not TRUE");
                        continue;
                    }
                }
            }

            // ------------------------------------------------------
            // Check recipe information is already collected or not
            // ------------------------------------------------------

            // ------------------------------------------------------
            // Find referable Lot for performance improvement.
            // ------------------------------------------------------
            boolean nInfoCollected = false;
            Infos.DefaultRecipeSetting defaultRecipeSetting = new Infos.DefaultRecipeSetting();
            if (!bConditionalAvailableFlagForChamber) {
                // ------------------------------------------------------------------------------------
                //  Eqp doesn't have Chamber or all Chambers' status are not conditional available.
                //  We don't have to consider subLotType.
                // ------------------------------------------------------------------------------------
                for (int k = 0; k < nWhatNextLotCount; k++) {
                    if (!ObjectIdentifier.isEmptyWithValue(whatNextAttributes.getControlJob())
                            && bLotHasAssignedMRecipeSeq.get(nWhatNextLotCount)) {
                        if ((searchCondition == 0
                                && ObjectIdentifier.equalsWithValue(
                                tmpWhatNextAttributes.get(k).getLogicalRecipeID(),
                                whatNextAttributes.getLogicalRecipeID())
                                && !fPCApplied.get(k)
                                && !fPCApplied.get(nWhatNextLotCount))
                                || (searchCondition == 1
                                && ObjectIdentifier.equalsWithValue(
                                tmpWhatNextAttributes.get(k).getLogicalRecipeID(),
                                whatNextAttributes.getLogicalRecipeID())
                                && !fPCApplied.get(k)
                                && !fPCApplied.get(nWhatNextLotCount)
                                && ObjectIdentifier.equalsWithValue(
                                tmpWhatNextAttributes.get(k).getProductID(),
                                whatNextAttributes.getProductID())
                                && CimStringUtils.equals(
                                subLotTypeSeq.get(k), subLotTypeSeq.get(nWhatNextLotCount)))) {
                            // ------------------------------------------------------------------------------------       //D7000223
                            //  Referable Lot is found.
                            //   //D7000223
                            //  Recipe related information should be set from PO.ASSIGNEDxxxx .
                            //       //D7000223
                            //  recipeAvailableFlag should always be TRUE.
                            //       //D7000223
                            // ------------------------------------------------------------------------------------       //D7000223
                            whatNextAttributes.setProcessMonitorProductID(
                                    tmpWhatNextAttributes.get(k).getProcessMonitorProductID());
                            whatNextAttributes.setTestTypeID(tmpWhatNextAttributes.get(k).getTestTypeID());
                            whatNextAttributes.setRecipeAvailableFlag(true);
                            defaultRecipeSetting.setChamberSeq(strDefaultRecipeSetSeq.get(k).getChamberSeq());
                            whatNextAttributes.setMachineRecipeID(
                                    new ObjectIdentifier(
                                            processOperation.getAssignRecipeID(), processOperation.getAssignRecipeObj()));
                            whatNextAttributes.setPhysicalRecipeID(processOperation.getAssignPhysicalRecipeID());
                            nInfoCollected = true;
                            break;
                        }
                    } else {
                        if ((searchCondition == 0
                                && ObjectIdentifier.equalsWithValue(
                                tmpWhatNextAttributes.get(k).getLogicalRecipeID(),
                                whatNextAttributes.getLogicalRecipeID())
                                && ObjectIdentifier.isEmptyWithValue(tmpWhatNextAttributes.get(k).getControlJob())
                                && !bLotHasAssignedMRecipeSeq.get(k)
                                && !fPCApplied.get(k)
                                && !fPCApplied.get(nWhatNextLotCount))
                                || (searchCondition == 1
                                && ObjectIdentifier.equalsWithValue(
                                tmpWhatNextAttributes.get(k).getLogicalRecipeID(),
                                whatNextAttributes.getLogicalRecipeID())
                                && ObjectIdentifier.isEmptyWithValue(tmpWhatNextAttributes.get(k).getControlJob())
                                && !bLotHasAssignedMRecipeSeq.get(k)
                                && !fPCApplied.get(k)
                                && !fPCApplied.get(nWhatNextLotCount)
                                && ObjectIdentifier.equalsWithValue(
                                tmpWhatNextAttributes.get(k).getProductID(),
                                whatNextAttributes.getProductID())
                                && CimStringUtils.equals(
                                subLotTypeSeq.get(k), subLotTypeSeq.get(nWhatNextLotCount)))) {
                            // ------------------------------------------------------------------------------------       //D7000223
                            //  Referable Lot is found.
                            //   //D7000223
                            //  All information can be set from referable Lot.
                            //   //D7000223
                            // ------------------------------------------------------------------------------------       //D7000223
                            whatNextAttributes.setProcessMonitorProductID(
                                    tmpWhatNextAttributes.get(k).getProcessMonitorProductID());
                            whatNextAttributes.setMachineRecipeID(
                                    tmpWhatNextAttributes.get(k).getMachineRecipeID());
                            whatNextAttributes.setTestTypeID(tmpWhatNextAttributes.get(k).getTestTypeID());
                            whatNextAttributes.setRecipeAvailableFlag(
                                    tmpWhatNextAttributes.get(k).getRecipeAvailableFlag());
                            defaultRecipeSetting.setChamberSeq(strDefaultRecipeSetSeq.get(k).getChamberSeq());
                            whatNextAttributes.setPhysicalRecipeID(
                                    tmpWhatNextAttributes.get(k).getPhysicalRecipeID());
                            nInfoCollected = true;
                            break;
                        }
                    }
                }
            } else {
                // ----------------------------------------------------------------------------
                // //D7000223
                //  Eqp has some Chambers and Chamber is conditinal available.
                // //D7000223
                //  We must consider Logical Recipe and SubLotType to find referable Lot.      //D7000223
                // ----------------------------------------------------------------------------
                // //D7000223
                for (int l = 0; l < nWhatNextLotCount; l++) {
                    if (!ObjectIdentifier.isEmptyWithValue(whatNextAttributes.getControlJob())
                            && bLotHasAssignedMRecipeSeq.get(nWhatNextLotCount)) {
                        if ((searchCondition == 0
                                && ObjectIdentifier.equalsWithValue(
                                tmpWhatNextAttributes.get(l).getLogicalRecipeID(),
                                whatNextAttributes.getLogicalRecipeID())
                                && CimObjectUtils.equals(
                                subLotTypeSeq.get(l), subLotTypeSeq.get(nWhatNextLotCount))
                                && !fPCApplied.get(l)
                                && !fPCApplied.get(nWhatNextLotCount))
                                || (searchCondition == 1
                                && ObjectIdentifier.equalsWithValue(
                                tmpWhatNextAttributes.get(l).getLogicalRecipeID(),
                                whatNextAttributes.getLogicalRecipeID())
                                && ObjectIdentifier.equalsWithValue(
                                tmpWhatNextAttributes.get(l).getProductID(),
                                whatNextAttributes.getProductID())
                                && CimObjectUtils.equals(
                                subLotTypeSeq.get(l), subLotTypeSeq.get(nWhatNextLotCount)))
                                && !fPCApplied.get(l)
                                && !fPCApplied.get(nWhatNextLotCount)) {
                            // ------------------------------------------------------------------------------------       //D7000223
                            //  Referable Lot is found.
                            //   //D7000223
                            //  Recipe related information should be set from PO.ASSIGNEDxxxx .
                            //       //D7000223
                            //  recipeAvailableFlag should always be TRUE.
                            //       //D7000223
                            // ------------------------------------------------------------------------------------       //D7000223
                            whatNextAttributes.setProcessMonitorProductID(
                                    tmpWhatNextAttributes.get(l).getProcessMonitorProductID());
                            whatNextAttributes.setTestTypeID(tmpWhatNextAttributes.get(l).getTestTypeID());
                            whatNextAttributes.setRecipeAvailableFlag(true);
                            defaultRecipeSetting.setChamberSeq(strDefaultRecipeSetSeq.get(l).getChamberSeq());
                            whatNextAttributes.setMachineRecipeID(
                                    new ObjectIdentifier(
                                            processOperation.getAssignRecipeID(), processOperation.getAssignRecipeObj()));
                            whatNextAttributes.setPhysicalRecipeID(processOperation.getAssignPhysicalRecipeID());
                            nInfoCollected = true;
                            break;
                        }
                    } else {
                        if ((searchCondition == 0
                                && ObjectIdentifier.equalsWithValue(
                                tmpWhatNextAttributes.get(l).getLogicalRecipeID(),
                                whatNextAttributes.getLogicalRecipeID())
                                && CimStringUtils.equals(
                                subLotTypeSeq.get(l), subLotTypeSeq.get(nWhatNextLotCount))
                                && ObjectIdentifier.isEmptyWithValue(tmpWhatNextAttributes.get(l).getControlJob())
                                && !bLotHasAssignedMRecipeSeq.get(l)
                                && !fPCApplied.get(l)
                                && !fPCApplied.get(nWhatNextLotCount))
                                || (searchCondition == 1
                                && ObjectIdentifier.equalsWithValue(
                                tmpWhatNextAttributes.get(l).getLogicalRecipeID(),
                                whatNextAttributes.getLogicalRecipeID())
                                && CimStringUtils.equals(
                                subLotTypeSeq.get(l), subLotTypeSeq.get(nWhatNextLotCount))
                                && ObjectIdentifier.isEmptyWithValue(tmpWhatNextAttributes.get(l).getControlJob())
                                && !bLotHasAssignedMRecipeSeq.get(l)
                                && !fPCApplied.get(l)
                                && !fPCApplied.get(nWhatNextLotCount)
                                && ObjectIdentifier.equalsWithValue(
                                tmpWhatNextAttributes.get(l).getProductID(),
                                whatNextAttributes.getProductID()))) {
                            // ------------------------------------------------------------------------------------       //D7000223
                            //  Referable Lot is found.
                            //   //D7000223
                            //  All information can be set from referable Lot.
                            //   //D7000223
                            // ------------------------------------------------------------------------------------       //D7000223
                            whatNextAttributes.setProcessMonitorProductID(
                                    tmpWhatNextAttributes.get(l).getProcessMonitorProductID());
                            whatNextAttributes.setMachineRecipeID(
                                    tmpWhatNextAttributes.get(l).getMachineRecipeID());
                            whatNextAttributes.setTestTypeID(tmpWhatNextAttributes.get(l).getTestTypeID());
                            whatNextAttributes.setRecipeAvailableFlag(
                                    tmpWhatNextAttributes.get(l).getRecipeAvailableFlag());
                            defaultRecipeSetting.setChamberSeq(strDefaultRecipeSetSeq.get(l).getChamberSeq());
                            whatNextAttributes.setPhysicalRecipeID(
                                    tmpWhatNextAttributes.get(l).getPhysicalRecipeID());
                            nInfoCollected = true;
                            break;
                        }
                    }
                }
            }
            // ---------------------------------------
            // Get entity inhibit information for lot
            // ---------------------------------------
            boolean bFirstChamberFlag = false;
            int nFirstChamberCount = 0;
            List<Infos.Chamber> firstChamberSeq = new ArrayList<>();
            List<Infos.Chamber> chambers = new ArrayList<>();
            defaultRecipeSetting.setChamberSeq(chambers);
            strDefaultRecipeSetSeq.add(defaultRecipeSetting);
            if (!nInfoCollected) {
                // ---------------------------------
                //  Referable Lot is not found.
                // ---------------------------------
                log.info("InfoCollected == false");
                if (bMultiChamberMachineFlag) {
                    // ------------------------------------------------------------------------------------------
                    //  Check LRCP multi Chamber support Flag. If not, turn off the bMultiChamberMachineFlag,
                    //  even if Eqp has some Chambers.
                    // ------------------------------------------------------------------------------------------
                    Boolean logicRecipeMultiChmberFlag = false;
                    logicRecipeMultiChmberFlag = logicalRecipe.getMultiChmberFlag();
                    if (!CimBooleanUtils.isTrue(logicRecipeMultiChmberFlag)) {
                        bMultiChamberMachineFlag = false;
                    }
                }

                // if use FPCInfo, get machineRecipe and so on.
                Boolean FPCLogicalRecipeFound = false;
                Boolean FPCMachineRecipeFound = false;
                CimMachineRecipeDO mRecipe = null;
                if (strLotEffectiveFPCInfoGetOut.isMachineRecipeActionRequiredFlag()) {
                    CimLogicalRecipeDO tmplogicRecipe = logicalRecipe;
                    FPCLogicalRecipeFound = true;
                    String tmpMachineRecipeID =
                            strLotEffectiveFPCInfoGetOut.getFpcInfo().getMachineRecipeID().getValue();
                    if (!CimStringUtils.isEmpty(tmpMachineRecipeID)) {
                        mRecipe =
                                cimJpaRepository.queryOne(
                                        "SELECT * FROM OMRCP WHERE RECIPE_ID = ?1",
                                        CimMachineRecipeDO.class,
                                        tmpMachineRecipeID);
                        // search physical recipe from machine recipe.
                        if (null != mRecipe) {
                            FPCMachineRecipeFound = true;
                        }
                    }
                }
                if (null != mRecipe) {
                    whatNextAttributes.setMachineRecipeID(
                            new ObjectIdentifier(mRecipe.getRecipeID(), mRecipe.getId()));
                }
                // ---------------------------------------------
                // Special control for multi chamber machine
                // ---------------------------------------------
                if (bMultiChamberMachineFlag) {
                    if (!strLotEffectiveFPCInfoGetOut.isMachineRecipeActionRequiredFlag()) {
                        if (bConditionalAvailableFlagForChamber) {
                            // -------------------------------------------------------------------------------------------------------------
                            //  Eqp has Chambers and LRCP multi Chamber support flag is true and Chamber
                            // conditional available is True.
                            //  So available Falg for each Chamber should be updated by considering Lot's
                            // SubLotType.
                            // -------------------------------------------------------------------------------------------------------------
                            for (int j = 0; j < nProcessResourceCount; j++) {
                                if (!CimArrayUtils.isEmpty(tmpChamberInfo)) {
                                    if (tmpChamberInfo.get(j).getConditionalAvailable()) {
                                        String equipmentStateSltRefKey = tmpChamberInfo.get(j).getCurrentStateObjRef();
                                        long ttlCount =
                                                cimJpaRepository.count(
                                                        "SELECT COUNT(ID) FROM OMEQPST_SLTYP WHERE REFKEY = ?1 AND LINK_KEY = ?2",
                                                        equipmentStateSltRefKey,
                                                        aLot.getLotType());
                                        /*      List<CimEquipmentStateSltDO> equipmentStateSlts = equipmentStateCore.findEquipmentStateSltsByRefKeyAndDKey(equipmentStateSltRefKey, aLot.getLotType());*/
                                        Infos.WhatNextChamberInfoInfo chamberInfoInfo = tmpChamberInfo.get(j);
                                        if (0 < ttlCount) {
                                            chamberInfoInfo.setAvailableFlag(true);
                                        } else {
                                            chamberInfoInfo.setAvailableFlag(false);
                                        }
                                    }
                                }
                            }
                        }

                        List<CimLogicalRecipeDSetDO> logicalRecipeDefaultSettings =
                                cimJpaRepository.query(
                                        "SELECT * FROM OMLRCP_DFLT f1 WHERE f1.REFKEY in (SELECT f2.ID FROM OMLRCP f2 WHERE f2.LRCP_ID = ?1 ) ORDER BY IDX_NO",
                                        CimLogicalRecipeDSetDO.class,
                                        logicalRecipe.getLogicalRecipeID());
                        // logicalRecipeCore.findLogicalRecipeDefaultSettingsByLogicalRecipeID(logicalRecipe.getLogicalRecipeID());
                        int nCandidateMachineRecipeCount = CimArrayUtils.getSize(logicalRecipeDefaultSettings);

                        boolean bChamberConbinationMatch = false;
                        boolean bFirstFound = false;
                        int nSeqNoOfLRDSet = 0;

                        for (int j = 0; j < nCandidateMachineRecipeCount; j++) {
                            String mrcpSql =
                                    "SELECT COUNT(*)\n"
                                            + "  FROM OMLRCP_DFLT, OMRCP, OMRCP_EQP\n"
                                            + " WHERE OMLRCP_DFLT.REFKEY = ?1\n"
                                            + "   AND OMLRCP_DFLT.RECIPE_ID = OMRCP.RECIPE_ID\n"
                                            + "   AND OMLRCP_DFLT.IDX_NO = ?2\n"
                                            + "   AND OMRCP.ID = OMRCP_EQP.REFKEY\n"
                                            + "   AND OMRCP_EQP.EQP_ID = ?3\n";
                            long mrcpCount =
                                    cimJpaRepository.count(mrcpSql, logicalRecipe.getId(), j, equipmentID.getValue());
                            if (0L == mrcpCount) {
                                continue;
                            }
                            ObjectIdentifier mrrcpRcipeID = null;
                            if (1L == mrcpCount) {
                                // -------------------------------------------------------------
                                // Check Entity Inhibit for MachineRecipe
                                // -------------------------------------------------------------
                                CimLogicalRecipeDSetDO logicalRecipeDSetDO =
                                        cimJpaRepository.queryOne(
                                                "SELECT * FROM OMLRCP_DFLT WHERE REFKEY = ?1 AND IDX_NO = ?2",
                                                CimLogicalRecipeDSetDO.class,
                                                logicalRecipe.getId(),
                                                j);
                                // logicalRecipeCore.findLogicalRecipeDefaultSettingByRefKeyAndSequenceNumber(logicalRecipe.getId(), j);
                                mrrcpRcipeID =
                                        new ObjectIdentifier(
                                                logicalRecipeDSetDO.getRecipeID(), logicalRecipeDSetDO.getRecipeObj());
                            }
                            String nTmpRecipeNum = String.format("%d", j);
                            bChamberConbinationMatch = true;
                            int count = 0;
                            String lrcpDserPrstSql =
                                    "SELECT OMLRCP_DFLT_PRST.PROCRSC_ID, OMLRCP_DFLT_PRST.STATE\n"
                                            + "  FROM OMLRCP_DFLT_PRST\n"
                                            + " WHERE OMLRCP_DFLT_PRST.REFKEY = ?1\n"
                                            + "   AND OMLRCP_DFLT_PRST.LINK_MARKER = ?2";
                            List<Object[]> lrcpDserPrstQuery =
                                    cimJpaRepository.query(lrcpDserPrstSql, logicalRecipe.getId(), nTmpRecipeNum);
                            for (int k = 0; k < CimArrayUtils.getSize(lrcpDserPrstQuery); k++) {
                                String lrcpDsetPrstProcrscID = lrcpDserPrstQuery.get(k)[0].toString();
                                String lrcpDsetPrstState = lrcpDserPrstQuery.get(k)[1].toString();
                                Boolean state = "1".equals(lrcpDsetPrstState);
                                for (int l = 0; l < nProcessResourceCount; l++) {
                                    Infos.WhatNextChamberInfoInfo chamberInfoInfo = tmpChamberInfo.get(l);
                                    Infos.Chamber chamber = new Infos.Chamber();
                                    if (CimStringUtils.equals(
                                            chamberInfoInfo.getChamberID(), lrcpDsetPrstProcrscID)) {
                                        if (!state.equals(chamberInfoInfo.getAvailableFlag())) {
                                            bChamberConbinationMatch = false;
                                        }
                                        if (bChamberConbinationMatch) {
                                            if (chamberInfoInfo.getAvailableFlag()) {
                                                chamber.setChamberID(new ObjectIdentifier(chamberInfoInfo.getChamberID()));
                                                chambers.add(chamber);
                                            }
                                        }
                                    }
                                }
                            }

                            if (bChamberConbinationMatch) {
                                if (BizConstant.CONSTANT_QUANTITY_ONE.equals(String.valueOf(searchCondition))) {
                                    if (!bFirstFound) {
                                        nSeqNoOfLRDSet = j;
                                        bFirstFound = true;
                                        nFirstChamberCount =
                                                CimArrayUtils.getSize(defaultRecipeSetting.getChamberSeq());
                                        for (int z = 0; z < nFirstChamberCount; z++) {
                                            firstChamberSeq.add(defaultRecipeSetting.getChamberSeq().get(z));
                                        }
                                    }
                                    // ------------------------------------------------------------------------
                                    // Check Entity Inhibit for ProductID + EquipmentID + RecipeID + ChamberID
                                    // ------------------------------------------------------------------------
                                    List<Constrain.EntityIdentifier> entities = new ArrayList<>();
                                    int processResourceStatesLen =
                                            CimArrayUtils.getSize(defaultRecipeSetting.getChamberSeq());
                                    if (!ObjectIdentifier.isEmpty(whatNextAttributes.getProductID())) {
                                        Constrain.EntityIdentifier entity = new Constrain.EntityIdentifier();
                                        entity.setClassName(BizConstant.SP_INHIBITCLASSID_PRODUCT);
                                        entity.setObjectId(
                                                ObjectIdentifier.fetchValue(whatNextAttributes.getProductID()));
                                        entities.add(entity);
                                    }
                                    if (!ObjectIdentifier.isEmpty(equipmentID)) {
                                        Constrain.EntityIdentifier entity = new Constrain.EntityIdentifier();
                                        entity.setClassName(BizConstant.SP_INHIBITCLASSID_EQUIPMENT);
                                        entity.setObjectId(ObjectIdentifier.fetchValue(equipmentID));
                                        entities.add(entity);
                                    }
                                    if (!ObjectIdentifier.isEmpty(mrrcpRcipeID)) {
                                        String versionId =
                                                BaseStaticMethod.extractVersionFromID(mrrcpRcipeID.getValue());
                                        if (!CimStringUtils.equals(CIMStateConst.ACTIVE_VERSION, versionId)) {

                                            CimMachineRecipeDO machineRecipeDO =
                                                    cimJpaRepository.queryOne(
                                                            " SELECT ACTIVE_ID, ACTIVE_RKEY\n"
                                                                    + "                                                     FROM   OMRCP\n"
                                                                    + "                                                     WHERE  RECIPE_ID= ?1 ",
                                                            CimMachineRecipeDO.class,
                                                            ObjectIdentifier.fetchValue(mrrcpRcipeID));
                                            if (null != machineRecipeDO
                                                    && CimStringUtils.isNotEmpty(machineRecipeDO.getActiveID())) {
                                                Constrain.EntityIdentifier entity = new Constrain.EntityIdentifier();
                                                entity.setClassName(BizConstant.SP_INHIBITCLASSID_MACHINERECIPE);
                                                entity.setObjectId(machineRecipeDO.getActiveID());
                                                entities.add(entity);
                                            }
                                        } else {
                                            Constrain.EntityIdentifier entity = new Constrain.EntityIdentifier();
                                            entity.setClassName(BizConstant.SP_INHIBITCLASSID_MACHINERECIPE);
                                            entity.setObjectId(ObjectIdentifier.fetchValue(mrrcpRcipeID));
                                            entities.add(entity);
                                        }
                                    }
                                    for (int y = 0; y < processResourceStatesLen; y++) {
                                        if (!ObjectIdentifier.isEmpty(
                                                defaultRecipeSetting.getChamberSeq().get(y).getChamberID())) {
                                            Constrain.EntityIdentifier entity = new Constrain.EntityIdentifier();
                                            entity.setClassName(BizConstant.SP_INHIBITCLASSID_CHAMBER);
                                            entity.setObjectId(
                                                    ObjectIdentifier.fetchValue(
                                                            defaultRecipeSetting.getChamberSeq().get(y).getChamberID()));
                                            entities.add(entity);
                                        }
                                    }
                                    List<String> sublottypes = new ArrayList<>();
                                    sublottypes.add(subLotTypeSeq.get(nWhatNextLotCount));
                                    // setting sub lot type for checking entity inhibit
                                    //  TODO: the new core code sql is empty!!!!! 2019/10/23
                                    List<Constrain.EntityInhibitRecord> inhibitSeq =
                                            entityInhibitManager.allEntityInhibitRecordsForLotEntities(
                                                    entities, sublottypes);
                                    int uLen = CimArrayUtils.getSize(inhibitSeq);
                                    if (0 < uLen) {
                                        List<Infos.EntityInhibitInfo> entityInhibitInfos = new ArrayList<>();
                                        for (Constrain.EntityInhibitRecord entityInhibitRecord : inhibitSeq) {
                                            Infos.EntityInhibitInfo entityInhibitInfo = new Infos.EntityInhibitInfo();
                                            entityInhibitInfo.setEntityInhibitID(
                                                    new ObjectIdentifier(
                                                            entityInhibitRecord.getId(), entityInhibitRecord.getReferenceKey()));
                                            Infos.EntityInhibitAttributes entityInhibitAttributes =
                                                    new Infos.EntityInhibitAttributes();
                                            List<Constrain.EntityIdentifier> entits = entityInhibitRecord.getEntities();
                                            if (!CimObjectUtils.isEmpty(entits)) {
                                                List<Infos.EntityIdentifier> ens = new ArrayList<>();
                                                for (Constrain.EntityIdentifier entit : entits) {
                                                    Infos.EntityIdentifier en = new Infos.EntityIdentifier();
                                                    en.setClassName(entit.getClassName());
                                                    en.setObjectID(new ObjectIdentifier(entit.getObjectId()));
                                                    en.setAttribution(entit.getAttrib());
                                                    ens.add(en);
                                                }
                                                entityInhibitAttributes.setEntities(ens);
                                            }
                                            entityInhibitAttributes.setSubLotTypes(entityInhibitRecord.getSubLotTypes());
                                            entityInhibitAttributes.setStartTimeStamp(
                                                    entityInhibitRecord.getStartTimeStamp().toString());
                                            entityInhibitAttributes.setEndTimeStamp(
                                                    entityInhibitRecord.getEndTimeStamp().toString());
                                            entityInhibitAttributes.setClaimedTimeStamp(
                                                    entityInhibitRecord.getChangedTimeStamp().toString());
                                            entityInhibitAttributes.setReasonCode(
                                                    entityInhibitRecord.getReasonCode().getValue());
                                            entityInhibitAttributes.setOwnerID(entityInhibitRecord.getOwner());
                                            entityInhibitInfo.setEntityInhibitAttributes(entityInhibitAttributes);
                                        }
                                        Inputs.ObjEntityInhibiteffectiveForLotGetDRIn
                                                strEntityInhibitEffectiveForLotGetDRIn =
                                                new Inputs.ObjEntityInhibiteffectiveForLotGetDRIn();
                                        strEntityInhibitEffectiveForLotGetDRIn.setStrEntityInhibitInfos(
                                                entityInhibitInfos);
                                        strEntityInhibitEffectiveForLotGetDRIn.setLotID(whatNextAttributes.getLotID());
                                        // step6 - entityInhibit_effectiveForLot_GetDR
                                        List<Infos.EntityInhibitInfo> strEntityInhibitEffectiveForLotGetDROut =
                                                constraintMethod.constraintEffectiveForLotGetDR(
                                                        objCommon,
                                                        strEntityInhibitEffectiveForLotGetDRIn.getStrEntityInhibitInfos(),
                                                        strEntityInhibitEffectiveForLotGetDRIn.getLotID());

                                        uLen = CimArrayUtils.getSize(strEntityInhibitEffectiveForLotGetDROut);
                                        if (0 < uLen) {
                                            bChamberConbinationMatch = false;
                                            continue;
                                        }
                                    }
                                }
                                nSeqNoOfLRDSet = j;
                                break;
                            }
                        }
                        if (BizConstant.CONSTANT_QUANTITY_ONE.equals(selectCriteria)) {
                            if (bFirstFound && !bChamberConbinationMatch) {
                                bChamberConbinationMatch = true;
                                bFirstChamberFlag = true;
                            }
                        }
                        // ---------------------------------------
                        // Chamber availability combination
                        // does not match with recipe definition
                        // ---------------------------------------
                        if (!bChamberConbinationMatch) {
                            whatNextAttributes.setRecipeAvailableFlag(false);
                            if (!ObjectIdentifier.isEmpty(whatNextAttributes.getControlJob())
                                    && bLotHasAssignedMRecipeSeq.get(i)) {
                                whatNextAttributes.setRecipeAvailableFlag(true);
                                whatNextAttributes.setMachineRecipeID(
                                        new ObjectIdentifier(
                                                processOperation.getAssignRecipeID(),
                                                processOperation.getAssignRecipeObj()));
                                whatNextAttributes.setPhysicalRecipeID(
                                        processOperation.getAssignPhysicalRecipeID());
                            }
                        }
                        // ---------------------------------------
                        // Chamber availability combination
                        // match with recipe definition
                        // ---------------------------------------
                        else {
                            String lrcpSQL =
                                    "SELECT OMLRCP.MON_PROD_ID,\n"
                                            + "       OMLRCP.MON_PROD_RKEY,\n"
                                            + "       OMLRCP.TEST_TYPE_ID,\n"
                                            + "       OMLRCP.TEST_TYPE_RKEY,\n"
                                            + "       OMLRCP_DFLT.RECIPE_ID,\n"
                                            + "       OMLRCP_DFLT.RECIPE_RKEY\n"
                                            + "  FROM OMLRCP, OMLRCP_DFLT\n"
                                            + " WHERE OMLRCP.ID = ?1\n"
                                            + "   AND OMLRCP_DFLT.REFKEY = ?2\n"
                                            + "   AND OMLRCP_DFLT.IDX_NO = ?3";
                            List<Object[]> lrcpDsetQuery =
                                    cimJpaRepository.query(
                                            lrcpSQL, logicalRecipe.getId(), logicalRecipe.getId(), nSeqNoOfLRDSet);
                            String lrcpMntrProdSpecID = null;
                            String lrcpMntrProdSpecObj = null;
                            String lrcpTestTypeID = null;
                            String lrcpTestTypeObj = null;
                            String mRecipeID = null;
                            String mRecipeObj = null;

                            for (Object[] objects : lrcpDsetQuery) {
                                lrcpMntrProdSpecID = String.valueOf(objects[0]);
                                lrcpMntrProdSpecObj = String.valueOf(objects[1]);
                                lrcpTestTypeID = String.valueOf(objects[2]);
                                lrcpTestTypeObj = String.valueOf(objects[3]);
                                mRecipeID = String.valueOf(objects[4]);
                                mRecipeObj = String.valueOf(objects[5]);
                            }

                            List<Object> objects =
                                    cimJpaRepository.queryOneColumn(
                                            "select OMRCP.PHY_RECIPE_ID from OMRCP where ID = ?1", mRecipeObj);

                            if (CimStringUtils.isNotEmpty(mRecipeID)) {
                                String versionId = BaseStaticMethod.extractVersionFromID(mRecipeID);
                                if (!CimStringUtils.equals(CIMStateConst.ACTIVE_VERSION, versionId)) {
                                    Object[] machineRecipeDO =
                                            cimJpaRepository.queryOne(
                                                    "SELECT B.RECIPE_ID, B.ID FROM OMRCP A, OMRCP B WHERE A.RECIPE_ID = ?1 AND B.RECIPE_ID = A.ACTIVE_ID",
                                                    mRecipeID);

                                    whatNextAttributes.setRecipeAvailableFlag(true);
                                    whatNextAttributes.setProcessMonitorProductID(
                                            new ObjectIdentifier(lrcpMntrProdSpecID, lrcpMntrProdSpecObj));
                                    whatNextAttributes.setTestTypeID(
                                            new ObjectIdentifier(lrcpTestTypeID, lrcpTestTypeObj));
                                    // ---------------------
                                    // Lot Reservation Check
                                    // ---------------------
                                    if (ObjectIdentifier.isNotEmptyWithValue(aLot.getControlJobID())) {
                                        whatNextAttributes.setMachineRecipeID(
                                                new ObjectIdentifier(
                                                        processOperation.getAssignRecipeID(),
                                                        processOperation.getAssignRecipeObj()));
                                        whatNextAttributes.setPhysicalRecipeID(
                                                processOperation.getAssignPhysicalRecipeID());
                                    } else {
                                        whatNextAttributes.setMachineRecipeID(
                                                new ObjectIdentifier(mRecipeID, mRecipeObj));
                                        if (null != objects) {
                                            whatNextAttributes.setPhysicalRecipeID(String.valueOf(objects.get(0)));
                                        }
                                    }
                                }
                            }
                        }

                    } else {
                        // OM_CHAMBER_CHK_RULE=0
                        // DOC changed machineRecipe is not checked, because it is treated as Dynamic Recipe
                        // Changed machineRecipe.
                        // The lot is operable or not with the EQP state must be checked by
                        // tmpWhatNextAttributes[].operableFlagForCurrentMachineState
                        // OM_CHAMBER_CHK_RULE=1
                        // Followins check for chamber is executed even in case machine recipe is changed by
                        // DOC.
                        boolean bChamberFoundFlag = true;
                        String tmpChamberCheckPolicy = StandardProperties.OM_CHAMBER_CHK_RULE.getValue();
                        if (FPCLogicalRecipeFound
                                && FPCMachineRecipeFound
                                && bChamberFoundFlag
                                && BizConstant.CONSTANT_QUANTITY_ONE.equals(tmpChamberCheckPolicy)) {
                            bChamberFoundFlag = false;
                            if (bConditionalAvailableFlagForChamber) {
                                // -------------------------------------------------------------------------------------------------------------
                                //  Eqp has Chambers and LRCP multi Chamber support flag is true and Chamber
                                // conditional available is True.
                                //  So available Falg for each Chamber should be updated by considering Lot's
                                // SubLotType.
                                // -------------------------------------------------------------------------------------------------------------
                                for (int j = 0; j < nProcessResourceCount; j++) {
                                    Infos.WhatNextChamberInfoInfo whatNextChamberInfoInfo = tmpChamberInfo.get(j);
                                    if (whatNextChamberInfoInfo.getConditionalAvailable()) {
                                        String eqpSTSltSQL =
                                                "SELECT COUNT(*)\n"
                                                        + "  FROM OMEQPST_SLTYP\n"
                                                        + " WHERE OMEQPST_SLTYP.LINK_KEY = ?1 \n"
                                                        + "   AND OMEQPST_SLTYP.REFKEY = ?2 ";
                                        long eqpSTSltcount =
                                                cimJpaRepository.count(
                                                        eqpSTSltSQL,
                                                        aLot.getSubLotType(),
                                                        whatNextChamberInfoInfo.getCurrentStateObjRef());
                                        if (0L < eqpSTSltcount) {
                                            whatNextChamberInfoInfo.setAvailableFlag(true);
                                        } else {
                                            whatNextChamberInfoInfo.setAvailableFlag(false);
                                        }
                                    }
                                }
                            }

                            long ttlCount =
                                    cimJpaRepository.count(
                                            "SELECT COUNT(f1.ID) FROM OMLRCP_DFLT f1 WHERE f1.REFKEY in (SELECT f2.ID FROM OMLRCP f2 WHERE f2.LRCP_ID = ?1 ) ORDER BY IDX_NO",
                                            processDefinition.getRecipeObj());
                            //  List<CimLogicalRecipeDSetDO> logicalRecipeDefaultSettings =
                            // logicalRecipeCore.findLogicalRecipeDefaultSettingsByLogicalRecipeID(processDefinition.getRecipeObj());
                            int nCandidateMachineRecipeCount = CimNumberUtils.intValue(ttlCount);
                            if (0 == nCandidateMachineRecipeCount) {
                                bChamberFoundFlag = true;
                            } else {
                /*
                String lrcpDsetPrstSQL = " SELECT OMLRCP_DFLT_PRST.PROCRSC_ID, OMLRCP_DFLT_PRST.STATE\n" +
                        "   FROM OMLRCP_DFLT_PRST\n" +
                        "  WHERE OMLRCP_DFLT_PRST.REFKEY = ?1 \n" +
                        "    AND (OMLRCP_DFLT_PRST.LINK_MARKER = ?2 OR\n" +
                        "        OMLRCP_DFLT_PRST.LINK_MARKER = ?3 )";
                String lrcpDsetPrstProcrscID = null;
                String lrcpDsetPrstState = null;
                List<Object[]> lrcpDsetPrstQuery = cimJpaRepository.query(lrcpDsetPrstSQL, processDefinition.getRecipeObj(), j, j);
                if (ArrayUtils.isNotEmpty(lrcpDsetPrstQuery)) {
                    for (Object[] objects : lrcpDsetPrstQuery) {
                        lrcpDsetPrstProcrscID = objects[0].toString();
                        lrcpDsetPrstState = objects[1].toString();
                    }
                }
                */
                                boolean bFirstFound = false;
                                boolean bDefinedInLRCP = false;
                                boolean bChamberConbinationMatch = false;
                                for (int j = 0; j < nCandidateMachineRecipeCount; j++) {
                                    // ----------------------
                                    // Get machine recipe
                                    // ----------------------
                                    CimLogicalRecipeDSetDO logicalRecipeDefaultSetting =
                                            cimJpaRepository.queryOne(
                                                    "SELECT * FROM OMLRCP_DFLT WHERE REFKEY = ?1 AND IDX_NO = ?2",
                                                    CimLogicalRecipeDSetDO.class,
                                                    processDefinition.getRecipeObj(),
                                                    j);
                                    // logicalRecipeCore.findLogicalRecipeDefaultSettingByRefKeyAndSequenceNumber(processDefinition.getRecipeObj(), j);
                                    boolean bActiveVersion = false;
                                    ObjectIdentifier activeID = null;
                                    if (null != logicalRecipeDefaultSetting
                                            && null != logicalRecipeDefaultSetting.getRecipeID()) {
                                        String versionId =
                                                BaseStaticMethod.extractVersionFromID(
                                                        logicalRecipeDefaultSetting.getRecipeID());
                                        if (!CimStringUtils.equals(CIMStateConst.ACTIVE_VERSION, versionId)) {
                                            CimMachineRecipeDO machineRecipeDO =
                                                    cimJpaRepository.queryOne(
                                                            "SELECT ACTIVE_ID, ACTIVE_RKEY\n"
                                                                    + "                                                     FROM   OMRCP\n"
                                                                    + "                                                     WHERE  RECIPE_ID = ?1",
                                                            CimMachineRecipeDO.class,
                                                            logicalRecipeDefaultSetting.getRecipeID());
                                            if (null != machineRecipeDO) {
                                                activeID =
                                                        new ObjectIdentifier(
                                                                machineRecipeDO.getActiveID(), machineRecipeDO.getActiveObj());
                                                if (ObjectIdentifier.equalsWithValue(
                                                        whatNextAttributes.getMachineRecipeID(), activeID)) {
                                                    continue;
                                                }
                                            }
                                        }
                                    }
                                    bDefinedInLRCP = true;
                                    String nTmpRecipeNum = String.format("%d", j);
                                    String lrcpDsetPrstSQL =
                                            " SELECT OMLRCP_DFLT_PRST.PROCRSC_ID, OMLRCP_DFLT_PRST.STATE\n"
                                                    + "   FROM OMLRCP_DFLT_PRST\n"
                                                    + "  WHERE OMLRCP_DFLT_PRST.REFKEY = ?1 \n"
                                                    + "    AND (OMLRCP_DFLT_PRST.LINK_MARKER = ?2 OR\n"
                                                    + "        OMLRCP_DFLT_PRST.LINK_MARKER = ?3 )";
                                    String lrcpDsetPrstProcrscID;
                                    Boolean lrcpDsetPrstState;
                                    String tmpLrcpDsetPrstState;
                                    List<Object[]> lrcpDsetPrstQuery =
                                            cimJpaRepository.query(
                                                    lrcpDsetPrstSQL,
                                                    processDefinition.getRecipeObj(),
                                                    nTmpRecipeNum,
                                                    nTmpRecipeNum);
                                    if (CimArrayUtils.isNotEmpty(lrcpDsetPrstQuery)) {
                                        bChamberConbinationMatch = true;
                                        for (Object[] objects : lrcpDsetPrstQuery) {
                                            lrcpDsetPrstProcrscID = objects[0].toString();
                                            tmpLrcpDsetPrstState = objects[1].toString();
                                            lrcpDsetPrstState = "1".equals(tmpLrcpDsetPrstState);

                                            for (int k = 0; k < nProcessResourceCount; k++) {
                                                if (tmpChamberInfo.get(k).getChamberID().equals(lrcpDsetPrstProcrscID)) {
                                                    if (!tmpChamberInfo.get(k).getAvailableFlag().equals(lrcpDsetPrstState)) {
                                                        bChamberConbinationMatch = false;
                                                    }
                                                    if (bChamberConbinationMatch) {
                                                        if (tmpChamberInfo.get(k).getAvailableFlag()) {
                                                            Infos.Chamber chamber = new Infos.Chamber();
                                                            chamber.setChamberID(
                                                                    new ObjectIdentifier(tmpChamberInfo.get(k).getChamberID()));
                                                            chambers.add(chamber);
                                                        }
                                                    } else {
                                                        if (tmpChamberInfo.get(k).getAvailableFlag()) {
                                                            log.info("availableFlag==TRUE, OMLRCP_DFLT_PRST.STATE==false");
                                                        } else {
                                                            log.info("availableFlag==false, OMLRCP_DFLT_PRST.STATE==TRUE");
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (bChamberConbinationMatch) {
                                        log.info("chamber availbility combination match recipe FOUND!!");
                                        if (!bFirstFound) {
                                            bFirstFound = true;
                                            nFirstChamberCount =
                                                    CimArrayUtils.getSize(defaultRecipeSetting.getChamberSeq());
                                            for (int k = 0; k < nFirstChamberCount; k++) {
                                                firstChamberSeq.add(defaultRecipeSetting.getChamberSeq().get(k));
                                            }
                                        }
                                        // ------------------------------------------------------------------------
                                        // Check Entity Inhibit for ProductID + EquipmentID + RecipeID + ChamberID
                                        // ------------------------------------------------------------------------
                                        log.info(
                                                "Check Entity Inhibit for ProductID + EquipmentID + RecipeID + ChamberID");
                                        int processResourceStatesLen =
                                                CimArrayUtils.getSize(defaultRecipeSetting.getChamberSeq());
                                        List<Constrain.EntityIdentifier> entities = new ArrayList<>();
                                        if (!ObjectIdentifier.isEmpty(whatNextAttributes.getProductID())) {
                                            Constrain.EntityIdentifier entitie = new Constrain.EntityIdentifier();
                                            entitie.setClassName(BizConstant.SP_INHIBITCLASSID_PRODUCT);
                                            entitie.setObjectId(
                                                    ObjectIdentifier.fetchValue(whatNextAttributes.getProductID()));
                                            entities.add(entitie);
                                        }
                                        if (!ObjectIdentifier.isEmpty(equipmentID)) {
                                            Constrain.EntityIdentifier entitie = new Constrain.EntityIdentifier();
                                            entitie.setClassName(BizConstant.SP_INHIBITCLASSID_EQUIPMENT);
                                            entitie.setObjectId(ObjectIdentifier.fetchValue(equipmentID));
                                            entities.add(entitie);
                                        }
                                        if (bActiveVersion) {
                                            log.info("bActiveVersion == TRUE");
                                            if (!ObjectIdentifier.isEmpty(activeID)) {
                                                Constrain.EntityIdentifier entitie = new Constrain.EntityIdentifier();
                                                entitie.setClassName(BizConstant.SP_INHIBITCLASSID_MACHINERECIPE);
                                                entitie.setObjectId(ObjectIdentifier.fetchValue(activeID));
                                                entities.add(entitie);
                                            } else {
                                                Constrain.EntityIdentifier entitie = new Constrain.EntityIdentifier();
                                                entitie.setClassName(BizConstant.SP_INHIBITCLASSID_MACHINERECIPE);
                                                entitie.setObjectId(
                                                        ObjectIdentifier.fetchValue(whatNextAttributes.getMachineRecipeID()));
                                                entities.add(entitie);
                                            }
                                        }
                                        for (int k = 0; k < processResourceStatesLen; k++) {
                                            if (!ObjectIdentifier.isEmpty(
                                                    defaultRecipeSetting.getChamberSeq().get(k).getChamberID())) {
                                                Constrain.EntityIdentifier entitie = new Constrain.EntityIdentifier();
                                                entitie.setClassName(BizConstant.SP_INHIBITCLASSID_CHAMBER);
                                                entitie.setObjectId(ObjectIdentifier.fetchValue(equipmentID));
                                                entities.add(entitie);
                                            }
                                        }
                                        // setting sub lot type for checking entity inhibit
                                        List<String> sublottypes = new ArrayList<>();
                                        sublottypes.add(subLotTypeSeq.get(i));

                                        List<Constrain.EntityInhibitRecord> inhibitSeq =
                                                entityInhibitManager.allEntityInhibitRecordsForLotEntities(
                                                        entities, sublottypes);
                                        int uLen = CimArrayUtils.getSize(inhibitSeq);
                                        if (0 < uLen) {
                                            List<Infos.EntityInhibitInfo> entityInhibitInfos = new ArrayList<>();
                                            for (Constrain.EntityInhibitRecord entityInhibitRecord : inhibitSeq) {
                                                Infos.EntityInhibitInfo entityInhibitInfo = new Infos.EntityInhibitInfo();
                                                entityInhibitInfo.setEntityInhibitID(
                                                        new ObjectIdentifier(
                                                                entityInhibitRecord.getId(),
                                                                entityInhibitRecord.getReferenceKey()));
                                                Infos.EntityInhibitAttributes entityInhibitAttributes =
                                                        new Infos.EntityInhibitAttributes();
                                                List<Constrain.EntityIdentifier> entits = entityInhibitRecord.getEntities();
                                                if (!CimObjectUtils.isEmpty(entits)) {
                                                    List<Infos.EntityIdentifier> ens = new ArrayList<>();
                                                    for (Constrain.EntityIdentifier entit : entits) {
                                                        Infos.EntityIdentifier en = new Infos.EntityIdentifier();
                                                        en.setClassName(entit.getClassName());
                                                        en.setObjectID(new ObjectIdentifier(entit.getObjectId()));
                                                        en.setAttribution(entit.getAttrib());
                                                        ens.add(en);
                                                    }
                                                    entityInhibitAttributes.setEntities(ens);
                                                }
                                                entityInhibitAttributes.setSubLotTypes(
                                                        entityInhibitRecord.getSubLotTypes());
                                                entityInhibitAttributes.setStartTimeStamp(
                                                        entityInhibitRecord.getStartTimeStamp().toString());
                                                entityInhibitAttributes.setEndTimeStamp(
                                                        entityInhibitRecord.getEndTimeStamp().toString());
                                                entityInhibitAttributes.setClaimedTimeStamp(
                                                        entityInhibitRecord.getChangedTimeStamp().toString());
                                                entityInhibitAttributes.setReasonCode(
                                                        entityInhibitRecord.getReasonCode().getValue());
                                                entityInhibitAttributes.setOwnerID(entityInhibitRecord.getOwner());
                                                entityInhibitInfo.setEntityInhibitAttributes(entityInhibitAttributes);
                                            }
                                            Inputs.ObjEntityInhibiteffectiveForLotGetDRIn
                                                    strEntityInhibitEffectiveForLotGetDRIn =
                                                    new Inputs.ObjEntityInhibiteffectiveForLotGetDRIn();
                                            strEntityInhibitEffectiveForLotGetDRIn.setStrEntityInhibitInfos(
                                                    entityInhibitInfos);
                                            strEntityInhibitEffectiveForLotGetDRIn.setLotID(
                                                    whatNextAttributes.getLotID());
                                            // step6 - entityInhibit_effectiveForLot_GetDR
                                            List<Infos.EntityInhibitInfo> strEntityInhibitEffectiveForLotGetDROut =
                                                    constraintMethod.constraintEffectiveForLotGetDR(
                                                            objCommon,
                                                            strEntityInhibitEffectiveForLotGetDRIn.getStrEntityInhibitInfos(),
                                                            strEntityInhibitEffectiveForLotGetDRIn.getLotID());

                                            uLen = CimArrayUtils.getSize(strEntityInhibitEffectiveForLotGetDROut);
                                            if (0 < uLen) {
                                                bChamberConbinationMatch = false;
                                                continue;
                                            }
                                            break;
                                        }
                                    }
                                }
                                if (!bDefinedInLRCP) {
                                    log.info(
                                            "overwritten recipe isn't defined in default setting of logical recipe, skip chamber check.");
                                    bChamberFoundFlag = true;
                                }
                                if (bFirstFound && !bChamberConbinationMatch) {
                                    log.info("bFirstFound = TRUE && bChamberConbinationMatch = false");
                                    bFirstChamberFlag = true;
                                }
                            }
                        }
                        if (!bChamberFoundFlag) {
                            log.info("Chamber check is performed, but available ones aren't found.");
                        }
                        if (FPCLogicalRecipeFound && FPCMachineRecipeFound && bChamberFoundFlag) {
                            log.info("Logical/Machine recipe found.");
                            whatNextAttributes.setProcessMonitorProductID(
                                    new ObjectIdentifier(
                                            logicalRecipe.getMonitorProductSpecificationID(),
                                            logicalRecipe.getMonitorProductSpecificationObj()));
                            whatNextAttributes.setTestTypeID(
                                    new ObjectIdentifier(
                                            logicalRecipe.getTestTypeID(), logicalRecipe.getTestTypeObj()));
                            if (ObjectIdentifier.isNotEmptyWithValue(aLot.getControlJobID())) {
                                log.info("reserved");
                                whatNextAttributes.setRecipeAvailableFlag(true);
                                whatNextAttributes.setMachineRecipeID(
                                        new ObjectIdentifier(
                                                processOperation.getAssignRecipeID(),
                                                processOperation.getAssignRecipeObj()));
                                whatNextAttributes.setPhysicalRecipeID(
                                        processOperation.getAssignPhysicalRecipeID());
                            } else {
                                log.info("not reserved");
                                whatNextAttributes.setRecipeAvailableFlag(true);
                                whatNextAttributes.setMachineRecipeID(
                                        new ObjectIdentifier(mRecipe.getRecipeID(), mRecipe.getId()));
                                whatNextAttributes.setPhysicalRecipeID(mRecipe.getPhysicalRecipeID());
                            }
                        } else {
                            log.info("Logical/Machine recipe not found.");
                            if (ObjectIdentifier.isNotEmptyWithValue(aLot.getControlJobID())) {
                                log.info("reserved");
                                whatNextAttributes.setRecipeAvailableFlag(true);
                                whatNextAttributes.setMachineRecipeID(
                                        new ObjectIdentifier(
                                                processOperation.getAssignRecipeID(),
                                                processOperation.getAssignRecipeObj()));
                                whatNextAttributes.setPhysicalRecipeID(
                                        processOperation.getAssignPhysicalRecipeID());
                            }
                        }
                    }
                } else {
                    // ---------------------------------------------
                    // Not multi chamber machine case
                    // ---------------------------------------------
                    log.info("machine is not multi chamber type");
                    if (!strLotEffectiveFPCInfoGetOut.isMachineRecipeActionRequiredFlag()) {
                        // -------------------------------------------------------------
                        // select Logical and Machine and Physical Recipe information
                        // -------------------------------------------------------------
                        String logicalRecipeMonitorProductSpecificationID = null;
                        String logicalRecipeMonitorProductSpecificationObj = null;
                        String logicalRecipeTestTypeID = null;
                        String logicalRecipeTestTypeObj = null;
                        String machineRecipeID = null;
                        String machineRecipePhysicalRecipeID = null;
                        Integer sequenceNumber = null;
                        String lrcpSQL =
                                "SELECT OMLRCP.MON_PROD_ID,\n"
                                        + "       OMLRCP.MON_PROD_RKEY,\n"
                                        + "       OMLRCP.TEST_TYPE_ID,\n"
                                        + "       OMLRCP.TEST_TYPE_RKEY,\n"
                                        + "       OMRCP.RECIPE_ID,\n"
                                        + "       OMRCP.PHY_RECIPE_ID,\n"
                                        + "       OMLRCP_DFLT.IDX_NO\n"
                                        + "  FROM OMLRCP, OMLRCP_DFLT, OMRCP, OMRCP_EQP\n"
                                        + " WHERE OMLRCP.ID = ?1 \n"
                                        + "   AND OMLRCP_DFLT.REFKEY = ?2 \n"
                                        + "   AND OMLRCP_DFLT.RECIPE_ID = OMRCP.RECIPE_ID\n"
                                        + "   AND OMRCP.ID = OMRCP_EQP.REFKEY\n"
                                        + "   AND OMRCP_EQP.EQP_ID = ?3 ";
                        List<Object[]> lrcpQuery =
                                cimJpaRepository.query(
                                        lrcpSQL, logicalRecipe.getId(), logicalRecipe.getId(), equipmentID.getValue());
                        if (!CimArrayUtils.isEmpty(lrcpQuery)) {
                            for (Object[] objects : lrcpQuery) {
                                logicalRecipeMonitorProductSpecificationID = String.valueOf(objects[0]);
                                logicalRecipeMonitorProductSpecificationObj = String.valueOf(objects[1]);
                                logicalRecipeTestTypeID = String.valueOf(objects[2]);
                                logicalRecipeTestTypeObj = String.valueOf(objects[3]);
                                machineRecipeID = String.valueOf(objects[4]);
                                if (CimStringUtils.isNotEmpty(machineRecipeID)) {
                                    final String versionId =
                                            cimFrameWorkGlobals.extractVersionFromID(machineRecipeID);
                                    if (CimStringUtils.equals(versionId, BizConstant.SP_ACTIVE_VERSION)) {
                                        String mrcpSQL =
                                                "SELECT B.RECIPE_ID\n"
                                                        + " FROM  OMRCP A, OMRCP B\n"
                                                        + " WHERE A.RECIPE_ID = ?1 AND\n"
                                                        + " B.RECIPE_ID = A.ACTIVE_ID";
                                        List<Object[]> mrcpQuery = cimJpaRepository.query(mrcpSQL, machineRecipeID);
                                        if (CimArrayUtils.isNotEmpty(mrcpQuery)) {
                                            for (Object[] objects1 : mrcpQuery) {
                                                machineRecipeID = String.valueOf(objects1[0]);
                                            }
                                        }
                                    }
                                }
                                machineRecipePhysicalRecipeID = String.valueOf(objects[5]);
                                // not used    sequenceNumber = null != objects[6] ?
                                // Integer.parseInt(String.valueOf(objects[6])) : 0;
                            }
                        }
                        whatNextAttributes.setRecipeAvailableFlag(true);
                        whatNextAttributes.setProcessMonitorProductID(
                                new ObjectIdentifier(
                                        logicalRecipeMonitorProductSpecificationID,
                                        logicalRecipeMonitorProductSpecificationObj));
                        whatNextAttributes.setTestTypeID(
                                new ObjectIdentifier(logicalRecipeTestTypeID, logicalRecipeTestTypeObj));
                        // ---------------------
                        // Lot Reservation Check
                        // ---------------------
                        if (ObjectIdentifier.isNotEmptyWithValue(aLot.getControlJobID())) {
                            whatNextAttributes.setMachineRecipeID(
                                    new ObjectIdentifier(
                                            processOperation.getAssignRecipeID(), processOperation.getAssignRecipeObj()));
                            whatNextAttributes.setPhysicalRecipeID(processOperation.getAssignPhysicalRecipeID());
                        } else {
                            // ------------------------------------------------------------------------------------------------------
                            //  Even if the Lot does not have relation with any logical recipe, "Recipe Available
                            // Flag" is "Yes".
                            //  There is no problem in Auto-3 mode, but this flag should be "No" in case of other
                            // mode.
                            //  Therefore, we changed to turn the flag "No" by condition.
                            //
                            //   1. Logical Recipe(Machine Recipe) is not found.
                            //   2. And WhatNext mode is not "Auto-3".
                            //   3. And the Lot does not have control job.
                            // ------------------------------------------------------------------------------------------------------
                            if (CimStringUtils.isEmpty(machineRecipeID)
                                    && (!BizConstant.SP_DP_SELECTCRITERIA_AUTO3.equals(selectCriteria)
                                    || !BizConstant.SP_DP_SELECTCRITERIA_EQPMONNOKIT.equals(selectCriteria))) {
                                whatNextAttributes.setRecipeAvailableFlag(false);
                            }

                            whatNextAttributes.setMachineRecipeID(new ObjectIdentifier(machineRecipeID));
                            whatNextAttributes.setPhysicalRecipeID(machineRecipePhysicalRecipeID);
                        }
                    } else {
                        if (FPCLogicalRecipeFound && FPCMachineRecipeFound) {
                            whatNextAttributes.setProcessMonitorProductID(
                                    new ObjectIdentifier(
                                            logicalRecipe.getMonitorProductSpecificationID(),
                                            logicalRecipe.getMonitorProductSpecificationObj()));
                            whatNextAttributes.setTestTypeID(
                                    new ObjectIdentifier(
                                            logicalRecipe.getTestTypeID(), logicalRecipe.getTestTypeObj()));
                            if (ObjectIdentifier.isNotEmptyWithValue(aLot.getControlJobID())) {
                                whatNextAttributes.setRecipeAvailableFlag(true);
                                whatNextAttributes.setMachineRecipeID(
                                        new ObjectIdentifier(
                                                processOperation.getAssignRecipeID(),
                                                processOperation.getAssignRecipeObj()));
                                whatNextAttributes.setPhysicalRecipeID(
                                        processOperation.getAssignPhysicalRecipeID());
                            } else {
                                whatNextAttributes.setRecipeAvailableFlag(true);
                                whatNextAttributes.setMachineRecipeID(
                                        new ObjectIdentifier(mRecipe.getRecipeID(), mRecipe.getId()));
                                whatNextAttributes.setPhysicalRecipeID(mRecipe.getPhysicalRecipeID());
                            }
                        } else {
                            whatNextAttributes.setProcessMonitorProductID(new ObjectIdentifier("", ""));
                            whatNextAttributes.setTestTypeID(new ObjectIdentifier("", ""));
                            if (ObjectIdentifier.isNotEmptyWithValue(aLot.getControlJobID())) {
                                whatNextAttributes.setRecipeAvailableFlag(true);
                                whatNextAttributes.setMachineRecipeID(
                                        new ObjectIdentifier(
                                                processOperation.getAssignRecipeID(),
                                                processOperation.getAssignRecipeObj()));
                                whatNextAttributes.setPhysicalRecipeID(
                                        processOperation.getAssignPhysicalRecipeID());
                            } else {
                                whatNextAttributes.setRecipeAvailableFlag(false);
                                whatNextAttributes.setMachineRecipeID(new ObjectIdentifier("*", ""));
                                whatNextAttributes.setPhysicalRecipeID("");
                            }
                        }
                    }
                }
            }

            if (CimStringUtils.equals(selectCriteria, BizConstant.SP_DP_SELECTCRITERIA_CANBEPROCESSED)
                    || CimStringUtils.equals(selectCriteria, BizConstant.SP_DP_SELECTCRITERIA_EQPMONNOKIT)
                    || CimStringUtils.equals(selectCriteria, BizConstant.SP_DP_SELECTCRITERIA_AUTO3)) {
                if (!whatNextAttributes.getRecipeAvailableFlag()) {
                    log.info("recipeAvailableFlag is not TRUE");
                    continue;
                }
            }
            // ---------------------------------------
            // Get entity inhibit information for lot
            // ---------------------------------------
            List<Infos.EntityInhibitInfo> entityInhibitInfoSeq = new ArrayList<>();
            if (!bEntityInhibitInfoCollected) {
                List<Constrain.EntityIdentifier> entities = new ArrayList<>();
                if (!ObjectIdentifier.isEmpty(whatNextAttributes.getProductID())) {
                    Constrain.EntityIdentifier entity = new Constrain.EntityIdentifier();
                    entity.setClassName(BizConstant.SP_INHIBITCLASSID_PRODUCT);
                    entity.setObjectId(ObjectIdentifier.fetchValue(whatNextAttributes.getProductID()));
                    entities.add(entity);
                }
                if (!ObjectIdentifier.isEmpty(whatNextAttributes.getRouteID())) {
                    Constrain.EntityIdentifier entity = new Constrain.EntityIdentifier();
                    entity.setClassName(BizConstant.SP_INHIBITCLASSID_ROUTE);
                    entity.setObjectId(ObjectIdentifier.fetchValue(whatNextAttributes.getRouteID()));
                    if (CimStringUtils.isNotEmpty(whatNextAttributes.getOperationNumber())) {
                        entity.setAttrib(whatNextAttributes.getOperationNumber());
                    }
                    entities.add(entity);
                }
                if (!ObjectIdentifier.isEmpty(whatNextAttributes.getOperationID())) {
                    Constrain.EntityIdentifier entity = new Constrain.EntityIdentifier();
                    entity.setClassName(BizConstant.SP_INHIBITCLASSID_PROCESS);
                    entity.setObjectId(ObjectIdentifier.fetchValue(whatNextAttributes.getOperationID()));
                    entities.add(entity);
                }
                if (!CimStringUtils.isEmpty(processOperation.getModuleProcessDefinitionID())) {
                    Constrain.EntityIdentifier entity = new Constrain.EntityIdentifier();
                    entity.setClassName(BizConstant.SP_INHIBITCLASSID_MODULEPD);
                    entity.setObjectId(processOperation.getModuleProcessDefinitionID());
                    entities.add(entity);
                }
                if (!ObjectIdentifier.isEmpty(equipmentID)) {
                    Constrain.EntityIdentifier entity = new Constrain.EntityIdentifier();
                    entity.setClassName(BizConstant.SP_INHIBITCLASSID_EQUIPMENT);
                    entity.setObjectId(ObjectIdentifier.fetchValue(equipmentID));
                    entities.add(entity);
                }
                if (!ObjectIdentifier.isEmpty(whatNextAttributes.getMachineRecipeID())
                        && !ObjectIdentifier.equalsWithValue(whatNextAttributes.getMachineRecipeID(), "*")) {
                    Constrain.EntityIdentifier entity = new Constrain.EntityIdentifier();
                    entity.setClassName(BizConstant.SP_INHIBITCLASSID_MACHINERECIPE);
                    entity.setObjectId(ObjectIdentifier.fetchValue(whatNextAttributes.getMachineRecipeID()));
                    entities.add(entity);
                } else {
                    if (1 == searchCondition) {
                        if (!ObjectIdentifier.isEmpty(inhibitMachineRecipe)) {
                            Constrain.EntityIdentifier entity = new Constrain.EntityIdentifier();
                            entity.setClassName(BizConstant.SP_INHIBITCLASSID_MACHINERECIPE);
                            entity.setObjectId(ObjectIdentifier.fetchValue(inhibitMachineRecipe));
                            entities.add(entity);
                        }
                    }
                }
                int reticleGrpLen = CimArrayUtils.getSize(whatNextAttributes.getReticleGroupIDs());
                for (int j = 0; j < reticleGrpLen; j++) {
                    ObjectIdentifier reticleGroup = whatNextAttributes.getReticleGroupIDs().get(j);
                    if (!ObjectIdentifier.isEmpty(reticleGroup)) {
                        Constrain.EntityIdentifier entity = new Constrain.EntityIdentifier();
                        entity.setClassName(BizConstant.SP_INHIBITCLASSID_RETICLEGROUP);
                        entity.setObjectId(ObjectIdentifier.fetchValue(reticleGroup));
                        entities.add(entity);
                    }
                }
                // ---------------------
                // Reticle Group Loop
                // ---------------------
                if (!strLotEffectiveFPCInfoGetOut.isRecipeParameterActionRequiredFlag()) {
                    // not-used int totalrtcllen = 0;
                    for (int j = 0; j < reticleGrpLen; j++) {
                        ObjectIdentifier reticleGroup = whatNextAttributes.getReticleGroupIDs().get(j);
                        if (ObjectIdentifier.isEmpty(reticleGroup)) {
                            continue;
                        }
                        Params.ReticleListInqParams reticleListInqParams = new Params.ReticleListInqParams();
                        reticleListInqParams.setReticleGroupID(reticleGroup);
                        reticleListInqParams.setMaxRetrieveCount(100L);
                        reticleListInqParams.setFPCCategory(tmpFPCCategory);
                        reticleListInqParams.setWhiteDefSearchCriteria(
                                BizConstant.SP_WHITEDEF_SEARCHCRITERIA_ALL);
                        reticleListInqParams.setReticleGroupID(reticleGroup);

                        Results.ReticleListInqResult strReticleListGetDROut =
                                reticleMethod.reticleListGetDR(objCommon, reticleListInqParams);
                        int FRLength = CimArrayUtils.getSize(strReticleListGetDROut.getStrFoundReticle());
                        // ----------------------------------
                        // Reticle ID In Reticle Group Loop
                        // ----------------------------------
                        for (int k = 0; k < FRLength; k++) {
                            boolean restrictionFlag = false;
                            ObjectIdentifier durableSubStatus =
                                    strReticleListGetDROut
                                            .getStrFoundReticle()
                                            .get(k)
                                            .getReticleStatusInfo()
                                            .getDurableSubStatus();
                            if (!ObjectIdentifier.isEmpty(durableSubStatus)) {
                                Infos.DurableSubStatusInfo strDurableSubStatusInfo =
                                        new Infos.DurableSubStatusInfo();
                                if (!durableSubStatusList.containsKey(
                                        ObjectIdentifier.fetchValue(durableSubStatus))) {
                                    Inputs.ObjDurableSubStateDBInfoGetDRIn durableSubStateDBInfoGetDRIn =
                                            new Inputs.ObjDurableSubStateDBInfoGetDRIn();
                                    durableSubStateDBInfoGetDRIn.setDurableSubStatus(durableSubStatus.getValue());
                                    durableSubStateDBInfoGetDRIn.setAvailableSubLotTypeInfoFlag(true);
                                    durableSubStateDBInfoGetDRIn.setNextTransitionDurableSubStatusInfoFlag(false);
                                    strDurableSubStatusInfo =
                                            durableMethod.durableSubStateDBInfoGetDR(
                                                    objCommon, durableSubStateDBInfoGetDRIn);
                                    durableSubStatusList.put(
                                            ObjectIdentifier.fetchValue(durableSubStatus), strDurableSubStatusInfo);
                                }
                                boolean AvailableFlag =
                                        null == strDurableSubStatusInfo.getConditionalAvailableFlag()
                                                ? false
                                                : strDurableSubStatusInfo.getConditionalAvailableFlag();
                                if (AvailableFlag) {
                                    restrictionFlag = true;
                                    int lenSubLotType =
                                            CimArrayUtils.getSize(strDurableSubStatusInfo.getAvailableSubLotTypes());
                                    for (int l = 0; l < lenSubLotType; l++) {
                                        String subLotType = strDurableSubStatusInfo.getAvailableSubLotTypes().get(l);
                                        if (CimStringUtils.equals(aLot.getSubLotType(), subLotType)) {
                                            restrictionFlag = false;
                                            break;
                                        }
                                    }
                                }
                            }
                            Infos.ReticleStatusInfo reticleStatusInfo =
                                    strReticleListGetDROut.getStrFoundReticle().get(k).getReticleStatusInfo();
                            if (ObjectIdentifier.equalsWithValue(reticleStatusInfo.getEquipmentID(), equipmentID)
                                    && CimStringUtils.equals(
                                    reticleStatusInfo.getTransferStatus(), BizConstant.SP_TRANSSTATE_EQUIPMENTIN)
                                    && !restrictionFlag
                                    && (CimStringUtils.equals(
                                    reticleStatusInfo.getReticleStatus(), CIMStateConst.CIM_DURABLE_AVAILABLE)
                                    || CimStringUtils.equals(
                                    reticleStatusInfo.getReticleStatus(), CIMStateConst.CIM_DURABLE_INUSE))) {

                                Constrain.EntityIdentifier entity = new Constrain.EntityIdentifier();
                                entity.setClassName(BizConstant.SP_INHIBITCLASSID_RETICLE);
                                entity.setObjectId(
                                        ObjectIdentifier.fetchValue(
                                                strReticleListGetDROut.getStrFoundReticle().get(k).getReticleID()));
                                entities.add(entity);
                                Infos.FoundReticle foundReticle = new Infos.FoundReticle();
                                foundReticle.setReticleID(new ObjectIdentifier(entity.getObjectId()));
                                foundReticle.setReticleGroupID(
                                        strReticleListGetDROut.getStrFoundReticle().get(k).getReticleGroupID());
                                reticleSeq.add(foundReticle);
                            }
                        }
                    }
                } else {
                    InhibitReticleIDLen = CimArrayUtils.getSize(reticleSeq);
                    for (int j = 0; j < InhibitReticleIDLen; j++) {
                        Constrain.EntityIdentifier entity = new Constrain.EntityIdentifier();
                        entity.setClassName(BizConstant.SP_INHIBITCLASSID_RETICLE);
                        entity.setObjectId(ObjectIdentifier.fetchValue(reticleSeq.get(j).getReticleID()));
                        entities.add(entity);
                    }
                }
                if (!ObjectIdentifier.isEmpty(whatNextAttributes.getStageID())) {
                    Constrain.EntityIdentifier entity = new Constrain.EntityIdentifier();
                    entity.setClassName(BizConstant.SP_INHIBITCLASSID_STAGE);
                    entity.setObjectId(ObjectIdentifier.fetchValue(whatNextAttributes.getStageID()));
                    entities.add(entity);
                }
                int chamberLen = CimArrayUtils.getSize(strDefaultRecipeSetSeq.get(size).getChamberSeq());
                if (chamberLen > 0) {
                    for (int j = 0; j < chamberLen; j++) {
                        Infos.Chamber chamber = strDefaultRecipeSetSeq.get(size).getChamberSeq().get(j);
                        if (ObjectIdentifier.isEmpty(chamber.getChamberID())) {
                            continue;
                        }
                        Constrain.EntityIdentifier entity = new Constrain.EntityIdentifier();
                        entity.setClassName(BizConstant.SP_INHIBITCLASSID_CHAMBER);
                        entity.setObjectId(ObjectIdentifier.fetchValue(equipmentID));
                        entity.setAttrib(ObjectIdentifier.fetchValue(chamber.getChamberID()));
                        entities.add(entity);
                    }
                } else {
                    if (bFirstChamberFlag) {
                        chamberLen = CimArrayUtils.getSize(firstChamberSeq);
                        for (int j = 0; j < chamberLen; j++) {
                            if (ObjectIdentifier.isEmpty(firstChamberSeq.get(j).getChamberID())) {
                                continue;
                            }
                            Constrain.EntityIdentifier entity = new Constrain.EntityIdentifier();
                            entity.setClassName(BizConstant.SP_INHIBITCLASSID_CHAMBER);
                            entity.setObjectId(ObjectIdentifier.fetchValue(equipmentID));
                            entity.setAttrib(
                                    ObjectIdentifier.fetchValue(firstChamberSeq.get(j).getChamberID()));
                            entities.add(entity);
                        }
                        defaultRecipeSetting.setChamberSeq(firstChamberSeq);
                    }
                }
                List<String> sublotTypes = new ArrayList<>();
                // setting sub lot type for checking entity inhibit
                sublotTypes.add(subLotTypeSeq.get(size));
                // checking inhibit with entity information and sub lot type
                List<Constrain.EntityInhibitRecord> inhibitSeq =
                        entityInhibitManager.allEntityInhibitRecordsForLotEntities(entities, sublotTypes);
                int numOfInhibits = CimArrayUtils.getSize(inhibitSeq);
                entityInhibitInfoSeq =
                        inhibitSeq.stream()
                                .map(
                                        entityInhibitRecord -> {
                                            Infos.EntityInhibitInfo entityInhibitInfo = new Infos.EntityInhibitInfo();
                                            Infos.EntityInhibitAttributes entityInhibitAttributes =
                                                    new Infos.EntityInhibitAttributes();
                                            entityInhibitInfo.setEntityInhibitAttributes(entityInhibitAttributes);
                                            List<Constrain.EntityIdentifier> entits = entityInhibitRecord.getEntities();
                                            if (!CimObjectUtils.isEmpty(entits)) {
                                                List<Infos.EntityIdentifier> ens = new ArrayList<>();
                                                for (Constrain.EntityIdentifier entit : entits) {
                                                    Infos.EntityIdentifier en = new Infos.EntityIdentifier();
                                                    en.setClassName(entit.getClassName());
                                                    en.setObjectID(new ObjectIdentifier(entit.getObjectId()));
                                                    en.setAttribution(entit.getAttrib());
                                                    ens.add(en);
                                                }
                                                entityInhibitAttributes.setEntities(ens);
                                            }
                                            entityInhibitInfo.setEntityInhibitID(
                                                    new ObjectIdentifier(
                                                            entityInhibitRecord.getId(), entityInhibitRecord.getReferenceKey()));
                                            entityInhibitAttributes.setSubLotTypes(entityInhibitRecord.getSubLotTypes());
                                            entityInhibitAttributes.setStartTimeStamp(
                                                    CimDateUtils.convertToSpecString(
                                                            entityInhibitRecord.getStartTimeStamp()));
                                            entityInhibitAttributes.setEndTimeStamp(
                                                    CimDateUtils.convertToSpecString(entityInhibitRecord.getEndTimeStamp()));
                                            entityInhibitAttributes.setClaimedTimeStamp(
                                                    CimDateUtils.convertToSpecString(
                                                            entityInhibitRecord.getChangedTimeStamp()));
                                            entityInhibitAttributes.setReasonCode(
                                                    entityInhibitRecord.getReasonCode().getValue());
                                            entityInhibitAttributes.setOwnerID(entityInhibitRecord.getOwner());
                                            entityInhibitAttributes.setMemo(entityInhibitRecord.getClaimMemo());
                                            return entityInhibitInfo;
                                        })
                                .collect(Collectors.toList());
                // ------------------------------------------------------------------//
                //   Check Inhibition for each Reticle.                             //
                //   This check is necessary if this Equipment requires Reticle,    //
                //   and the Reticle is available for Lot.                          //
                // ------------------------------------------------------------------//
                if (0 < reticleGrpLen) {
                    int entLen = CimArrayUtils.getSize(entities);
                    // entityInhibit_CheckForReticleInhibition
                    Inputs.EntityInhibitCheckForReticleInhibition entityInhibitCheckForReticleInhibition =
                            new Inputs.EntityInhibitCheckForReticleInhibition();
                    entityInhibitCheckForReticleInhibition.setEntityInhibitInfoSeq(entityInhibitInfoSeq);
                    if (!CimObjectUtils.isEmpty(entities)) {
                        entityInhibitCheckForReticleInhibition.setEntityIDSeq(
                                entities.stream()
                                        .map(
                                                x ->
                                                        new Infos.EntityIdentifier(
                                                                x.getClassName(),
                                                                new ObjectIdentifier(x.getObjectId()),
                                                                x.getAttrib()))
                                        .collect(Collectors.toList()));
                    }
                    entityInhibitCheckForReticleInhibition.setReticleSeq(reticleSeq);
                    entityInhibitCheckForReticleInhibition.setSublottypes(sublotTypes);
                    entityInhibitCheckForReticleInhibition.setUseFPCInfo(
                            strLotEffectiveFPCInfoGetOut.isReticleActionRequiredFlag());

                    entityInhibitInfoSeq =
                            constraintMethod.constraintCheckForReticleInhibition(
                                    objCommon, entityInhibitCheckForReticleInhibition);
                    numOfInhibits = CimArrayUtils.getSize(entityInhibitInfoSeq);
                }
                for (int j = 0; j < numOfInhibits; j++) {
                    Infos.EntityInhibitAttributes entityInhibitAttributes =
                            entityInhibitInfoSeq.get(j).getEntityInhibitAttributes();

                    CimCodeDO codeDo =
                            cimJpaRepository.queryOne(
                                    "SELECT * FROM OMCODE WHERE CODETYPE_ID = ?1 AND CODE_ID = ?2",
                                    CimCodeDO.class,
                                    BizConstant.SP_REASONCAT_ENTITYINHIBIT,
                                    entityInhibitAttributes.getReasonCode());
                    //
                    // cimCode.findCodeByCategoryIDAndCodeID(BizConstant.SP_ReasonCat_EntityInhibit.getValue(), entityInhibitAttributes.getReasonCode());
                    if (null != codeDo) {
                        entityInhibitAttributes.setReasonDesc(codeDo.getDescription());
                    }
                }
                Inputs.ObjEntityInhibiteffectiveForLotGetDRIn inhibiteffectiveForLotGetDRIn =
                        new Inputs.ObjEntityInhibiteffectiveForLotGetDRIn();
                inhibiteffectiveForLotGetDRIn.setLotID(whatNextAttributes.getLotID());
                inhibiteffectiveForLotGetDRIn.setStrEntityInhibitInfos(entityInhibitInfoSeq);
                if (0 < numOfInhibits) {
                    entityInhibitInfoSeq =
                            constraintMethod.constraintEffectiveForLotGetDR(
                                    objCommon,
                                    inhibiteffectiveForLotGetDRIn.getStrEntityInhibitInfos(),
                                    inhibiteffectiveForLotGetDRIn.getLotID());
                }
                List<Infos.EntityInhibitAttributes> entityInhibitAttributes = new ArrayList<>();
                for (Infos.EntityInhibitInfo entityInhibitInfo : entityInhibitInfoSeq) {
                    entityInhibitAttributes.add(entityInhibitInfo.getEntityInhibitAttributes());
                }
                whatNextAttributes.setEntityInhibitions(entityInhibitAttributes);
            }

            if (CimArrayUtils.isNotEmpty(entityInhibitInfoSeq)) {
                if (CimStringUtils.equals(selectCriteria, BizConstant.SP_DP_SELECTCRITERIA_CANBEPROCESSED)
                        || CimStringUtils.equals(selectCriteria, BizConstant.SP_DP_SELECTCRITERIA_EQPMONNOKIT)
                        || CimStringUtils.equals(selectCriteria, BizConstant.SP_DP_SELECTCRITERIA_AUTO3)) {
                    continue;
                }
            }

            // add pilotRun flag
            String processOperationSpecificationObj =
                    processOperation.getProcessOperationSpecificationObj();
            CimProcessOperationSpecification processOperationSpecificationBO =
                    baseCoreFactory.getBO(
                            CimProcessOperationSpecification.class, processOperationSpecificationObj);
            if (null == processOperationSpecificationBO) {
                whatNextAttributes.setPilotRunFlag(false);
            } else {
                if (processOperationSpecificationBO.isPilotRunRequired()
                        && CimArrayUtils.isNotEmpty(processOperationSpecificationBO.getPilotRunSectionInfo())) {
                    whatNextAttributes.setPilotRunFlag(true);
                }
            }

            tmpWhatNextAttributes.add(whatNextAttributes);
            nWhatNextLotCount++;
        }
        out.setStrWhatNextAttributes(tmpWhatNextAttributes);

        stopWatch.stop();
        log.debug(stopWatch.prettyPrint());
        return out;
    }

    private void whatNextLotStateCheck(
            com.fa.cim.newcore.bo.product.CimLot lot, String selectCriteria) {
        // --------------------------
        // Lot Finished Status Check
        // --------------------------
        if (CIMStateConst.CIM_LOT_FINISHED_STATE_EMPTIED.equals(lot.getLotFinishedState())) {
            log.info("LOTLOT_FINISHED_STATE is Empty. So Continue. {}", lot.getLotFinishedState());
            throw new ServiceException(retCodeConfig.getError());
        }
        if (BizConstant.SP_DP_SELECTCRITERIA_EQPMONKIT.equals(selectCriteria)
                || BizConstant.SP_DP_SELECTCRITERIA_EQPMONNOKIT.equals(selectCriteria)) {
            // --------------------------
            // lot Process State Check
            // --------------------------
            if (!CIMStateConst.CIM_LOT_PROCESS_STATE_WAITING.equals(lot.getLotProcessState())) {
                log.info("LOTLOT_PROCESS_STATE isn't Waiting. So Continue {}", lot.getLotProcessState());
                throw new ServiceException(retCodeConfig.getError());
            }
            // --------------------------
            // lot Inventry State Check
            // --------------------------
            if (!CIMStateConst.CIM_LOT_INVENTORY_STATE_ONFLOOR.equals(lot.getLotInventoryState())) {
                log.info("LOTLOT_INV_STATE isn't OnFloor. So Continue. {}", lot.getLotInventoryState());
                throw new ServiceException(retCodeConfig.getError());
            }
            // --------------------------
            // lot LOT_TYPE Check
            // --------------------------
            if (!BizConstant.SP_LOT_TYPE_EQUIPMENTMONITORLOT.equals(lot.getLotType())
                    && !BizConstant.SP_LOT_TYPE_DUMMYLOT.equals(lot.getLotType())) {
                log.info(" LOTLOT_TYPE isn't EquipmentMonitor or Dummy. So Continue. {}", lot.getLotType());
                throw new ServiceException(retCodeConfig.getError());
            }
        }
    }

    private CimLogicalRecipeDO whatNextProcessDefinitionInfo(
            CimProcessDefinitionDO processDefinitionDO,
            CimProductSpecificationDO productSpecificationDO) {
        CimLogicalRecipeDO cimLogicalRecipeDO = new CimLogicalRecipeDO();
        String productSpecID = "";
        if (productSpecificationDO != null) {
            productSpecID = productSpecificationDO.getProductSpecID();
        }
        boolean logicalRecipeFoundFlag = false;
        String logicalRecipeID = null;
        String sql =
                "SELECT OMPRP.PRP_ID,\n"
                        + // PRP_ID 代替
                        "                            OMPRP_LRPRD.LRCP_ID,\n"
                        + "                            OMPRP_LRPRD.LRCP_RKEY\n"
                        + "                     FROM   OMPRP,\n"
                        + "                            OMPRP_LRPRD\n"
                        + "                     WHERE  OMPRP.ID = ? AND\n"
                        + "                            OMPRP_LRPRD.REFKEY = ? AND\n"
                        + "                            OMPRP_LRPRD.PROD_ID = ?";
        Object[] objects =
                cimJpaRepository.queryOne(
                        sql, processDefinitionDO.getId(), processDefinitionDO.getId(), productSpecID);
        if (objects != null) {
            logicalRecipeID = String.valueOf(objects[1]);
            if (!CimStringUtils.isEmpty(logicalRecipeID)) {
                logicalRecipeFoundFlag = true;
            }
        }
        // ----------------------------------------------------------------------------------
        // Search Logical Recipe by Product Group
        // ----------------------------------------------------------------------------------
        if (!logicalRecipeFoundFlag) {
            if (productSpecificationDO != null) {
                sql =
                        "SELECT OMPRP.PRP_ID,\n"
                                + // PRP_ID 代替
                                "                                     OMPRP_LRPRODFMLY.LRCP_ID,\n"
                                + "                                     OMPRP_LRPRODFMLY.LRCP_RKEY\n"
                                + "                              FROM   OMPRP,\n"
                                + "                                     OMPRP_LRPRODFMLY\n"
                                + "                              WHERE  OMPRP.ID              = ? AND\n"
                                + "                                     OMPRP_LRPRODFMLY.REFKEY = ? AND\n"
                                + "                                     OMPRP_LRPRODFMLY.PRODFMLY_ID     = ?";
                Object[] objects2 =
                        cimJpaRepository.queryOne(
                                sql, processDefinitionDO.getId(), processDefinitionDO.getId(), productSpecID);
                if (objects2 != null) {
                    logicalRecipeID = String.valueOf(objects2[1]);
                    if (!CimStringUtils.isEmpty(logicalRecipeID)) {
                        logicalRecipeFoundFlag = true;
                    }
                }
            }
        }
        // ----------------------------------------------------------------------------------
        // Search Logical Recipe by Technology
        // ----------------------------------------------------------------------------------
        if (!logicalRecipeFoundFlag) {
            sql = "SELECT * FROM OMPRODFMLY WHERE PRODFMLY_ID = ?";
            CimProductGroupDO cimProductGroupDO =
                    cimJpaRepository.queryOne(sql, CimProductGroupDO.class, productSpecID);
            if (cimProductGroupDO != null) {
                sql =
                        "SELECT OMPRP.PRP_ID,\n"
                                + // PRP_ID 代替
                                "                                     OMPRP_LRTECH.LRCP_ID,\n"
                                + "                                     OMPRP_LRTECH.LRCP_RKEY\n"
                                + "                              FROM   OMPRP,\n"
                                + "                                     OMPRP_LRTECH\n"
                                + "                              WHERE  OMPRP.ID              = ? AND\n"
                                + "                                     OMPRP_LRTECH.REFKEY = ? AND\n"
                                + "                                     OMPRP_LRTECH.TECH_ID        = ?";
                Object[] objects3 =
                        cimJpaRepository.queryOne(
                                sql,
                                processDefinitionDO.getId(),
                                processDefinitionDO.getId(),
                                cimProductGroupDO.getTechnologyID());
                if (objects3 != null) {
                    logicalRecipeID = String.valueOf(objects3[1]);
                    if (!CimStringUtils.isEmpty(logicalRecipeID)) {
                        logicalRecipeFoundFlag = true;
                    }
                }
            }
        }
        // ----------------------------------------------------------------------------------
        // Search Default Logical Recipe
        // ----------------------------------------------------------------------------------
        if (!logicalRecipeFoundFlag) {
            logicalRecipeID = processDefinitionDO.getRecipeID();
            if (!CimStringUtils.isEmpty(logicalRecipeID)) {
                logicalRecipeFoundFlag = true;
            }
        }
        if (!CimStringUtils.isEmpty(logicalRecipeID)) {
            String version = cimFrameWorkGlobals.extractVersionFromID(logicalRecipeID);
            if (CimStringUtils.equals(version, BizConstant.SP_ACTIVE_VERSION)) {
                sql =
                        "SELECT B.LRCP_ID, B.LRCP_RKEY\n"
                                + "                              FROM  OMLRCP A, OMLRCP B\n"
                                + "                              WHERE A.LRCP_ID = ? AND\n"
                                + "                                    B.LRCP_ID = A.ACTIVE_ID";
                cimLogicalRecipeDO =
                        cimJpaRepository.queryOne(sql, CimLogicalRecipeDO.class, logicalRecipeID);
            } else {
                sql = "SELECT * FROM OMLRCP WHERE LRCP_ID = ?";
                cimLogicalRecipeDO =
                        cimJpaRepository.queryOne(sql, CimLogicalRecipeDO.class, logicalRecipeID);
            }
        }
        return cimLogicalRecipeDO;
    }

    @Override
    public void equipmentAuto3DispatchSettingUpdateDR(
            Infos.ObjCommon objCommon,
            Infos.EqpAuto3SettingInfo strEqpAuto3SettingInfo,
            String updateMode) {
        String hFSEQPAUTO3SETTINGEQP_ID =
                ObjectIdentifier.fetchValue(strEqpAuto3SettingInfo.getEqpID());
        String hFSEQPAUTO3SETTINGCDR_EVENT = strEqpAuto3SettingInfo.getCarrierTransferRequestEvent();
        String hFSEQPAUTO3SETTINGWD_NAME = strEqpAuto3SettingInfo.getWatchdogName();

        CimEqpAuto3SettingDO cimEqpAuto3SettingExam = new CimEqpAuto3SettingDO();
        cimEqpAuto3SettingExam.setEqpID(hFSEQPAUTO3SETTINGEQP_ID);
        cimEqpAuto3SettingExam.setCdrEvent(hFSEQPAUTO3SETTINGCDR_EVENT);
        List<CimEqpAuto3SettingDO> query1 = cimJpaRepository.findAll(Example.of(cimEqpAuto3SettingExam));

        if (CimStringUtils.equals(updateMode, BizConstant.SP_EQPAUTO3SETTING_UPDATEMODE_INSERT)) {
            log.debug(
                    "equipment_auto3DispatchSetting_UpdateDR {}:{}",
                    "UpdateMode == Insert",
                    hFSEQPAUTO3SETTINGEQP_ID);
            if (!CimObjectUtils.isEmpty(query1)) {
                throw new ServiceException(
                        new OmCode(
                                retCodeConfig.getDuplicateEqpAuto3Setting(),
                                hFSEQPAUTO3SETTINGEQP_ID,
                                hFSEQPAUTO3SETTINGCDR_EVENT));
            }
            CimEqpAuto3SettingDO newCimEqpAuto3SettingDO = new CimEqpAuto3SettingDO();
            newCimEqpAuto3SettingDO.setEqpID(hFSEQPAUTO3SETTINGEQP_ID);
            newCimEqpAuto3SettingDO.setCdrEvent(hFSEQPAUTO3SETTINGCDR_EVENT);
            newCimEqpAuto3SettingDO.setWatchdogName(hFSEQPAUTO3SETTINGWD_NAME);
            cimJpaRepository.save(newCimEqpAuto3SettingDO);
        } else if (CimStringUtils.equals(
                updateMode, BizConstant.SP_EQPAUTO3SETTING_UPDATEMODE_UPDATE)) {
            log.debug(
                    "equipment_auto3DispatchSetting_UpdateDR {}:{} ",
                    "UpdateMode == Update",
                    hFSEQPAUTO3SETTINGEQP_ID);
            if (CimObjectUtils.isEmpty(query1)) {
                throw new ServiceException(
                        new OmCode(
                                retCodeConfig.getNotFoundEqpAuto3Setting(),
                                hFSEQPAUTO3SETTINGEQP_ID,
                                hFSEQPAUTO3SETTINGCDR_EVENT));
            }
            CimEqpAuto3SettingDO cimEqpAuto3SettingDO = query1.get(0);
            cimEqpAuto3SettingDO.setWatchdogName(hFSEQPAUTO3SETTINGWD_NAME);
            cimJpaRepository.save(cimEqpAuto3SettingDO);
        } else if (CimStringUtils.equals(
                updateMode, BizConstant.SP_EQPAUTO3SETTING_UPDATEMODE_DELETE)) {
            log.debug(
                    "equipment_auto3DispatchSetting_UpdateDR {}:{}",
                    "UpdateMode == Delete",
                    hFSEQPAUTO3SETTINGEQP_ID);
            if (CimObjectUtils.isEmpty(query1)) {
                throw new ServiceException(
                        new OmCode(
                                retCodeConfig.getNotFoundEqpAuto3Setting(),
                                hFSEQPAUTO3SETTINGEQP_ID,
                                hFSEQPAUTO3SETTINGCDR_EVENT));
            }
            CimEqpAuto3SettingDO cimEqpAuto3SettingDO = query1.get(0);
            cimJpaRepository.delete(cimEqpAuto3SettingDO);
        } else {
            log.debug(
                    "equipment_auto3DispatchSetting_UpdateDR {}:{}",
                    "Not Update, New, Delete",
                    hFSEQPAUTO3SETTINGEQP_ID);
        }
    }

    @Override
    public void equipmentCheckConditionForUnloadingForInternalBuffer(
            Infos.ObjCommon objCommon,
            List<Infos.EqpInternalBufferInfo> eqpInternalBufferInfos,
            ObjectIdentifier equipmentID,
            ObjectIdentifier cassetteID,
            ObjectIdentifier unloadReservePortID) {
        log.info("InParam [        equipmentID] : {}", equipmentID);
        log.info("InParam [         cassetteID] : {}", cassetteID);
        log.info("InParam [unloadReservePortID] : {}", unloadReservePortID);

        /**********************************************************************/
        /*   Check LoadedCarrier Exists in the Equipment                      */
        /**********************************************************************/
        log.info("//***************************************************************");
        log.info("//  Check LoadedCarrier Exists in the Equipment");
        log.info("//***************************************************************");

        boolean bLoadedCarrier = false;
        for (Infos.EqpInternalBufferInfo eqpInternalBufferInfo : eqpInternalBufferInfos) {
            List<Infos.ShelfInBuffer> strShelfInBuffer = eqpInternalBufferInfo.getShelfInBufferList();
            for (Infos.ShelfInBuffer shelfInBuffer : strShelfInBuffer) {
                if (ObjectIdentifier.equalsWithValue(cassetteID, shelfInBuffer.getLoadedCarrierID())) {
                    log.info("find!! loadedCarrierID   ...break[j]");
                    bLoadedCarrier = true;
                    break;
                }
            }
            if (bLoadedCarrier) {
                log.info("find!! loadedCarrierID   ...break[i]");
                break;
            }
        }

        Validations.check(!bLoadedCarrier, retCodeConfigEx.getNotFoundCstInEqp(), cassetteID);
        /**********************************************************************/
        /*   Check load port reserved                                         */
        /**********************************************************************/
        log.info("//***************************************************************");
        log.info("//  Check load port reserved");
        log.info("//***************************************************************");

        for (Infos.EqpInternalBufferInfo eqpInternalBufferInfo : eqpInternalBufferInfos) {
            List<Infos.ShelfInBuffer> strShelfInBuffer = eqpInternalBufferInfo.getShelfInBufferList();
            // Loop of Cassette in Buffer
            for (Infos.ShelfInBuffer shelfInBuffer : strShelfInBuffer) {
                Validations.check(
                        ObjectIdentifier.equalsWithValue(
                                shelfInBuffer.getReservedLoadPortID(), unloadReservePortID),
                        retCodeConfig.getInternalBufferAlreadyReserved());
            }
        }

        /**********************************************************************/
        /*   Check InProcessing Lot                                           */
        /**********************************************************************/
        log.info("//***************************************************************");
        log.info("//  Check InProcessing Lot");
        log.info("//***************************************************************");

        /*---------------------------*/
        /*   Get InProcessing Info   */
        /*---------------------------*/
        log.info("call equipment_inprocessingControlJobInfo_Get()");
        Infos.EqpInprocessingControlJobInfo eqpInprocessingControlJobInfo =
                equipmentInprocessingControlJobInfoGet(objCommon, equipmentID);

        /*------------------------------------------------------*/
        /*   Make it an error if there is Lot of Inprocessing   */
        /*------------------------------------------------------*/
        log.info("Make it an error if there is Lot of Inprocessing");
        List<Infos.EqpInprocessingControlJob> strEqpInprocessingInfo =
                eqpInprocessingControlJobInfo.getStrEqpInprocessingControlJob();
        if (CimArrayUtils.isNotEmpty(strEqpInprocessingInfo)) {
            for (Infos.EqpInprocessingControlJob eqpInprocessingControlJob : strEqpInprocessingInfo) {
                log.info(
                        "--------------------round[i]  ControlJob {}",
                        eqpInprocessingControlJob.getControlJobID());
                List<Infos.EqpInprocessingLot> strEqpInprocessingLot =
                        eqpInprocessingControlJob.getEqpInprocessingLotList();
                for (Infos.EqpInprocessingLot eqpInprocessingLot : strEqpInprocessingLot) {
                    log.info(
                            "------------------------round[j]  CassetteID {}",
                            eqpInprocessingLot.getCassetteID());

                    if (!ObjectIdentifier.equalsWithValue(cassetteID, eqpInprocessingLot.getCassetteID())) {
                        log.info("Not Match CassetteID  ...<<continue>> {}", cassetteID);
                        continue;
                    }

                    log.info("##### Lot is InProcessing !! {}", eqpInprocessingLot.getLotID());
                    Validations.check(
                            true,
                            retCodeConfig.getInvalidLotProcstat(),
                            eqpInprocessingLot.getLotID(),
                            "InProcessing");
                }
            }
        }
    }

    @Override
    public void equipmentUnloadingLotsReservationForInternalBuffer(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            ObjectIdentifier cassetteID,
            ObjectIdentifier unloadReservePortID) {
        log.info("InParam [        equipmentID] {}", equipmentID);
        log.info("InParam [         cassetteID] {}", cassetteID);
        log.info("InParam [unloadReservePortID] {}", unloadReservePortID);

        CimMachine aPosMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(aPosMachine == null, retCodeConfig.getNotFoundEqp());

        /*------------------------------*/
        /*   Get BufferResource Info    */
        /*------------------------------*/
        log.info("Check All Buffer Resource");
        List<BufferResource> bufferResources = aPosMachine.allBufferResources();
        for (BufferResource bufferResource : bufferResources) {
            log.info("----------------------------------round[i] :BufferResource");

            /*------------------------------*/
            /*   Get BufferResource Info    */
            /*------------------------------*/
            CimBufferResource aPosBufferResource = (CimBufferResource) bufferResource;
            Validations.check(
                    CimObjectUtils.isEmpty(aPosBufferResource), retCodeConfig.getNotFoundBufferResource());

            /*--------------------------*/
            /*   Get MaterialLocation   */
            /*--------------------------*/
            log.info("Check All Material Location");
            List<MaterialLocation> materialLocations = aPosBufferResource.allMaterialLocations();
            for (MaterialLocation materialLocation : materialLocations) {
                CimMaterialLocation aMaterialLocation = (CimMaterialLocation) materialLocation;
                Validations.check(
                        CimObjectUtils.isEmpty(aMaterialLocation), retCodeConfig.getNotFoundMaterialLocation());

                Material aContainedMaterial = aMaterialLocation.getMaterial();
                // Validations.check(ObjectUtils.isEmpty(aContainedMaterial),
                // retCodeConfig.getNotFoundMaterial());

                CimCassette aContainedCassette = (CimCassette) aContainedMaterial;
                if (CimObjectUtils.isEmpty(aContainedCassette)) {
                    log.info("aContainedCassette is nil  ...<<continue>>");
                    continue;
                }

                ObjectIdentifier containedCassetteID =
                        new ObjectIdentifier(
                                aContainedCassette.getIdentifier(), aContainedCassette.getPrimaryKey());
                log.info("containedCassetteID = {}", containedCassetteID);
                if (!ObjectIdentifier.equalsWithValue(cassetteID, containedCassetteID)) {
                    log.info("UnMatch CassetteID  ...<<continue>>");
                    continue;
                }
                /*-------------------------------------*/
                /*   Reservation UnloadReservePortID   */
                /*-------------------------------------*/
                log.info("/*-------------------------------------*/");
                log.info("/*   Reservation UnloadReservePortID   */");
                log.info("/*-------------------------------------*/");
                PortResource aPortRes =
                        aPosMachine.findPortResourceNamed(ObjectIdentifier.fetchValue(unloadReservePortID));
                Validations.check(
                        CimObjectUtils.isEmpty(aPortRes), retCodeConfig.getNotFoundPortResource());
                CimPortResource aPosPortResource = (CimPortResource) aPortRes;
                aMaterialLocation.setReservedUnloadPort(aPosPortResource);
            }
        }
    }

    @Override
    public void equipmentCheckConditionForUnloadReserveCancelForInternalBuffer(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, ObjectIdentifier cassetteID) {
        log.info("InParam [        equipmentID] {}", equipmentID);
        log.info("InParam [         cassetteID] {}", cassetteID);

        // ----------------------------
        //   Get InternalBufferInfo
        // ----------------------------
        log.info("Get InternalBufferInfo");
        List<Infos.EqpInternalBufferInfo> eqpInternalBufferInfos =
                equipmentInternalBufferInfoGet(objCommon, equipmentID);

        // ------------------------------------
        //   Check cassette is really reserved for unloading or not
        // ------------------------------------
        log.info("Check cassette is really reserved for unloading or not");
        boolean bBreak = false;
        boolean bCassetteFoundInShelf = false;
        boolean bCassetteHasCtrlJob = false;
        boolean bCassetteResrvUnload = false;

        for (Infos.EqpInternalBufferInfo eqpInternalBufferInfo : eqpInternalBufferInfos) {
            List<Infos.ShelfInBuffer> shelfInBuffers = eqpInternalBufferInfo.getShelfInBufferList();
            for (Infos.ShelfInBuffer shelfInBuffer : shelfInBuffers) {
                if (ObjectIdentifier.equalsWithValue(shelfInBuffer.getLoadedCarrierID(), cassetteID)) {
                    log.info("Cassette Information Found in In-Buffer");
                    bCassetteFoundInShelf = true;

                    if (!ObjectIdentifier.isEmpty(shelfInBuffer.getControlJobID())) {
                        log.info("Cassette has Control Job");
                        bCassetteHasCtrlJob = true;
                    }

                    if (!ObjectIdentifier.isEmpty(shelfInBuffer.getReservedUnloadPortID())) {
                        log.info("Cassette is reserved for Unloading");
                        bCassetteResrvUnload = true;
                    }

                    bBreak = true;
                    break;
                }
            }
            if (bBreak) {
                break;
            }
        }
        Validations.check(
                !bCassetteFoundInShelf,
                retCodeConfigEx.getNotFoundCassetteInBuffer(),
                cassetteID,
                equipmentID);
        Validations.check(bCassetteHasCtrlJob, retCodeConfig.getNotClearedControlJob());
        Validations.check(
                !bCassetteResrvUnload, retCodeConfigEx.getCassetteNotUnloadReserved(), cassetteID);
    }

    @Override
    public void equipmentUnloadingLotsReservationCancelForInternalBuffer(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, ObjectIdentifier cassetteID) {
        log.info("InParam [        equipmentID] {}", equipmentID);
        log.info("InParam [         cassetteID] {}", cassetteID);

        // ----------------------------
        //   Get InternalBufferInfo
        // ----------------------------
        log.info("Get InternalBufferInfo");
        List<Infos.EqpInternalBufferInfo> eqpInternalBufferInfos =
                equipmentInternalBufferInfoGet(objCommon, equipmentID);

        // ------------------------------------
        //   Check cassette is really reserved for unloading or not
        // ------------------------------------
        log.info("Check cassette is really reserved for unloading or not");
        boolean bBreak = false;
        for (Infos.EqpInternalBufferInfo eqpInternalBufferInfo : eqpInternalBufferInfos) {
            List<Infos.ShelfInBuffer> shelfInBuffers = eqpInternalBufferInfo.getShelfInBufferList();
            for (Infos.ShelfInBuffer shelfInBuffer : shelfInBuffers) {
                if (ObjectIdentifier.equalsWithValue(shelfInBuffer.getLoadedCarrierID(), cassetteID)) {
                    // ------------------------------
                    //   Get Equipment Object
                    // ------------------------------
                    log.info("Get Equipment Object");
                    CimMachine aPosMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
                    // ------------------------------
                    //   Get Buffer Resource Object
                    // ------------------------------
                    log.info("Get Buffer Resource Object");
                    CimBufferResource aBufferResource =
                            (CimBufferResource)
                                    aPosMachine.findBufferResourceNamed(eqpInternalBufferInfo.getBufferCategory());
                    Validations.check(
                            CimObjectUtils.isEmpty(aBufferResource), retCodeConfig.getNotFoundBufferResource());

                    // ------------------------------
                    //   Get Material Locations
                    // ------------------------------
                    log.info("Get Material Locations");
                    List<MaterialLocation> materialLocations = aBufferResource.allMaterialLocations();
                    for (MaterialLocation materialLocation : materialLocations) {
                        // ------------------------------------
                        //   Get Material
                        // ------------------------------------
                        log.info("Get Material");
                        Material aMaterial = materialLocation.getMaterial();
                        if (CimObjectUtils.isEmpty(aMaterial)) {
                            log.info("aMaterial is nil   ...<continue>");
                            continue;
                        }

                        // ------------------------------------
                        //   Get Material's Identifier
                        // ------------------------------------
                        log.info("Get Material's Identifier");
                        String aMaterialIdentifier = aMaterial.getIdentifier();

                        if (ObjectIdentifier.equalsWithValue(cassetteID, aMaterialIdentifier)) {
                            // ------------------------------------
                            //   Reset Reserved Unload Port
                            // ------------------------------------
                            log.info("Reset Reserved Unload Port");
                            CimMaterialLocation aPosMtrlLoc = (CimMaterialLocation) materialLocation;
                            aPosMtrlLoc.setReservedUnloadPort(null);
                            bBreak = true;
                            break;
                        }
                    }

                    break;
                }
            }
            if (bBreak) {
                break;
            }
        }
        Validations.check(
                !bBreak,
                retCodeConfigEx.getFailToResetReservedUnloadPort(),
                cassetteID,
                eqpInternalBufferInfos);
    }

    @Override
    public List<Infos.EquipmentAlarm> equipmentAlarmHistoryFillInTxEQQ011DR(
            Infos.ObjCommon objCommon,
            ObjectIdentifier objectID,
            String type,
            String fromTimeStamp,
            String toTimeStamp) {
        List<Infos.EquipmentAlarm> alarms = new ArrayList<>();
        String ColumnName = null;
        if (CimStringUtils.equals(type, BizConstant.SP_EQPALMINQTYPE_EQP)) {
            ColumnName = "EQP_ID";
        } else if (CimStringUtils.equals(type, BizConstant.SP_EQPALMINQTYPE_STK)) {
            ColumnName = "STK_ID";
        } else if (CimStringUtils.equals(type, BizConstant.SP_EQPALMINQTYPE_AGV)) {
            ColumnName = "AGV_ID";
        } else {
            Validations.check(retCodeConfig.getInvalidParameter());
        }
        String sql =
                String.format(
                        "SELECT ALARM_CODE, ALARM_ID, ALARM_CATEGORY, ALARM_TEXT, TRX_TIME FROM OHALARM WHERE %s = '%s' AND  TRX_TIME >= to_date('%s', 'yyyy-mm-dd hh24:mi:ss')\n"
                                + "   and TRX_TIME <= to_date('%s', 'yyyy-mm-dd hh24:mi:ss') ",
                        ColumnName, ObjectIdentifier.fetchValue(objectID), fromTimeStamp, toTimeStamp);
        List<Object[]> query = cimJpaRepository.query(sql);
        if (CimArrayUtils.isNotEmpty(query)) {
            for (Object[] cimAlarmHistoryDO : query) {
                Infos.EquipmentAlarm equipmentAlarm = new Infos.EquipmentAlarm();
                equipmentAlarm.setAlarmCode((String) cimAlarmHistoryDO[0]);
                equipmentAlarm.setAlarmID((String) cimAlarmHistoryDO[1]);
                equipmentAlarm.setAlarmCategory((String) cimAlarmHistoryDO[2]);
                equipmentAlarm.setAlarmText((String) cimAlarmHistoryDO[3]);
                Timestamp timestamp = (Timestamp) cimAlarmHistoryDO[4];
                equipmentAlarm.setAlarmTimeStamp(timestamp.toString());
                alarms.add(equipmentAlarm);
            }
        }
        return alarms;
    }

    @Override
    public String eqpMonitorConditionReset(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, ObjectIdentifier eqpMonitorID) {
        CimEqpMonitor anEqpMonitor = baseCoreFactory.getBO(CimEqpMonitor.class, eqpMonitorID);

        anEqpMonitor.setLastMonitorPassedTimeStamp(
                objCommon.getTimeStamp().getReportTimeStamp().toString());
        anEqpMonitor.setWarningTimeStamp("");

        // Calculate nextExecutionTime
        String nextExecutionTime = null;
        Infos.EqpMonitorNextExecutionTimeCalculateIn strEqpMonitor_nextExecutionTime_Calculate_in =
                new Infos.EqpMonitorNextExecutionTimeCalculateIn();
        strEqpMonitor_nextExecutionTime_Calculate_in.setCurrentScheduleBaseTime(
                anEqpMonitor.getScheduleBaseTimeStamp());
        strEqpMonitor_nextExecutionTime_Calculate_in.setExecutionInterval(
                anEqpMonitor.getExecutionInterval().intValue());
        strEqpMonitor_nextExecutionTime_Calculate_in.setScheduleAdjustment(
                anEqpMonitor.getScheduleAdjustment().intValue());
        strEqpMonitor_nextExecutionTime_Calculate_in.setFutureTimeRequireFlag(false);
        Results.EqpMonitorNextExecutionTimeCalculateResult
                strEqpMonitor_nextExecutionTime_Calculate_out =
                this.eqpMonitorNextExecutionTimeCalculate(
                        objCommon, strEqpMonitor_nextExecutionTime_Calculate_in);

        nextExecutionTime = strEqpMonitor_nextExecutionTime_Calculate_out.getNextExecutionTime();

        Timestamp currentTimeStamp = objCommon.getTimeStamp().getReportTimeStamp();
        if (CimDateUtils.isGreaterThan(currentTimeStamp, nextExecutionTime)) {
            Infos.EqpMonitorScheduleUpdateIn strEqpMonitor_schedule_Update_in =
                    new Infos.EqpMonitorScheduleUpdateIn();
            strEqpMonitor_schedule_Update_in.setEquipmentID(equipmentID);
            strEqpMonitor_schedule_Update_in.setEqpMonitorID(eqpMonitorID);
            strEqpMonitor_schedule_Update_in.setActionType(BizConstant.SP_EQPMONITOR_SCHEDULE_NEXT);
            nextExecutionTime =
                    this.eqpMonitorScheduleUpdate(objCommon, strEqpMonitor_schedule_Update_in);
        }

        anEqpMonitor.setLastClaimedTimeStamp(objCommon.getTimeStamp().getReportTimeStamp().toString());

        CimPerson aPosPerson = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());
        anEqpMonitor.setLastClaimedUser(aPosPerson);

        return nextExecutionTime;
    }

    /**
     * description:
     *
     * <p>change history: date defect person comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param strObjCommonIn
     * @param equipmentID
     * @param reticlePodPortID
     * @param reticlePodID
     * @param claimMemo
     * @return void
     * @throws
     * @author ho
     * @date 2020/3/19 14:42
     */
    @Override
    public void equipmentReticlePodUnload(
            Infos.ObjCommon strObjCommonIn,
            ObjectIdentifier equipmentID,
            ObjectIdentifier reticlePodPortID,
            ObjectIdentifier reticlePodID,
            String claimMemo) {
        /*----------------------------------------------*/
        /*   Get object reference from input parameter  */
        /*----------------------------------------------*/
        CimMachine aPosMachine;

        aPosMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);

        Validations.check(aPosMachine == null, retCodeConfig.getNotFoundEqp());

        /*----------------------------------------------------------*/
        /*   Get reticle pod port object reference from PosMachine  */
        /*----------------------------------------------------------*/
        CimReticlePodPortResource aPosReticlePodPort;

        aPosReticlePodPort = aPosMachine.findReticlePodPortResourceNamed(reticlePodPortID.getValue());

        Validations.check(
                aPosReticlePodPort == null,
                retCodeConfig.getRspportNotFound(),
                equipmentID.getValue(),
                reticlePodPortID.getValue());

        /*--------------------------------*/
        /*   Get reticle pod port object  */
        /*--------------------------------*/
        CimReticlePod aReservedReticlePod;
        String reservedReticlePodID = null;
        aReservedReticlePod = aPosReticlePodPort.getTransferReservedReticlePod();

        if (aReservedReticlePod != null) {
            reservedReticlePodID = aReservedReticlePod.getIdentifier();
        }

        /*---------------------------------------------------*/
        /*   Cancel reticle pod - reticle pod port relation  */
        /*---------------------------------------------------*/
        CimReticlePod aNilReticlePod = null;

        if (CimStringUtils.length(reservedReticlePodID) != 0) {
            aPosReticlePodPort.setTransferReservedReticlePod(aNilReticlePod);
        }

        aPosReticlePodPort.setDispatchState(BizConstant.SP_PORTRSC_DISPATCHSTATE_REQUIRED);

        aPosReticlePodPort.setDispatchTimeStamp(
                CimDateUtils.getTimestampAsString(strObjCommonIn.getTimeStamp().getReportTimeStamp()));

        aPosReticlePodPort.setReserveState(BizConstant.SP_RETICLEPODPORT_NOTRESERVED);

        aPosReticlePodPort.setLoadedReticlePod(aNilReticlePod);

        /*------------------------------------------------*/
        /*   Maintain reticle information in reticle pod  */
        /*------------------------------------------------*/
        ObjectIdentifier tmpStockerID = null;

        // reticlePod_transferState_Change__160
        reticleMethod.reticlePodTransferStateChange(
                strObjCommonIn,
                tmpStockerID,
                equipmentID,
                reticlePodID,
                BizConstant.SP_TRANSSTATE_EQUIPMENTOUT,
                "",
                claimMemo,
                new Infos.ShelfPosition());
    }

    @Override
    public List<Infos.LotListAttributes> equipmentsProductLotListGetDR(
            Infos.ObjCommon objCommon,
            List<ObjectIdentifier> equipmentIDs,
            List<ObjectIdentifier> productIDs) {
        List<Infos.LotListAttributes> retVal = new ArrayList<>();

        List<String> parameters = new ArrayList<>();
        StringBuilder sql =
                new StringBuilder("select * from OMLOT LOT where LOT.LOT_PROCESS_STATE = ? ");
        parameters.add(BizConstant.SP_LOT_PROCSTATE_WAITING);

        Optional.ofNullable(equipmentIDs)
                .ifPresent(
                        eqps -> {
                            sql.append(
                                    " and exists (select  1 from OMLOT_EQP EQP where EQP.REFKEY = LOT.ID and EQP.EQP_ID in (?");
                            parameters.add(ObjectIdentifier.fetchValue(eqps.get(0)));
                            int size = eqps.size();
                            for (int i = 1; i < size; i++) {
                                sql.append(",?");
                                parameters.add(eqps.get(i).getValue());
                            }
                            sql.append("))");
                        });

        Optional.ofNullable(productIDs)
                .ifPresent(
                        products -> {
                            sql.append(" and LOT.PROD_ID in (?");
                            parameters.add(ObjectIdentifier.fetchValue(products.get(0)));
                            int size = products.size();
                            for (int i = 1; i < size; i++) {
                                sql.append(",?");
                                parameters.add(products.get(i).getValue());
                            }
                            sql.append(")");
                        });

        log.info("SQL: " + sql);
        // -------------------------------------------
        // Judge and Convert SQL with Escape Sequence
        // -------------------------------------------
        List<CimLotDO> lotDOs =
                cimJpaRepository.query(sql.toString(), CimLotDO.class, parameters.toArray());
        Optional.ofNullable(lotDOs)
                .ifPresent(
                        list -> {
                            String maxLen = StandardProperties.OM_MAX_SIZE_LOT_LIST_INQ.getValue();
                            // Do Double Check (validity check is already done at server's start up and env change
                            // logic.)
                            int lot_list_max_len = Math.max(Integer.parseInt(maxLen), 100);
                            for (CimLotDO lotDO : list) {
                                log.info("Lot ID: " + lotDO.getIdentifier());
                                CimLot lot = baseCoreFactory.getBO(CimLot.class, lotDO);
                                Validations.check(null == lot, retCodeConfig.getNotFoundLot());
                                ObjectIdentifier lotID =
                                        ObjectIdentifier.build(lot.getIdentifier(), lot.getPrimaryKey());

                                // ***************************/
                                // *  Get lot hold record    */
                                // ***************************/
                                List<Infos.LotHoldRecordInfo> lotHoldRecordInfos =
                                        lotMethod.lotHoldRecordGetDR(lotDO.getIdentifier());

                                StringBuilder lotHoldReasonCode = new StringBuilder();
                                if (CimArrayUtils.getSize(lotHoldRecordInfos) == 1) {
                                    lotHoldReasonCode.append(
                                            ObjectIdentifier.fetchValue(lotHoldRecordInfos.get(0).getHoldReasonID()));
                                    ;
                                }
                                if (CimArrayUtils.getSize(lotHoldRecordInfos) > 1) {
                                    lotHoldReasonCode.append(
                                            ObjectIdentifier.fetchValue(lotHoldRecordInfos.get(0).getHoldReasonID()));
                                    lotHoldReasonCode.append(BizConstant.SP_DEFAULT_CHAR);
                                }

                                // ---------------------------------------------
                                //  Gets carrier information
                                // ---------------------------------------------
                                List<MaterialContainer> materialContainers = lot.materialContainers();
                                ObjectIdentifier outEquipmentID = null;
                                if (CimArrayUtils.isEmpty(materialContainers)) {
                                    log.info("### Lot is not in carrier.");
                                    List<ObjectIdentifier> equipmentIDSeq = new ArrayList<>();
                                    if (CimStringUtils.equals(lot.getLotState(), BizConstant.CIMFW_LOT_STATE_FINISHED)
                                            || CimStringUtils.equals(
                                            lot.getLotState(), BizConstant.CIMFW_LOT_STATE_SHIPPED)
                                            || CimStringUtils.equals(
                                            lot.getLotInventoryState(), BizConstant.SP_LOT_INVENTORYSTATE_ONFLOOR)) {
                                        log.info(
                                                "###################### Set EQP info on Finished/Shipped/NotOnFloor ######################");
                                        equipmentIDSeq.add(ObjectIdentifier.build("", ""));
                                    }
                                    // If lot state is "Processing", set the current assigned machine in PO.
                                    else if (CimStringUtils.equals(
                                            lot.getLotProcessState(), BizConstant.SP_LOT_PROCSTATE_PROCESSING)) {
                                        log.info(
                                                "###################### Set EQP info on SP_Lot_ProcState_Processing. ######################");
                                        CimProcessOperation processOperation = lot.getProcessOperation();
                                        if (null != processOperation) {
                                            CimMachine assignedMachine = processOperation.getAssignedMachine();
                                            Validations.check(
                                                    null == assignedMachine, retCodeConfig.getNotFoundMachine());
                                            equipmentIDSeq.add(
                                                    ObjectIdentifier.build(
                                                            assignedMachine.getIdentifier(), assignedMachine.getPrimaryKey()));
                                        }
                                    }
                                    // If lot state is hold , set the hold queued machines as the next equipments.
                                    else if (CimStringUtils.equals(
                                            lot.getLotHoldState(), BizConstant.CIMFW_LOT_HOLDSTATE_ONHOLD)) {
                                        log.info(
                                                "###################### Set EQP info on CIMFW_Lot_HoldState_OnHold. ######################");
                                        List<CimMachine> holdQueuedMachines = lot.getHoldQueuedMachines();
                                        Optional.ofNullable(holdQueuedMachines)
                                                .ifPresent(
                                                        machines ->
                                                                machines.forEach(
                                                                        data ->
                                                                                equipmentIDSeq.add(
                                                                                        ObjectIdentifier.build(
                                                                                                data.getIdentifier(), data.getPrimaryKey()))));
                                    } else {
                                        // If lot state is wating , set the queued machines as the next equipments.
                                        // In other case("Processed"), set blank.
                                        log.info(
                                                "###################### Set EQP info on other cases. ######################");
                                        equipmentIDSeq.add(ObjectIdentifier.build("", ""));
                                    }

                                    if (CimArrayUtils.getSize(equipmentIDSeq) == 1
                                            && ObjectIdentifier.isEmptyWithValue(equipmentIDSeq.get(0))) {
                                        outEquipmentID = ObjectIdentifier.build("", "");
                                    } else if (CimArrayUtils.getSize(equipmentIDSeq) > 0) {
                                        List<Material> materials = lot.allMaterial();

                                        boolean LoopOutFlag = false;
                                        for (ObjectIdentifier eqp : equipmentIDSeq) {
                                            Infos.EqpContainerInfo eqpContainerInfo =
                                                    this.equipmentContainerInfoGetDR(objCommon, eqp);
                                            if (null != eqpContainerInfo) {
                                                List<Infos.EqpContainer> eqpContainerList =
                                                        eqpContainerInfo.getEqpContainerList();
                                                for (Infos.EqpContainer eqpContainer : eqpContainerList) {
                                                    List<Infos.EqpContainerPosition> eqpContainerPosition =
                                                            eqpContainer.getEqpContainerPosition();
                                                    for (Infos.EqpContainerPosition containerPosition :
                                                            eqpContainerPosition) {
                                                        for (Material material : materials) {
                                                            if (CimStringUtils.equals(
                                                                    ObjectIdentifier.fetchValue(containerPosition.getWaferID()),
                                                                    material.getIdentifier())) {
                                                                LoopOutFlag = true;
                                                                outEquipmentID = eqp;
                                                                break;
                                                            }
                                                        }
                                                        if (LoopOutFlag) {
                                                            break;
                                                        }
                                                    }
                                                    if (LoopOutFlag) {
                                                        break;
                                                    }
                                                }
                                                if (LoopOutFlag) {
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    MaterialContainer materialContainer = materialContainers.get(0);
                                    log.info("Lot is in carrier: " + materialContainer.getIdentifier());
                                    CimCassetteDO example = new CimCassetteDO();
                                    example.setCassetteID(materialContainer.getIdentifier());
                                    CimCassetteDO cassetteDO = cimJpaRepository.findOne(Example.of(example)).orElse(null);
                                    if (null != cassetteDO) {
                                        if (CimStringUtils.equals(
                                                cassetteDO.getTransferState(), BizConstant.SP_TRANSSTATE_EQUIPMENTIN)) {
                                            log.info(
                                                    "Cassette is not loaded on equipment. equipmentID = "
                                                            + cassetteDO.getEquipmentID());
                                            outEquipmentID =
                                                    ObjectIdentifier.build(
                                                            cassetteDO.getEquipmentID(), cassetteDO.getEquipmentObj());
                                        } else {
                                            log.info(
                                                    "Cassette is not loaded on equipment. CassetteID ="
                                                            + cassetteDO.getIdentifier());
                                        }
                                    }
                                }

                                // **************************/
                                // *  Get lot sorter job    */
                                // **************************/
                                com.fa.cim.sorter.Params.ObjSorterJobListGetDRIn objSorterJobListGetDRIn =
                                        new com.fa.cim.sorter.Params.ObjSorterJobListGetDRIn();
                                objSorterJobListGetDRIn.setLotID(lotID);
                                List<Info.SortJobListAttributes> sortJobListAttributes =
                                        sorterMethod.sorterJobListGetDR(objCommon, objSorterJobListGetDRIn);

                                // ----------------------------------
                                //  Get Bonding Group ID
                                // ----------------------------------
                                String bondingGroupIDGetDR = lotMethod.lotBondingGroupIDGetDR(objCommon, lotID);

                                Infos.LotListAttributes attributes = new Infos.LotListAttributes();
                                retVal.add(attributes);

                                attributes.setLotID(lotID);
                                attributes.setLotType(lotDO.getLotType());
                                attributes.setLotStatus(lot.getState());

                                List<Infos.LotStatusList> lotStatusLists = new ArrayList<>();
                                lotStatusLists.add(
                                        new Infos.LotStatusList(BizConstant.SP_LOTSTATECAT_STATE, lot.getLotState()));
                                lotStatusLists.add(
                                        new Infos.LotStatusList(
                                                BizConstant.SP_LOTSTATECAT_PRODUCTIONSTATE, lot.getLotProductionState()));
                                lotStatusLists.add(
                                        new Infos.LotStatusList(
                                                BizConstant.SP_LOTSTATECAT_HOLDSTATE, lot.getLotHoldState()));
                                lotStatusLists.add(
                                        new Infos.LotStatusList(
                                                BizConstant.SP_LOTSTATECAT_FINISHEDSTATE, lot.getLotFinishedState()));
                                lotStatusLists.add(
                                        new Infos.LotStatusList(
                                                BizConstant.SP_LOTSTATECAT_PROCSTATE, lot.getLotProcessState()));
                                lotStatusLists.add(
                                        new Infos.LotStatusList(
                                                BizConstant.SP_LOTSTATECAT_INVENTORYSTATE, lot.getLotInventoryState()));
                                attributes.setLotStatusList(lotStatusLists);

                                attributes.setBankID(ObjectIdentifier.build(lotDO.getBankID(), lotDO.getBankObj()));
                                attributes.setOrderNumber(lotDO.getOrderNumber());
                                attributes.setCustomerCode(lotDO.getCustomerID());
                                attributes.setProductID(
                                        ObjectIdentifier.build(
                                                lotDO.getProductSpecificationID(), lotDO.getProductSpecificationObj()));
                                attributes.setLastClaimedTimeStamp(lotDO.getLastClamiedTimeStamp().toString());
                                attributes.setDueTimeStamp(lotDO.getPlanEndTimeStamp().toString());
                                attributes.setRouteID(
                                        ObjectIdentifier.build(lotDO.getRouteID(), lotDO.getRouteObj()));
                                attributes.setOperationNumber(lotDO.getOperationNumber());
                                attributes.setTotalWaferCount(lotDO.getWaferCount());
                                attributes.setBankInRequiredFlag(lotDO.getBankInReqired());

                                attributes.setControlUseState(lotDO.getControlUseState());
                                attributes.setUsedCount(lotDO.getUsedCount());

                                attributes.setCompletionTimeStamp(
                                        (CimObjectUtils.isEmpty(lotDO.getCompletionTimeStamp()))
                                                ? ""
                                                : String.valueOf(lotDO.getCompletionTimeStamp()));
                                attributes.setLotFamilyID(
                                        ObjectIdentifier.build(
                                                lotDO.getLotFamilyID(), lotDO.getLotFamilyReferenceKey()));
                                attributes.setProductRequestID(
                                        ObjectIdentifier.build(
                                                lotDO.getProductRequestID(), lotDO.getProductRequestObj()));
                                attributes.setSubLotType(lotDO.getSubLotType());
                                attributes.setLotOwnerID(
                                        ObjectIdentifier.build(lotDO.getLotOwnerID(), lotDO.getLotOwnerIDObj()));
                                attributes.setRequiredCassetteCategory(lotDO.getRequiredCassetteCategory());

                                Infos.LotBackupInfo lotBackupInfo = new Infos.LotBackupInfo();
                                lotBackupInfo.setBackupProcessingFlag(lotDO.getBackupProcessingFlag());
                                lotBackupInfo.setCurrentLocationFlag(lotDO.getCurrentLocationFlag());
                                lotBackupInfo.setTransferFlag(lotDO.getTransferFlag());

                                Infos.BackupAddress bornSiteAddress = new Infos.BackupAddress();
                                bornSiteAddress.setHostName(lotDO.getHostName());
                                lotBackupInfo.setBornSiteAddress(bornSiteAddress);
                                attributes.setLotBackupInfo(lotBackupInfo);

                                if (CimArrayUtils.isNotEmpty(materialContainers)) {
                                    MaterialContainer materialContainer = materialContainers.get(0);
                                    attributes.setCarrierID(
                                            ObjectIdentifier.build(
                                                    materialContainer.getIdentifier(), materialContainer.getPrimaryKey()));
                                    // -------------------------------------------
                                    //  Set InPostProcessFlag of Cassette
                                    // -------------------------------------------
                                    attributes.setInPostProcessFlagOfCassette(
                                            ((CimCassette) materialContainer).isPostProcessFlagOn());
                                }
                                attributes.setEquipmentID(outEquipmentID);

                                // **********************************************************/
                                // *  Set Sorter Job existence flag if lot has Sorter Job.  */
                                // **********************************************************/
                                if (CimArrayUtils.getSize(sortJobListAttributes) > 0) {
                                    attributes.setSorterJobExistFlag(true);
                                } else {
                                    attributes.setSorterJobExistFlag(false);
                                }

                                // ***************************/
                                // *  Set hold reason code.  */
                                // ***************************/
                                attributes.setHoldReasonCodeID(
                                        ObjectIdentifier.buildWithValue(lotHoldReasonCode.toString()));

                                // -------------------------------------------
                                //  Set InPostProcessFlag of Lot
                                // -------------------------------------------
                                attributes.setInPostProcessFlagOfLot(lotDO.getPostProcessFlag());
                                attributes.setInterFabXferState(lotDO.getInterfabTransferState());

                                // ----------------------------------
                                //  Set Bonding Group ID
                                // ----------------------------------
                                attributes.setBondingGroupID(bondingGroupIDGetDR);

                                if (lot_list_max_len > CimArrayUtils.getSize(retVal)) {
                                    log.info("Length of LotList reached to the maximum ");
                                    break;
                                }
                            }
                        });

        /*Validations.check(ArrayUtils.getSize(retVal) == 0, retCodeConfig.getNoMatchedLot());*/
        return retVal;
    }

    @Override
    public Outputs.EquipmentAvailableInfoGetDROut equipmentAvailableInfoGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {

        Outputs.EquipmentAvailableInfoGetDROut out = new Outputs.EquipmentAvailableInfoGetDROut();

        String PRCRSC1_CUR =
                "SELECT    OMPROCRES.PROCRES_ID,"
                        + "                       OMPROCRES.ID,\n"
                        + "                       OMPROCRES.EQP_STATE_ID,"
                        + "                       OMPROCRES.EQP_STATE_RKEY,\n"
                        + "                       OMEQPST.EQP_AVAIL_FLAG,\n"
                        + "                       OMEQPST.COND_AVAIL_FLAG\n"
                        + "        FROM           OMPROCRES\n"
                        + "        INNER   JOIN   OMEQPST ON OMEQPST.EQP_STATE_ID = OMPROCRES.EQP_STATE_ID\n"
                        + "        WHERE   OMPROCRES.EQP_ID = ?1";
        String equipmentId = ObjectIdentifier.fetchValue(equipmentID);
        List<Object[]> prcRsc1Result = cimJpaRepository.query(PRCRSC1_CUR, equipmentId);
        List<Infos.EqpChamberAvailableInfo> strEqpChamberAvailableInfoSeq =
                new ArrayList<>(prcRsc1Result.size());
        out.setStrEqpChamberAvailableInfoSeq(strEqpChamberAvailableInfoSeq);
        prcRsc1Result.forEach(
                result -> {
                    Infos.EqpChamberAvailableInfo info = new Infos.EqpChamberAvailableInfo();
                    String prcRscId = (String) result[0];
                    String prcRscObj = (String) result[1];
                    info.setChamberID(ObjectIdentifier.build(prcRscId, prcRscObj));

                    String eqpStateId = (String) result[2];
                    String eqpStateObj = (String) result[3];
                    info.setChamberStateCode(ObjectIdentifier.build(eqpStateId, eqpStateObj));

                    boolean availableFlag = 0 != CimNumberUtils.intValue((Number) result[4]);
                    info.setAvailableFlag(availableFlag);

                    boolean conditionAvailableFlag = 0 != CimNumberUtils.intValue((Number) result[5]);
                    info.setConditionalAvailableFlag(conditionAvailableFlag);
                    info.setConditionalAvailableFlagForChamber(conditionAvailableFlag);
                    strEqpChamberAvailableInfoSeq.add(info);
                });

        String eqpStSql =
                "SELECT OMEQPST.ID, OMEQPST.EQP_AVAIL_FLAG, OMEQPST.COND_AVAIL_FLAG\n"
                        + "FROM OMEQPST\n"
                        + "INNER  JOIN OMEQP on OMEQP.EQP_STATE_ID = OMEQPST.EQP_STATE_ID\n"
                        + "WHERE  OMEQP.EQP_ID = ?1";
        Object[] queryResult = cimJpaRepository.queryOne(eqpStSql, equipmentId);

        String eqpStateObj = (String) queryResult[0];
        boolean availableFlag = 0 != (CimNumberUtils.intValue((Number) queryResult[1]));
        boolean conditionAvailableFlag = 0 != (CimNumberUtils.intValue((Number) queryResult[2]));
        out.setConditionalAvailableFlagForEqp(conditionAvailableFlag);
        out.setAvailableFlagForEqp(availableFlag);

        if (conditionAvailableFlag) {
            String lotTypeSql =
                    "SELECT  SUB_LOT_TYPE\n"
                            + "            FROM    OMEQPST_SLTYP\n"
                            + "            WHERE   REFKEY = ?1";
            List<Object[]> lotTypeResult = cimJpaRepository.query(lotTypeSql, eqpStateObj);
            List<String> availableSubLotTypesForEqp = new ArrayList<>(lotTypeResult.size());
            out.setAvailableSubLotTypesForEqp(availableSubLotTypesForEqp);
            lotTypeResult.forEach(result -> availableSubLotTypesForEqp.add((String) result[0]));
        } else {
            out.setAvailableSubLotTypesForEqp(Collections.emptyList());
        }
        return out;
    }

    @Override
    public List<Infos.EntityValue> equipmentTypeListGetDR(Infos.ObjCommon objCommon) {
        List<Infos.EntityValue> entityValueList = new ArrayList<>();
        String sql = "SELECT DISTINCT EQP_GRP_ID\n" + "          FROM OMEQP ORDER BY EQP_GRP_ID";
        List<Object[]> queryResult = cimJpaRepository.query(sql);
        if (!CimArrayUtils.isEmpty(queryResult)) {
            for (Object[] objects : queryResult) {
                Infos.EntityValue entityValue = new Infos.EntityValue();
                entityValueList.add(entityValue);
                entityValue.setIdentifier(new ObjectIdentifier(String.valueOf(objects[0])));
            }
        }
        return entityValueList;
    }

    @Override
    public List<Infos.EntityValue> equipmentListGetDR(
            Infos.ObjCommon objCommon, String searchKeyName, String searchKeyValue, String option) {
        List<Infos.EntityValue> entityValueList = new ArrayList<>();
        String sql = "SELECT EQP_ID,ID,DESCRIPTION FROM OMEQP ";
        if (!CimStringUtils.isEmpty(searchKeyName)) {
            sql = sql + "WHERE " + searchKeyName + " " + option + " '" + searchKeyValue + "' ";
        }
        sql = sql + " ORDER BY EQP_ID";
        List<CimEquipmentDO> cimEquipmentDOList = cimJpaRepository.query(sql, CimEquipmentDO.class);
        if (!CimArrayUtils.isEmpty(cimEquipmentDOList)) {
            for (CimEquipmentDO equipmentDO : cimEquipmentDOList) {
                Infos.EntityValue entityValue = new Infos.EntityValue();
                entityValueList.add(entityValue);
                entityValue.setIdentifier(
                        new ObjectIdentifier(equipmentDO.getEquipmentID(), equipmentDO.getId()));
                entityValue.setDescription(equipmentDO.getDescription());
            }
        }
        return entityValueList;
    }

    @Override
    public void equipmentSLMSwitchSet(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, String slmSwitch) {
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(null == aMachine, retCodeConfig.getNotFoundEqp());
        // ---------------------------------//
        //  Change SLMSwitch
        // ---------------------------------//
        aMachine.setSLMSwitch(slmSwitch);
    }

    @Override
    public void equipmentReservedControlJobClearForSLM(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, ObjectIdentifier controlJobID) {
        CimControlJob aControlJob = baseCoreFactory.getBO(CimControlJob.class, controlJobID);
        Validations.check(
                aControlJob == null,
                new OmCode(
                        retCodeConfig.getNotFoundControlJob(), ObjectIdentifier.fetchValue(controlJobID)));
        CimMachine aMachine = aControlJob.getMachine();
        Validations.check(aMachine == null, retCodeConfig.getNotFoundMachine());
        // --------------------------------------------------
        // Clear LotList of ControlJob
        // --------------------------------------------------
        aControlJob.removeAllControlJobLots();
        // --------------------------------------------------
        // Clear SLMReserve of Cassette
        // --------------------------------------------------
        Infos.EqpContainerInfo eqpContainerInfo =
                this.equipmentContainerInfoGetDR(objCommon, equipmentID);
        List<Infos.EqpContainer> strEqpContSeq = null;
        if (eqpContainerInfo != null) {
            strEqpContSeq = eqpContainerInfo.getEqpContainerList();
        }
        int lenEqpCont = CimArrayUtils.getSize(strEqpContSeq);
        if (lenEqpCont == 0) {
            log.info("equipment_reservedControlJob_ClearForSLM OK");
            return;
        }
        List<Infos.EqpContainerPosition> eqpContainerPositionList = null;
        if (strEqpContSeq != null) {
            eqpContainerPositionList = strEqpContSeq.get(0).getEqpContainerPosition();
        }
        int lenEqpContPos = CimArrayUtils.getSize(eqpContainerPositionList);
        for (int nECP = 0; nECP < lenEqpContPos; nECP++) {
            Infos.EqpContainerPosition strCtnPstInfo = eqpContainerPositionList.get(nECP);
            log.info(
                    "containerPositionID... {}",
                    ObjectIdentifier.fetchValue(strCtnPstInfo.getContainerPositionID()));
            log.info(
                    "controlJobID........ {}", ObjectIdentifier.fetchValue(strCtnPstInfo.getControlJobID()));
            log.info(
                    "destCassetteID...... {}",
                    ObjectIdentifier.fetchValue(strCtnPstInfo.getDestCassetteID()));
            if (!ObjectIdentifier.isEmptyWithValue(strCtnPstInfo.getDestCassetteID())
                    && !ObjectIdentifier.isEmptyWithValue(strCtnPstInfo.getControlJobID())
                    && ObjectIdentifier.equalsWithValue(controlJobID, strCtnPstInfo.getControlJobID())) {
                CimCassette aCassette =
                        baseCoreFactory.getBO(CimCassette.class, strCtnPstInfo.getDestCassetteID());
                Validations.check(
                        aCassette == null,
                        new OmCode(
                                retCodeConfig.getNotFoundCassette(),
                                ObjectIdentifier.fetchValue(strCtnPstInfo.getDestCassetteID())));
                aCassette.setSLMReservedMachine(null);
            }
        }
        // --------------------------------------------------
        // Clear MachineContainerPos by ControlJob
        // --------------------------------------------------
        Inputs.ObjEquipmentContainerPositionInfoClearIn objEquipmentContainerPositionInfoClearIn =
                new Inputs.ObjEquipmentContainerPositionInfoClearIn();
        objEquipmentContainerPositionInfoClearIn.setEquipmentID(equipmentID);
        objEquipmentContainerPositionInfoClearIn.setKey(controlJobID);
        objEquipmentContainerPositionInfoClearIn.setKeyCategory(
                BizConstant.SP_SLM_KEYCATEGORY_CONTROLJOB);
        equipmentContainerPositionMethod.equipmentContainerPositionInfoClear(
                objCommon, objEquipmentContainerPositionInfoClearIn);
    }

    @Override
    public List<String> getEquipmentSpecialControls(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        CimMachine machine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        if (machine == null) {
            return null;
        }
        return machine.getSpecialEquipmentControls();
    }

    @Override
    public List<Infos.StoredReticle> equipmentRetrieveReticleListGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        List<Infos.StoredReticle> reuslt = new ArrayList<>();
        String drbCategory = BizConstant.SP_DURABLECAT_RETICLE;
        String mtrlcontnrID = "";
        List<Object> frdrbList =
                cimJpaRepository.queryOneColumn(
                        "SELECT  PDRBL_ID\n"
                                + "                  FROM  OMPDRBL\n"
                                + "                  WHERE PDRBL_CATEGORY = ?1 \n"
                                + "                    AND EQP_ID        = ?2 \n"
                                + "                    AND MTRL_CONT_ID = ?3 \n"
                                + "                    AND LAST_USED_TIME > LAST_STORED_TIME \n"
                                + "                    ORDER BY LAST_USED_TIME",
                        drbCategory,
                        equipmentID,
                        mtrlcontnrID);
        List<String> tmpStringList = new ArrayList<>();
        Optional.ofNullable(frdrbList)
                .ifPresent(
                        list ->
                                list.forEach(
                                        data -> {
                                            tmpStringList.add(CimObjectUtils.toString(data));
                                        }));
        // Omit reticle from reticle list if reticle has reserved control job info.
        List<String> tmpStringList2 = new ArrayList<>();
        Optional.ofNullable(tmpStringList)
                .ifPresent(
                        list ->
                                list.forEach(
                                        data -> {
                                            long count =
                                                    cimJpaRepository.count(
                                                            "SELECT COUNT(ID) FROM OMPDRBL F1 ,OMPDRBL_RSVCJ F2 WHERE F1.PDRBL_ID = ?1 AND F1.ID = F2.REFKEY");
                                            if (count > 0) {
                                                log.info("Now omit this from the list.");
                                            } else {
                                                tmpStringList2.add(data);
                                            }
                                        }));

        // Omit reticle from reticle list if reticle is reserved or is reserved for transfer
        List<String> tmpStringList3 = new ArrayList<>();
        if (CimArrayUtils.isNotEmpty(tmpStringList2)) {
            for (String data : tmpStringList2) {
                List<Object[]> queryReserveList =
                        cimJpaRepository.query(
                                "SELECT OMPDRBL.RSV_USER_ID,OMPDRBL.XFER_RSV_USER_ID FROM OMPDRBL WHERE OMPDRBL.PDRBL_ID = ?1",
                                data);
                if (CimArrayUtils.isEmpty(queryReserveList)) {
                    tmpStringList3.add(data);
                } else {
                    for (Object[] reserveData : queryReserveList) {
                        String reserveUserID = CimObjectUtils.toString(reserveData[0]);
                        String transeferUserID = CimObjectUtils.toString(reserveData[1]);
                        if (CimStringUtils.isNotEmpty(reserveUserID)) {
                            continue;
                        }
                        if (CimStringUtils.isNotEmpty(transeferUserID)) {
                            continue;
                        }
                    }
                    tmpStringList3.add(data);
                }
            }
        }
        // Get reticle info for return structure
        List<Infos.StoredReticle> storedReticles = new ArrayList<>();
        List<Infos.StoredReticle> storedReticleList =
                this.equipmentStoredReticleGetDR(objCommon, equipmentID);
        Optional.ofNullable(tmpStringList3)
                .ifPresent(
                        list ->
                                list.forEach(
                                        data -> {
                                            Optional.ofNullable(storedReticleList)
                                                    .ifPresent(
                                                            listStored ->
                                                                    listStored.forEach(
                                                                            storeData -> {
                                                                                if (ObjectIdentifier.equalsWithValue(
                                                                                        data, storeData.getReticleID())) {
                                                                                    storedReticles.add(storeData);
                                                                                }
                                                                            }));
                                        }));

        return storedReticles;
    }

    @Override
    public ObjectIdentifier machineWorkAreaGet(
            Infos.ObjCommon objCommon, ObjectIdentifier machineID) {
        ObjectIdentifier result = new ObjectIdentifier();
        // =========================================================================
        // Get reticle list into output structure
        // =========================================================================
        Boolean isStorageBool = false;
        Machine aMachine = null;
        CimMachine aPosMachine = null;
        CimStorageMachine aPosStorageMachine = null;
        if (ObjectIdentifier.isEmptyWithRefKey(machineID)) {
            Validations.check(
                    ObjectIdentifier.isEmptyWithValue(machineID),
                    retCodeConfig.getNotFoundEqp(),
                    ObjectIdentifier.fetchValue(machineID));
            aMachine = newMachineManager.findMachineNamed(machineID.getValue());
            Validations.check(aMachine == null, retCodeConfig.getNotFoundEqp(), machineID.getValue());
            isStorageBool = aMachine.isStorageMachine();
        } else {
            aMachine = baseCoreFactory.getBO(CimMachine.class, machineID.getReferenceKey());
            if (aMachine == null) {
                aMachine = baseCoreFactory.getBO(CimStorageMachine.class, machineID.getReferenceKey());
            }
            isStorageBool = aMachine.isStorageMachine();
        }
        if (CimBooleanUtils.isTrue(isStorageBool)) {
            aPosStorageMachine = (CimStorageMachine) aMachine;
            CimArea workArea = aPosStorageMachine.getWorkArea();
            if (null != workArea) {
                String aworkAreaID = workArea.getIdentifier();
                result = ObjectIdentifier.build(workArea.getIdentifier(), workArea.getPrimaryKey());
            } else {
                result = ObjectIdentifier.build("", "");
            }
        } else {
            aPosMachine = (CimMachine) aMachine;
            CimArea workArea = aPosMachine.getWorkArea();
            if (null != workArea) {
                String aworkAreaID = workArea.getIdentifier();
                result = ObjectIdentifier.build(workArea.getIdentifier(), workArea.getPrimaryKey());
            } else {
                result = ObjectIdentifier.build("", "");
            }
        }
        return result;
    }

    @Override
    public String machineStateAvailabilityCheckForReticlePodXfer(
            Infos.ObjCommon objCommon, ObjectIdentifier machineID) {
        String machineType = null;
        log.info("step1 - equipentMethod.machineTypeGet");
        Outputs.ObjMachineTypeGetOut objMachineTypeGetOut = this.machineTypeGet(objCommon, machineID);
        /*--------------------------------------------------------------*/
        /*   If it is a stocker, the stocker should be a BRS or a RPS   */
        /*--------------------------------------------------------------*/
        if (CimBooleanUtils.isTrue(objMachineTypeGetOut.isBStorageMachineFlag())
                && !CimStringUtils.equals(
                BizConstant.SP_STOCKER_TYPE_BARERETICLE, objMachineTypeGetOut.getStockerType())
                && !CimStringUtils.equals(
                BizConstant.SP_STOCKER_TYPE_RETICLEPOD, objMachineTypeGetOut.getStockerType())) {
            log.info("Invalid stocker specified. stocker ID: {}", ObjectIdentifier.fetchValue(machineID));
            Validations.check(
                    true, retCodeConfigEx.getStkTypeDifferent(), objMachineTypeGetOut.getStockerType());
        }
        Boolean isEQP = false;
        Boolean isBRS = false;
        Boolean isRPS = false;

        if (CimBooleanUtils.isTrue(objMachineTypeGetOut.isBStorageMachineFlag())) {
            log.info("bStorageMachineFlag == TRUE");
            machineType = objMachineTypeGetOut.getStockerType();
            if (CimStringUtils.equals(
                    BizConstant.SP_STOCKER_TYPE_BARERETICLE, objMachineTypeGetOut.getStockerType())) {
                log.info("Inpara machineID {} is a BRS", ObjectIdentifier.fetchValue(machineID));
                isBRS = true;
            } else {
                log.info("Inpara machineID {} is a RPS", ObjectIdentifier.fetchValue(machineID));
                isRPS = true;
            }
        } else {
            log.info("bStorageMachineFlag == FALSE");
            machineType = BizConstant.SP_MACHINE_TYPE_EQP;
            log.info("Inpara machineID {} is EQP", ObjectIdentifier.fetchValue(machineID));
            isEQP = true;
        }

        if (CimBooleanUtils.isTrue(isEQP)) {
            log.info("isEQP  == TRUE");
            log.info("step2 - equipentMethod.equipmentOnlineModeGet");
            String equipmentOnlineModeGetOut = this.equipmentOnlineModeGet(objCommon, machineID);
            log.info("Equipment's online mode: {}", equipmentOnlineModeGetOut);
            if (!CimStringUtils.equals(
                    BizConstant.SP_EQP_ONLINEMODE_ONLINEREMOTE, equipmentOnlineModeGetOut)) {
                Validations.check(
                        true,
                        retCodeConfig.getEqpOnlineMode(),
                        ObjectIdentifier.fetchValue(machineID),
                        equipmentOnlineModeGetOut);
            }
        }

        if (CimBooleanUtils.isTrue(isBRS)) {
            log.info("isBRS  == TRUE");
            log.info("step3 - stockerMethod.stockerOnlineModeGet");
            String stockerOnlineModeGetOut = stockerMethod.stockerOnlineModeGet(objCommon, machineID);
            log.info("Stocker's online mode: {}", stockerOnlineModeGetOut);
            if (!CimStringUtils.equals(
                    BizConstant.SP_EQP_ONLINEMODE_ONLINEREMOTE, stockerOnlineModeGetOut)) {
                Validations.check(
                        true,
                        retCodeConfig.getEqpOnlineMode(),
                        ObjectIdentifier.fetchValue(machineID),
                        stockerOnlineModeGetOut);
            }
        }

        if (CimBooleanUtils.isTrue(isBRS) || CimBooleanUtils.isTrue(isRPS)) {
            log.info("isBRS == TRUE || isRPS == TRUE");
            this.equipmentCheckAvail(objCommon, machineID);
        }
        return machineType;
    }

    @Override
    public void equipmentReticlePodStateChange(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            ObjectIdentifier portID,
            String portStatus) {
        log.debug("in para equipmentID {}", ObjectIdentifier.fetchValue(equipmentID));
        log.debug("in para portID      {}", ObjectIdentifier.fetchValue(portID));
        log.debug("in para portStatus  {}", portStatus);

        /*----------------------------*/
        /*   Get Equipment Objectt    */
        /*----------------------------*/
        CimMachine aPosMachine = null;
        if (ObjectIdentifier.isEmptyWithRefKey(equipmentID)) {
            Validations.check(
                    ObjectIdentifier.isEmptyWithValue(equipmentID), retCodeConfig.getNotFoundEqp());
            aPosMachine = newMachineManager.findMachineNamed(equipmentID.getValue());
        } else {
            aPosMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID.getReferenceKey());
        }
        Validations.check(null == aPosMachine, retCodeConfig.getNotFoundEqp());

        /*-------------------------------*/
        /*   Get Port Resource Object    */
        /*-------------------------------*/
        CimReticlePodPortResource aPosReticlePodPortResource =
                aPosMachine.findReticlePodPortResourceNamed(ObjectIdentifier.fetchValue(portID));

        /*------------------------*/
        /*   Change Port State    */
        /*------------------------*/
        if (CimStringUtils.equals(portStatus, BizConstant.SP_PORTRSC_PORTSTATE_LOADREQ)
                || CimStringUtils.equals(portStatus, BizConstant.SP_PORTRSC_PORTSTATE_LOADCOMP)
                || CimStringUtils.equals(portStatus, BizConstant.SP_PORTRSC_PORTSTATE_UNLOADREQ)
                || CimStringUtils.equals(portStatus, BizConstant.SP_PORTRSC_PORTSTATE_UNLOADCOMP)
                || CimStringUtils.equals(portStatus, BizConstant.SP_PORTRSC_PORTSTATE_UNKNOWN)
                || CimStringUtils.equals(portStatus, BizConstant.SP_PORTRSC_PORTSTATE_DOWN)) {

            Validations.check(
                    null == aPosReticlePodPortResource,
                    retCodeConfig.getRspportNotFound(),
                    ObjectIdentifier.fetchValue(equipmentID),
                    ObjectIdentifier.fetchValue(portID));

            log.debug("aPosReticlePodPortResource is not null");
            aPosReticlePodPortResource.setPortState(portStatus);
        } else {
            Validations.check(
                    true,
                    retCodeConfig.getUndefinedPortState(),
                    ObjectIdentifier.fetchValue(portID),
                    portStatus);
        }
        /*---------------------------------------*/
        /*   Update TimeStamp and Person Info    */
        /*---------------------------------------*/
        aPosReticlePodPortResource.setLastStatusChangeTimeStamp(
                CimDateUtils.convertToSpecString(objCommon.getTimeStamp().getReportTimeStamp()));

        CimPerson aPerson = null;
        ObjectIdentifier personID = objCommon.getUser().getUserID();
        if (ObjectIdentifier.isEmptyWithRefKey(personID)) {
            aPerson = personManager.findPersonNamed(ObjectIdentifier.fetchValue(personID));
        } else {
            aPerson = baseCoreFactory.getBO(CimPerson.class, personID.getReferenceKey());
        }
        Validations.check(null == aPerson, retCodeConfig.getNotFoundPerson());

        aPosReticlePodPortResource.setLastStatusChangePerson(aPerson);
        aPosReticlePodPortResource.setLastStatusChangeTimeStamp(
                CimDateUtils.convertToSpecString(objCommon.getTimeStamp().getReportTimeStamp()));

        /*--------------------------*/
        /*   Change dispatchInfo    */
        /*--------------------------*/
        // Load case
        if (CimStringUtils.equals(portStatus, BizConstant.SP_PORTRSC_PORTSTATE_LOADREQ)) {
            log.debug("portStatus = LoadReq");
            /*---------------------------------------*/
            /*   Set dispatch state and timestamp    */
            /*---------------------------------------*/
            aPosReticlePodPortResource.setDispatchState(BizConstant.SP_PORTRSC_DISPATCHSTATE_REQUIRED);
            aPosReticlePodPortResource.setLastStatusChangeTimeStamp(
                    CimDateUtils.convertToSpecString(objCommon.getTimeStamp().getReportTimeStamp()));
            /*--------------------------------------------------------------*/
            /*  Clear dispatched reticle pod info                           */
            /*  This is for error case... if equipment becomes wrong,       */
            /*  this LoadReq report will refresh reserved pod information   */
            /*--------------------------------------------------------------*/
            aPosReticlePodPortResource.setTransferReservedReticlePod(null);
            aPosReticlePodPortResource.setReserveState(BizConstant.SP_RETICLEPODPORT_NOTRESERVED);
        } // UnlaodReq case
        else if (CimStringUtils.equals(portStatus, BizConstant.SP_PORTRSC_PORTSTATE_UNLOADREQ)) {
            log.debug("portStatus = UnloadReq");
            /*--------------------------------------*/
            /*   Set dispatch state and timestamp   */
            /*--------------------------------------*/
            aPosReticlePodPortResource.setDispatchState(BizConstant.SP_PORTRSC_DISPATCHSTATE_REQUIRED);
            aPosReticlePodPortResource.setLastStatusChangeTimeStamp(
                    CimDateUtils.convertToSpecString(objCommon.getTimeStamp().getReportTimeStamp()));
            aPosReticlePodPortResource.setReserveState(BizConstant.SP_RETICLEPODPORT_NOTRESERVED);
        } // UnloadComp case
        else if (CimStringUtils.equals(portStatus, BizConstant.SP_PORTRSC_PORTSTATE_UNLOADCOMP)) {
            // Do nothing for dispatch related status
            log.debug("portStatus = UnloadComp | Do nothing for dispatch related status ");
        } // LoadComp case
        else if (CimStringUtils.equals(portStatus, BizConstant.SP_PORTRSC_PORTSTATE_LOADCOMP)) {
            // Do nothing for dispatch related status
            log.debug("portStatus = LoadComp | Do nothing for dispatch related status ");
        } else {
            // Do nothing for dispatch related status
            log.debug("portStatus = others | Do nothing for dispatch related status ");
        }
    }

    @Override
    public void machineCapacityCheckForReticleStore(
            Infos.ObjCommon objCommon, ObjectIdentifier machineID) {
        log.debug("step1 - equipmentMethod.machineTypeGet");
        Outputs.ObjMachineTypeGetOut machineTypeGetOut = this.machineTypeGet(objCommon, machineID);
        Integer nMaxCapacity = 0;
        Integer nStoredReticleCount = 0;
        Integer nStoredReticleInRELCount = 0;
        if (CimBooleanUtils.isFalse(machineTypeGetOut.isBStorageMachineFlag())) {
            log.debug("machineID is EQP");
            /*----------------------*/
            /*   Get Max Capacity   */
            /*----------------------*/
            CimMachine aPosMachine = null;
            if (ObjectIdentifier.isEmptyWithRefKey(machineID)) {
                Validations.check(
                        ObjectIdentifier.isEmptyWithValue(machineID), retCodeConfig.getNotFoundEqp(), "*****");
                aPosMachine = newMachineManager.findMachineNamed(machineID.getValue());
            } else {
                aPosMachine = baseCoreFactory.getBO(CimMachine.class, machineID.getReferenceKey());
            }
            Validations.check(
                    null == aPosMachine,
                    retCodeConfig.getNotFoundEqp(),
                    ObjectIdentifier.fetchValue(machineID));

            nMaxCapacity = aPosMachine.getMaxReticleCapacity();
            log.debug("nMaxCapacity = {}", nMaxCapacity);

            /*--------------------------------------*/
            /*   Get current stored reticle count   */
            /*--------------------------------------*/
            log.debug("step2 - equipmentMethod.equipmentStoredReticleGetDR");
            List<Infos.StoredReticle> storedReticleList =
                    this.equipmentStoredReticleGetDR(objCommon, machineID);
            nStoredReticleCount = CimArrayUtils.getSize(storedReticleList);
            log.debug("nStoredReticleCount = {}", nStoredReticleCount);
        } else if (CimStringUtils.equals(
                machineTypeGetOut.getStockerType(), BizConstant.SP_STOCKER_TYPE_BARERETICLE)) {
            log.debug("machineID is BRS");
            /*----------------------*/
            /*   Get Max Capacity   */
            /*----------------------*/
            CimStorageMachine aPosStorageMachine = null;
            if (ObjectIdentifier.isEmptyWithRefKey(machineID)) {
                Validations.check(
                        ObjectIdentifier.isEmptyWithValue(machineID), retCodeConfig.getNotFoundStocker());
                aPosStorageMachine = newMachineManager.findStorageMachineNamed(machineID.getValue());
            } else {
                aPosStorageMachine =
                        baseCoreFactory.getBO(CimStorageMachine.class, machineID.getReferenceKey());
            }
            Validations.check(null == aPosStorageMachine, retCodeConfig.getNotFoundStocker());

            nMaxCapacity = aPosStorageMachine.getMaxReticleCapacity().intValue();
            log.debug("nMaxCapacity = {}", nMaxCapacity);

            /*--------------------------------------*/
            /*   Get current stored reticle count   */
            /*--------------------------------------*/
            log.debug("step3 - stockerMethod.stockerStoredReticleGetDR");
            List<Infos.StoredReticle> storedReticleList =
                    stockerMethod.stockerStoredReticleGetDR(objCommon, machineID);
            nStoredReticleCount = CimArrayUtils.getSize(storedReticleList);
            log.debug("nStoredReticleCount = {}", nStoredReticleCount);
        } else {
            log.debug("Invalid imparameter (machineID).");
            Validations.check(true, retCodeConfig.getInvalidParameter());
        }

        /*-----------------------------------------------*/
        /*   Get reserved store reticle count in FSREL   */
        /*-----------------------------------------------*/
        log.debug("step4 - equipmentMethod.machineStoreComponentJobGetDR");
        List<Infos.ReticleComponentJob> machineStoreComponentJobGetDRList =
                this.machineStoreComponentJobGetDR(objCommon, machineID);

        nStoredReticleInRELCount = CimArrayUtils.getSize(machineStoreComponentJobGetDRList);
        log.debug("nStoredReticleInRELCount {}", nStoredReticleInRELCount);
        /*--------------------*/
        /*   do calculation   */
        /*--------------------*/
        if (nStoredReticleCount + nStoredReticleInRELCount + 1 > nMaxCapacity) {
            log.debug("Reticle store capacity over.");
            Validations.check(true, retCodeConfigEx.getEqpReticleCapacityOver());
        }
    }

    @Override
    public List<Infos.ReticleComponentJob> machineStoreComponentJobGetDR(
            Infos.ObjCommon objCommon, ObjectIdentifier machineID) {
        List<Infos.ReticleComponentJob> result = new ArrayList<>();
        String toEqpID = ObjectIdentifier.fetchValue(machineID);
        String jobStatus = BizConstant.SP_RCJ_STATUS_COMPLETED;
        String jobName = BizConstant.SP_RCJ_JOBNAME_STORE;

        String sql =
                "SELECT * "
                        + "            FROM OSRTCLEXELIST "
                        + "            WHERE JOB_STATUS != ?1"
                        + "                  AND JOB_NAME = ?2"
                        + "                  AND DEST_EQP_ID = ?3";
        List<CimRELDO> queryList =
                cimJpaRepository.query(sql, CimRELDO.class, jobStatus, jobName, toEqpID);
        Optional.ofNullable(queryList)
                .ifPresent(
                        list ->
                                list.forEach(
                                        entity -> {
                                            Infos.ReticleComponentJob job = new Infos.ReticleComponentJob();
                                            job.setRequestedTimestamp(
                                                    CimDateUtils.convertToSpecString(entity.getReqTime()));
                                            job.setPriority(CimNumberUtils.longValue(entity.getPriority()));
                                            job.setReticleDispatchJobID(entity.getRdjId());
                                            job.setReticleComponentJobID(entity.getRcjId());
                                            job.setReticleDispatchJobRequestUserID(
                                                    ObjectIdentifier.buildWithValue(entity.getReqUserId()));
                                            job.setJobSeq(CimNumberUtils.longValue(entity.getJobSeq()));
                                            job.setReticlePodID(ObjectIdentifier.buildWithValue(entity.getRtclpodId()));
                                            job.setSlotNo(CimNumberUtils.longValue(entity.getSlotNo()));
                                            job.setReticleID(ObjectIdentifier.buildWithValue(entity.getRtclId()));
                                            job.setJobName(entity.getJobName());
                                            job.setToEquipmentID(ObjectIdentifier.buildWithValue(entity.getToEqpId()));
                                            job.setToReticlePodPortID(
                                                    ObjectIdentifier.buildWithValue(entity.getToPortId()));
                                            job.setToEquipmentCategory(entity.getToEqpCategory());
                                            job.setFromEquipmentID(
                                                    ObjectIdentifier.buildWithValue(entity.getFromEqpId()));
                                            job.setFromReticlePodPortID(
                                                    ObjectIdentifier.buildWithValue(entity.getFromPortId()));
                                            job.setFromEquipmentCategory(entity.getFromEqpCategory());
                                            job.setJobStatus(entity.getJobStatus());
                                            job.setJobStatusChangeTimestamp(
                                                    CimDateUtils.convertToSpecString(entity.getJobStatChgTime()));
                                            result.add(job);
                                        }));
        return result;
    }

    @Override
    public void machineReticlePodPortReserve(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            ObjectIdentifier portID,
            ObjectIdentifier reticlePodID) {
        log.info("in-para equipmentID: {}", ObjectIdentifier.fetchValue(equipmentID));
        log.info("in-para portID: {}", ObjectIdentifier.fetchValue(portID));
        log.info("in-para reticlePodID: {}", ObjectIdentifier.fetchValue(reticlePodID));

        log.info("step1- equipentMethod.machineTypeGet");
        Outputs.ObjMachineTypeGetOut machineTypeGetOut = this.machineTypeGet(objCommon, equipmentID);
        log.info(
                "stockerID return of machineTypeGet {}",
                ObjectIdentifier.fetchValue(machineTypeGetOut.getStockerID()));

        if (CimBooleanUtils.isFalse(machineTypeGetOut.isBStorageMachineFlag())) {
            log.info("StorageMachineFlag == FALSE | EQP");
            CimMachine aPosMachine = null;
            if (ObjectIdentifier.isEmptyWithRefKey(equipmentID)) {
                Validations.check(
                        ObjectIdentifier.isEmptyWithValue(equipmentID), retCodeConfig.getNotFoundEqp(), "*****");
                aPosMachine = newMachineManager.findMachineNamed(equipmentID.getValue());
            } else {
                aPosMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID.getReferenceKey());
            }
            Validations.check(null == aPosMachine, retCodeConfig.getNotFoundMachine());
            log.info("machine is not null");
            CimReticlePodPortResource aPosReticlePodPort =
                    aPosMachine.findReticlePodPortResourceNamed(ObjectIdentifier.fetchValue(portID));
            Validations.check(
                    null == aPosReticlePodPort,
                    retCodeConfig.getRspportNotFound(),
                    ObjectIdentifier.fetchValue(equipmentID),
                    ObjectIdentifier.fetchValue(portID));
            aPosReticlePodPort.setDispatchState(BizConstant.SP_PORTRSC_DISPATCHSTATE_DISPATCHED);
            aPosReticlePodPort.setDispatchTimeStamp(
                    CimDateUtils.convertToSpecString(objCommon.getTimeStamp().getReportTimeStamp()));

            if (ObjectIdentifier.isNotEmptyWithValue(reticlePodID)) {
                log.info("reticlePodID: {}", ObjectIdentifier.fetchValue(reticlePodID));
                log.info("ReticlePodPort reserve");
                CimReticlePod aReticlePod = null;
                if (ObjectIdentifier.isEmptyWithRefKey(reticlePodID)) {
                    aReticlePod = durableManager.findReticlePodNamed(reticlePodID.getValue());
                } else {
                    aReticlePod = baseCoreFactory.getBO(CimReticlePod.class, reticlePodID.getReferenceKey());
                }
                Validations.check(
                        null == aReticlePod,
                        retCodeConfig.getNotFoundReticlePod(),
                        ObjectIdentifier.fetchValue(reticlePodID));

                aPosReticlePodPort.setReserveState(BizConstant.SP_RETICLEPODPORT_RESERVED);
                aPosReticlePodPort.setTransferReservedReticlePod(aReticlePod);
                aPosReticlePodPort.setTransferReservedTimeStamp(
                        CimDateUtils.convertToSpecString(objCommon.getTimeStamp().getReportTimeStamp()));
            } else {
                aPosReticlePodPort.setReserveState(BizConstant.SP_RETICLEPODPORT_NOTRESERVED);
                aPosReticlePodPort.setTransferReservedReticlePod(null);
            }
        } else if (CimStringUtils.equals(
                machineTypeGetOut.getStockerType(), BizConstant.SP_STOCKER_TYPE_RETICLEPOD)
                || CimStringUtils.equals(
                machineTypeGetOut.getStockerType(), BizConstant.SP_STOCKER_TYPE_BARERETICLE)) {
            log.info("StorageMachineFlag == TRUE | stockerType {}", machineTypeGetOut.getStockerType());
            log.info("step2- stockerMethod.stockerReticlePodPortInfoGetDR");
            List<Infos.ReticlePodPortInfo> reticlePodPortInfoList =
                    stockerMethod.stockerReticlePodPortInfoGetDR(objCommon, machineTypeGetOut.getStockerID());
            if (CimArrayUtils.isNotEmpty(reticlePodPortInfoList)) {
                for (Infos.ReticlePodPortInfo reticlePodPortInfo : reticlePodPortInfoList) {
                    if (ObjectIdentifier.equalsWithValue(reticlePodPortInfo.getReticlePodPortID(), portID)) {
                        log.info("Reticle Pod Port Found!");
                        Inputs.StockerReticlePodPortDispatchStateChangeIn input =
                                new Inputs.StockerReticlePodPortDispatchStateChangeIn();
                        input.setStockerID(equipmentID);
                        Infos.ReticlePodPortInfo reticlePodPortInfoParam = reticlePodPortInfo;
                        input.setStrReticlePodPortInfo(reticlePodPortInfoParam);
                        reticlePodPortInfoParam.setReservedReticlePodID(reticlePodID);
                        reticlePodPortInfoParam.setTransferReserveStatus(
                                BizConstant.SP_RETICLEPODPORT_RESERVED);
                        reticlePodPortInfoParam.setTransferReserveTimestamp(
                                CimDateUtils.convertToSpecString(objCommon.getTimeStamp().getReportTimeStamp()));
                        reticlePodPortInfoParam.setDispatchStatus(
                                BizConstant.SP_PORTRSC_DISPATCHSTATE_DISPATCHED);
                        reticlePodPortInfoParam.setDispatchTimestamp(
                                CimDateUtils.convertToSpecString(objCommon.getTimeStamp().getReportTimeStamp()));
                        log.info("step3- stockerMethod.stockerReticlePodPortDispatchStateChange");
                        stockerMethod.stockerReticlePodPortDispatchStateChange(objCommon, input);
                        break;
                    }
                }
            }
        } else {
            log.info("stockerType {} is invalid", machineTypeGetOut.getStockerType());
            Validations.check(true, retCodeConfig.getInvalidInputParam());
        }
    }

    @Override
    public void equipmentReticlePodLoad(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            ObjectIdentifier reticlePodPortID,
            ObjectIdentifier reticlePodID,
            String claimMemo) {
        log.info("equipmentID {}", ObjectIdentifier.fetchValue(equipmentID));
        log.info("reticlePodPortID {}", ObjectIdentifier.fetchValue(reticlePodPortID));
        log.info("reticlePodID {}", ObjectIdentifier.fetchValue(reticlePodID));
        log.info("claimMemo {}", claimMemo);
        /*----------------------------------------------*/
        /*   Get object reference from input parameter  */
        /*----------------------------------------------*/
        CimMachine aPosMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(aPosMachine == null, retCodeConfig.getNotFoundEqp());

        /*----------------------------------------------------------*/
        /*   Get reticle pod port object reference from PosMachine  */
        /*----------------------------------------------------------*/
        CimReticlePodPortResource aPosReticlePodPort =
                aPosMachine.findReticlePodPortResourceNamed(ObjectIdentifier.fetchValue(reticlePodPortID));
        Validations.check(
                aPosReticlePodPort == null,
                retCodeConfig.getRspportNotFound(),
                equipmentID,
                reticlePodPortID);

        /*----------------------------------------------------------*/
        /*   Get reticle pod port object reference from PosMachine  */
        /*----------------------------------------------------------*/
        CimReticlePod aPosReticlePod = baseCoreFactory.getBO(CimReticlePod.class, reticlePodID);
        Validations.check(aPosReticlePod == null, retCodeConfig.getNotFoundReticlePod());

        /*----------------------------------------------------------*/
        /*   Reticle pod xfer reserve destination equipment         */
        /*----------------------------------------------------------*/
        CimMachine destPosMachine = aPosReticlePod.getTransferDestinationEquipment();
        String destMachine =
                !CimObjectUtils.isEmpty(destPosMachine) ? destPosMachine.getIdentifier() : "";

        /*--------------------------------------------------------------------*/
        /*   Compare equipment that reticle pod xfer destination and to load  */
        /*--------------------------------------------------------------------*/
        Validations.check(
                !CimObjectUtils.isEmpty(destMachine)
                        && !ObjectIdentifier.equalsWithValue(destMachine, equipmentID),
                retCodeConfigEx.getRtclpodDestDifferent(),
                reticlePodID,
                destMachine);

        /*--------------------------------*/
        /*   Get reserved reticle pod ID  */
        /*--------------------------------*/
        CimReticlePod aReservedReticlePod = aPosReticlePodPort.getTransferReservedReticlePod();
        String reservedReticlePodID =
                !CimObjectUtils.isEmpty(aReservedReticlePod) ? aReservedReticlePod.getIdentifier() : "";

        /*------------------------------------------*/
        /*   Maintain reticle pod port information  */
        /*------------------------------------------*/
        if (ObjectIdentifier.equalsWithValue(reticlePodID, reservedReticlePodID)) {
            log.info("reticlePodID.identifier =  reservedReticlePodID");
            CimReticlePod aNilReticlePod = null;
            aPosReticlePodPort.setTransferReservedReticlePod(aNilReticlePod);
        }

        aPosReticlePodPort.setLoadedReticlePod(aPosReticlePod);
        aPosReticlePodPort.setDispatchState(BizConstant.SP_PORTRSC_DISPATCHSTATE_REQUIRED);
        aPosReticlePodPort.setDispatchTimeStamp(
                objCommon.getTimeStamp().getReportTimeStamp().toString());
        aPosReticlePodPort.setReserveState(BizConstant.SP_RETICLEPODPORT_NOTRESERVED);
        /*------------------------------------------------*/
        /*   Maintain reticle information in reticle pod  */
        /*------------------------------------------------*/
        ObjectIdentifier tmpStockerID = null;
        reticleMethod.reticlePodTransferStateChange(
                objCommon,
                tmpStockerID,
                equipmentID,
                reticlePodID,
                BizConstant.SP_TRANSSTATE_EQUIPMENTIN,
                "",
                claimMemo,
                new Infos.ShelfPosition());
    }

    @Override
    public boolean equipmentReticleRequiredFlagGet(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID) {
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(aMachine == null, retCodeConfig.getNotFoundEqp(), equipmentID);
        return CimBooleanUtils.isTrue(aMachine.isReticleRequired());
    }

    @Override
    public void capabilityCheck(
            Infos.ObjCommon objCommon, List<ObjectIdentifier> lotIdList, ObjectIdentifier equipmentID) {
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(aMachine == null, retCodeConfig.getNotFoundEqp(), equipmentID.getValue());
        MachineDTO.EqpCapabilityInfo eqpCapibility = aMachine.getEqpCapabilities();
        List<MachineDTO.EqpCapabilityDetail> eqpCapabilityDetailList =
                eqpCapibility.getEqpCapabilityDetailList();

        for (ObjectIdentifier lotID : lotIdList) {
            CimLot aLot = baseCoreFactory.getBO(CimLot.class, lotID);
            String lotType = aLot.getLotType();
            if (CimStringUtils.equals(lotType, BizConstant.SP_LOT_TYPE_VENDORLOT)) {
                continue;
            }
            String capabilityReq = aLot.getProcessOperation().getProcessDefinition().getCapabilityReq();
            if (CimStringUtils.isEmpty(capabilityReq)) {
                continue;
            }
            boolean foundFlag = false;
            for (MachineDTO.EqpCapabilityDetail eqpCapabilityDetail : eqpCapabilityDetailList) {
                if (CimStringUtils.equals(eqpCapabilityDetail.getEqpCapability(), capabilityReq)) {
                    foundFlag = true;
                    break;
                }
            }
            Validations.check(!foundFlag, retCodeConfigEx.getCapabilityNotMatch());
        }
    }

    @Override
    public void ibFurnaceEQPBatchinqCheck(Infos.ObjCommon objCommon, ObjectIdentifier eqpID) {
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, eqpID);
        Validations.check(aMachine == null, retCodeConfig.getNotFoundEqp(), eqpID.getValue());
        // check the special control and category of the eqp
        List<String> specialEquipmentControls = aMachine.getSpecialEquipmentControls();
        boolean findFlag = false;
        for (String specialEquipmentControl : specialEquipmentControls) {
            if (CimStringUtils.equals(
                    specialEquipmentControl, BizConstant.SP_MC_SPECIALEQUIPMENTCONTROL_FURNACE_AB_BATCH)) {
                findFlag = true;
                break;
            }
        }
        String category = aMachine.getCategory();
        Validations.check(
                !(findFlag && CimStringUtils.equals(category, BizConstant.SP_MC_CATEGORY_INTERNALBUFFER)),
                retCodeConfigEx.getNotIbAndFurnaceEqp());
        // check if there is any runing lot in the eqp
        List<MachineDTO.MachineLot> machineLots = aMachine.allProcessingLots();
        Validations.check(
                CimArrayUtils.isNotEmpty(machineLots), retCodeConfigEx.getRunningLotIbAndFurnaceEqp());
    }

    @Override
    public IBFurnaceEQPBatchInfo ibFurnaceEQPBatchInfoGet(
            Infos.ObjCommon objCommon, ObjectIdentifier eqpID) {
        String sql =
                "SELECT * FROM OMEVMVO WHERE TRX_ID ='OEQPW023' OR TRX_ID ='OEQPW008' AND EQP_ID = ?1 ORDER BY EVENT_TIME DESC";
        List<CimEventOpeCompleteDO> query =
                cimJpaRepository.query(sql, CimEventOpeCompleteDO.class, eqpID.getValue());
        IBFurnaceEQPBatchInfo ibFurnaceEQPBatchInfo = new IBFurnaceEQPBatchInfo();
        List<IBFurnaceEQPBatchInfo.lotInfoByCJ> lotInfoByCJList = new ArrayList<>();
        ibFurnaceEQPBatchInfo.setLotInfoByCJList(lotInfoByCJList);
        if (CimArrayUtils.isNotEmpty(query)) {
            CimEventOpeCompleteDO cimEventOpeCompleteDO = query.get(0);
            CimEventOpeCompleteDO tempCimEventOpeCompleteDO = new CimEventOpeCompleteDO();
            ibFurnaceEQPBatchInfo.setControJobID(cimEventOpeCompleteDO.getCtrljobId());
            tempCimEventOpeCompleteDO.setCtrljobId(cimEventOpeCompleteDO.getCtrljobId());
            List<CimEventOpeCompleteDO> cimEventOpeCompleteDOS =
                    cimJpaRepository.findAll(Example.of(tempCimEventOpeCompleteDO));
            for (CimEventOpeCompleteDO temp : cimEventOpeCompleteDOS) {
                IBFurnaceEQPBatchInfo.lotInfoByCJ lotInfoByCJ = new IBFurnaceEQPBatchInfo.lotInfoByCJ();
                lotInfoByCJ.setLotID(temp.getLotId());
                lotInfoByCJ.setCastID(temp.getCastId());
                lotInfoByCJ.setLotType(temp.getLotType());
                lotInfoByCJ.setProductID(temp.getProdspecId());
                lotInfoByCJList.add(lotInfoByCJ);
            }
        }
        return ibFurnaceEQPBatchInfo;
    }

    @Override
    public void equipmentReticlePodPortAccessModeChange(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            ObjectIdentifier reticlePodPortID,
            String newAccessMode) {
        /*----------------*/
        /*   Initialize   */
        /*----------------*/
        log.info("in para equipmentID      : {}", equipmentID);
        log.info("in para reticlePodPortID : {}", reticlePodPortID);
        log.info("in para newAccessMode    ： {}", newAccessMode);

        /*----------------------------------------------*/
        /*   Get object reference from input parameter  */
        /*----------------------------------------------*/
        CimMachine aPosMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(null == aPosMachine, retCodeConfig.getNotFoundEqp(), equipmentID);

        /*----------------------------------------------------------*/
        /*   Get reticle pod port object reference from PosMachine  */
        /*----------------------------------------------------------*/
        CimReticlePodPortResource aPosReticlePodPort =
                aPosMachine.findReticlePodPortResourceNamed(
                        ObjectIdentifier.fetchValue(reticlePodPortID));
        Validations.check(
                null == aPosReticlePodPort,
                retCodeConfig.getRspportNotFound(),
                ObjectIdentifier.fetchValue(equipmentID),
                ObjectIdentifier.fetchValue(reticlePodPortID));

        /*--------------------------------------------*/
        /*   Set new access mode to reticle pod port  */
        /*--------------------------------------------*/
        aPosReticlePodPort.setAccessMode(newAccessMode);
    }

    @Override
    public void equipmentConditionCheckForReticleRetrieve(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            ObjectIdentifier reticlePodPortID,
            ObjectIdentifier reticlePodID,
            List<Infos.MoveReticles> strMoveReticlesSeq) {
        /*-------------------------*/
        /*   Get reticle pod port  */
        /*-------------------------*/
        Outputs.ObjEquipmentReticlePodPortInfoGetDROut strEquipment_reticlePodPortInfo_GetDR_out =
                this.equipmentReticlePodPortInfoGetDR(objCommon, equipmentID);

        /*-----------------------------------------------------------*/
        /*   Check input reticle pod is on reticle pod port or not   */
        /*-----------------------------------------------------------*/
        Boolean bSomeReticlePodOnRSPPort = false;
        Boolean bCorrectReticlePodOnRSPPort = false;

        int rppLen =
                CimArrayUtils.getSize(
                        strEquipment_reticlePodPortInfo_GetDR_out.getReticlePodPortInfoList());
        int i = 0;
        for (i = 0; i < rppLen; i++) {
            log.info("Round[i] : {}", i);
            if (ObjectIdentifier.equalsWithValue(
                    reticlePodPortID,
                    strEquipment_reticlePodPortInfo_GetDR_out
                            .getReticlePodPortInfoList()
                            .get(i)
                            .getReticlePodPortID())) {
                log.info("Found Reticle Pod Port : {}", ObjectIdentifier.fetchValue(reticlePodPortID));
                if (ObjectIdentifier.isNotEmpty(
                        strEquipment_reticlePodPortInfo_GetDR_out
                                .getReticlePodPortInfoList()
                                .get(i)
                                .getLoadedReticlePodID())) {
                    log.info("bSomeReticlePodOnRSPPort = TRUE");
                    bSomeReticlePodOnRSPPort = true;
                    if (ObjectIdentifier.equalsWithValue(
                            reticlePodID,
                            strEquipment_reticlePodPortInfo_GetDR_out
                                    .getReticlePodPortInfoList()
                                    .get(i)
                                    .getLoadedReticlePodID())) {
                        log.info(
                                "bCorrectReticlePodOnRSPPort = TRUE|reticlePodID : {}", reticlePodID.getValue());
                        bCorrectReticlePodOnRSPPort = Boolean.TRUE;
                    }
                }
                break;
            }
        }

        Validations.check(
                !bSomeReticlePodOnRSPPort,
                retCodeConfigEx.getRtclpodNotLoaded(),
                ObjectIdentifier.fetchValue(reticlePodID),
                ObjectIdentifier.fetchValue(equipmentID),
                ObjectIdentifier.fetchValue(reticlePodPortID));
        Validations.check(
                !bCorrectReticlePodOnRSPPort,
                retCodeConfigEx.getRtclpodNotLoaded(),
                ObjectIdentifier.fetchValue(reticlePodID),
                ObjectIdentifier.fetchValue(equipmentID),
                ObjectIdentifier.fetchValue(reticlePodPortID));

        /*------------------------*/
        /*   Get stored reticle   */
        /*------------------------*/
        List<Infos.StoredReticle> tmpStoredReticles =
                this.equipmentStoredReticleGetDR(objCommon, equipmentID);

        /*----------------------------------------------------*/
        /*   Check requested reticle is in equipment or not   */
        /*----------------------------------------------------*/
        int mrLen = CimArrayUtils.getSize(strMoveReticlesSeq);
        for (i = 0; i < mrLen; i++) {
            log.info("Round[i] : {}", i);
            Boolean bReticleFoundInEqp = false;
            int srLen = CimArrayUtils.getSize(tmpStoredReticles);
            for (int j = 0; j < srLen; j++) {
                log.info("Round[j] : {}", j);
                if (ObjectIdentifier.equalsWithValue(
                        strMoveReticlesSeq.get(i).getReticleID(), tmpStoredReticles.get(j).getReticleID())) {
                    log.info("bReticleFoundInEqp = TRUE");
                    bReticleFoundInEqp = true;
                    break;
                }
            }

            Validations.check(
                    !bReticleFoundInEqp,
                    retCodeConfig.getReticleNotInTheEqp(),
                    strMoveReticlesSeq.get(i).getReticleID().getValue());
        }

        CimReticlePod anInputReticlePod = baseCoreFactory.getBO(CimReticlePod.class, reticlePodID);

        for (i = 0; i < mrLen; i++) {
            log.info("Round[i] : {}", i);
            // --------------------------------------------------------------
            // Check Condition of slotNumber
            // --------------------------------------------------------------
            int nPosTotal = 0;
            nPosTotal = anInputReticlePod.getPositionTotal();
            log.info("nPosTotal : {}", nPosTotal);

            if (strMoveReticlesSeq.get(i).getSlotNumber() > nPosTotal
                    || strMoveReticlesSeq.get(i).getSlotNumber() <= 0) {
                log.error("in para slotNumber is above Max or Min");

                // Error
                Validations.check(
                        retCodeConfig.getInvalidReticlePodPosition(),
                        strMoveReticlesSeq.get(i).getReticleID().getValue(),
                        strMoveReticlesSeq.get(i).getSlotNumber());
            }
        }

        /*-----------------------*/
        /*   Check port status   */
        /*-----------------------*/
        CimMachine aPosMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);

        CimReticlePodPortResource aPosReticlePodPortResource = null;
        Validations.check(
                ObjectIdentifier.isEmpty(reticlePodPortID),
                retCodeConfig.getNotFoundPortResource(),
                ObjectIdentifier.fetchValue(reticlePodPortID));
        Validations.check(null == aPosMachine, retCodeConfig.getNotFoundMachine());
        aPosReticlePodPortResource =
                aPosMachine.findReticlePodPortResourceNamed(
                        ObjectIdentifier.fetchValue(reticlePodPortID));
        //        Boolean isStorageBool = false;
        //        isStorageBool = aPosMachine.isStorageMachine() ;
        //        if(isStorageBool){
        //            aPosReticlePodPortResource =
        // aPosMachine.findReticlePodPortResourceNamed(ObjectUtils.getObjectValue(reticlePodPortID));
        //        }else{
        //            aPosReticlePodPortResource =
        // aPosMachine.findReticlePodPortResourceNamed(ObjectUtils.getObjectValue(reticlePodPortID));
        //        }
        String portStatus = aPosReticlePodPortResource.getPortState();
        Validations.check(
                CimStringUtils.equals(portStatus, BizConstant.SP_PORTRSC_PORTSTATE_DOWN),
                retCodeConfig.getInvalidPortState(),
                reticlePodPortID.getValue(),
                portStatus);
    }

    @Override
    public List<LayoutRecipeResults.EquipmentFurnaceResult> equipmentFurnaceSearch(
            Infos.ObjCommon objCommon,
            LayoutRecipeParams.EquipmentFurnaceSearchParams equipmentFurnaceSearchParams) {
        /*---------------------------*/
        /*   Get equipment furnace   */
        /*---------------------------*/
        log.info("Convert equipment furnace sql...");
        String eqpSearchSql =
                "SELECT E.* FROM OMEQP E INNER JOIN OMEQP_SPECIALEQPFN ES ON E.ID = ES.REFKEY WHERE ES.VALUE = ?1 AND E.EQP_CATEGORY = ?2";
        List<CimEquipmentDO> equipmentList =
                cimJpaRepository.query(
                        eqpSearchSql,
                        CimEquipmentDO.class,
                        BizConstant.SP_MC_SPECIALEQUIPMENTCONTROL_FURNACE,
                        BizConstant.SP_MC_CATEGORY_INTERNALBUFFER);
        if (CollectionUtils.isEmpty(equipmentList)) {
            return Lists.newArrayList();
        }

        /*---------------------------------*/
        /*   Query the recipe used by eqp    */
        /*---------------------------------*/
        log.info("Query the recipe used by eqp");
        String machineRecipeSql =
                "SELECT RE.EQP_ID , R.id ,R.RECIPE_ID FROM OMRCP R INNER JOIN OMRCP_EQP RE ON r.id = re.REFKEY WHERE "
                        + "RE.EQP_ID in (?1)";
        List<String> eqpIds =
                equipmentList.parallelStream()
                        .map(CimEquipmentDO::getEquipmentID)
                        .collect(Collectors.toList());
        List<Object[]> machineRecipe = cimJpaRepository.query(machineRecipeSql, eqpIds);
        Map<String, List<ObjectIdentifier>> machineRecipeForEqp =
                machineRecipe.parallelStream()
                        .collect(
                                Collectors.groupingBy(
                                        obj -> (String) obj[0],
                                        Collectors.mapping(
                                                obj -> ObjectIdentifier.build((String) obj[2], (String) obj[1]),
                                                Collectors.toList())));

        /*---------------------------------*/
        /*   Convert equipment to result   */
        /*---------------------------------*/
        return equipmentList.stream()
                .map(
                        eqp ->
                                new LayoutRecipeResults.EquipmentFurnaceResult(
                                        ObjectIdentifier.build(eqp.getEquipmentID(), eqp.getId()),
                                        machineRecipeForEqp.get(eqp.getEquipmentID())))
                .collect(Collectors.toList());
    }

    @Override
    public Infos.EqpPortStatus equipmentAutoMoveInReserveConditionCheck(
            Infos.ObjCommon objCommon,
            ObjectIdentifier carrierID,
            ObjectIdentifier equipmentID,
            ObjectIdentifier portID) {
        // step1 -check input param
        log.debug("step1 - check input praram");
        Validations.check(
                ObjectIdentifier.isEmpty(carrierID)
                        || ObjectIdentifier.isEmpty(equipmentID)
                        || ObjectIdentifier.isEmpty(portID),
                retCodeConfig.getInvalidInputParam());

        // step2 - check the user if EAP or else return error
        log.debug("step2 - check the user if EAP or else return error");
        Validations.check(
                !ObjectIdentifier.equalsWithValue(BizConstant.SP_TCS_PERSON, objCommon.getUser().getUserID()),
                retCodeConfig.getNotAuthFunc());

        // step3 - equipmentPortInfoGet
        log.debug("step3 - equipmentPortInfoGet");
        Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoGet(objCommon, equipmentID);

        // Fetch PortInfo With portID
        Infos.EqpPortStatus eqpPortStatus = null;
        if (null != eqpPortInfo && CimArrayUtils.isNotEmpty(eqpPortInfo.getEqpPortStatuses())) {
            eqpPortStatus =
                    eqpPortInfo.getEqpPortStatuses().parallelStream()
                            .filter(data -> ObjectIdentifier.equalsWithValue(data.getPortID(), portID))
                            .findFirst()
                            .orElse(null);
        }
        Validations.check(null == eqpPortStatus, retCodeConfig.getInvalidInputParam());

        // step4 - check onlineMode if onlineMode or else retrun error
        log.debug("step4 - check onlineMode if onlineMode or else retrun error");
        Validations.check(
                CimStringUtils.equals(
                        BizConstant.SP_EQP_ONLINEMODE_OFFLINE, eqpPortStatus.getOnlineMode()),
                retCodeConfig.getInvalidEquipmentMode(),
                ObjectIdentifier.fetchValue(equipmentID),
                eqpPortStatus.getOnlineMode());

        // step5 - check equipment category is Internal Buffer and then retrun error
        log.debug("step5 - check equipment category is Internal Buffer and then retrun error");
        CimMachine machine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(
                null == machine,
                retCodeConfig.getNotFoundMachine(),
                ObjectIdentifier.fetchValue(equipmentID));
        Validations.check(
                CimStringUtils.equals(BizConstant.SP_MC_CATEGORY_INTERNALBUFFER, machine.getCategory()),
                retCodeConfigEx.getInvalidEqpCategory(),
                machine.getCategory());

        // step6 - check port eqpPort loadPurposeType if Any Purpose or Process Lot, or else return
        // error
        log.debug(
                "step6 - check port eqpPort loadPurposeType if Any Purpose or Process Lot, or else return error");
        String loadPurposeType = eqpPortStatus.getLoadPurposeType();
        Validations.check(
                !CimStringUtils.equals(BizConstant.SP_LOADPURPOSETYPE_ANY, loadPurposeType)
                        && !CimStringUtils.equals(BizConstant.SP_LOADPURPOSETYPE_PROCESSLOT, loadPurposeType),
                retCodeConfig.getInvalidPurposeType(),
                ObjectIdentifier.fetchValue(carrierID),
                ObjectIdentifier.fetchValue(equipmentID));

        return eqpPortStatus;
    }

    @Override
    public Results.LotsMoveInReserveInfoInqResult equipmentAutoMoveInReserveInfoGet(
            Infos.ObjCommon objCommon,
            Results.LotInfoInqResult lotInfoInqResult,
            ObjectIdentifier equipmentID) {
        Results.LotsMoveInReserveInfoInqResult result = new Results.LotsMoveInReserveInfoInqResult();
        result.setEquipmentID(equipmentID);

        List<Infos.LotInfo> lotInfoList = lotInfoInqResult.getLotInfoList();
        Infos.LotListInCassetteInfo lotListInCassetteInfo = lotInfoInqResult.getLotListInCassetteInfo();
        List<Infos.WaferMapInCassetteInfo> waferMapInCassetteInfoList =
                lotInfoInqResult.getWaferMapInCassetteInfoList();

        List<Infos.StartCassette> startCassettes = new ArrayList<>();
        Infos.StartCassette startCassette = new Infos.StartCassette();
        startCassette.setCassetteID(lotListInCassetteInfo.getCassetteID());
        List<Infos.LotInCassette> lotInCassetteList = new ArrayList<>();
        for (Infos.LotInfo lotInfo : lotInfoList) {
            // lot basic info get
            ObjectIdentifier lotID = lotInfo.getLotBasicInfo().getLotID();
            ObjectIdentifier productID = lotInfo.getLotProductInfo().getProductID();
            String lotType = lotInfo.getLotBasicInfo().getLotType();
            String subLotType = lotInfo.getLotBasicInfo().getSubLotType();

            Infos.LotInCassette lotInCassette = new Infos.LotInCassette();
            lotInCassette.setLotID(lotID);
            lotInCassette.setLotType(lotType);

            // step1 - check all lots is on current Equipment or else filter it and think it  doesn't need
            // to be processing
            log.debug(
                    "step1 - check all lots is on current Equipment or else filter it and think it  doesn't need to be processing");
            final String lotStatus = lotInfo.getLotBasicInfo().getLotStatus();
            lotInCassette.setMoveInFlag(false);
            if (null != lotInfo.getLotOperationInfo() && CimStringUtils.equals(lotStatus, BizConstant.SP_LOT_PROCSTATE_WAITING)) {
                if (CimArrayUtils.isNotEmpty(lotInfo.getLotOperationInfo().getLotEquipmentList())) {
                    Boolean moveInFlag =
                            lotInfo.getLotOperationInfo().getLotEquipmentList().parallelStream()
                                    .anyMatch(
                                            data -> ObjectIdentifier.equalsWithValue(data.getEquipmentID(), equipmentID));
                    if (CimBooleanUtils.isFalse(moveInFlag)) {
                        log.debug(
                                "the lot {} didn't cover current equipment {}, moveInFlag = = false",
                                ObjectIdentifier.fetchValue(lotID),
                                ObjectIdentifier.fetchValue(equipmentID));
                    }
                    lotInCassette.setMoveInFlag(moveInFlag);
                }
            }

            // set lot-wafer info
            List<Infos.LotWafer> lotWaferList = new ArrayList<>();
            lotWaferList =
                    waferMapInCassetteInfoList.parallelStream()
                            .filter(
                                    mapInCassetteInfo ->
                                            ObjectIdentifier.equalsWithValue(mapInCassetteInfo.getLotID(), lotID))
                            .map(
                                    waferMapInCassetteInfo -> {
                                        Infos.LotWafer lotWafer = new Infos.LotWafer();
                                        lotWafer.setSlotNumber(waferMapInCassetteInfo.getSlotNumber().longValue());
                                        lotWafer.setWaferID(waferMapInCassetteInfo.getWaferID());
                                        lotWafer.setControlWaferFlag(false);
                                        lotWafer.setStartRecipeParameterList(new ArrayList<>());
                                        return lotWafer;
                                    })
                            .collect(Collectors.toList());

            lotInCassette.setLotWaferList(lotWaferList);
            lotInCassette.setMonitorLotFlag(false);
            lotInCassette.setProductID(productID);
            lotInCassette.setStartOperationInfo(new Infos.StartOperationInfo());
            lotInCassette.setStartRecipe(new Infos.StartRecipe());
            lotInCassette.setSubLotType(subLotType);
            lotInCassetteList.add(lotInCassette);
        }
        startCassette.setLotInCassetteList(lotInCassetteList);
        startCassettes.add(startCassette);
        result.setStrStartCassette(startCassettes);
        return result;
    }

    @Override
    public void equipmentCarierOutPortInfoCheck(Infos.ObjCommon objCommon,
                                                ObjectIdentifier equipmentID,
                                                List<CarrierOutPortInfo> carrierOutPortInfoList) {
        //step1 - equipmentPortInfoForInternalBufferGetDR
        if (log.isDebugEnabled()){
            log.debug("step1 - equipmentPortInfoForInternalBufferGetDR");
        }
        Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoForInternalBufferGetDR(objCommon, equipmentID);

        //step2 - equipmentInternalBufferInfoGet
        if (log.isDebugEnabled()){
            log.debug("step2 - equipmentInternalBufferInfoGet");
        }
        List<Infos.EqpInternalBufferInfo> bufferInfos = this.equipmentInternalBufferInfoGet(objCommon, equipmentID);

        //step3 - check carrier condition
        if (log.isDebugEnabled()) {
            log.debug("step3 - check carrier condition");
        }
        carrierOutPortInfoList.parallelStream()
                .forEach(carrierOutPortInfo -> {
                    ObjectIdentifier carrierID = carrierOutPortInfo.getCarrierID();
                    //step3.1 - check carrier exist
                    if (log.isDebugEnabled()) {
                        log.debug("step3.1 - check carrier exist");
                    }
                    CimCassette carrier = baseCoreFactory.getBO(CimCassette.class, carrierID);
                    Validations.check(null == carrier, retCodeConfig.getNotFoundCassette(),
                            ObjectIdentifier.fetchValue(carrierID));

                    //step3.2 - check carrier's lot no processing
                    if (log.isDebugEnabled()) {
                        log.debug("step3.2 - check carrier's lot no processing");
                    }
                    Infos.LotListInCassetteInfo lotInCarrieInfo = cassetteMethod.cassetteLotListGetDR(objCommon,
                            carrierID);
                    Optional.ofNullable(lotInCarrieInfo.getLotIDList()).ifPresent(list -> list.forEach(lotID -> {
                        String processState = lotMethod.lotProcessStateGet(objCommon, lotID);
                        Validations.check(CimStringUtils.equals(BizConstant.SP_LOT_PROCSTATE_PROCESSING, processState),
                                retCodeConfig.getInvalidLotProcessState(),
                                ObjectIdentifier.fetchValue(lotID),
                                processState);
                    }));

                    //step4 - check buffer MoveInReserve infos exist
                    if (log.isDebugEnabled()){
                        log.debug("step4 - check buffer MoveInReserve infos exist");
                    }
                    Optional.ofNullable(bufferInfos).ifPresent(list -> list.forEach(
                            data -> Optional.ofNullable(data.getShelfInBufferList()).ifPresent(bufferList -> {
                                boolean existRsv = bufferList.parallelStream()
                                        .anyMatch(bufferData ->
                                        (ObjectIdentifier.equalsWithValue(carrierOutPortInfo.getPortID(),
                                                bufferData.getReservedLoadPortID())
                                            && ObjectIdentifier.isNotEmptyWithValue(bufferData.getReservedCarrierID()))
                                        );
                                Validations.check(existRsv,retCodeConfig.getInternalBufferAlreadyReserved(),
                                        ObjectIdentifier.fetchValue(equipmentID), "*****");
                            }))
                    );

                    //step5 - check port exist
                    if (log.isDebugEnabled()) {
                        log.debug("step5 - check port exist");
                    }
                    List<Infos.EqpPortStatus> eqpPortStatuses = eqpPortInfo.getEqpPortStatuses();
                    boolean noExistPort = eqpPortStatuses.parallelStream()
                            .noneMatch(eqpPortStatus -> ObjectIdentifier.equalsWithValue(
                                    eqpPortStatus.getPortID(),
                                    carrierOutPortInfo.getPortID()));
                    Validations.check(noExistPort, retCodeConfig.getNotFoundPort(),
                            ObjectIdentifier.fetchValue(carrierOutPortInfo.getPortID()));

                    eqpPortStatuses.parallelStream()
                            .filter(eqpPortStatus -> ObjectIdentifier.equalsWithValue(
                                    eqpPortStatus.getPortID(),
                                    carrierOutPortInfo.getPortID()))
                            .forEach(eqpPortStatus -> {
                                //step5.1 - check port online mode is auto
                                if (log.isDebugEnabled()) {
                                    log.debug("step5.1 - check port online mode is auto");
                                }
                                Validations.check(CimStringUtils.equals(eqpPortStatus.getOnlineMode(),
                                        BizConstant.SP_EQP_ONLINEMODE_OFFLINE),
                                        retCodeConfig.getEqpOnlineMode(),
                                        ObjectIdentifier.fetchValue(equipmentID),
                                        eqpPortStatus.getOnlineMode());
                                //step5.2 - check port useage type
                                if (log.isDebugEnabled()) {
                                    log.debug("step5.2 - check port useage type");
                                }
                                String portUsage = eqpPortStatus.getPortUsage();
                                Validations.check(!CimStringUtils.equalsIn(portUsage,
                                        CIMStateConst.CIM_PORT_RESOURCE_OUTPUT,
                                        CIMStateConst.CIM_PORT_RESOURCE_INPUTOUTPUT),
                                        retCodeConfig.getInvalidPortUsage(),
                                        ObjectIdentifier.fetchValue(eqpPortStatus.getPortID()));
                                //step5.3 - check loadCassetteID is empty
                                if (log.isDebugEnabled()) {
                                    log.debug("step5.3 - check loadCasseeteID is empty");
                                }
                                Validations.check(ObjectIdentifier.isNotEmptyWithValue(
                                        eqpPortStatus.getLoadedCassetteID()),
                                        retCodeConfig.getPortHasLoadedCassette());
                                //step5.4 - check dispatchUnloadCassetteID is empty when access mode is "AUTO"
                                if (log.isDebugEnabled()) {
                                    log.debug("step5.4 - check dispatchUnloadCassetteID  when access mode is 'AUTO'");
                                }
                                if (CimStringUtils.equals(eqpPortStatus.getAccessMode(),
                                        BizConstant.SP_EQP_ACCESSMODE_AUTO)) {
                                    Validations.check(ObjectIdentifier.isNotEmptyWithValue(
                                            eqpPortStatus.getDispatchLoadCassetteID()
                                    ), retCodeConfig.getLotCassetteOnPort());
                                }
                            });

                });

    }

    @Override
    public List<CarrierOutPortResults> equipmentCarierOutPortInfoGet(Infos.ObjCommon objCommon,
                                                                          ObjectIdentifier equipmentID,
                                                                          List<ObjectIdentifier> carrierList) {
        List<CarrierOutPortResults> result = new ArrayList<>();
        //step1 - equipmentPortInfoForInternalBufferGetDR
        if (log.isDebugEnabled()) {
            log.debug("step1 - equipmentPortInfoForInternalBufferGetDR");
        }
        Infos.EqpPortInfo eqpPortInfo = this.equipmentPortInfoForInternalBufferGetDR(objCommon, equipmentID);

        //step2 - equipmentInternalBufferInfoGet
        if (log.isDebugEnabled()) {
            log.debug("step2 - equipmentInternalBufferInfoGet");
        }
        List<Infos.EqpInternalBufferInfo> bufferInfos = this.equipmentInternalBufferInfoGet(objCommon, equipmentID);

        //step3 - forEach all eapPortInfo check condition and get appropriate portList
        if (log.isDebugEnabled()) {
            log.debug("step3 - forEach all eapPortInfo check condition and get appropriate portList");
        }
        List<ObjectIdentifier> fetchPortList = Optional.ofNullable(eqpPortInfo.getEqpPortStatuses())
                .map(eqpPortStatuses -> eqpPortStatuses.stream()
                        .filter(eqpPortStatus -> {
                            //filter portID in buffer exist moveInReserve carrier
                            if (log.isDebugEnabled()) {
                                log.debug("step3.1 - filter portID in buffer exist moveInReserve carrier");
                            }
                            AtomicBoolean existReserve = new AtomicBoolean(false);
                            Optional.ofNullable(bufferInfos).ifPresent(list -> list.forEach(data -> {
                                Optional.ofNullable(data.getShelfInBufferList()).ifPresent(bufferList -> {
                                            boolean matchFlag = bufferList.parallelStream().
                                                    anyMatch(bufferData ->
                                                            ObjectIdentifier.equalsWithValue(eqpPortStatus.getPortID(),
                                                                    bufferData.getReservedLoadPortID()) &&
                                                                    ObjectIdentifier.isNotEmptyWithValue(
                                                                            bufferData.getReservedCarrierID()));
                                            if (matchFlag) {
                                                existReserve.compareAndSet(false, true);
                                                return;
                                            }
                                        }
                                );
                            }));
                            return !existReserve.get();
                        })
                        .filter(eqpPortStatus -> {
                            //filter port online mode is auto
                            if (log.isDebugEnabled()) {
                                log.debug("step3.2 - filter port online mode is auto");
                            }
                            return !CimStringUtils.equals(eqpPortStatus.getOnlineMode(),
                                    BizConstant.SP_EQP_ONLINEMODE_OFFLINE);
                        })
                        .filter(eqpPortStatus -> {
                            //filter port useage is INPUT_OUTPUT or OUTPUT
                            if (log.isDebugEnabled()) {
                                log.debug("step3.3 - filter port useage is INPUT_OUTPUT or OUTPUT");
                            }
                            return CimStringUtils.equalsIn(eqpPortStatus.getPortUsage(),
                                    CIMStateConst.CIM_PORT_RESOURCE_OUTPUT,
                                    CIMStateConst.CIM_PORT_RESOURCE_INPUTOUTPUT);
                        })
                        .filter(eqpPortStatus -> {
                            //filter port loadCassetteID is empty
                            if (log.isDebugEnabled()) {
                                log.debug("step3.4 - filter port loadCassetteID is empty");
                            }
                            return ObjectIdentifier.isEmptyWithValue(eqpPortStatus.getLoadedCassetteID());
                        })
                        .filter(eqpPortStatus -> {
                            //filter port dispatchUnloadCassetteID is empty when accessMode is 'AUTO'
                            if (log.isDebugEnabled()) {
                                log.debug("step3.5 - filter port dispatchUnloadCassetteID is empty " +
                                        "when accessMode is 'AUTO'");
                            }
                            if (CimStringUtils.equals(BizConstant.SP_EQP_ACCESSMODE_AUTO,
                                    eqpPortStatus.getAccessMode())) {
                                return ObjectIdentifier.isEmptyWithValue(eqpPortStatus.getDispatchUnloadCassetteID());
                            }
                            return true;
                        })
                        .sorted((a, b) -> {
                            //collect all selectPortList order by dispatchStateTime
                            if (log.isDebugEnabled()) {
                                log.debug("step3.6 - collect all selectPortList order by dispatchStateTime");
                            }
                            return CimDateUtils.convertTo(a.getDispatchStateTimeStamp())
                                    .compareTo(CimDateUtils.convertTo(b.getDispatchStateTimeStamp()));
                        })
                        .map(eqpPortStatus -> eqpPortStatus.getPortID())
                        .collect(Collectors.toList())
                ).orElseGet(Collections::emptyList);

        if (log.isDebugEnabled()) {
            log.debug("step4 - check carrier List exist already unloadReserve sucess");
        }
        //check carrier List exist already unloadReserve sucess
        List<CarrierOutPortResults> existCarrerOutList = new ArrayList<>();
        Optional.ofNullable(bufferInfos).ifPresent(bList -> {
            bList.forEach(bData -> {
                Optional.ofNullable(bData.getShelfInBufferList()).ifPresent(
                        sList -> sList.forEach(sData -> {
                            Optional.ofNullable(carrierList).ifPresent(
                                    cList -> cList.forEach(carrierID -> {
                                        if (ObjectIdentifier.equalsWithValue(sData.getLoadedCarrierID(), carrierID)
                                            && ObjectIdentifier.isNotEmptyWithValue(sData.getReservedUnloadPortID())){
                                            CarrierOutPortResults existCarrierOutInfo = new CarrierOutPortResults();
                                            existCarrierOutInfo.setSuccessFlag(true);
                                            existCarrierOutInfo.setCarrierID(carrierID);
                                            existCarrierOutInfo.setPortID(sData.getReservedUnloadPortID());
                                            existCarrerOutList.add(existCarrierOutInfo);
                                        }
                                    }));
                        }));
            });
        });
        //structure the carrierPortInfoList
        int fetchPortSize = CimArrayUtils.getSize(fetchPortList);
        if (log.isDebugEnabled()) {
            log.debug("step5 - fetch portList size {} and Set PortID by the rotation", fetchPortSize);
        }

        if (CimArrayUtils.isNotEmpty(fetchPortList)){
            int setPortIndex = 0;
            for (int i = 0; i < CimArrayUtils.getSize(carrierList); i++) {
                CarrierOutPortResults carrierOutPortInfo = new CarrierOutPortResults();
                carrierOutPortInfo.setCarrierID(carrierList.get(i));
                carrierOutPortInfo.setPortID(fetchPortList.get(setPortIndex));
                carrierOutPortInfo.setSuccessFlag(false);
                setPortIndex++;
                if (setPortIndex > fetchPortList.size() - 1) {
                    setPortIndex = 0;
                }
                result.add(carrierOutPortInfo);
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("step6 - correction result if exist existCarrierOutList");
        }
        //correction result if exist
        Optional.ofNullable(existCarrerOutList).ifPresent(eList -> eList.forEach(eData -> {
            Optional.ofNullable(result).ifPresent(reList -> {
                Iterator<CarrierOutPortResults> iterator = reList.iterator();
                while (iterator.hasNext()) {
                    CarrierOutPortResults resultCarrierInfo = iterator.next();
                    if (ObjectIdentifier.equalsWithValue(eData.getCarrierID(), resultCarrierInfo.getCarrierID())) {
                        resultCarrierInfo.setSuccessFlag(eData.isSuccessFlag());
                        resultCarrierInfo.setPortID(eData.getPortID());
                    }
                }
            });
        }));
        return result;
    }
}
