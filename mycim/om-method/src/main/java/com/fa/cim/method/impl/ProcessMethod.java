package com.fa.cim.method.impl;

import com.fa.cim.annotaion.OmMethod;
import com.fa.cim.common.constant.BizConstant;
import com.fa.cim.common.constant.CIMStateConst;
import com.fa.cim.common.constant.TransactionIDEnum;
import com.fa.cim.common.exception.ServiceException;
import com.fa.cim.common.support.ErrorCode;
import com.fa.cim.common.support.ObjectIdentifier;
import com.fa.cim.common.support.OmCode;
import com.fa.cim.common.utils.*;
import com.fa.cim.config.RetCodeConfig;
import com.fa.cim.config.RetCodeConfigEx;
import com.fa.cim.dto.*;
import com.fa.cim.entity.nonruntime.CimProcessOperationDelQueDO;
import com.fa.cim.entity.nonruntime.fpc.CimFPCDO;
import com.fa.cim.entity.nonruntime.postprocess.CimPostProcessInfoDO;
import com.fa.cim.entity.runtime.bom.CimBomDO;
import com.fa.cim.entity.runtime.bom.CimBomPartsDO;
import com.fa.cim.entity.runtime.code.CimCodeDO;
import com.fa.cim.entity.runtime.durablepfx.CimDurablePFXBackPOListDO;
import com.fa.cim.entity.runtime.durablepfx.CimDurablePFXDurablePOListDO;
import com.fa.cim.entity.runtime.durablepfx.CimDurablePFXReturnListDO;
import com.fa.cim.entity.runtime.durablepo.CimDurableProcessOperationDO;
import com.fa.cim.entity.runtime.eqp.CimEquipmentDO;
import com.fa.cim.entity.runtime.logicalrecipe.CimLogicalRecipeDO;
import com.fa.cim.entity.runtime.logicalrecipe.CimLogicalRecipeDSetDO;
import com.fa.cim.entity.runtime.logicalrecipe.CimLogicalSpecificRecipeSetDO;
import com.fa.cim.entity.runtime.lot.CimLotDO;
import com.fa.cim.entity.runtime.lot.CimLotHoldRecordDO;
import com.fa.cim.entity.runtime.lotopesche.CimLotOperationScheduleDO;
import com.fa.cim.entity.runtime.mrecipe.CimMachineRecipeDO;
import com.fa.cim.entity.runtime.mrecipe.CimMachineRecipeEqpDO;
import com.fa.cim.entity.runtime.person.CimPersonDO;
import com.fa.cim.entity.runtime.pfx.CimProcessFlowContextBackPODO;
import com.fa.cim.entity.runtime.pfx.CimProcessFlowContextPODO;
import com.fa.cim.entity.runtime.pfx.CimProcessFlowContextReturnDO;
import com.fa.cim.entity.runtime.po.*;
import com.fa.cim.entity.runtime.pos.CimPOSSubProcessFlowDO;
import com.fa.cim.entity.runtime.pos.CimProcessOperationSpecificationDO;
import com.fa.cim.entity.runtime.processdefinition.*;
import com.fa.cim.entity.runtime.processflow.CimPFDefinitionListDO;
import com.fa.cim.entity.runtime.processflow.CimPFPosListDO;
import com.fa.cim.entity.runtime.processflow.CimProcessFlowDO;
import com.fa.cim.entity.runtime.productgroup.CimProductGroupDO;
import com.fa.cim.entity.runtime.productspec.CimProductSpecificationDO;
import com.fa.cim.entity.runtime.stage.CimStageDO;
import com.fa.cim.entity.runtime.technology.CimTechnologyDO;
import com.fa.cim.jpa.CimJpaRepository;
import com.fa.cim.jpa.SearchCondition;
import com.fa.cim.lot.LotUsageRecycleCountParams;
import com.fa.cim.method.*;
import com.fa.cim.newcore.bo.code.*;
import com.fa.cim.newcore.bo.dc.CimDataCollectionDefinition;
import com.fa.cim.newcore.bo.dc.CimDataCollectionSpecification;
import com.fa.cim.newcore.bo.dispatch.CimFlowBatch;
import com.fa.cim.newcore.bo.durable.*;
import com.fa.cim.newcore.bo.globalfunc.CimFrameWorkGlobals;
import com.fa.cim.newcore.bo.machine.CimMachine;
import com.fa.cim.newcore.bo.machine.CimPortResource;
import com.fa.cim.newcore.bo.machine.CimProcessResource;
import com.fa.cim.newcore.bo.pd.*;
import com.fa.cim.newcore.bo.person.CimPerson;
import com.fa.cim.newcore.bo.prodspec.CimProductGroup;
import com.fa.cim.newcore.bo.prodspec.CimProductSpecification;
import com.fa.cim.newcore.bo.prodspec.CimTechnology;
import com.fa.cim.newcore.bo.product.CimControlJob;
import com.fa.cim.newcore.bo.product.CimLot;
import com.fa.cim.newcore.bo.product.CimWafer;
import com.fa.cim.newcore.bo.recipe.CimLogicalRecipe;
import com.fa.cim.newcore.bo.recipe.CimMachineRecipe;
import com.fa.cim.newcore.dto.code.CodeDTO;
import com.fa.cim.newcore.dto.dc.EDCDTO;
import com.fa.cim.newcore.dto.machine.MachineDTO;
import com.fa.cim.newcore.dto.pd.ProcessDTO;
import com.fa.cim.newcore.dto.product.ProductDTO;
import com.fa.cim.newcore.dto.recipe.RecipeDTO;
import com.fa.cim.newcore.factory.BaseCoreFactory;
import com.fa.cim.newcore.impl.bo.env.StandardProperties;
import com.fa.cim.newcore.standard.mchnmngm.Machine;
import com.fa.cim.newcore.standard.mchnmngm.PortResource;
import com.fa.cim.newcore.standard.mchnmngm.ProcessResource;
import com.fa.cim.newcore.standard.mtrlmngm.Material;
import com.fa.cim.newcore.standard.prcssdfn.ProcessDefinition;
import com.fa.cim.newcore.standard.prcssdfn.ProcessFlow;
import com.fa.cim.newcore.standard.prcssdfn.ProcessOperationSpecification;
import com.fa.cim.newcore.standard.prsnmngm.Person;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.lang.Nullable;

import java.sql.Timestamp;
import java.util.*;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import java.util.stream.Collectors;

import static java.lang.Boolean.FALSE;
import static java.lang.Boolean.TRUE;


/**
 * description:
 * <p>
 * change history:
 * date             defect#             person             comments
 * ---------------------------------------------------------------------------------------------------------------------
 * 2018/6/21        ********             Bear               create file
 *
 * @author Bear
 * @since 2018/6/21 10:31
 * Copyright: 2018, FA Software (Shanghai) Co., Ltd. All Rights Reserved.
 */
@OmMethod
@Slf4j
public class ProcessMethod implements IProcessMethod {

    @Autowired
    public RetCodeConfig retCodeConfig;

    @Autowired
    public RetCodeConfigEx retCodeConfigEx;

    @Autowired
    private IEquipmentMethod equipmentMethod;

    @Autowired
    private ICassetteMethod cassetteMethod;

    @Autowired
    private IFixtureMethod fixtureMethod;

    @Autowired
    private ILotMethod lotMethod;

    @Autowired
    private ILogicalRecipeMethod logicalRecipeMethod;

    @Autowired
    private IProcessMethod processMethod;

    @Autowired
    private IControlJobMethod controlJobMethod;

    @Autowired
    private CimJpaRepository cimJpaRepository;

    @Autowired
    private IReticleMethod reticleMethod;

    @Autowired
    private BaseCoreFactory baseCoreFactory;

    @Autowired
    private IDurableMethod durableMethod;

    @Autowired
    private IContaminationMethod contaminationMethod;

    @Autowired
    private IWaferMethod waferMethod;

    @Autowired
    @Qualifier("DispatchingManagerCore")
    private com.fa.cim.newcore.bo.dispatch.DispatchingManager dispatchingManager;

    @Autowired
    private CimFrameWorkGlobals cimFrameWorkGlobals;

    @Autowired
    @Qualifier("CodeManagerCore")
    private CodeManager codeManager;

    @Autowired
    @Qualifier("ProcessDefinitionManagerCore")
    private ProcessDefinitionManager processDefinitionManager;

    @Override
    public Outputs.ObjProcessFlowBatchDefinitionGetDROut processFlowBatchDefinitionGetDR(Infos.ObjCommon objCommon, String modulePOS) {
        Infos.FlowBatchControl flowBatchControl = new Infos.FlowBatchControl();
        Infos.FlowBatchSection flowBatchSection = new Infos.FlowBatchSection();
        CimProcessOperationSpecificationDO pos = cimJpaRepository.queryOne("SELECT FLOWB_SECTION,\n" +
                "                            MAX_BATCH_SIZE,\n" +
                "                            MIN_BATCH_SIZE,\n" +
                "                            FLOWB_ENTRY_FLAG,\n" +
                "                            FLOWB_TARGET_FLAG,\n" +
//                "                            BATCH_OFFSET_TIME,\n" +
                "                            FLOWB_MIN_WAFER_COUNT,\n" +
                "                            FLOWB_STEP_COUNT,\n" +
                "                            STEP_ID,\n" +
                "                            STEP_RKEY FROM OMPRSS WHERE ID = ?1", CimProcessOperationSpecificationDO.class, modulePOS);
        Validations.check(pos == null,retCodeConfig.getNotFoundPos());
        flowBatchControl.setName(pos.getBatchName());
        flowBatchControl.setOperationCount(pos.getBatchOperationCount());
        flowBatchControl.setMaxLotSize(pos.getMaxBatchSize());
        flowBatchControl.setMinLotSize(pos.getMinBatchSize());
        flowBatchControl.setMinWaferSize(pos.getBatchMinWaferCount());
//        flowBatchControl.setOffsetTime(pos.getBatchOffsetTime());
        flowBatchSection.setEntryOperationFlag(pos.getBatchEntryFlag());
        flowBatchSection.setTargetOperationFlag(pos.getBatchTargetFlag());

        String operationID = pos.getProcessDefinitionID();
        String operationNumber = pos.getOperationNumber();
        String str_version_id = BaseStaticMethod.extractVersionFromID(operationID);
        flowBatchSection.setOperationID(new ObjectIdentifier(pos.getProcessDefinitionID(), pos.getProcessDefinitionObj()));
        flowBatchSection.setOperationNumber(pos.getOperationNumber());
        if (CimStringUtils.equals(BizConstant.SP_ACTIVE_VERSION, str_version_id)) {
            CimProcessDefinitionDO processDefinition = cimJpaRepository.queryOne("select ACTIVE_VER_ID, ACTIVE_VER_RKEY from OMPRP where PRP_ID=? and PRP_LEVEL=?", CimProcessDefinitionDO.class, operationID, BizConstant.SP_PD_FLOWLEVEL_OPERATION);
            flowBatchSection.setOperationID(new ObjectIdentifier(processDefinition.getProcessDefinitionID(), processDefinition.getId()));
        }
        flowBatchSection.setOperationNumber(operationNumber);

        Outputs.ObjProcessFlowBatchDefinitionGetDROut objProcessFlowBatchDefinitionGetDROut = new Outputs.ObjProcessFlowBatchDefinitionGetDROut();
        objProcessFlowBatchDefinitionGetDROut.setFlowBatchControl(flowBatchControl);
        objProcessFlowBatchDefinitionGetDROut.setFlowBatchSection(flowBatchSection);
        return objProcessFlowBatchDefinitionGetDROut;
    }

    /**
     * processOperation_dcActionInfo_GetDR
     *
     * @param objCommon
     * @param poObj
     * @param lotID
     * @return
     * @author ho
     */
    @Override
    public Results.EDCSpecCheckActionResultInqResult processOperationDCActionInfoGetDR(Infos.ObjCommon objCommon, String poObj, ObjectIdentifier lotID) {
        Results.EDCSpecCheckActionResultInqResult edcSpecCheckActionResultInqResult = new Results.EDCSpecCheckActionResultInqResult();
        List<Infos.DCActionResult> strDCActionResults =  new ArrayList<>();
        edcSpecCheckActionResultInqResult.setStrDCActionResult(strDCActionResults);
        //---------------------------------------------------------------------------------
        //   Get D_THESYSTEMKEY of Process Operation
        //---------------------------------------------------------------------------------
        String sql = "select ID,\n" +
                "                   MAIN_PROCESS_ID, " +
                "                   MAIN_PROCESS_RKEY,\n" +
                "                   STEP_ID, \n" +
                "                   STEP_RKEY, \n" +
                "                   OPE_NO,\n" +
                "                   PASS_COUNT,\n" +
                "                   ALLOC_EQP_ID,          ALLOC_EQP_RKEY,\n" +
                "                   ALLOC_MRCP_ID,       ALLOC_MRCP_RKEY,\n" +
                "                   FAB_ID\n" +
                "            from   OMPROPE\n" +
                "            where  ID = ?";
        CimProcessOperationDO cimProcessOperationDO = cimJpaRepository.queryOne(sql, CimProcessOperationDO.class, poObj);
        Validations.check(cimProcessOperationDO == null, new OmCode(retCodeConfig.getNotFoundProcessOperation(), poObj));
        Infos.DCActionResult strDCActionResultBase = new Infos.DCActionResult();
        strDCActionResultBase.setMeasurementLotID(lotID);
        strDCActionResultBase.setMeasureRouteID(new ObjectIdentifier(cimProcessOperationDO.getMainProcessDefinitionID(), cimProcessOperationDO.getMainProcessDefinitionObj()));
        strDCActionResultBase.setMeasureOperationID(new ObjectIdentifier(cimProcessOperationDO.getProcessDefinitionID(), cimProcessOperationDO.getProcessDefinitionObj()));
        strDCActionResultBase.setMeasureOperationNumber(cimProcessOperationDO.getOperationNumber());
        strDCActionResultBase.setMeasurePassCount(cimProcessOperationDO.getPassCount());
        strDCActionResultBase.setMeasureEquipmentID(new ObjectIdentifier(cimProcessOperationDO.getAssignEquipmentID(), cimProcessOperationDO.getAssignEquipmentObj()));
        strDCActionResultBase.setMeasureRecipeID(new ObjectIdentifier(cimProcessOperationDO.getAssignRecipeID(), cimProcessOperationDO.getAssignRecipeObj()));
        strDCActionResultBase.setMeasureFabID(cimProcessOperationDO.getFabID());
        //---------------------------------------------------------------------------------
        //   Get DCActionResults from FRPO_ACTIONS
        //---------------------------------------------------------------------------------
        List<CimProcessOperationActionDO> processOperationActionList = cimJpaRepository.query("SELECT IDX_NO,\n" +
                "                   LOT_ID,      LOT_RKEY,\n" +
                "                   MON_LOT_FLAG,\n" +
                "                   EDC_PLAN_ID,    EDC_PLAN_RKEY,\n" +
                "                   EDC_SPEC_ID,   EDC_SPEC_RKEY,\n" +
                "                   CHECK_TYPE,\n" +
                "                   REASON_CODE,\n" +
                "                   ACTION_CODE,\n" +
                "                   CORR_PROPE_RKEY,\n" +
                "                   BANK_ID,\n" +
                "                   REWORK_FLOW_ID\n" +
                "            FROM   OMPROPE_ACT\n" +
                "            WHERE  REFKEY = ?\n" +
                "            ORDER BY IDX_NO",CimProcessOperationActionDO.class, cimProcessOperationDO.getId());
        int dcActCount = 0;
        if (!CimArrayUtils.isEmpty(processOperationActionList)){
            for (CimProcessOperationActionDO cimProcessOperationActionDO : processOperationActionList){
                Infos.DCActionResult strDCActionResult = new Infos.DCActionResult();
                BeanUtils.copyProperties(strDCActionResultBase, strDCActionResult);
                strDCActionResults.add(strDCActionResult);
                //-----------------------------------------------------------------------------
                //   Set DCActionResult Info into result data
                //-----------------------------------------------------------------------------
                strDCActionResult.setLotID(new ObjectIdentifier(cimProcessOperationActionDO.getLotID(), cimProcessOperationActionDO.getLotObj()));
                strDCActionResult.setMonitorLotFlag(cimProcessOperationActionDO.getMonitorLotFlag());
                strDCActionResult.setDcDefID(new ObjectIdentifier(cimProcessOperationActionDO.getDcDefID(), cimProcessOperationActionDO.getDcDefObj()));
                strDCActionResult.setDcSpecID(new ObjectIdentifier(cimProcessOperationActionDO.getDcSpecID(), cimProcessOperationActionDO.getDcSpecObj()));
                strDCActionResult.setCheckType(cimProcessOperationActionDO.getCheckType());
                strDCActionResult.setReasonCode(cimProcessOperationActionDO.getReasonCode());
                strDCActionResult.setActionCode(cimProcessOperationActionDO.getActionCode());
                strDCActionResult.setBankID(cimProcessOperationActionDO.getBankID());
                strDCActionResult.setReworkRouteID(cimProcessOperationActionDO.getReworkRouteID());
                if (!CimStringUtils.isEmpty(cimProcessOperationActionDO.getCorresPoObj())){
                    //---------------------------------------------------------------------------------
                    //   Get Process Operation Info of Corresponding Operation
                    //---------------------------------------------------------------------------------
                    sql = "select MAIN_PROCESS_ID,            MAIN_PROCESS_RKEY,\n" +
                            "                           STEP_ID,                STEP_RKEY,\n" +
                            "                           OPE_NO,\n" +
                            "                           PASS_COUNT,\n" +
                            "                           ALLOC_EQP_ID,          ALLOC_EQP_RKEY,\n" +
                            "                           ALLOC_MRCP_ID,       ALLOC_MRCP_RKEY,\n" +
                            "                           FAB_ID\n" +
                            "                    from   OMPROPE\n" +
                            "                    where  ID = ?";
                    CimProcessOperationDO cimProcessOperationDO2 = cimJpaRepository.queryOne(sql, CimProcessOperationDO.class, cimProcessOperationActionDO.getCorresPoObj());
                    Validations.check(cimProcessOperationDO2 == null, new OmCode(retCodeConfig.getNotFoundProcessOperation()));
                    strDCActionResult.setProcessRouteID(new ObjectIdentifier(cimProcessOperationDO2.getMainProcessDefinitionID(), cimProcessOperationDO2.getMainProcessDefinitionObj()));
                    strDCActionResult.setProcessOperationID(new ObjectIdentifier(cimProcessOperationDO2.getProcessDefinitionID(), cimProcessOperationDO2.getProcessDefinitionObj()));
                    strDCActionResult.setProcessOperationNumber(cimProcessOperationDO2.getOperationNumber());
                    strDCActionResult.setProcessPassCount(cimProcessOperationDO2.getPassCount());
                    strDCActionResult.setProcessEquipmentID(new ObjectIdentifier(cimProcessOperationDO2.getAssignEquipmentID(), cimProcessOperationDO2.getAssignEquipmentObj()));
                    strDCActionResult.setProcessRecipeID(new ObjectIdentifier(cimProcessOperationDO2.getAssignRecipeID(), cimProcessOperationDO2.getAssignRecipeObj()));
                    strDCActionResult.setProcessFabID(cimProcessOperationDO2.getFabID());
                }
                //-----------------------------------------------------------------------------
                //   Set DCActionResultEntity into DCActionResult
                //-----------------------------------------------------------------------------
                sql = "select CLASS_NAME,\n" +
                        "                       CLASS_ID,       CLASS_RKEY,\n" +
                        "                       CLASS_ATTRIB\n" +
                        "                from   OMPROPE_ACT_ENTITY\n" +
                        "                where  REFKEY = ?\n" +
                        "                and    LINK_MARKER = ?\n" +
                        "                order by IDX_NO";
                List<CimPOActionsEntityDO> cimPOActionsEntityDOList = cimJpaRepository.query(sql, CimPOActionsEntityDO.class, cimProcessOperationDO.getId(), dcActCount);
                List<Infos.EntityIdentifier> entities = new ArrayList<>();
                strDCActionResult.setEntities(entities);
                if (!CimArrayUtils.isEmpty(cimPOActionsEntityDOList)){
                    for (CimPOActionsEntityDO cimPOActionsEntityDO : cimPOActionsEntityDOList){
                        //-------------------------------------------------------------------------
                        //   Set DCItem Info
                        //-------------------------------------------------------------------------
                        Infos.EntityIdentifier entityIdentifier = new Infos.EntityIdentifier();
                        entities.add(entityIdentifier);
                        entityIdentifier.setClassName(cimPOActionsEntityDO.getClassName());
                        entityIdentifier.setObjectID(new ObjectIdentifier(cimPOActionsEntityDO.getEntityID(), cimPOActionsEntityDO.getEntityObj()));
                        entityIdentifier.setAttribution(cimPOActionsEntityDO.getEntityAttribute());
                    }
                }
                dcActCount++;
            }
        }
        return edcSpecCheckActionResultInqResult;
    }

    /**
     * description: processOperation_dataCollectionInfo_GetDR
     * <p><br/></p>
     * change history:
     * date             defect             person             comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param objCommon
     * @param specFlag
     * @param poObj
     * @return
     * @author Ho
     * @date 2018/9/26 14:44:04
     */
    @Override
    public List<Infos.DCDef> processOperationDataCollectionInfoGetDR(Infos.ObjCommon objCommon, Boolean specFlag, String poObj) {
        List<Infos.DCDef> dcDefList = new ArrayList<>();

        String p = StandardProperties.OM_EDC_PLAN_EXTLEN_IN_EDC_HIST_INQ.getValue();
        long dcDefSeqLen = 20, dcItemSeqLen = 20;
        try {
            dcDefSeqLen = Long.parseLong(p);
            p = StandardProperties.OM_EDC_ITEM_EXTLEN_IN_EDC_HIST_INQ.getValue();
            dcItemSeqLen = Long.parseLong(p);
        } catch (NumberFormatException e) {
        }

        Object[] processOperation = cimJpaRepository.queryOne("select ID,ALLOC_EDC_FLAG\n" +
                "            from   OMPROPE\n" +
                "            where  ID = ?",poObj);
        Validations.check(processOperation == null,retCodeConfig.getNotFoundPoForLot());

        String hFRPOd_theSystemKey = poObj;

        List<CimPODataCollectionDO> processOperationDataCollectionList = cimJpaRepository.query("select IDX_NO,\n" +
                "                   EDC_PLAN_ID,     EDC_PLAN_RKEY,\n" +
                "                   DESCRIPTION,\n" +
                "                   EDC_TYPE,\n" +
                "                   CALC_FLG,\n" +
                "                   SPCHK_FLG,\n" +
                "                   EDC_SPEC_ID,    EDC_SPEC_RKEY,\n" +
                "                   PREV_EDC_PLAN_ID, PREV_EDC_PLAN_RKEY,\n" +
                "                   PREV_STEP_ID,   PREV_STEP_RKEY,\n" +
                "                   PREV_OPE_NO,\n" +
                "                   EDC_SPEC_DESC\n" +
                "            from   OMPROPE_EDC\n" +
                "            where  REFKEY = ?\n" +
                "            order by IDX_NO",CimPODataCollectionDO.class,hFRPOd_theSystemKey);

        int dcDefCount = 0;

        for (CimPODataCollectionDO processOperationDataCollection : processOperationDataCollectionList) {
            Infos.DCDef dcDef = new Infos.DCDef();
            dcDefList.add(dcDef);
            dcDef.setDataCollectionDefinitionID(ObjectIdentifier.build(processOperationDataCollection.getDataCollectionDefID(), null));
            dcDef.setDescription(processOperationDataCollection.getDescription());
            dcDef.setDataCollectionType(processOperationDataCollection.getDataCollectionType());
            dcDef.setCalculationRequiredFlag(processOperationDataCollection.getCalcFlag());
            dcDef.setSpecCheckRequiredFlag(processOperationDataCollection.getSpecCheckFlag());
            dcDef.setDataCollectionSpecificationID(ObjectIdentifier.build(processOperationDataCollection.getDataCollectionSpecId(), null));
            dcDef.setDcSpecDescription(processOperationDataCollection.getDataCollectionSpecDescription());
            dcDef.setPreviousDataCollectionDefinitionID(ObjectIdentifier.build(processOperationDataCollection.getPreviousDataCollectionDefID(), null));
            dcDef.setPreviousOperationNumber(processOperationDataCollection.getPreviousOperationNumber());

            String hFRPOd_theTableMarker = BizConstant.SP_PO_DC_ITEMS_TABLEMARKER + dcDefCount,
                    hFRPOd_theTableMarker2 = dcDefCount++ + "";
            boolean getSpecFromDefFlag = false;

            if (specFlag && !CimStringUtils.isEmpty(processOperationDataCollection.getDataCollectionDefID())) {
                long hCount = 0;
                hCount = cimJpaRepository.count("select COUNT(1)\n" +
                                "                    from   OMPROPE_EDC_SPECS\n" +
                                "                    where  REFKEY = ?\n" +
                                "                    and    LINK_MARKER in (?, ?)",
                        hFRPOd_theSystemKey,
                        hFRPOd_theTableMarker,
                        hFRPOd_theTableMarker2);
                if ( hCount > 0 ) {
                    log.info( "This PO has DC Spec's detailed information." );
                    //Nothing to do.
                } else {
                    log.info( "This PO does not have DC Spec's detailed information." );
                    getSpecFromDefFlag = TRUE;
                }
            }

            List<CimPODataCollectionItemsDO> processOperationDataCollectionItemsList = cimJpaRepository.query("SELECT IDX_NO,\n" +
                    "                       EDC_ITEM_NAME,\n" +
                    "                       EDC_MODE,\n" +
                    "                       EDC_UOM,\n" +
                    "                       DATA_TYPE,\n" +
                    "                       ITEM_TYPE,\n" +
                    "                       MEAS_TYPE,\n" +
                    "                       WAFER_ID,\n" +
                    "                       WAFER_RKEY,\n" +
                    "                       WAFER_POSITION,\n" +
                    "                       SITE_POSITION,\n" +
                    "                       STORE_FLAG,\n" +
                    "                       FUNC_TYPE,\n" +
                    "                       FUNC_EXPR,\n" +
                    "                       DATA_VAL,\n" +
                    "                       TARGET_VAL,\n" +
                    "                       SPEC_CHECK_RESULT,\n" +
                    "                       ACTION_CODE\n" +
                    "                from   OMPROPE_EDC_ITEMS\n" +
                    "                where  REFKEY = ?\n" +
                    "                and    LINK_MARKER in (?, ?)\n" +
                    "                order by IDX_NO",CimPODataCollectionItemsDO.class,
                    hFRPOd_theSystemKey,
                    hFRPOd_theTableMarker,
                    hFRPOd_theTableMarker2);

            List<Infos.DCItem> dcItemList = new ArrayList<>();
            dcDef.setDcItemList(dcItemList);
            for (CimPODataCollectionItemsDO processOperationDataCollectionItems : processOperationDataCollectionItemsList) {
                Infos.DCItem dcItem = new Infos.DCItem();
                dcItemList.add(dcItem);
                dcItem.setDataCollectionItemName(processOperationDataCollectionItems.getDataCollectionItemName());
                dcItem.setDataCollectionMode(processOperationDataCollectionItems.getDataCollectionMode());
                dcItem.setDataCollectionUnit(processOperationDataCollectionItems.getDataCollectionUnit());
                dcItem.setDataType(processOperationDataCollectionItems.getDataType());
                dcItem.setItemType(processOperationDataCollectionItems.getItemType());
                dcItem.setMeasurementType(processOperationDataCollectionItems.getMeasType());
                dcItem.setWaferID(ObjectIdentifier.build(processOperationDataCollectionItems.getWaferID(), null));
                dcItem.setWaferPosition(processOperationDataCollectionItems.getWaferPosition());
                dcItem.setSitePosition(processOperationDataCollectionItems.getSitePosition());
                dcItem.setHistoryRequiredFlag(processOperationDataCollectionItems.getHistoryFlag());
                dcItem.setCalculationType(processOperationDataCollectionItems.getCalcType());
                dcItem.setCalculationExpression(processOperationDataCollectionItems.getCalcExpr());
                dcItem.setDataValue(processOperationDataCollectionItems.getDataVal());
                dcItem.setTargetValue(processOperationDataCollectionItems.getTgtVal());
                dcItem.setSpecCheckResult(processOperationDataCollectionItems.getSpecCheckResult());

                String actionCode = processOperationDataCollectionItems.getActionCode();
                List<String> actionCodes = new ArrayList<>();
                if (!CimStringUtils.isEmpty(actionCode)) {
                    actionCodes = Arrays.asList(actionCode.split(","));
                }
                dcItem.setActionCode(actionCodes);
                if (!specFlag || CimStringUtils.isEmpty(processOperationDataCollection.getDataCollectionDefID())) {
                    continue;
                }

                if (!getSpecFromDefFlag) {
                    CimPODataCollectionSpecDO processOperationDataCollectionSpecs = cimJpaRepository.queryOne("select EDC_ITEM_NAME,\n" +
                            "                               SCRN_UP_FLAG, SCRN_UP_LIMIT, SCRN_UP_ACT,\n" +
                            "                               SCRN_LO_FLAG, SCRN_LO_LIMIT, SCRN_LO_ACT,\n" +
                            "                               SPEC_UP_FLAG, SPEC_UP_LIMIT, SPEC_UP_ACT,\n" +
                            "                               SPEC_LO_FLAG, SPEC_LO_LIMIT, SPEC_LO_ACT,\n" +
                            "                               CTRL_UP_FLAG, CTRL_UP_LIMIT, CTRL_UP_ACT,\n" +
                            "                               CTRL_LO_FLAG, CTRL_LO_LIMIT, CTRL_LO_ACT,\n" +
                            "                               EDC_ITEM_TARGET,  EDC_ITEM_TAG,       EDC_SPEC_GROUP\n" +
                            "                        from   OMPROPE_EDC_SPECS\n" +
                            "                        where  REFKEY   = ?\n" +
                            "                        and    LINK_MARKER in (?, ?)\n" +
                            "                        and    EDC_ITEM_NAME = ?",CimPODataCollectionSpecDO.class,hFRPOd_theSystemKey,
                            hFRPOd_theTableMarker, hFRPOd_theTableMarker2,
                            processOperationDataCollectionItems.getDataCollectionItemName());
                    if(processOperationDataCollectionSpecs != null){
                        dcItem.setDataItemName(processOperationDataCollectionSpecs.getDataCollectionItemName());
                        dcItem.setScreenLimitUpperRequired(processOperationDataCollectionSpecs.getScreenUpperRequired());
                        dcItem.setScreenLimitUpper(processOperationDataCollectionSpecs.getScreenUpperLimit());
                        dcItem.setActionCodesUscrn(processOperationDataCollectionSpecs.getScreenUpperActions());
                        dcItem.setScreenLimitLowerRequired(processOperationDataCollectionSpecs.getScreenLowerRequired());
                        dcItem.setScreenLimitLower(processOperationDataCollectionSpecs.getScreenLowerLimit());
                        dcItem.setActionCodesLscrn(processOperationDataCollectionSpecs.getScreenLowerActions());
                        dcItem.setSpecLimitUpperRequired(processOperationDataCollectionSpecs.getSpecUpperRequired());
                        dcItem.setSpecLimitUpper(processOperationDataCollectionSpecs.getSpecUpperLimit());
                        dcItem.setActionCodesUsl(processOperationDataCollectionSpecs.getSpecUpperActions());
                        dcItem.setSpecLimitLowerRequired(processOperationDataCollectionSpecs.getSpecLowerRequired());
                        dcItem.setSpecLimitLower(processOperationDataCollectionSpecs.getSpecLowerLimit());
                        dcItem.setActionCodesLsl(processOperationDataCollectionSpecs.getSpecLowerActions());
                        dcItem.setControlLimitUpperRequired(processOperationDataCollectionSpecs.getControlUpperRequired());
                        dcItem.setControlLimitUpper(processOperationDataCollectionSpecs.getControlUpperLimit());
                        dcItem.setActionCodesUcl(processOperationDataCollectionSpecs.getControlUpperActions());
                        dcItem.setControlLimitLowerRequired(processOperationDataCollectionSpecs.getControlLowerRequired());
                        dcItem.setControlLimitLower(processOperationDataCollectionSpecs.getControlLowerLimit());
                        dcItem.setActionCodesLcl(processOperationDataCollectionSpecs.getControlLowerActions());
                        dcItem.setTarget(processOperationDataCollectionSpecs.getDataCollectionItemTarget().toString());
                        dcItem.setTag(processOperationDataCollectionSpecs.getDataCollectionItemTag());
                        dcItem.setDcSpecGroup(processOperationDataCollectionSpecs.getDataCollectionSpecGroup());
                    }
                } else {
                    com.fa.cim.newcore.bo.dc.CimDataCollectionSpecification dataCollectionSpec = baseCoreFactory.getBO(com.fa.cim.newcore.bo.dc.CimDataCollectionSpecification.class,dcDef.getDataCollectionSpecificationID());
                    Validations.check(dataCollectionSpec==null,retCodeConfig.getNotFoundDcspec());
                    EDCDTO.DCItemSpecification dataCollectionSpecItem = dataCollectionSpec.findDCSpec(processOperationDataCollectionItems.getDataCollectionItemName());
                    if (dataCollectionSpecItem==null|| CimStringUtils.isEmpty(dataCollectionSpecItem.getDataItemName())) {
                        continue;
                    } else {
                        dcItem.setDataItemName              ( dataCollectionSpecItem.getDataItemName());
                        dcItem.setScreenLimitUpperRequired  ( dataCollectionSpecItem.getScreenLimitUpperRequired());
                        dcItem.setScreenLimitUpper          ( dataCollectionSpecItem.getScreenLimitUpper());
                        dcItem.setActionCodesUscrn         ( dataCollectionSpecItem.getActionCodesUscrn());
                        dcItem.setScreenLimitLowerRequired  ( dataCollectionSpecItem.getScreenLimitLowerRequired());
                        dcItem.setScreenLimitLower          ( dataCollectionSpecItem.getScreenLimitLower());
                        dcItem.setActionCodesLscrn         ( dataCollectionSpecItem.getActionCodesLscrn());
                        dcItem.setSpecLimitUpperRequired    ( dataCollectionSpecItem.getSpecLimitUpperRequired());
                        dcItem.setSpecLimitUpper            ( dataCollectionSpecItem.getSpecLimitUpper());
                        dcItem.setActionCodesUsl           ( dataCollectionSpecItem.getActionCodesUsl());
                        dcItem.setSpecLimitLowerRequired    ( dataCollectionSpecItem.getSpecLimitLowerRequired());
                        dcItem.setSpecLimitLower            ( dataCollectionSpecItem.getSpecLimitLower());
                        dcItem.setActionCodesLsl           ( dataCollectionSpecItem.getActionCodesLsl());
                        dcItem.setControlLimitUpperRequired ( dataCollectionSpecItem.getControlLimitUpperRequired());
                        dcItem.setControlLimitUpper         ( dataCollectionSpecItem.getControlLimitUpper());
                        dcItem.setActionCodesUcl           ( dataCollectionSpecItem.getActionCodesUcl());
                        dcItem.setControlLimitLowerRequired ( dataCollectionSpecItem.getControlLimitLowerRequired());
                        dcItem.setControlLimitLower         ( dataCollectionSpecItem.getControlLimitLower());
                        dcItem.setActionCodesLcl           ( dataCollectionSpecItem.getActionCodesLcl());
                        dcItem.setTarget                    (CimObjectUtils.toString(dataCollectionSpecItem.getTarget()));
                        dcItem.setTag                       ( dataCollectionSpecItem.getTag());
                        dcItem.setDcSpecGroup               ( dataCollectionSpecItem.getDcSpecGroup());
                    }
                }
            }
        }

        if (CimArrayUtils.isEmpty(dcDefList)) {
            Validations.check(CimBooleanUtils.convert(processOperation[1]),retCodeConfig.getCdataDeleted());
            Validations.check(true,retCodeConfig.getNotFoundCdata());
        }
        return dcDefList;
    }

    @Override
    public Outputs.ObjProcessNextOperationInModuleGetDROut processNextOperationInModuleGetDR(Infos.ObjCommon objCommon, String modulePF, String moduleOpeNo) {
        Outputs.ObjProcessNextOperationInModuleGetDROut out = new Outputs.ObjProcessNextOperationInModuleGetDROut();

        String currentModuleProcessFlowObj = modulePF;
        String currentModuleOperationNumber = moduleOpeNo;
        //【step1】get module process flow information
        log.debug("【step1】get module process flow information");
        String sql = "SELECT PRP_ID,\n" +
                "                        ACTIVE_FLAG\n" +
                "                       FROM   OMPRF\n" +
                "                       WHERE  ID = ?";
        CimProcessFlowDO moduleProcessFlow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class, modulePF);
        Validations.check(null == moduleProcessFlow,new OmCode(retCodeConfig.getNotFoundProcessFlow(), "**"));

        String currentModulePDID = moduleProcessFlow.getMainProcessDefinitionID();
        Boolean moduleProcessFlowState = moduleProcessFlow.getState();

        //【step2】get sequence number of current process from current module process flow
        log.debug("【step2】get sequence number of current process from current module process flow");
        sql = "SELECT IDX_NO\n" +
                "                 FROM   OMPRF_PRSSSEQ\n" +
                "                 WHERE  REFKEY = ?\n" +
                "                 AND    LINK_KEY = ?";
        CimPFPosListDO  posListDO = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, moduleProcessFlow.getId(), moduleOpeNo);
        Validations.check(null == posListDO,new OmCode(retCodeConfig.getNotFoundProcessFlow(), "**"));

        //【step3】check the state of module process flow
        log.debug("【step3】check the state of module process flow");
        Boolean findFlag = false;
        String moduleProcessFlowKey = null;
        Integer moduleProcessFlowPosListSequence = 0;
        Integer currentModuleProcessFlowPosListSequenceNumber = posListDO.getSequenceNumber();
        if (CimBooleanUtils.isTrue(moduleProcessFlowState)) {
            log.debug("current module PF is active..");
            out.setModulePF(currentModuleProcessFlowObj);
            moduleProcessFlowKey = currentModuleProcessFlowObj;
            moduleProcessFlowPosListSequence = (null == moduleProcessFlowPosListSequence) ? 1: currentModuleProcessFlowPosListSequenceNumber + 1;
            findFlag = true;
        } else {
            log.debug("currrent modufle PF is not active.");
            //【step4】get active module PF information
            log.debug("【step4】get active module PF information");
            sql = "SELECT ID,\n" +
                    "                     FROM   OMPRF\n" +
                    "                     WHERE  PRP_ID = ?\n" +
                    "                     AND    PRP_LEVEL  = ?\n" +
                    "                     AND    ACTIVE_FLAG     = ?";
            CimProcessFlowDO processFlowDO = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class, currentModulePDID, BizConstant.SP_PD_FLOWLEVEL_MODULE, true);
            Validations.check(null == processFlowDO,new OmCode(retCodeConfig.getNotFoundProcessFlow(), "**"));
            String activeModuleProcessFlowObj = processFlowDO.getId();

            //【step5】get current module openo on active module PF
            log.debug("【step5】get current module openo on active module PF");
            sql = "SELECT IDX_NO\n" +
                    "                     FROM   OMPRF_PRSSSEQ\n" +
                    "                     WHERE  REFKEY = ?\n" +
                    "                     AND    LINK_KEY = ?";
            CimPFPosListDO cimPFPosListDO = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, activeModuleProcessFlowObj, Integer.parseInt(currentModuleOperationNumber));
            if (null != cimPFPosListDO) {
                //【step6】set the next operation sequence number on active module process flow
                log.debug("【step6】set the next operation sequence number on active module process flow");
                out.setModulePF(activeModuleProcessFlowObj);
                moduleProcessFlowKey = activeModuleProcessFlowObj;
                moduleProcessFlowPosListSequence = (null == cimPFPosListDO.getSequenceNumber()) ? 1: cimPFPosListDO.getSequenceNumber() + 1;
                findFlag = true;
            }

            if (CimBooleanUtils.isFalse(findFlag)) {
                log.debug("findFlag = false, search the next operation by finding the next module operation number on current module process flow");
                //【step7】get next operation number on current module process flow
                log.debug("【step7】get next operation number on current module process flow");
                Integer nextOperationSequenceNumber = currentModuleProcessFlowPosListSequenceNumber + 1;
                sql = "SELECT LINK_KEY, \n" +
                        "                                PRSS_RKEY\n" +
                        "                         FROM   OMPRF_PRSSSEQ\n" +
                        "                         WHERE  REFKEY = ?\n" +
                        "                         AND    IDX_NO = ?";
                CimPFPosListDO nextPosDO = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, currentModuleProcessFlowObj, nextOperationSequenceNumber);
                Validations.check(null == nextPosDO,new OmCode(retCodeConfig.getNotFoundNextOperation(), currentModuleOperationNumber));

                String nextModuleOperationKey = nextPosDO.getDKey();
                String nextModulePosObj = nextPosDO.getProcessOperationSpecificationsObj();

                //【step8】get the corresponding next module operation number on active module process flow
                log.debug("【step8】get the corresponding next module operation number on active module process flow");
                sql = "SELECT IDX_NO\n" +
                        "                             FROM   OMPRF_PRSSSEQ\n" +
                        "                             WHERE  REFKEY = ?\n" +
                        "                             AND    LINK_KEY = ?";
                CimPFPosListDO nextActivePosDo = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, activeModuleProcessFlowObj, nextModuleOperationKey);
                if (null != nextActivePosDo) {
                    out.setModulePF(activeModuleProcessFlowObj);
                    moduleProcessFlowKey = activeModuleProcessFlowObj;
                    findFlag = true;
                } else {
                    log.debug("next module operation number does not exist on active module process flow.");
                    out.setModulePF(currentModuleProcessFlowObj);
                    out.setModuleOpeNo(nextModuleOperationKey);
                    out.setModulePOS(nextModulePosObj);
                }
            }
        }
        //【step9】set next POS from active current module process flow
        log.debug("【step9】set next POS from active current module process flow");
        if (CimBooleanUtils.isTrue(findFlag)) {
            sql = "SELECT LINK_KEY,\n" +
                    "                            PRSS_RKEY\n" +
                    "                     FROM   OMPRF_PRSSSEQ\n" +
                    "                     WHERE  REFKEY = ?\n" +
                    "                     AND    IDX_NO = ?";
            CimPFPosListDO cimPFPosListDO1 = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, moduleProcessFlowKey, moduleProcessFlowPosListSequence);
            Validations.check(null == cimPFPosListDO1,new OmCode(retCodeConfig.getNotFoundNextOperation(), moduleProcessFlowKey));
            out.setModuleOpeNo(cimPFPosListDO1.getDKey());
            out.setModulePOS(cimPFPosListDO1.getProcessOperationSpecificationsObj());
        }

        //【step10】set opeartion ID
        sql = "SELECT STEP_ID,\n" +
                "                        STEP_RKEY\n" +
                "                 FROM   OMPRSS\n" +
                "                 WHERE  ID = ?";
        CimProcessOperationSpecificationDO cimProcessOperationSpecificationDO = cimJpaRepository.queryOne(sql, CimProcessOperationSpecificationDO.class, out.getModulePOS());
        Validations.check(null == cimProcessOperationSpecificationDO,new OmCode(retCodeConfig.getNotFoundPos(), "**", "**"));

        //if operation PDID's version is '##', convert it rto real PDID
        String operationID = cimProcessOperationSpecificationDO.getProcessDefinitionID();
        String versionID = null;
        if (null != operationID) {
            versionID = operationID.substring(operationID.lastIndexOf('.') +1);
        }
        out.setOperationID(new ObjectIdentifier(cimProcessOperationSpecificationDO.getProcessDefinitionID(), cimProcessOperationSpecificationDO.getProcessDefinitionObj()));
        if (CimStringUtils.equals(BizConstant.SP_ACTIVE_VERSION, versionID)) {
            sql = "SELECT ACTIVE_VER_ID, ACTIVE_VER_OBJ  FROM OMPRP WHERE PRP_ID = ? AND PRP_LEVEL = ? ";
            CimProcessDefinitionDO cimProcessDefinitionDO = cimJpaRepository.queryOne(sql, CimProcessDefinitionDO.class, operationID, BizConstant.SP_PD_FLOWLEVEL_OPERATION);
            if (null != cimProcessDefinitionDO) {
                out.setOperationID(new ObjectIdentifier(cimProcessDefinitionDO.getProcessDefinitionID(), cimProcessDefinitionDO.getId()));
            }
        }
        return out;
    }


    /**
     * description:
     * change history:
     * date             defect             person             comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param objCommon -
     * @param lotID     -
     * @author Bear
     * @since 2018/5/24
     */
    @Override
    public void poDelQueuePutDR(Infos.ObjCommon objCommon, ObjectIdentifier lotID) {
        log.info(String.format("the sourceLotID is '%s'", lotID.getValue()));
        com.fa.cim.newcore.bo.product.CimLot cimLot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotID);
        Validations.check(cimLot == null, new OmCode(retCodeConfig.getNotFoundLot(), lotID.getValue()));
        if (!CimStringUtils.isEmpty(cimLot.getProcessOperation().getPrimaryKey())){
            //---------------------------------------------
            //  Insert Event Queue Record
            //---------------------------------------------
            CimProcessOperationDelQueDO processOperationDelQueDO = new CimProcessOperationDelQueDO();
            processOperationDelQueDO.setEventTime(CimDateUtils.getCurrentTimeStamp());
            processOperationDelQueDO.setLotID(lotID.getValue());
            processOperationDelQueDO.setSubLotType(cimLot.getSubLotType());
            processOperationDelQueDO.setUpdateTime(CimDateUtils.getCurrentTimeStamp());
            cimJpaRepository.save(processOperationDelQueDO);
        }
    }

    @Override
    public Outputs.ObjProcessLocateOut processLocate(Infos.ObjCommon objCommon, ObjectIdentifier lotID, Infos.ProcessRef processRef, Integer sequenceNumber) {
        log.info("processLocate(Infos.ObjCommon objCommon, ObjectIdentifier lotID, Infos.ProcessRef processRef, Integer sequenceNumber)");
        log.info("objCommon = {}, lotID = {}, processRef = {}, sequenceNumber = {}", objCommon, lotID, processRef, sequenceNumber);
        Outputs.ObjProcessLocateOut objProcessLocateOut = new Outputs.ObjProcessLocateOut();
        //--------------------------------------------------------------------------------------------------
        // (1) Preparation  & Set out parameter
        //--------------------------------------------------------------------------------------------------
        log.info("(1) Preparation  & Set out parameter");
        com.fa.cim.newcore.bo.product.CimLot aLot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotID);
        Validations.check(null == aLot, new OmCode(retCodeConfig.getNotFoundLot(),lotID.getValue()));
        com.fa.cim.newcore.bo.pd.CimProcessFlow aMainPF = baseCoreFactory.getBO(com.fa.cim.newcore.bo.pd.CimProcessFlow.class, processRef.getMainProcessFlow());
        Validations.check(null == aMainPF, new OmCode(retCodeConfig.getNotFoundProcessFlow(), ""));
        com.fa.cim.newcore.bo.pd.CimProcessFlow aModulePF = baseCoreFactory.getBO(com.fa.cim.newcore.bo.pd.CimProcessFlow.class, processRef.getModuleProcessFlow());
        Validations.check(null == aModulePF, new OmCode(retCodeConfig.getNotFoundProcessFlow(), ""));
        com.fa.cim.newcore.bo.pd.CimProcessOperationSpecification aModulePOS = baseCoreFactory.getBO(com.fa.cim.newcore.bo.pd.CimProcessOperationSpecification.class, processRef.getModulePOS());
        Validations.check(null == aModulePOS, new OmCode(retCodeConfig.getNotFoundPos(), "", lotID.getValue()));
        String moduleNumber = processRef.getModuleNumber();
        Validations.check(CimStringUtils.isEmpty(moduleNumber), new OmCode(retCodeConfig.getNotFoundModuleNo(), ""));
        com.fa.cim.newcore.bo.pd.CimProcessOperation aPosPO = aLot.getProcessOperation();
        Validations.check(null == aPosPO, new OmCode(retCodeConfig.getNotFoundProcessOperation(), ""));
        ProcessDTO.PosProcessOperationEventData oldPOEventData = aPosPO.getEventData();
        Inputs.OldCurrentPOData oldCurrentPOData = new Inputs.OldCurrentPOData();
        BeanUtils.copyProperties(oldPOEventData,oldCurrentPOData);
        objProcessLocateOut.setOldCurrentPOData(oldCurrentPOData);
        //--------------------------------------------------------------------------------------------------
        // (2) Remove aLot from current dispatching queue
        //--------------------------------------------------------------------------------------------------
        log.info("(2) Remove aLot from current dispatching queue");
        if (!CimStringUtils.equals(CIMStateConst.CIM_LOT_HOLD_STATE_NOTONHOLD, aLot.getLotHoldState())) {
            dispatchingManager.removeFromHoldQueue(aLot);
        }
        dispatchingManager.removeFromQueue(aLot);
        //--------------------------------------------------------------------------------------------------
        // (3) Locate the lot to the specified operation.
        //--------------------------------------------------------------------------------------------------
        log.info("(3) Locate the lot to the specified operation.");
        aLot.locateTo(aMainPF, moduleNumber, aModulePF, aModulePOS, null == sequenceNumber ? 0L : sequenceNumber.longValue());

        //--------------------------------------------------------------------------------------------------
        //  Check autoBankInRequired on target operation
        //--------------------------------------------------------------------------------------------------
        String lotType = aLot.getLotType();
        if (CimStringUtils.equals(lotType, BizConstant.SP_LOT_TYPE_DUMMYLOT)
         || CimStringUtils.equals(lotType, BizConstant.SP_LOT_TYPE_PRODUCTIONMONITORLOT)
         || CimStringUtils.equals(lotType, BizConstant.SP_LOT_TYPE_EQUIPMENTMONITORLOT)) {
            //npw lot, check the usage count
            Integer usageLimit = aLot.getUsageLimit();
            LotUsageRecycleCountParams usageRecycleCountByLot = waferMethod.getUsageRecycleCountByLot(objCommon, aLot.getLotID().getReferenceKey());
            Integer usageCount = usageRecycleCountByLot.getUsageCount();
            //doesn't reach the limit, don't bank in
            //reach the limit, bank in
            objProcessLocateOut.setAutoBankInFlag(usageCount >= usageLimit && usageLimit != 0);
        }else {
            com.fa.cim.newcore.bo.pd.CimProcessOperation aPPO = aLot.getProcessOperation();
            Validations.check(null == aPPO, new OmCode(retCodeConfig.getNotFoundOperation(), ""));
            boolean autoBankInFlag = false;
            boolean bankInRequiredFlag = false;
            if (aPPO != null){
                autoBankInFlag = aPPO.isAutoBankInRequired();
            }
            if (CimBooleanUtils.isTrue(autoBankInFlag)){
                bankInRequiredFlag = aLot.isBankInRequired();
            }
            objProcessLocateOut.setAutoBankInFlag(autoBankInFlag && bankInRequiredFlag);
        }

        //--------------------------------------------------------------------------------------------------
        // (4) Add a Lot into new current dispatching queue.
        //--------------------------------------------------------------------------------------------------
        log.info("(4) Add a Lot into new current dispatching queue.");
        dispatchingManager.addToQueue(aLot);
        //Operation for Held Lot
        if (!CimStringUtils.equals(CIMStateConst.CIM_LOT_HOLD_STATE_NOTONHOLD, aLot.getLotHoldState())) {
            log.info("if(lotHoldState != NOTONHOLD)");
            String lotHoldEqpUpdateFlagStr = StandardProperties.OM_EQP_HOLD_UPDATE_MODE.getValue();
            int lot_HoldEqpUpdateFlag = CimStringUtils.isEmpty(lotHoldEqpUpdateFlagStr) ? 0 : Integer.parseInt(lotHoldEqpUpdateFlagStr);
            if (lot_HoldEqpUpdateFlag != 0) {
                log.info("lot_HoldEqpUpdateFlag = {}", lot_HoldEqpUpdateFlag);
                dispatchingManager.addToHoldQueue(aLot);
                dispatchingManager.removeFromQueue(aLot);
            }
        }
        com.fa.cim.newcore.bo.person.CimPerson aPerson = baseCoreFactory.getBO(com.fa.cim.newcore.bo.person.CimPerson.class, objCommon.getUser().getUserID());
        Validations.check(null == aPerson, new OmCode(retCodeConfig.getNotFoundPerson(), objCommon.getUser().getUserID().getValue()));
        aLot.changeProductionStateBy(CimDateUtils.getTimestampAsString(objCommon.getTimeStamp().getReportTimeStamp()), aPerson);

        //--------------------------------------------------------------------------------------------------
        // (6) Set Last Claim Time and Last Claim Person
        //--------------------------------------------------------------------------------------------------
        log.info("(6) Set Last Claim Time and Last Claim Person");
        aLot.setLastClaimedTimeStamp(objCommon.getTimeStamp().getReportTimeStamp());
        aLot.setLastClaimedPerson(aPerson);
        return objProcessLocateOut;
    }

    /**
     * description:
     * <p><br/></p>
     * change history:
     * date             defect             person             comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param objCommon
     * @param operationID
     * @return com.fa.cim.dto.RetCode<com.fa.cim.pojo.ObjectIdentifier>
     * @author Ho
     * @date 2018/10/24 17:08:38
     */
    @Override
    public ObjectIdentifier processDefaultLogicalRecipeGetDR(Infos.ObjCommon objCommon, ObjectIdentifier operationID) {
        //------------------------------------------
        //  Get recipeID from product level
        //------------------------------------------
        String querySql = String.format("SELECT LRCP_ID,\n" +
                "                           LRCP_RKEY\n" +
                "                      FROM OMPRP\n" +
                "                     WHERE PRP_ID    ='%s'\n" +
                "                       AND PRP_LEVEL ='%s'",
                operationID.getValue(), BizConstant.SP_PD_FLOWLEVEL_OPERATION);
        com.fa.cim.newcore.bo.pd.CimProcessDefinition processDefinition = baseCoreFactory.getBOByCustom(com.fa.cim.newcore.bo.pd.CimProcessDefinition.class, querySql);
        // bug-1655 find logicRecipe error in auto monitor
        Validations.check(processDefinition == null || processDefinition.getDefaultLogicalRecipe() == null, retCodeConfig.getNotFoundProcessOperation(), operationID.getValue(),operationID.getValue());
        ObjectIdentifier logicalRecipeID = new ObjectIdentifier(processDefinition.getDefaultLogicalRecipe().getIdentifier(), processDefinition.getDefaultLogicalRecipe().getPrimaryKey());
        //------------------------------------------
        //  Check active version control.
        //------------------------------------------
        String versionID = cimFrameWorkGlobals.extractVersionFromID(logicalRecipeID.getValue());
        if (CimStringUtils.equals(versionID, BizConstant.SP_ACTIVE_VERSION)){
            com.fa.cim.newcore.bo.recipe.CimLogicalRecipe logicalRecipe = baseCoreFactory.getBO(com.fa.cim.newcore.bo.recipe.CimLogicalRecipe.class, logicalRecipeID);
            logicalRecipeID = new ObjectIdentifier(logicalRecipe.getActiveObject().getIdentifier(), logicalRecipe.getActiveObject().getPrimaryKey());
        }
        return logicalRecipeID;
    }

    @Override
    public List<Infos.DurableOperationNameAttributes> processOperationListForDurableDR(Infos.ObjCommon objCommon, Params.ProcessOperationListForDurableDRParams processOperationListForDurableDRIn) {

        Boolean currentFlag = processOperationListForDurableDRIn.getCurrentFlag();
        String durableCategory = processOperationListForDurableDRIn.getDurableCategory();
        ObjectIdentifier durableID = processOperationListForDurableDRIn.getDurableID();
        Boolean posSearchFlag = processOperationListForDurableDRIn.getPosSearchFlag();
        Integer searchCount = processOperationListForDurableDRIn.getSearchCount();
        Boolean searchDirection = processOperationListForDurableDRIn.getSearchDirection();
        String searchOperationNumber = processOperationListForDurableDRIn.getSearchOperationNumber();
        ObjectIdentifier searchRouteID = processOperationListForDurableDRIn.getSearchRouteID();

        int branchCheckMode = 0;
        String branchCheckModeVar = StandardProperties.OM_BRANCH_RETURN_ACTIVE_ROUTE.getValue();
        branchCheckMode = CimObjectUtils.isEmpty(branchCheckModeVar) ? 0 : Integer.valueOf(branchCheckModeVar);
        if (branchCheckMode > 1) {
            branchCheckMode = 0;
        }

        //-----------------------------------------------------------------------------
        // Check input parameter.
        //-----------------------------------------------------------------------------
        Validations.check(searchCount <= 0,retCodeConfig.getInvalidInputParam());

        Integer opeCount = 0, count = 0, count2 = 0, count3 = 0;
        String tmpKey = null;
        Integer retSqlCode = 0;
        String lotProcessFlowContextObj = null, lotProcessOperationObj = null, currentPoObj = null;
        boolean hvTrue = TRUE;

        List<Infos.DurableOperationNameAttributes> attributesList = new ArrayList<>();
        //-----------------------------------------------------------------------------
        // (1) Get current process information
        //-----------------------------------------------------------------------------
        if (BizConstant.equalsIgnoreCase(BizConstant.SP_DURABLECAT_CASSETTE, durableCategory)) {
            //--- Get cassette information
            CimCassette aCassette = baseCoreFactory.getBO(CimCassette.class,durableID);
            Validations.check(null == aCassette,retCodeConfig.getNotFoundCassette());
            CimDurableProcessFlowContext cassetteProcessFlowContext = aCassette.getDurableProcessFlowContext();
            if(null != cassetteProcessFlowContext){
                lotProcessFlowContextObj = aCassette.getDurableProcessFlowContext().getPrimaryKey();
            }
            com.fa.cim.newcore.bo.pd.CimDurableProcessOperation cassetteProcessOperation = aCassette.getDurableProcessOperation();
            if(null != cassetteProcessOperation){
                lotProcessOperationObj = aCassette.getDurableProcessOperation().getPrimaryKey();
                currentPoObj = lotProcessOperationObj;
            }
        } else if (BizConstant.equalsIgnoreCase(BizConstant.SP_DURABLECAT_RETICLEPOD, durableCategory)) {
            //--- Get reticlepod information
            CimReticlePod aReticlePod = baseCoreFactory.getBO(CimReticlePod.class,durableID);
            Validations.check(null == aReticlePod,retCodeConfig.getNotFoundReticlePod());
            CimDurableProcessFlowContext durableProcessFlowContext = aReticlePod.getDurableProcessFlowContext();
            if(null != durableProcessFlowContext){
                lotProcessFlowContextObj = durableProcessFlowContext.getPrimaryKey();
            }
            com.fa.cim.newcore.bo.pd.CimDurableProcessOperation durableProcessOperation = aReticlePod.getDurableProcessOperation();
            if(null != durableProcessOperation){
                lotProcessOperationObj = aReticlePod.getDurableProcessOperation().getPrimaryKey();
                currentPoObj = lotProcessOperationObj;
            }
        } else if (BizConstant.equalsIgnoreCase(BizConstant.SP_DURABLECAT_RETICLE, durableCategory)) {
            //--- Get Reticle information
            CimProcessDurable aDurable = baseCoreFactory.getBO(CimProcessDurable.class,durableID);
            Validations.check(null == aDurable,retCodeConfig.getNotFoundDurable());
            CimDurableProcessFlowContext durableProcessFlowContext = aDurable.getDurableProcessFlowContext();
            if(null != durableProcessFlowContext){
                lotProcessFlowContextObj = aDurable.getDurableProcessFlowContext().getPrimaryKey();
            }
            com.fa.cim.newcore.bo.pd.CimDurableProcessOperation durableProcessOperation = aDurable.getDurableProcessOperation();
            if(null != durableProcessOperation){
                lotProcessOperationObj = aDurable.getDurableProcessOperation().getPrimaryKey();
                currentPoObj = lotProcessOperationObj;
            }
        }
        if (CimObjectUtils.isEmpty(currentPoObj)) {
            return attributesList;
        }

        //--- Get current PO information
        CimDurableProcessOperation aDurableProcessOperation = baseCoreFactory.getBO(com.fa.cim.newcore.bo.pd.CimDurableProcessOperation.class,lotProcessOperationObj);
        Validations.check(null == aDurableProcessOperation,retCodeConfig.getNotFoundDurablePo());
        ProcessOperationSpecification processOperationSpecification = aDurableProcessOperation.getProcessOperationSpecification();
        String currentPosObj = null;
        if(null != processOperationSpecification){
            currentPosObj = aDurableProcessOperation.getProcessOperationSpecification().getPrimaryKey();
        }
        CimProcessOperationSpecification modulePOS = aDurableProcessOperation.getModuleProcessOperationSpecification();
        String currentModulePosObj = modulePOS.getPrimaryKey();
        String currentPfObj = aDurableProcessOperation.getProcessFlow().getPrimaryKey();
        String currentMainPfObj = aDurableProcessOperation.getMainProcessFlow().getPrimaryKey();
        String currentModulePfObj = aDurableProcessOperation.getModuleProcessFlow().getPrimaryKey();
        String currentModuleNo = aDurableProcessOperation.getModuleNumber();
        String currentModuleOpeNo = aDurableProcessOperation.getModuleOperationNumber();
        String currentOpeNo = aDurableProcessOperation.getOperationNumber();
        if (CimObjectUtils.isEmpty(currentMainPfObj)) {
            return attributesList;
        }

        //--- Get main PF information
        String sql1 = "SELECT\n" +
                "	A.PRP_ID,\n" +
                "	A.PRP_RKEY,\n" +
                "	A.ACTIVE_FLAG,\n" +
                "	B.PRP_TYPE\n" +
                "FROM\n" +
                "	OMPRF A,\n" +
                "	OMPRP B\n" +
                "WHERE\n" +
                "	A.ID = ?1\n" +
                "AND A.PRP_ID = B.PRP_ID\n" +
                "AND B.PRP_LEVEL =?2";
        Object[] operationListForDurable1 = cimJpaRepository.queryOne(sql1,currentMainPfObj, CIMStateConst.SP_PD_FLOWLEVEL_MAIN);
        Validations.check(null == operationListForDurable1,retCodeConfig.getNotFoundPfForDurable());
        String currentMainPdid = String.valueOf(operationListForDurable1[0]);
        String currentMainPdobj = String.valueOf(operationListForDurable1[1]) ;
        Boolean mainPFState = CimBooleanUtils.isTrue(String.valueOf(operationListForDurable1[2]));
        String currentMainPdtype = String.valueOf(operationListForDurable1[3]);


        //--- Get seq_no & stage of current module from main PF
        String sql2 = "SELECT\n" +
                "	IDX_NO,\n" +
                "	STAGE_ID,\n" +
                "	STAGE_RKEY\n" +
                "FROM\n" +
                "	OMPRF_ROUTESEQ\n" +
                "WHERE\n" +
                "	REFKEY = ?1\n" +
                "AND LINK_KEY =?2";
        Object[] operationListForDurable2 = cimJpaRepository.queryOne(sql2,currentMainPfObj, currentModuleNo);
        Validations.check(CimObjectUtils.isEmpty(operationListForDurable2),retCodeConfig.getNotFoundPfForDurable());
        Integer currentMainPfPdlistSeqno = Integer.parseInt(String.valueOf(operationListForDurable2[0]));
        String currentStageId = String.valueOf(operationListForDurable2[1]) ;
        String currentStageObj = String.valueOf(operationListForDurable2[2]);

        //--- Get module PF information
        String sql5 = "SELECT\n" +
                      "PRP_ID,\n" +
                      "ACTIVE_FLAG\n" +
                      "FROM\n" +
                      "OMPRF\n" +
                      "WHERE\n" +
                      "ID = ?1 ";
        Object[] PF_Informations = cimJpaRepository.queryOne(sql5,currentModulePfObj);
        Validations.check(CimObjectUtils.isEmpty(PF_Informations),retCodeConfig.getNotFoundPfForDurable());
        com.fa.cim.newcore.bo.pd.CimProcessFlow aProcessFlow = baseCoreFactory.getBO(com.fa.cim.newcore.bo.pd.CimProcessFlow.class,currentModulePfObj);
        Validations.check(null == aProcessFlow,retCodeConfig.getNotFoundProcessFlow());
        String currentModulePdid = String.valueOf(PF_Informations[0]);
        Long tempModulePFState = Long.parseLong(String.valueOf(PF_Informations[1]));
        Boolean modulePFState;
        modulePFState = tempModulePFState != 0;

        //--- Get seq_no of current process from module PF
        String sql3 = "SELECT\n" +
                "	IDX_NO\n" +
                "FROM\n" +
                "	OMPRF_PRSSSEQ\n" +
                "WHERE\n" +
                "	REFKEY = ?1\n" +
                "AND LINK_KEY =?2";
        Integer D_SEQNO = CimNumberUtils.intValue(cimJpaRepository.queryOneColumnAndUnique(sql3, currentModulePfObj, currentModuleOpeNo));
        Validations.check(null == D_SEQNO,retCodeConfig.getNotFoundPfForDurable());
        Integer currentModulePfPoslistSeqno = D_SEQNO;

        //-----------------------------------------------------------------------------
        // (2) Set the current operation information
        //-----------------------------------------------------------------------------
        if (currentFlag) {
            Infos.DurableOperationNameAttributes DurableOperationNameAttributes = new Infos.DurableOperationNameAttributes();
            DurableOperationNameAttributes.setSeqno(-1);
            DurableOperationNameAttributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
            DurableOperationNameAttributes.setOperationNumber(currentOpeNo);
            DurableOperationNameAttributes.setObjrefPO(currentPoObj);
            DurableOperationNameAttributes.setStageID(new ObjectIdentifier(currentStageId, currentStageObj));
            Infos.ProcessRef processRef = new Infos.ProcessRef();
            processRef.setProcessFlow(currentPfObj);
            processRef.setProcessOperationSpecification(currentPosObj);
            processRef.setMainProcessFlow(currentMainPfObj);
            processRef.setModuleNumber(currentModuleNo);
            processRef.setModuleProcessFlow(currentModulePfObj);
            processRef.setModulePOS(currentModulePosObj);
            DurableOperationNameAttributes.setProcessRef(processRef);
            Infos.DurableOperationNameAttributes helperOut = processMethod.processOperationListForDurableHelperDR(objCommon, DurableOperationNameAttributes);
            Infos.DurableOperationNameAttributes lastValue = helperOut;
            lastValue.setObjrefPO("");
            opeCount++;
            if (opeCount < searchCount && ObjectIdentifier.equalsWithValue(lastValue.getRouteID(), searchRouteID)
                    && lastValue.getOperationNumber().equals(searchOperationNumber)) {
                opeCount = searchCount;
            }
            attributesList.add(DurableOperationNameAttributes);
        }
        if (Objects.equals(opeCount, searchCount)) {
            return attributesList;
        }

        //-----------------------------------------------------------------------------
        // (3) Get forward process information
        //-----------------------------------------------------------------------------
        String modulePfObj = null, activeModulePfObj = null, nextModuleOpeNo = null, nextModulePosObj = null, previousModuleOpeNo, previousModulePosObj;
        int modulePfPoslistSeqno = 0;
        int i;
        boolean findFlag;
        String sql = null;
        if (searchDirection) {
            //-----------------------------------------------------------------------------
            // (3-1) Get next POS from current/active module PF
            //-----------------------------------------------------------------------------
            // If module PF is active, set next POS's seq_no from current module PF
            if (modulePFState) {
                modulePfObj = currentModulePfObj;
                modulePfPoslistSeqno = currentModulePfPoslistSeqno + 1;
                findFlag = true;
            } else {
                findFlag = false;
                //--- Get active module PF information
                String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                activeModulePfObj = getActiveProcessFlowObj(currentModulePdid, processDefinitionLevel);
                i = 0;
                while (opeCount < searchCount) {
                    // Search the next operation by finding the current module openo on active module PF
                    if (i <= 0) {
                        sql = "SELECT IDX_NO\n" +
                                "                                   FROM OMPRF_PRSSSEQ\n" +
                                "                                  WHERE REFKEY = ?\n" +
                                "                                    AND LINK_KEY          = ?";
                        CimPFPosListDO posList = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, activeModulePfObj, currentModuleOpeNo);
                        if (!CimObjectUtils.isEmpty(posList)) {
                            modulePfObj = activeModulePfObj;
                            modulePfPoslistSeqno = posList.getSequenceNumber() + 1;
                            findFlag = true;
                            break;
                        }
                    } else {
                        currentModulePfPoslistSeqno++;
                        sql = "SELECT LINK_KEY, PRSS_RKEY\n" +
                                "                                   FROM OMPRF_PRSSSEQ\n" +
                                "                                  WHERE REFKEY = ?\n" +
                                "                                    AND IDX_NO        = ?";
                        CimPFPosListDO posList = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, currentModulePfObj, currentModulePfPoslistSeqno);
                        if (!CimObjectUtils.isEmpty(posList)) {
                            //--- Keep the next operation information on current module PF
                            nextModuleOpeNo = posList.getDKey();
                            nextModulePosObj = posList.getProcessOperationSpecificationsObj();
                            //--- Search the corresponding next module openo from active module PF
                            sql = "SELECT IDX_NO\n" +
                                    "                                       FROM OMPRF_PRSSSEQ\n" +
                                    "                                      WHERE REFKEY = ?\n" +
                                    "                                        AND LINK_KEY          = ?";
                            posList = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, activeModulePfObj, nextModuleOpeNo);
                            if (!CimObjectUtils.isEmpty(posList)) {
                                modulePfObj = activeModulePfObj;
                                modulePfPoslistSeqno = posList.getSequenceNumber();
                                findFlag = true;
                                break;
                            } else {
                                Infos.DurableOperationNameAttributes attributes = new Infos.DurableOperationNameAttributes();
                                attributes.setSeqno(-1);
                                attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                                attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(currentModuleNo, nextModuleOpeNo));
                                attributes.setStageID(new ObjectIdentifier(currentStageId, currentStageObj));
                                Infos.ProcessRef processRef = new Infos.ProcessRef();
                                processRef.setProcessFlow(currentPfObj);
                                processRef.setMainProcessFlow(currentMainPfObj);
                                processRef.setModuleNumber(currentModuleNo);
                                processRef.setModuleProcessFlow(currentModulePfObj);
                                processRef.setModulePOS(nextModulePosObj);
                                attributes.setProcessRef(processRef);
                                opeCount = addDurableOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                            }
                        } else {
                            break;
                        }
                    }
                    i++;
                }
            }
            if (Objects.equals(opeCount, searchCount)) {
                return attributesList;
            }

            //-----------------------------------------------------------------------------
            // Set next POS from active current module PF
            //-----------------------------------------------------------------------------
            if (findFlag) {
                sql = "SELECT LINK_KEY,\n" +
                        "                            PRSS_RKEY\n" +
                        "                       FROM OMPRF_PRSSSEQ\n" +
                        "                      WHERE REFKEY = ?\n" +
                        "                        AND IDX_NO >= ?\n" +
                        "                   ORDER BY IDX_NO";
                List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query(sql, CimPFPosListDO.class, modulePfObj, modulePfPoslistSeqno);
                count = 0;
                while (opeCount < searchCount) {
                    if (CimObjectUtils.isEmpty(processFlowPosLists) || count >= processFlowPosLists.size()) {
                        break;
                    }
                    CimPFPosListDO posList = processFlowPosLists.get(count);
                    //--- Set next operation information on active current module PF
                    Infos.DurableOperationNameAttributes attributes = new Infos.DurableOperationNameAttributes();
                    attributes.setSeqno(-1);
                    attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                    attributes.setStageID(new ObjectIdentifier(currentStageId, currentStageObj));
                    Infos.ProcessRef processRef = new Infos.ProcessRef();
                    processRef.setProcessFlow(currentPfObj);
                    processRef.setMainProcessFlow(currentMainPfObj);
                    processRef.setModuleNumber(currentModuleNo);
                    processRef.setModuleProcessFlow(modulePfObj);
                    attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(currentModuleNo, posList.getDKey()));
                    processRef.setModulePOS(posList.getProcessOperationSpecificationsObj());
                    attributes.setProcessRef(processRef);
                    opeCount = addDurableOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                    count++;
                }
            }
            if (Objects.equals(opeCount, searchCount)) {
                return attributesList;
            }

            //-----------------------------------------------------------------------------
            // (3-2) Get next module PD from current/active main PF
            //-----------------------------------------------------------------------------
            String mainPfObj = null, activeMainPfObj = null, nextModulePdid = null, nextModuleNo = null, nextStageId = null, nextStageObj = null;
            int mainPfPdlistSeqno = 0;
            // If main PF is active, set next module PD's seq_no from current main PF
            if (mainPFState) {
                mainPfObj = currentMainPfObj;
                mainPfPdlistSeqno = currentMainPfPdlistSeqno + 1;
                findFlag = true;

            } else { // If main PF is NOT active, search next module PD's seq_no from active main PF
                findFlag = false;
                String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE;
                sql = "SELECT ID\n" +
                        "                           FROM OMPRF\n" +
                        "                          WHERE PRP_ID = ?\n" +
                        "                            AND PRP_LEVEL  = ?\n" +
                        "                            AND ACTIVE_FLAG     = ?";
                CimProcessFlowDO flow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class, currentMainPdid, processDefinitionLevel, hvTrue);
                Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                activeMainPfObj = flow.getId();
                i = 0;
                while (true) {
                    if (i == 0) {
                        sql = "SELECT IDX_NO,\n" +
                                "                                        ROUTE_ID\n" +
                                "                                   FROM OMPRF_ROUTESEQ\n" +
                                "                                  WHERE REFKEY = ?\n" +
                                "                                    AND LINK_KEY  = ?";
                        CimPFDefinitionListDO definitionList = cimJpaRepository.queryOne(sql, CimPFDefinitionListDO.class, activeMainPfObj, currentModuleNo);
                        if (!CimObjectUtils.isEmpty(definitionList)) {
                            mainPfObj = activeMainPfObj;
                            mainPfPdlistSeqno = definitionList.getSequenceNumber() + 1;
                            findFlag = true;
                            break;
                        }
                    } else {
                        currentMainPfPdlistSeqno++;
                        sql = "SELECT ROUTE_ID,\n" +
                                "                                        ROUTE_NO,\n" +
                                "                                        STAGE_ID,\n" +
                                "                                        STAGE_RKEY\n" +
                                "                                   FROM OMPRF_ROUTESEQ\n" +
                                "                                  WHERE REFKEY = ?\n" +
                                "                                    AND IDX_NO = ?";
                        CimPFDefinitionListDO definitionList = cimJpaRepository.queryOne(sql, CimPFDefinitionListDO.class, currentMainPfObj, currentMainPfPdlistSeqno);
                        if (!CimObjectUtils.isEmpty(definitionList)) {
                            nextModulePdid = definitionList.getProcessDefinitionID();
                            nextModuleNo = definitionList.getModuleNO();
                            nextStageId = definitionList.getStageID();
                            nextStageObj = definitionList.getStageObj();

                            //--- Search the corresponding next module number from the active main PF
                            sql = "SELECT IDX_NO\n" +
                                    "                                       FROM OMPRF_ROUTESEQ\n" +
                                    "                                      WHERE REFKEY = ?\n" +
                                    "                                        AND LINK_KEY  = ?";
                            definitionList = cimJpaRepository.queryOne(sql, CimPFDefinitionListDO.class, activeMainPfObj, nextModuleNo);
                            if (!CimObjectUtils.isEmpty(definitionList)) {
                                mainPfObj = activeMainPfObj;
                                mainPfPdlistSeqno = definitionList.getSequenceNumber();
                                findFlag = true;
                                break;
                            } else {
                                //---------------------------------------------------------------------------
                                // Set next POS from active next module PF and current(inactive) main PF
                                //---------------------------------------------------------------------------
                                processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                                String processFlowObj = getActiveProcessFlowObj(nextModulePdid, processDefinitionLevel);
                                //--- Set next operation information on active module PF
                                sql = "SELECT LINK_KEY,\n" +
                                        "                                            PRSS_RKEY\n" +
                                        "                                       FROM OMPRF_PRSSSEQ\n" +
                                        "                                      WHERE REFKEY = ?\n" +
                                        "                                   ORDER BY IDX_NO";
                                List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query(sql, CimPFPosListDO.class, processFlowObj);
                                count = 0;
                                while (opeCount < searchCount) {
                                    if (CimObjectUtils.isEmpty(processFlowPosLists) || count >= processFlowPosLists.size()) {
                                        break;
                                    }
                                    CimPFPosListDO posList = processFlowPosLists.get(count);
                                    Infos.DurableOperationNameAttributes attributes = new Infos.DurableOperationNameAttributes();
                                    attributes.setSeqno(-1);
                                    attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                                    attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(nextModuleNo, posList.getDKey()));
                                    attributes.setStageID(new ObjectIdentifier(nextStageId, nextStageObj));
                                    Infos.ProcessRef processRef = new Infos.ProcessRef();
                                    processRef.setProcessFlow(currentPfObj);
                                    processRef.setMainProcessFlow(currentMainPfObj);
                                    processRef.setModuleNumber(nextModuleNo);
                                    processRef.setModuleProcessFlow(processFlowObj);
                                    processRef.setModulePOS(posList.getProcessOperationSpecificationsObj());
                                    attributes.setProcessRef(processRef);
                                    opeCount = addDurableOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                                    count++;
                                }
                            }
                        } else break;
                    }
                    i++;
                }
            }
            if (Objects.equals(opeCount, searchCount)) {
                return attributesList;
            }
            //-----------------------------------------------------------------------------
            // Set next POS from active next module PF and active main PF
            //-----------------------------------------------------------------------------
            if (findFlag) {
                sql = "SELECT ROUTE_ID,\n" +
                        "                            ROUTE_NO,\n" +
                        "                            STAGE_ID,\n" +
                        "                            STAGE_RKEY\n" +
                        "                       FROM OMPRF_ROUTESEQ\n" +
                        "                      WHERE REFKEY = ?\n" +
                        "                        AND IDX_NO >= ?\n" +
                        "                   ORDER BY IDX_NO";
                List<CimPFDefinitionListDO> processFlowPDLists = cimJpaRepository.query(sql, CimPFDefinitionListDO.class, mainPfObj, mainPfPdlistSeqno);
                count = 0;
                while (opeCount < searchCount) {
                    if (CimObjectUtils.isEmpty(processFlowPDLists) || count >= processFlowPDLists.size())
                        break;
                    CimPFDefinitionListDO definitionList = processFlowPDLists.get(count);
                    //--- Get active module PF information
                    String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                    String processFlowObj = getActiveProcessFlowObj(definitionList.getProcessDefinitionID(), processDefinitionLevel);
                    //--- Set next operation information on active module PF
                    sql = "SELECT LINK_KEY,\n" +
                            "                           PRSS_RKEY\n" +
                            "                      FROM OMPRF_PRSSSEQ\n" +
                            "                     WHERE REFKEY = ?\n" +
                            "                  ORDER BY IDX_NO";
                    List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query(sql, CimPFPosListDO.class, processFlowObj);
                    count2 = 0;
                    while (opeCount < searchCount) {
                        if (CimObjectUtils.isEmpty(processFlowPosLists) || count2 >= processFlowPosLists.size()) {
                            break;
                        }
                        CimPFPosListDO posList = processFlowPosLists.get(count2);
                        //--- Set next operation information on active current module PF
                        Infos.DurableOperationNameAttributes attributes = new Infos.DurableOperationNameAttributes();
                        attributes.setSeqno(-1);
                        attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                        attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(definitionList.getModuleNO(), posList.getDKey()));
                        attributes.setStageID(new ObjectIdentifier(definitionList.getStageID(), definitionList.getStageObj()));
                        Infos.ProcessRef processRef = new Infos.ProcessRef();
                        processRef.setProcessFlow(currentPfObj);
                        processRef.setMainProcessFlow(mainPfObj);
                        processRef.setModuleNumber(definitionList.getModuleNO());
                        processRef.setModuleProcessFlow(processFlowObj);
                        processRef.setModulePOS(posList.getProcessOperationSpecificationsObj());
                        attributes.setProcessRef(processRef);
                        opeCount = addDurableOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                        count2++;
                    }
                    count++;
                }
            }
            if (Objects.equals(opeCount, searchCount)) {
                return attributesList;
            }

            //---------------------------------------------------------------------------------------------------------------
            // (3-3) If the lot is on sub/rework route, set the return operaion and the following operations from return flow
            //---------------------------------------------------------------------------------------------------------------
            String beforeMainPdtype = null;
            sql = "SELECT IDX_NO,\n" +
                    "                   OPE_NO,\n" +
                    "                   MPROCESS_PRF_RKEY,\n" +
                    "                   MROUTE_PRF_RKEY,\n" +
                    "                   ROUTE_PRF_RKEY\n" +
                    "              FROM OMDRBLPRFCX_RTNSEQ\n" +
                    "             WHERE REFKEY = ?\n" +
                    "          ORDER BY IDX_NO";
            List<CimDurablePFXReturnListDO> processFlowContextReturns = cimJpaRepository.query(sql, CimDurablePFXReturnListDO.class, lotProcessFlowContextObj);
            count = 0;
            while (opeCount < searchCount) {
                if (CimObjectUtils.isEmpty(processFlowContextReturns) || count >= processFlowContextReturns.size())
                    break;
                CimDurablePFXReturnListDO processFlowContextReturn = processFlowContextReturns.get(count);
                Integer returnSeqNo = processFlowContextReturn.getSequenceNumber();
                String returnOpeNo = processFlowContextReturn.getOperationNumber();
                String returnModuleNo = BaseStaticMethod.convertOpeNoToModuleNo(returnOpeNo);
                String returnModuleOpeNo = BaseStaticMethod.convertOpeNoToModuleOpeNo(returnOpeNo);
                String returnPfObj = processFlowContextReturn.getProcessFlowObj();
                String returnMainPfObj = processFlowContextReturn.getMainProcessFlowObj();
                String returnModulePfObj = processFlowContextReturn.getModuleProcessFlowObj();

                String mainPDTYPE = count == 0 ? currentMainPdtype : beforeMainPdtype;
                sql = "SELECT A.PRP_ID,\n" +
                        "                                A.PRP_RKEY,\n" +
                        "                                B.PRP_TYPE\n" +
                        "                           FROM OMPRF A, OMPRP B\n" +
                        "                          WHERE A.ID = ?1 \n" +
                        "                            AND A.PRP_ID = B.PRP_ID \n" +
                        "                            AND B.PRP_LEVEL = 'Main'";
                Object[] pfAndPDField = cimJpaRepository.queryOne(sql, returnMainPfObj);
                Validations.check(null == pfAndPDField,retCodeConfig.getNotFoundProcessFlow());
                beforeMainPdtype = (String) pfAndPDField[2];
                String originalReturnMainPfObj = returnMainPfObj;
                String originalReturnModulePfObj = returnModulePfObj;
                boolean bSameModuleFlag = true;
                if (branchCheckMode == 1) {
                    sql = "SELECT PROPE_RKEY, RWKOUT_STRING\n" +
                            "                               FROM OMDRBLPRFCX_BCKPROPESEQ\n" +
                            "                              WHERE REFKEY = ?1 \n" +
                            "                                AND IDX_NO  = ?2 ";
                    CimDurablePFXBackPOListDO processFlowContextBackProcessOperation = cimJpaRepository.queryOne(sql, CimDurablePFXBackPOListDO.class, lotProcessFlowContextObj, returnSeqNo);
                    Validations.check(CimObjectUtils.isEmpty(processFlowContextBackProcessOperation),retCodeConfig.getNotFoundProcessFlow());
                    String reworkOutKey = processFlowContextBackProcessOperation.getReworkOutKey();
                    lotProcessOperationObj = processFlowContextBackProcessOperation.getProcessOperationObj();
                    sql = "SELECT ROUTE_NO\n" +
                            "                               FROM OMDRBLPROPE\n" +
                            "                              WHERE ID = ?1 ";
                    CimDurableProcessOperationDO po = cimJpaRepository.queryOne(sql, CimDurableProcessOperationDO.class, lotProcessOperationObj);
                    Validations.check(CimObjectUtils.isEmpty(po),retCodeConfig.getNotFoundProcessFlow());
                    String backupModuleNo = po.getModuleNumber();
                    if (!CimStringUtils.equals(mainPDTYPE, BizConstant.SP_MAINPDTYPE_DURABLEREWORK)) {
                        if (!CimObjectUtils.isEmpty(reworkOutKey)) {
                            backupModuleNo = BaseStaticMethod.convertOpeNoToModuleNo(reworkOutKey);
                            Validations.check(CimObjectUtils.isEmpty(backupModuleNo),retCodeConfig.getInvalidRouteId());
                        } else {
                            // get backup PO object
                            CimProcessOperation aBackupPO = baseCoreFactory.getBO(CimProcessOperation.class, lotProcessOperationObj);
                            Validations.check(CimObjectUtils.isEmpty(aBackupPO), new OmCode(retCodeConfig.getNotFoundOperation(), ""));

                            // get MainPF from backup PO
                            CimProcessFlow aMainPF = aBackupPO.getMainProcessFlow();
                            Validations.check(CimObjectUtils.isEmpty(aMainPF), new OmCode(retCodeConfig.getNotFoundProcessFlow(), ""));

                            // get Module number from backup PO
                            String aModuleNo = aBackupPO.getModuleNumber();
                            // get ModulePF from backup PO
                            CimProcessFlow aModulePF = aBackupPO.getModuleProcessFlow();
                            Validations.check(CimObjectUtils.isEmpty(aModulePF),retCodeConfig.getNotFoundProcessFlow());

                            // get ModulePOS from backup PO
                            CimProcessOperationSpecification aModulePOS = aBackupPO.getModuleProcessOperationSpecification();
                            Validations.check(CimObjectUtils.isEmpty(aModulePOS),retCodeConfig.getNotFoundPos());

                            // get previous ModulePOS
                            AtomicReference<CimProcessFlow> outMainProcessFlow = new AtomicReference<>();
                            AtomicReference<CimProcessFlow> outModuleProcessFlow = new AtomicReference<>();
                            AtomicReference<String> chr_outModuleNumber = new AtomicReference<>();
                            String outModuleNumber = null;
                            CimProcessOperationSpecification aPrevPOS = aMainPF.getPreviousProcessOperationSpecificationFor(aModuleNo, aModulePF, aModulePOS, outMainProcessFlow, chr_outModuleNumber, outModuleProcessFlow);
                            outModuleNumber = chr_outModuleNumber.get();
                            Validations.check(aPrevPOS == null, new OmCode(retCodeConfig.getNotFoundPos(), ""));
                            backupModuleNo = outModuleNumber;
                        }
                    }
                    // Compare ModuleNumber
                    if (!CimStringUtils.equals(returnModuleNo, backupModuleNo)) {
                        bSameModuleFlag = false;
                    }
                }
                //--- Get return main PF information
                sql = "SELECT PRP_ID,\n" +
                        "                                PRP_RKEY,\n" +
                        "                                ACTIVE_FLAG\n" +
                        "                           FROM OMPRF\n" +
                        "                          WHERE ID = ?1 ";
                CimProcessFlowDO processFlow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class, returnMainPfObj);
                Validations.check(CimObjectUtils.isEmpty(processFlow),retCodeConfig.getNotFoundProcessFlow());
                String returnMainPdid = processFlow.getMainProcessDefinitionID();
                String returnMainPdobj = processFlow.getMainProcessDefinitionObj();
                Boolean returnMainPfState = processFlow.getState();

                String returnStageId;
                String returnStageObj;
                int returnMainPfPdlistSeqno = 0;
                int returnModulePfPoslistSeqno = 0;
                String returnModulePosObj = null;
                String returnModulePdid;
                Boolean returnModulePfState;

                if (bSameModuleFlag) {
                    //=========================================================================
                    //
                    // In this case,
                    //    Out-ModuleNumber and In-ModuleNumber is the same.
                    //    (Mod-A:10)
                    // ---10.10--10.20--10.30--10.40--(Main route)
                    //      |             ^
                    //      |             |
                    //      +-------------+ (Sub route)
                    //
                    //=========================================================================
                    //--- Get seq_no of return module from main PF
                    sql = "SELECT IDX_NO,\n" +
                            "                                    STAGE_ID,\n" +
                            "                                    STAGE_RKEY\n" +
                            "                               FROM OMPRF_ROUTESEQ\n" +
                            "                              WHERE REFKEY = ?1\n" +
                            "                                AND LINK_KEY  = ?2 ";
                    CimPFDefinitionListDO definitionList = cimJpaRepository.queryOne(sql, CimPFDefinitionListDO.class, returnMainPfObj, returnModuleNo);
                    Validations.check(CimObjectUtils.isEmpty(definitionList),retCodeConfig.getNotFoundProcessFlow());
                    returnMainPfPdlistSeqno = definitionList.getSequenceNumber();
                    returnStageId = definitionList.getStageID();
                    returnStageObj = definitionList.getStageObj();
                    sql = "SELECT PRP_ID,\n" +
                            "                                    ACTIVE_FLAG\n" +
                            "                               FROM OMPRF\n" +
                            "                              WHERE ID = ?1 ";
                    CimProcessFlowDO flow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class, returnModulePfObj);
                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    returnModulePdid = flow.getMainProcessDefinitionID();
                    returnModulePfState = flow.getState();
                    //--- Get seq_no of return process from module PF
                    sql = "SELECT IDX_NO,\n" +
                            "                                    PRSS_RKEY\n" +
                            "                               FROM OMPRF_PRSSSEQ\n" +
                            "                              WHERE REFKEY = ?1 \n" +
                            "                                AND LINK_KEY  = ?2 ";
                    CimPFPosListDO posList = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, returnModulePfObj, returnModuleOpeNo);
                    Validations.check(CimObjectUtils.isEmpty(posList),retCodeConfig.getNotFoundProcessFlow());
                    returnModulePfPoslistSeqno = posList.getSequenceNumber();
                    returnModulePosObj = posList.getProcessOperationSpecificationsObj();
                } else {
                    boolean bFindFlag = true;
                    //=========================================================================
                    //
                    // In this case,
                    //   Out-ModuleNumber and In-ModuleNumber is different.
                    //   (Mod-A:10)           (Mod-B:20)
                    // ---10.10--10.20- -20.10--20.20---(Main route)
                    //             |              ^
                    //             |              |
                    //             +--------------+ (Sub route)
                    //
                    //=========================================================================

                    //=================================================================
                    // Step1
                    //  Check STATE of MAIN_PF_OBJ(MainPF-A) in FRPXF_RETNLIST
                    //=================================================================
                    if (!returnMainPfState) {
                        //=================================================================
                        // Step2
                        //  When STATE of MAIN_PF_OBJ is 0,
                        //   Get the latest MAIN_PF_OBJ(MainPF-B) from MainPD
                        //=================================================================
                        String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE;
                        sql = "SELECT ID\n" +
                                "                                   FROM OMPRF\n" +
                                "                                  WHERE PRP_ID = ?1 \n" +
                                "                                    AND PRP_LEVEL  = ?2 \n" +
                                "                                    AND ACTIVE_FLAG     = ?3 ";
                        CimProcessFlowDO flow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class, returnMainPdid, processDefinitionLevel, hvTrue);
                        Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                        returnMainPfObj = flow.getId();
                        //=================================================================
                        // Step2-1
                        //   Get mdpd with return ModuleNo from the latest MAIN_PF_OBJ(MainPF-B)
                        //=================================================================
                        sql = "SELECT ROUTE_ID\n" +
                                "                                   FROM OMPRF_ROUTESEQ\n" +
                                "                                  WHERE REFKEY = ?1 \n" +
                                "                                    AND LINK_KEY  = ?2 ";
                        CimPFDefinitionListDO definitionList = cimJpaRepository.queryOne(sql, CimPFDefinitionListDO.class, returnMainPfObj, returnModuleNo);
                        if (CimObjectUtils.isEmpty(definitionList)) {
                            returnMainPfObj = originalReturnMainPfObj;
                            bFindFlag = false;
                        }
                        if (bFindFlag) {
                            returnModulePdid = definitionList.getProcessDefinitionID();
                            //=================================================================
                            // Step2-2
                            //   Get MOUDLE_PF_OBJ(mdpd-B) from mdpd
                            //=================================================================
                            processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                            returnModulePfObj = getActiveProcessFlowObj(returnModulePdid, processDefinitionLevel);
                            //=================================================================
                            // Step2-3
                            //   Get ModulePOS with return ModuleOpeNo from MOUDLE_PF_OBJ(mdpd-B)
                            //=================================================================
                            sql = "SELECT IDX_NO,\n" +
                                    "                                            PRSS_RKEY\n" +
                                    "                                       FROM OMPRF_PRSSSEQ\n" +
                                    "                                      WHERE REFKEY = ?1 \n" +
                                    "                                        AND LINK_KEY  = ?2 ";
                            CimPFPosListDO posList = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, returnModulePfObj, returnModuleOpeNo);
                            if (!CimObjectUtils.isEmpty(posList)) {
                                returnModulePfPoslistSeqno = posList.getSequenceNumber();
                                returnModulePosObj = posList.getProcessOperationSpecificationsObj();
                            } else {
                                returnMainPfObj = originalReturnMainPfObj;
                                returnModulePfObj = originalReturnModulePfObj;
                                bFindFlag = false;
                            }
                        }
                    } //if( returnMainPfState == 0 )

                    if (returnMainPfState || !bFindFlag) {
                        //=================================================================
                        // Step3
                        //  When STATE of MAIN_PF_OBJ is 1 or ModulePOS does not found,
                        //=================================================================
                        //=================================================================
                        // Step3-1
                        //   Get mdpd with return ModuleNo from MAINP_PF_OBJ(MainPF-A)
                        //    if mdpd does not found, Go to Step4.
                        //=================================================================
                        String processDefinitionID = null;
                        bFindFlag = true;
                        sql = "SELECT ROUTE_ID\n" +
                                "                                   FROM OMPRF_ROUTESEQ\n" +
                                "                                  WHERE REFKEY = ?1 \n" +
                                "                                    AND LINK_KEY  = ?2 ";
                        CimPFDefinitionListDO definitionList = cimJpaRepository.queryOne(sql, CimPFDefinitionListDO.class, returnMainPfObj, returnModuleNo);
                        if (CimObjectUtils.isEmpty(definitionList)) {
                            bFindFlag = false;
                        } else {
                            processDefinitionID = definitionList.getProcessDefinitionID();
                        }
                        if (bFindFlag) {
                            returnModulePdid = processDefinitionID;
                            //=================================================================
                            // Step3-2
                            //   Get the latest ModulePF(ModulePF-C) from mdpd
                            //=================================================================
                            String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                            //--- If module PDID's version is "##", convert it to real PDID
                            returnModulePfObj = getActiveProcessFlowObj(returnModulePdid, processDefinitionLevel);
                            //=================================================================
                            // Step3-3
                            //   Get ModulePOS from the latest ModulePF(ModulePF-C)
                            //=================================================================
                            Integer sequenceNumber = 0;
                            String processOperationSpecificationsObj = null;
                            sql = "SELECT IDX_NO,\n" +
                                    "                                            PRSS_RKEY\n" +
                                    "                                       FROM OMPRF_PRSSSEQ\n" +
                                    "                                      WHERE REFKEY = ?1 \n" +
                                    "                                        AND LINK_KEY  = ?2 ";
                            CimPFPosListDO posList = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, returnModulePfObj, returnModuleOpeNo);
                            if (CimObjectUtils.isEmpty(posList)) {
                                returnModulePfObj = originalReturnModulePfObj;
                                bFindFlag = false;
                            } else {
                                sequenceNumber = posList.getSequenceNumber();
                                processOperationSpecificationsObj = posList.getProcessOperationSpecificationsObj();
                            }
                            if (bFindFlag) {
                                returnModulePfPoslistSeqno = sequenceNumber;
                                returnModulePosObj = processOperationSpecificationsObj;
                            }
                        }
                    } //if( returnMainPfState == 1 || bFindFlag == FALSE )

                    //=================================================================
                    // Step4
                    //  Check STATE of MODULE_PF_OBJ(ModlePF-A) in FRPXF_RETNLIST
                    //=================================================================
                    if (!bFindFlag) {
                        //=================================================================
                        // Get STATE of MODULE_PF_OBJ(ModlePF-A)
                        //=================================================================
                        sql = "SELECT PRP_ID,\n" +
                                "                                        ACTIVE_FLAG\n" +
                                "                                   FROM OMPRF\n" +
                                "                                  WHERE ID = ?1 ";
                        CimProcessFlowDO flow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class, returnModulePfObj);
                        Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                        returnModulePfState = flow.getState();
                        if (!returnModulePfState) {
                            //=================================================================
                            // Step5
                            //  When STATE of MODULE_PF_OBJ is 0,
                            //   Get mdpd from MODULE_PF_OBJ(ModlePF-A)
                            //=================================================================
                            sql = "SELECT PRP_ID\n" +
                                    "                                       FROM OMPRF\n" +
                                    "                                      WHERE ID = ?1 ";
                            flow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class, returnModulePfObj);
                            Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                            returnModulePdid = flow.getMainProcessDefinitionID();
                            //=================================================================
                            // Get new MODULE_PF_OBJ(ModlePF-D) from mdpd
                            //=================================================================
                            String processFlowObj = null;
                            String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                            sql = "SELECT ID\n" +
                                    "                                       FROM OMPRF\n" +
                                    "                                      WHERE PRP_ID = ?1 \n" +
                                    "                                        AND PRP_LEVEL  = ?2 \n" +
                                    "                                        AND ACTIVE_FLAG     = ?3 ";
                            flow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class, returnModulePdid, processDefinitionLevel, hvTrue);
                            bFindFlag = true;
                            if (CimObjectUtils.isEmpty(flow)) {
                                bFindFlag = false;
                            } else {
                                processFlowObj = flow.getId();
                            }

                            //=================================================================
                            // Step5-1
                            // Get ModulePOS with return ModuleOpeNo from new MODULE_PF_OBJ(ModlePF-D)
                            //  if ModulePOS is not found, Go to Step6.
                            //=================================================================
                            if (bFindFlag) {
                                returnModulePfObj = processFlowObj;
                                //--- Get seq_no of return process from module PF
                                Integer sequenceNumber = 0;
                                String processOperationSpecificationsObj = null;
                                sql = "SELECT IDX_NO,\n" +
                                        "                                                PRSS_RKEY\n" +
                                        "                                           FROM OMPRF_PRSSSEQ\n" +
                                        "                                          WHERE REFKEY = ?1 \n" +
                                        "                                            AND LINK_KEY  = ?2 ";
                                CimPFPosListDO posList = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, returnModulePfObj, returnModuleOpeNo);
                                if (CimObjectUtils.isEmpty(posList)) {
                                    returnModulePfObj = originalReturnModulePfObj;
                                    bFindFlag = false;
                                } else {
                                    sequenceNumber = posList.getSequenceNumber();
                                    processOperationSpecificationsObj = posList.getProcessOperationSpecificationsObj();
                                }
                                if (bFindFlag) {
                                    returnModulePfPoslistSeqno = sequenceNumber;
                                    returnModulePosObj = processOperationSpecificationsObj;
                                }
                            }
                        } //if( returnModulePfState == 0 )

                        if (returnModulePfState || !bFindFlag) {
                            //=================================================================
                            // Step6
                            //  When STATE of MODULE_PF_OBJ is 1 or ModulePOS does not found,
                            //   Get ModulePOS with return ModuleOpeNo from new MODULE_PF_OBJ(ModlePF-A)
                            //=================================================================
                            sql = "SELECT IDX_NO,\n" +
                                    "                                            PRSS_RKEY\n" +
                                    "                                     FROM   OMPRF_PRSSSEQ\n" +
                                    "                                     WHERE  REFKEY = ?1\n" +
                                    "                                     AND    LINK_KEY = ?2";
                            CimPFPosListDO posList = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, returnModulePfObj, returnModuleOpeNo);
                            Validations.check(CimObjectUtils.isEmpty(posList),retCodeConfig.getNotFoundProcessFlow());
                            returnModulePfPoslistSeqno = posList.getSequenceNumber();
                            returnModulePosObj = posList.getProcessOperationSpecificationsObj();
                        } //if( returnModulePfState == 1 || bFindFlag == FALSE )
                    } //if( bFindFlag == FALSE )

                    //--- Get seq_no of return module from main PF
                    sql = "SELECT IDX_NO,\n" +
                            "                                    STAGE_ID,\n" +
                            "                                    STAGE_RKEY\n" +
                            "                               FROM OMPRF_ROUTESEQ\n" +
                            "                              WHERE REFKEY = ?1 \n" +
                            "                                AND LINK_KEY  = ?2 ";
                    CimPFDefinitionListDO definitionList = cimJpaRepository.queryOne(sql, CimPFDefinitionListDO.class, returnMainPfObj, returnModuleNo);
                    Validations.check(CimObjectUtils.isEmpty(definitionList),retCodeConfig.getNotFoundProcessFlow());
                    returnMainPfPdlistSeqno = definitionList.getSequenceNumber();
                    returnStageId = definitionList.getStageID();
                    returnStageObj = definitionList.getStageObj();
                    //--- Get return module PF information
                    sql = "SELECT PRP_ID,\n" +
                            "                                    ACTIVE_FLAG\n" +
                            "                               FROM OMPRF\n" +
                            "                              WHERE ID = ?1 ";
                    CimProcessFlowDO flow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class, returnModulePfObj);
                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    returnModulePdid = flow.getMainProcessDefinitionID();
                    returnModulePfState = flow.getState();
                }
                //-----------------------------------------------------------------------------
                // (3-3-1) Get next POS from return/active module PF
                //-----------------------------------------------------------------------------
                if (returnModulePfState) {
                    // Module PF is active, set return POS's seq_no from return module PF
                    modulePfObj = returnModulePfObj;
                    modulePfPoslistSeqno = returnModulePfPoslistSeqno;
                    findFlag = true;
                } else {
                    // Module PF is NOT active, search return POS's seq_no from active module PF
                    findFlag = false;

                    //--- Get active module PF information
                    String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                    sql = "SELECT ID\n" +
                            "                               FROM OMPRF\n" +
                            "                              WHERE PRP_ID = ?1 \n" +
                            "                                AND PRP_LEVEL  = ?2 \n" +
                            "                                AND ACTIVE_FLAG     = ?3 ";
                    CimProcessFlowDO flow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class, returnModulePdid, processDefinitionLevel, hvTrue);
                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    activeModulePfObj = flow.getId();
                    i = 0;
                    while (opeCount < searchCount) {
                        // Search the return operation by finding the return module openo on active module PF
                        if (i <= 0) {
                            sql = "SELECT IDX_NO\n" +
                                    "                                       FROM OMPRF_PRSSSEQ\n" +
                                    "                                      WHERE REFKEY = ?1 \n" +
                                    "                                        AND LINK_KEY  = ?2 ";
                            CimPFPosListDO posList = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, activeModulePfObj, returnModuleOpeNo);
                            if (!CimObjectUtils.isEmpty(posList)) {
                                modulePfObj = activeModulePfObj;
                                modulePfPoslistSeqno = posList.getSequenceNumber();
                                findFlag = true;
                                break;
                            } else {
                                Infos.DurableOperationNameAttributes attributes = new Infos.DurableOperationNameAttributes();
                                attributes.setSeqno(returnSeqNo);
                                attributes.setRouteID(new ObjectIdentifier(returnMainPdid, returnMainPdobj));
                                attributes.setOperationNumber(returnOpeNo);
                                attributes.setStageID(new ObjectIdentifier(returnStageId, returnStageObj));
                                Infos.ProcessRef processRef = new Infos.ProcessRef();
                                processRef.setProcessFlow(returnPfObj);
                                processRef.setMainProcessFlow(returnMainPfObj);
                                processRef.setModuleNumber(returnModuleNo);
                                processRef.setModuleProcessFlow(returnModulePfObj);
                                processRef.setModulePOS(returnModulePosObj);
                                attributes.setProcessRef(processRef);
                                opeCount = addDurableOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                            }
                        } else {
                            // Search the next operation by finding the next module openo on active module PF
                            //--- Get the next operation seq_no on return module PF
                            returnModulePfPoslistSeqno++;
                            sql = "SELECT LINK_KEY,\n" +
                                    "                                            PRSS_RKEY\n" +
                                    "                                       FROM OMPRF_PRSSSEQ\n" +
                                    "                                      WHERE REFKEY = ?1 \n" +
                                    "                                        AND IDX_NO = ?2 ";
                            CimPFPosListDO posList = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, returnModulePfObj, returnModulePfPoslistSeqno);
                            if (!CimObjectUtils.isEmpty(posList)) {
                                nextModuleOpeNo = posList.getDKey();
                                nextModulePosObj = posList.getProcessOperationSpecificationsObj();
                                sql = "SELECT IDX_NO\n" +
                                        "                                           FROM OMPRF_PRSSSEQ\n" +
                                        "                                          WHERE REFKEY = ?1 \n" +
                                        "                                            AND LINK_KEY  = ?2 ";
                                posList = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, activeModulePfObj, nextModuleOpeNo);
                                if (!CimObjectUtils.isEmpty(posList)) {
                                    modulePfObj = activeModulePfObj;
                                    modulePfPoslistSeqno = posList.getSequenceNumber();
                                    findFlag = true;
                                    break;
                                } else {
                                    Infos.DurableOperationNameAttributes attributes = new Infos.DurableOperationNameAttributes();
                                    attributes.setSeqno(returnSeqNo);
                                    attributes.setRouteID(new ObjectIdentifier(returnMainPdid, returnMainPdobj));
                                    attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(returnModuleNo, nextModuleOpeNo));
                                    attributes.setStageID(new ObjectIdentifier(returnStageId, returnStageObj));
                                    Infos.ProcessRef processRef = new Infos.ProcessRef();
                                    processRef.setProcessFlow(returnPfObj);
                                    processRef.setMainProcessFlow(returnMainPfObj);
                                    processRef.setModuleNumber(returnModuleNo);
                                    processRef.setModuleProcessFlow(returnModulePfObj);
                                    processRef.setModulePOS(nextModulePosObj);
                                    attributes.setProcessRef(processRef);
                                    opeCount = addDurableOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                                }
                            } else break;
                        }// end of else if( i == 0 )
                        i++;
                    }// end of while
                }
                if (Objects.equals(opeCount, searchCount)) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // Set next POS from active return module PF
                //-----------------------------------------------------------------------------
                if (findFlag) {
                    sql = "SELECT LINK_KEY,\n" +
                            "                                PRSS_RKEY\n" +
                            "                           FROM OMPRF_PRSSSEQ\n" +
                            "                          WHERE REFKEY = ?1 \n" +
                            "                            AND IDX_NO  >= ?2 \n" +
                            "                       ORDER BY IDX_NO ";
                    List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query(sql, CimPFPosListDO.class, modulePfObj, modulePfPoslistSeqno);
                    count2 = 0;
                    while (opeCount < searchCount) {
                        if (CimObjectUtils.isEmpty(processFlowPosLists) || count2 >= processFlowPosLists.size())
                            break;
                        CimPFPosListDO posList = processFlowPosLists.get(count2);
                        Infos.DurableOperationNameAttributes attributes = new Infos.DurableOperationNameAttributes();
                        attributes.setSeqno(returnSeqNo);
                        attributes.setRouteID(new ObjectIdentifier(returnMainPdid, returnMainPdobj));
                        attributes.setStageID(new ObjectIdentifier(returnStageId, returnStageObj));
                        Infos.ProcessRef processRef = new Infos.ProcessRef();
                        processRef.setProcessFlow(returnPfObj);
                        processRef.setMainProcessFlow(returnMainPfObj);
                        processRef.setModuleNumber(returnModuleNo);
                        processRef.setModuleProcessFlow(returnModulePfObj);
                        attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(returnModuleNo, posList.getDKey()));
                        processRef.setProcessOperationSpecification(posList.getProcessOperationSpecificationsObj());
                        attributes.setProcessRef(processRef);
                        opeCount = addDurableOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                        count2++;
                    }
                }
                if (Objects.equals(opeCount, searchCount)) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // (3-3-2) Get next module PD from return/active main PF
                //-----------------------------------------------------------------------------
                // If main PF is active, set next module PD's seq_no from return main PF
                if (returnMainPfState) {
                    mainPfObj = returnMainPfObj;
                    mainPfPdlistSeqno = returnMainPfPdlistSeqno + 1;
                    findFlag = true;
                }
                // If main PF is NOT active, search next module PD's seq_no from active main PF
                else {
                    findFlag = false;
                    //--- Get active main PF information
                    String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE;
                    sql = "SELECT ID\n" +
                            "                               FROM OMPRF\n" +
                            "                              WHERE PRP_ID = ?1 \n" +
                            "                                AND PRP_LEVEL  = ?2 \n" +
                            "                                AND ACTIVE_FLAG     = ?3 ";
                    CimProcessFlowDO flow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class, returnMainPdid, processDefinitionLevel, hvTrue);
                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    activeMainPfObj = flow.getId();
                    i = 0;
                    while (opeCount < searchCount) {
                        // Search the next module PD by finding the return module number on active main PF
                        if (i == 0) {
                            sql = "SELECT IDX_NO,\n" +
                                    "                                            ROUTE_ID\n" +
                                    "                                       FROM OMPRF_ROUTESEQ\n" +
                                    "                                      WHERE REFKEY = ?1 \n" +
                                    "                                        AND LINK_KEY  = ?2 ";
                            CimPFPosListDO posList = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, activeMainPfObj, returnModuleNo);
                            if (!CimObjectUtils.isEmpty(posList)) {
                                mainPfObj = activeMainPfObj;
                                mainPfPdlistSeqno = posList.getSequenceNumber() + 1;
                                findFlag = true;
                                break;
                            }

                        }
                        // Search the next module PD by finding the next module number on active main PF
                        else {
                            returnMainPfPdlistSeqno++;
                            sql = "SELECT ROUTE_ID,\n" +
                                    "                                            ROUTE_NO,\n" +
                                    "                                            STAGE_ID,\n" +
                                    "                                            STAGE_RKEY\n" +
                                    "                                       FROM OMPRF_ROUTESEQ\n" +
                                    "                                      WHERE REFKEY = ?1 \n" +
                                    "                                        AND IDX_NO = ?2 ";
                            CimPFDefinitionListDO definitionList = cimJpaRepository.queryOne(sql, CimPFDefinitionListDO.class, returnMainPfObj, returnMainPfPdlistSeqno);
                            if (!CimObjectUtils.isEmpty(definitionList)) {
                                nextModulePdid = definitionList.getProcessDefinitionID();
                                nextModuleNo = definitionList.getModuleNO();
                                nextStageId = definitionList.getStageID();
                                nextStageObj = definitionList.getStageObj();

                                //--- Search the corresponding next module number from the active main PF
                                sql = "SELECT IDX_NO\n" +
                                        "                                           FROM OMPRF_ROUTESEQ\n" +
                                        "                                          WHERE REFKEY = ?1 \n" +
                                        "                                            AND LINK_KEY  = ?2 ";
                                definitionList = cimJpaRepository.queryOne(sql, CimPFDefinitionListDO.class, activeMainPfObj, nextModuleNo);
                                if (!CimObjectUtils.isEmpty(definitionList)) {
                                    mainPfObj = activeMainPfObj;
                                    mainPfPdlistSeqno = definitionList.getSequenceNumber();
                                    findFlag = true;
                                    break;
                                } else {
                                    //---------------------------------------------------------------------------
                                    // Set next POS from active next module PF and return(inactive) main PF
                                    //---------------------------------------------------------------------------
                                    //--- Get active module PF information
                                    //--- If module PDID's version is "##", convert it to real PDID
                                    processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                                    String processFlowObj = getActiveProcessFlowObj(nextModulePdid, processDefinitionLevel);
                                    //--- Set next operation information on active module PF
                                    sql = "SELECT LINK_KEY,\n" +
                                            "                                                PRSS_RKEY\n" +
                                            "                                           FROM OMPRF_PRSSSEQ\n" +
                                            "                                          WHERE REFKEY = ?1 \n" +
                                            "                                          ORDER BY IDX_NO";
                                    List<CimPFPosListDO> pfPosLists = cimJpaRepository.query(sql, CimPFPosListDO.class, processFlowObj);
                                    count2 = 0;
                                    while (opeCount < searchCount) {
                                        if (CimObjectUtils.isEmpty(pfPosLists) || count2 >= pfPosLists.size())
                                            break;
                                        CimPFPosListDO posList = pfPosLists.get(count2);
                                        Infos.DurableOperationNameAttributes attributes = new Infos.DurableOperationNameAttributes();
                                        attributes.setSeqno(returnSeqNo);
                                        attributes.setRouteID(new ObjectIdentifier(returnMainPdid, returnMainPdobj));
                                        attributes.setStageID(new ObjectIdentifier(nextStageId, nextStageObj));
                                        Infos.ProcessRef processRef = new Infos.ProcessRef();
                                        processRef.setProcessFlow(returnPfObj);
                                        processRef.setMainProcessFlow(returnMainPfObj);
                                        processRef.setModuleNumber(nextModuleNo);
                                        processRef.setModuleProcessFlow(processFlowObj);
                                        attributes.setProcessRef(processRef);
                                        attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(nextModuleNo, posList.getDKey()));
                                        processRef.setModulePOS(posList.getProcessOperationSpecificationsObj());
                                        attributes.setProcessRef(processRef);
                                        opeCount = addDurableOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                                        count2++;
                                    }
                                }
                            } else break;
                        }// end of else if( i == 0 )
                        i++;
                    }// end of while
                }// end of else if( mainPFState == TRUE )
                if (Objects.equals(opeCount, searchCount)) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // Set next POS from active next module PF and active main PF
                //-----------------------------------------------------------------------------
                if (findFlag) {
                    //--- Get next module pdid, module_no from active main PF
                    sql = "SELECT ROUTE_ID,\n" +
                            "                                ROUTE_NO,\n" +
                            "                                STAGE_ID,\n" +
                            "                                STAGE_RKEY\n" +
                            "                           FROM OMPRF_ROUTESEQ\n" +
                            "                          WHERE REFKEY = ?1  \n" +
                            "                            AND IDX_NO  >= ?2 \n" +
                            "                       ORDER BY IDX_NO";
                    List<CimPFDefinitionListDO> pfPdLists = cimJpaRepository.query(sql, CimPFDefinitionListDO.class, mainPfObj, mainPfPdlistSeqno);
                    count2 = 0;
                    while (true) {
                        if (CimObjectUtils.isEmpty(pfPdLists) || count2 >= pfPdLists.size()) break;
                        CimPFDefinitionListDO definitionList = pfPdLists.get(count2);
                        String moduleNO = definitionList.getModuleNO();
                        //--- Get active module PF information
                        String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                        //--- If module PDID's version is "##", convert it to real PDID
                        String processFlowObj = getActiveProcessFlowObj(definitionList.getProcessDefinitionID(), processDefinitionLevel);
                        sql = " SELECT LINK_KEY,\n" +
                                "                               PRSS_RKEY\n" +
                                "                          FROM OMPRF_PRSSSEQ\n" +
                                "                         WHERE REFKEY = ?\n" +
                                "                         ORDER BY IDX_NO";
                        List<CimPFPosListDO> pfPosLists = cimJpaRepository.query(sql, CimPFPosListDO.class, processFlowObj);
                        count3 = 0;
                        while (opeCount < searchCount) {
                            if (CimObjectUtils.isEmpty(pfPosLists) || count3 >= pfPosLists.size())
                                break;
                            CimPFPosListDO posList = pfPosLists.get(count3);
                            Infos.DurableOperationNameAttributes attributes = new Infos.DurableOperationNameAttributes();
                            attributes.setSeqno(returnSeqNo);
                            attributes.setRouteID(new ObjectIdentifier(returnMainPdid, returnMainPdobj));
                            attributes.setStageID(new ObjectIdentifier(definitionList.getStageID(), definitionList.getStageObj()));
                            Infos.ProcessRef processRef = new Infos.ProcessRef();
                            processRef.setModuleProcessFlow(processFlowObj);
                            processRef.setModuleNumber(moduleNO);
                            processRef.setProcessFlow(returnPfObj);
                            processRef.setMainProcessFlow(mainPfObj);
                            attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(moduleNO, posList.getDKey()));
                            processRef.setModulePOS(posList.getProcessOperationSpecificationsObj());
                            attributes.setProcessRef(processRef);
                            opeCount = addDurableOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                            count3++;
                        }
                        count2++;
                    }
                }// end of if( findFlag == TRUE )
                count++;
                if (Objects.equals(opeCount, searchCount)) {
                    return attributesList;
                }
            }
        }
        //-----------------------------------------------------------------------------
        // (4) Get backward process information         if( searchDirection == FALSE )
        //-----------------------------------------------------------------------------
        else {
            //-----------------------------------------------------------------------------
            // (4-1) Get backward process from FRPO, if( posSearchFlag == FALSE )
            //-----------------------------------------------------------------------------
            if (!posSearchFlag) {
                //Get a sequence number of current operation in FRPFX_POLIST
                sql = "SELECT IDX_NO\n" +
                        "                           FROM OMDRBLPRFCX_PROPESEQ\n" +
                        "                          WHERE REFKEY = ?1 \n" +
                        "                            AND PROPE_RKEY = ?2 ";
                CimDurablePFXDurablePOListDO pfxPoList = cimJpaRepository.queryOne(sql, CimDurablePFXDurablePOListDO.class, lotProcessFlowContextObj, currentPoObj);
                Validations.check(CimObjectUtils.isEmpty(pfxPoList),retCodeConfig.getNotFoundProcessFlow());
                Integer sequenceNumber = pfxPoList.getSequenceNumber();
                sql = "SELECT IDX_NO\n" +
                        "                       FROM OMDRBLPRFCX_PROPESEQ\n" +
                        "                      WHERE REFKEY = ?1 \n" +
                        "                        AND IDX_NO < ?2 \n" +
                        "                   ORDER BY IDX_NO DESC";
                List<CimDurablePFXDurablePOListDO> pfxPoLists = cimJpaRepository.query(sql, CimDurablePFXDurablePOListDO.class, lotProcessFlowContextObj, sequenceNumber);
                count = 0;
                while (opeCount < searchCount) {
                    if (CimArrayUtils.isEmpty(pfxPoLists) || count >= pfxPoLists.size()) break;
                    CimDurablePFXDurablePOListDO pfxPoLessThanList = pfxPoLists.get(count);
                    sql = "SELECT MAIN_PROCESS_ID,\n" +
                            "                                    MAIN_PROCESS_RKEY,\n" +
                            "                                    OPE_NO,\n" +
                            "                                    MPROCESS_PRF_RKEY,\n" +
                            "                                    MPROCESS_PRSS_RKEY,\n" +
                            "                                    MROUTE_PRF_RKEY,\n" +
                            "                                    ROUTE_NO,\n" +
                            "                                    ROUTE_PRF_RKEY,\n" +
                            "                                    ROUTE_PRSS_RKEY\n" +
                            "                             FROM   OMDRBLPROPE\n" +
                            "                             WHERE  ID = ?1 ";
                    CimDurableProcessOperationDO po = cimJpaRepository.queryOne(sql, CimDurableProcessOperationDO.class,pfxPoLessThanList.getProcessOperationObj());
                    Validations.check(CimObjectUtils.isEmpty(po),retCodeConfig.getNotFoundProcessOperation());
                    sql = "SELECT STAGE_ID,\n" +
                            "                                    STAGE_RKEY\n" +
                            "                               FROM OMPRF_ROUTESEQ\n" +
                            "                              WHERE REFKEY = ?1 \n" +
                            "                                AND LINK_KEY  = ?2";
                    CimPFDefinitionListDO processFlowDefinitionList = cimJpaRepository.queryOne(sql, CimPFDefinitionListDO.class, po.getMainProcessFlowObj(), po.getModuleNumber());
                    Infos.DurableOperationNameAttributes attributes = new Infos.DurableOperationNameAttributes();
                    attributes.setSeqno(-1);
                    attributes.setRouteID(new ObjectIdentifier(po.getMainProcessDefinitionID(), po.getMainProcessDefinitionObj()));
                    attributes.setOperationNumber(po.getOperationNumber());
                    if (!CimObjectUtils.isEmpty(processFlowDefinitionList)) {
                        attributes.setStageID(new ObjectIdentifier(processFlowDefinitionList.getStageID(), processFlowDefinitionList.getStageObj()));
                    }
                    Infos.ProcessRef processRef = new Infos.ProcessRef();
                    processRef.setProcessFlow(po.getProcessFlowObj());
                    processRef.setProcessOperationSpecification(po.getProcessOperationSpecificationObj());
                    processRef.setMainProcessFlow(po.getMainProcessFlowObj());
                    processRef.setModuleNumber(po.getModuleNumber());
                    processRef.setModuleProcessFlow(po.getModuleProcessFlowObj());
                    processRef.setModulePOS(po.getModuleProcessOperationSpecificationsObj());
                    attributes.setProcessRef(processRef);
                    opeCount = addDurableOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                    count++;
                }
            }
            //-----------------------------------------------------------------------------
            // (4-2) Get backward process from FRPOS, if( posSearchFlag == TRUE )
            //-----------------------------------------------------------------------------
            else {
                //-----------------------------------------------------------------------------
                // (4-2-1) Get previous POS from current/active module PF
                //-----------------------------------------------------------------------------
                // If module PF is active, set previous POS's seq_no from current module PF
                if (modulePFState) {
                    modulePfObj = currentModulePfObj;
                    modulePfPoslistSeqno = currentModulePfPoslistSeqno - 1;
                    findFlag = true;
                } else {
                    findFlag = false;
                    //--- Get active module PF information
                    String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                    activeModulePfObj = getActiveProcessFlowObj(currentModulePdid, processDefinitionLevel);

                    i = 0;
                    while (opeCount < searchCount) {
                        // Search the previous operation by finding the current module openo on active module PF
                        if (i <= 0) {
                            sql = "SELECT IDX_NO\n" +
                                    "                                       FROM OMPRF_PRSSSEQ\n" +
                                    "                                      WHERE REFKEY = ?1 \n" +
                                    "                                        AND LINK_KEY  = ?2 ";
                            CimPFPosListDO pfPosList = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, activeModulePfObj, currentModuleOpeNo);
                            if (!CimObjectUtils.isEmpty(pfPosList)) {
                                //--- Set the previous operation seq_no on active module PF
                                modulePfObj = activeModulePfObj;
                                modulePfPoslistSeqno = pfPosList.getSequenceNumber() - 1;
                                findFlag = true;
                                break;
                            }
                        }
                        // Search the previous operation by finding the previous module openo on active module PF
                        else {
                            //--- Get the previous operation seq_no on current module PF
                            currentModulePfPoslistSeqno--;
                            sql = "SELECT LINK_KEY,\n" +
                                    "                                            PRSS_RKEY\n" +
                                    "                                       FROM OMPRF_PRSSSEQ\n" +
                                    "                                      WHERE REFKEY = ?1 \n" +
                                    "                                        AND IDX_NO  = ?2 ";
                            CimPFPosListDO pfPosList = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, currentModulePfObj, currentModulePfPoslistSeqno);
                            if (!CimObjectUtils.isEmpty(pfPosList)) {
                                //--- Keep the previous operation information on current module PF
                                previousModuleOpeNo = pfPosList.getDKey();
                                previousModulePosObj = pfPosList.getProcessOperationSpecificationsObj();

                                //--- Search the corresponding previous module openo from active module PF
                                sql = "SELECT IDX_NO\n" +
                                        "                                           FROM OMPRF_PRSSSEQ\n" +
                                        "                                          WHERE REFKEY = ?1 \n" +
                                        "                                            AND LINK_KEY  = ?2 ";
                                pfPosList = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, activeModulePfObj, previousModuleOpeNo);
                                if (!CimObjectUtils.isEmpty(pfPosList)) {
                                    modulePfObj = activeModulePfObj;
                                    modulePfPoslistSeqno = pfPosList.getSequenceNumber();
                                    findFlag = true;
                                    break;
                                } else {
                                    //---------------------------------------------------------------------------
                                    // Set previous POS from inactive current module PF
                                    //---------------------------------------------------------------------------
                                    Infos.DurableOperationNameAttributes attributes = new Infos.DurableOperationNameAttributes();
                                    attributes.setSeqno(-1);
                                    attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                                    attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(currentModuleNo, previousModuleOpeNo));
                                    attributes.setStageID(new ObjectIdentifier(currentStageId, currentStageObj));
                                    Infos.ProcessRef processRef = new Infos.ProcessRef();
                                    processRef.setProcessFlow(currentPfObj);
                                    processRef.setMainProcessFlow(currentMainPfObj);
                                    processRef.setModuleNumber(currentModuleNo);
                                    processRef.setModuleProcessFlow(currentModulePfObj);
                                    processRef.setModulePOS(previousModulePosObj);
                                    attributes.setProcessRef(processRef);
                                    opeCount = addDurableOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                                }
                            } else break;
                        }// end of else if( i == 0 )
                        i++;
                    }// end of while
                }// end of else if( modulePFState == TRUE )
                if (Objects.equals(opeCount, searchCount)) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // Set previous POS from active current module PF
                //-----------------------------------------------------------------------------
                if (findFlag) {
                    sql = "SELECT LINK_KEY,\n" +
                            "                                PRSS_RKEY\n" +
                            "                           FROM OMPRF_PRSSSEQ\n" +
                            "                          WHERE REFKEY = ?1 \n" +
                            "                            AND IDX_NO <= ?2 \n" +
                            "                       ORDER BY IDX_NO DESC";
                    List<CimPFPosListDO> pfPosLists = cimJpaRepository.query(sql, CimPFPosListDO.class, modulePfObj, modulePfPoslistSeqno);
                    count = 0;
                    while (opeCount < searchCount) {
                        if (CimObjectUtils.isEmpty(pfPosLists) || count >= pfPosLists.size()) {
                            break;
                        }
                        CimPFPosListDO pfPosList = pfPosLists.get(count);
                        //--- Set previous operation information on active current module PF
                        Infos.DurableOperationNameAttributes attributes = new Infos.DurableOperationNameAttributes();
                        attributes.setSeqno(-1);
                        attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                        attributes.setStageID(new ObjectIdentifier(currentStageId, currentStageObj));
                        Infos.ProcessRef processRef = new Infos.ProcessRef();
                        processRef.setProcessFlow(currentPfObj);
                        processRef.setMainProcessFlow(currentMainPfObj);
                        processRef.setModuleNumber(currentModuleNo);
                        processRef.setModuleProcessFlow(modulePfObj);
                        attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(currentModuleNo, pfPosList.getDKey()));
                        processRef.setModulePOS(pfPosList.getProcessOperationSpecificationsObj());
                        attributes.setProcessRef(processRef);
                        opeCount = addDurableOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                        count++;
                    }
                }
                if (Objects.equals(opeCount, searchCount)) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // (4-2-2) Get previous module PD from current/active main PF
                //-----------------------------------------------------------------------------
                String mainPfObj = null, activeMainPfObj = null;
                String previousModulePdid = null, previousModuleNo = null, previousStageId = null, previousStageObj = null;
                Integer mainPfPdlistSeqno = 0;

                // If main PF is active, set previous module PD's seq_no from current main PF
                if (mainPFState) {
                    mainPfObj = currentMainPfObj;
                    mainPfPdlistSeqno = currentMainPfPdlistSeqno - 1;
                    findFlag = true;
                }
                // If main PF is NOT active, search previous module PD's seq_no from active main PF
                else {
                    findFlag = false;

                    //--- Get active main PF information
                    String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE;
                    sql = "SELECT ID\n" +
                            "                               FROM OMPRF\n" +
                            "                              WHERE PRP_ID = ?1 \n" +
                            "                                AND PRP_LEVEL  = ?2 \n" +
                            "                                AND ACTIVE_FLAG     = ?3 ";
                    CimProcessFlowDO flow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class, currentMainPdid, processDefinitionLevel, hvTrue);
                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    activeMainPfObj = flow.getId();
                    i = 0;
                    while (true) {
                        // Search the previous module PD by finding the current module number on active main PF
                        if (i == 0) {
                            sql = "SELECT IDX_NO,\n" +
                                    "                                            ROUTE_ID\n" +
                                    "                                       FROM OMPRF_ROUTESEQ\n" +
                                    "                                      WHERE REFKEY = ?1 \n" +
                                    "                                        AND LINK_KEY  = ?2 ";
                            CimPFDefinitionListDO pfPdList = cimJpaRepository.queryOne(sql, CimPFDefinitionListDO.class, activeMainPfObj, currentModuleNo);
                            if (!CimObjectUtils.isEmpty(pfPdList)) {
                                //--- Set the previous module PD's seq_no on active module PF
                                mainPfObj = activeMainPfObj;
                                mainPfPdlistSeqno = pfPdList.getSequenceNumber() - 1;
                                findFlag = true;
                                break;
                            }
                        }
                        // Search the previous PD by finding the previous module number on active main PF
                        else {
                            //--- Get the previous module PD's seq_no on current main PF
                            currentMainPfPdlistSeqno--;
                            sql = "SELECT ROUTE_ID,\n" +
                                    "                                            ROUTE_NO,\n" +
                                    "                                            STAGE_ID,\n" +
                                    "                                            STAGE_RKEY\n" +
                                    "                                       FROM OMPRF_ROUTESEQ\n" +
                                    "                                      WHERE REFKEY = ?1 \n" +
                                    "                                        AND IDX_NO  = ?2 ";
                            CimPFDefinitionListDO definitionList = cimJpaRepository.queryOne(sql, CimPFDefinitionListDO.class, currentMainPfObj, currentMainPfPdlistSeqno);
                            if (!CimObjectUtils.isEmpty(definitionList)) {
                                //--- Keep the previous module information on current main PF
                                previousModulePdid = definitionList.getProcessDefinitionID();
                                previousModuleNo = definitionList.getModuleNO();
                                previousStageId = definitionList.getStageID();
                                previousStageObj = definitionList.getStageObj();
                                //--- Search the corresponding previous module number from the active main PF
                                sql = "SELECT IDX_NO\n" +
                                        "                                           FROM OMPRF_ROUTESEQ\n" +
                                        "                                          WHERE REFKEY = ?1 \n" +
                                        "                                            AND LINK_KEY  = ?2 ";
                                definitionList = cimJpaRepository.queryOne(sql, CimPFDefinitionListDO.class, activeMainPfObj, previousModuleNo);
                                if (!CimObjectUtils.isEmpty(definitionList)) {
                                    mainPfObj = activeMainPfObj;
                                    mainPfPdlistSeqno = definitionList.getSequenceNumber();
                                    findFlag = true;
                                    break;
                                } else {
                                    //---------------------------------------------------------------------------
                                    // Set previous POS from active previous module PF and current(inactive) main PF
                                    //---------------------------------------------------------------------------
                                    //--- Get active module PF information
                                    //--- If module PDID's version is "##", convert it to real PDID
                                    processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                                    String previousModulePfObj = getActiveProcessFlowObj(previousModulePdid, processDefinitionLevel);
                                    //--- Set previous operation information on active module PF
                                    sql = "SELECT LINK_KEY,\n" +
                                            "                                                PRSS_RKEY\n" +
                                            "                                           FROM OMPRF_PRSSSEQ\n" +
                                            "                                          WHERE REFKEY = ?1 \n" +
                                            "                                          ORDER BY IDX_NO DESC";
                                    List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query(sql, CimPFPosListDO.class, previousModulePfObj);
                                    count = 0;
                                    while (opeCount < searchCount) {
                                        if (CimArrayUtils.isEmpty(processFlowPosLists) || count >= processFlowPosLists.size())
                                            break;
                                        CimPFPosListDO posList = processFlowPosLists.get(count);
                                        //--- Set previous operation information on active module PF
                                        Infos.DurableOperationNameAttributes attributes = new Infos.DurableOperationNameAttributes();
                                        attributes.setSeqno(-1);
                                        attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                                        attributes.setStageID(new ObjectIdentifier(previousStageId, previousStageObj));
                                        Infos.ProcessRef processRef = new Infos.ProcessRef();
                                        processRef.setProcessFlow(currentPfObj);
                                        processRef.setMainProcessFlow(currentMainPfObj);
                                        processRef.setModuleNumber(previousModuleNo);
                                        processRef.setModuleProcessFlow(previousModulePfObj);
                                        attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(previousModuleNo, posList.getDKey()));
                                        processRef.setModulePOS(posList.getProcessOperationSpecificationsObj());
                                        attributes.setProcessRef(processRef);
                                        opeCount = addDurableOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                                        count++;
                                    }
                                }
                            } else break;
                        }// end of else if( i == 0 )
                        i++;
                    }// end of while
                }// end of else if( mainPFState == TRUE )
                if (Objects.equals(opeCount, searchCount)) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // Set previous POS from active previous module PF and active main PF
                //-----------------------------------------------------------------------------
                if (findFlag) {
                    //--- Get previous module pdid, module_no from active main PF
                    sql = "SELECT ROUTE_ID,\n" +
                            "                                ROUTE_NO,\n" +
                            "                                STAGE_ID,\n" +
                            "                                STAGE_RKEY\n" +
                            "                           FROM OMPRF_ROUTESEQ\n" +
                            "                          WHERE REFKEY = ?1 \n" +
                            "                            AND IDX_NO <= ?2 \n" +
                            "                       ORDER BY IDX_NO DESC";
                    List<CimPFDefinitionListDO> processFlowDefinitionLists = cimJpaRepository.query(sql, CimPFDefinitionListDO.class, mainPfObj, mainPfPdlistSeqno);
                    count = 0;
                    while (true) {
                        if (CimArrayUtils.isEmpty(processFlowDefinitionLists) || count >= processFlowDefinitionLists.size()) break;
                        CimPFDefinitionListDO definitionList = processFlowDefinitionLists.get(count);
                        if (CimObjectUtils.isEmpty(definitionList)) break;
                        //--- Get active module PF information
                        String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                        String processFlowObj = getActiveProcessFlowObj(definitionList.getProcessDefinitionID(), processDefinitionLevel);
                        //--- Set previous operation information on active module PF
                        sql = "SELECT LINK_KEY,\n" +
                                "                               PRSS_RKEY\n" +
                                "                          FROM OMPRF_PRSSSEQ\n" +
                                "                         WHERE REFKEY = ?1 \n" +
                                "                      ORDER BY IDX_NO DESC";
                        List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query(sql, CimPFPosListDO.class,processFlowObj);
                        count2 = 0;
                        while (opeCount < searchCount) {
                            if (CimArrayUtils.isEmpty(processFlowPosLists) || count2 >= processFlowPosLists.size()) break;
                            CimPFPosListDO posList = processFlowPosLists.get(count2);
                            Infos.DurableOperationNameAttributes attributes = new Infos.DurableOperationNameAttributes();
                            attributes.setSeqno(-1);
                            attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                            attributes.setStageID(new ObjectIdentifier(definitionList.getStageID(), definitionList.getStageObj()));
                            Infos.ProcessRef processRef = new Infos.ProcessRef();
                            processRef.setModuleProcessFlow(processFlowObj);
                            processRef.setModuleNumber(definitionList.getModuleNO());
                            processRef.setProcessFlow(currentPfObj);
                            processRef.setMainProcessFlow(mainPfObj);
                            attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(definitionList.getModuleNO(), posList.getDKey()));
                            processRef.setModulePOS(posList.getProcessOperationSpecificationsObj());
                            attributes.setProcessRef(processRef);
                            opeCount = addDurableOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                            count2++;
                        }
                        count++;
                    }
                }
                if (Objects.equals(opeCount, searchCount)) {
                    return attributesList;
                }

                //---------------------------------------------------------------------------------------------------------------
                // (4-2-3) If the lot is on sub/rework route, set the backup operaion and the following operations from backup flow
                //---------------------------------------------------------------------------------------------------------------
                sql = "SELECT IDX_NO,\n" +
                        "                         PROPE_RKEY\n" +
                        "                    FROM OMDRBLPRFCX_BCKPROPESEQ\n" +
                        "                   WHERE REFKEY = ?1 \n" +
                        "                ORDER BY IDX_NO";
                List<CimDurablePFXBackPOListDO> pfxBackPoLists = cimJpaRepository.query(sql, CimDurablePFXBackPOListDO.class, lotProcessFlowContextObj);
                count = 0;
                while (opeCount < searchCount) {
                    if (CimArrayUtils.isEmpty(pfxBackPoLists) || count >= pfxBackPoLists.size()) break;
                    CimDurablePFXBackPOListDO pfxBackPoList = pfxBackPoLists.get(count);
                    //--- Keep backup operation information
                    Integer backupSeqNo = pfxBackPoList.getSequenceNumber();
                    // Get process information from FRPO
                    sql = "SELECT OPE_NO,\n" +
                            "                                    ROUTE_NO,\n" +
                            "                                    ROUTE_OPE_NO,\n" +
                            "                                    MPROCESS_PRF_RKEY,\n" +
                            "                                    MPROCESS_PRSS_RKEY,\n" +
                            "                                    MROUTE_PRF_RKEY,\n" +
                            "                                    ROUTE_PRF_RKEY,\n" +
                            "                                    ROUTE_PRSS_RKEY\n" +
                            "                               FROM OMDRBLPROPE\n" +
                            "                              WHERE ID = ?1";
                    CimDurableProcessOperationDO po = cimJpaRepository.queryOne(sql, CimDurableProcessOperationDO.class,pfxBackPoList.getProcessOperationObj());
                    Validations.check(CimObjectUtils.isEmpty(po),retCodeConfig.getNotFoundProcessOperation());
                    //--- Keep backup operation information
                    String backupOpeNo = po.getOperationNumber();
                    String backupModuleNo = po.getModuleNumber();
                    String backupModuleOpeNo = po.getModuleOperationNumber();
                    String backupPfObj = po.getProcessFlowObj();
                    String backupPosObj = po.getProcessOperationSpecificationObj();
                    String backupMainPfObj = po.getMainProcessFlowObj();
                    String backupModulePfObj = po.getModuleProcessFlowObj();
                    String backupModulePosObj = po.getModuleProcessOperationSpecificationsObj();

                    //--- Get backup main PF information
                    sql = "SELECT PRP_ID,\n" +
                            "                                    PRP_RKEY,\n" +
                            "                                    ACTIVE_FLAG\n" +
                            "                               FROM OMPRF\n" +
                            "                              WHERE ID = ?1 ";
                    CimProcessFlowDO flow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class, backupMainPfObj);
                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    String backupMainPdid = flow.getMainProcessDefinitionID();
                    String backupMainPdobj = flow.getMainProcessDefinitionObj();
                    Boolean backupMainPfState = flow.getState();

                    //--- Get seq_no of backup module from main PF
                    sql = "SELECT IDX_NO,\n" +
                            "                                    STAGE_ID,\n" +
                            "                                    STAGE_RKEY\n" +
                            "                               FROM OMPRF_ROUTESEQ\n" +
                            "                              WHERE REFKEY = ?1\n" +
                            "                                AND LINK_KEY   = ?2 ";
                    CimPFDefinitionListDO definitionList = cimJpaRepository.queryOne(sql, CimPFDefinitionListDO.class, backupMainPfObj, backupModuleNo);
                    Validations.check(CimObjectUtils.isEmpty(definitionList),retCodeConfig.getNotFoundProcessFlow());
                    Integer backupMainPfPdlistSeqno = definitionList.getSequenceNumber();
                    String backupStageId = definitionList.getStageID();
                    String backupStageObj = definitionList.getStageObj();

                    //--- Get backup module PF information
                    sql = "SELECT PRP_ID,\n" +
                            "                                    ACTIVE_FLAG\n" +
                            "                               FROM OMPRF\n" +
                            "                              WHERE ID = ?1 ";
                    flow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class, backupModulePfObj);
                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    String backupModulePdid = flow.getMainProcessDefinitionID();
                    Boolean backupModulePfState = flow.getState();
                    //--- Get seq_no of backup process from module PF
                    sql = "SELECT IDX_NO\n" +
                            "                               FROM OMPRF_PRSSSEQ\n" +
                            "                              WHERE REFKEY = ?1 \n" +
                            "                                AND LINK_KEY  = ?2 ";
                    CimPFPosListDO pfPosList = cimJpaRepository.queryOne(sql, CimPFPosListDO.class,backupModulePfObj, backupModuleOpeNo);
                    Validations.check(CimObjectUtils.isEmpty(pfPosList),retCodeConfig.getNotFoundProcessFlow());
                    Integer backupModulePfPoslistSeqno = pfPosList.getSequenceNumber();

                    //-----------------------------------------------------------------------------
                    // (4-2-3-1) Get previous POS from backup/active module PF
                    //-----------------------------------------------------------------------------
                    if (backupModulePfState) {
                        // Module PF is active, set backup POS's seq_no from backup module PF
                        modulePfObj = backupModulePfObj;
                        modulePfPoslistSeqno = backupModulePfPoslistSeqno;
                        findFlag = true;
                    } else {
                        // Module PF is NOT active, search backup POS's seq_no from active module PF
                        findFlag = false;

                        //--- Get active module PF information
                        String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                        sql = "SELECT ID\n" +
                                "                                   FROM OMPRF\n" +
                                "                                  WHERE PRP_ID = ?1\n" +
                                "                                    AND PRP_LEVEL  = ?2 \n" +
                                "                                    AND ACTIVE_FLAG     = ?3 ";
                        flow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class, backupModulePdid, processDefinitionLevel, hvTrue);
                        Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                        activeModulePfObj = flow.getId();
                        i = 0;
                        while (opeCount < searchCount) {
                            // Search the backup operation by finding the backup module openo on active module PF
                            if (i <= 0) {
                                sql = "SELECT IDX_NO\n" +
                                        "                                           FROM OMPRF_PRSSSEQ\n" +
                                        "                                          WHERE REFKEY = ?1 \n" +
                                        "                                            AND LINK_KEY  = ?2 ";
                                pfPosList = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, activeModulePfObj, backupModuleOpeNo);
                                if (!CimObjectUtils.isEmpty(pfPosList)) {
                                    //--- Set the backup operation seq_no on active module PF
                                    modulePfObj = activeModulePfObj;
                                    modulePfPoslistSeqno = pfPosList.getSequenceNumber();
                                    findFlag = true;
                                    break;
                                } else {
                                    //---------------------------------------------------------------------------
                                    // Set backup POS from inactive backup module PF
                                    //---------------------------------------------------------------------------
                                    Infos.DurableOperationNameAttributes attributes = new Infos.DurableOperationNameAttributes();
                                    attributes.setSeqno(backupSeqNo);
                                    attributes.setRouteID(new ObjectIdentifier(backupMainPdid, backupMainPdobj));
                                    attributes.setOperationNumber(backupOpeNo);
                                    attributes.setStageID(new ObjectIdentifier(backupStageId, backupStageObj));
                                    Infos.ProcessRef processRef = new Infos.ProcessRef();
                                    processRef.setProcessFlow(backupPfObj);
                                    processRef.setProcessOperationSpecification(backupPosObj);
                                    processRef.setMainProcessFlow(backupMainPfObj);
                                    processRef.setModuleNumber(backupModuleNo);
                                    processRef.setModuleProcessFlow(backupModulePfObj);
                                    processRef.setModulePOS(backupModulePosObj);
                                    attributes.setProcessRef(processRef);
                                    opeCount = addDurableOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                                }
                            } else {
                                //--- Get the previous operation seq_no on backup module PF
                                backupModulePfPoslistSeqno--;
                                sql = "SELECT LINK_KEY,\n" +
                                        "                                                PRSS_RKEY\n" +
                                        "                                           FROM OMPRF_PRSSSEQ\n" +
                                        "                                          WHERE REFKEY = ?1 \n" +
                                        "                                            AND IDX_NO  = ?2 ";
                                pfPosList = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, backupModulePfObj, backupModulePfPoslistSeqno);
                                if (!CimObjectUtils.isEmpty(pfPosList)) {
                                    //--- Keep the previous operation information on backup module PF
                                    previousModuleOpeNo = pfPosList.getDKey();
                                    previousModulePosObj = pfPosList.getProcessOperationSpecificationsObj();

                                    //--- Search the corresponding previous module openo from active module PF
                                    sql = "SELECT IDX_NO\n" +
                                            "                                               FROM OMPRF_PRSSSEQ\n" +
                                            "                                              WHERE REFKEY = ?1 \n" +
                                            "                                                AND LINK_KEY  = ?2 ";
                                    pfPosList = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, activeModulePfObj, previousModuleOpeNo);
                                    if (!CimObjectUtils.isEmpty(pfPosList)) {
                                        modulePfObj = activeModulePfObj;
                                        modulePfPoslistSeqno = pfPosList.getSequenceNumber();
                                        findFlag = true;
                                        break;
                                    } else {
                                        //---------------------------------------------------------------------------
                                        // Set previous POS from inactive return module PF
                                        //---------------------------------------------------------------------------
                                        Infos.DurableOperationNameAttributes attributes = new Infos.DurableOperationNameAttributes();
                                        attributes.setSeqno(backupSeqNo);
                                        attributes.setRouteID(new ObjectIdentifier(backupMainPdid, backupMainPdobj));
                                        attributes.setStageID(new ObjectIdentifier(backupStageId, backupStageObj));
                                        attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(backupModuleNo, previousModuleOpeNo));
                                        Infos.ProcessRef processRef = new Infos.ProcessRef();
                                        processRef.setProcessFlow(backupPfObj);
                                        processRef.setMainProcessFlow(backupMainPfObj);
                                        processRef.setModuleNumber(backupModuleNo);
                                        processRef.setModuleProcessFlow(backupModulePfObj);
                                        processRef.setModulePOS(previousModulePosObj);
                                        attributes.setProcessRef(processRef);
                                        opeCount = addDurableOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                                    }
                                } else break;
                            }// end of else if( i == 0 )
                            i++;
                        }// end of while
                    }//end of else if( backupModulePfState == TRUE )
                    if (Objects.equals(opeCount, searchCount)) {
                        return attributesList;
                    }
                    //-----------------------------------------------------------------------------
                    // Set previous POS from active backup module PF
                    //-----------------------------------------------------------------------------
                    if (findFlag) {
                        sql = "SELECT LINK_KEY,\n" +
                                "                                    PRSS_RKEY\n" +
                                "                               FROM OMPRF_PRSSSEQ\n" +
                                "                              WHERE REFKEY = ?1 \n" +
                                "                                AND IDX_NO  <= ?2 \n" +
                                "                           ORDER BY IDX_NO DESC";
                        List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query(sql, CimPFPosListDO.class, modulePfObj, modulePfPoslistSeqno);
                        count2 = 0;
                        while (opeCount < searchCount) {
                            if (CimArrayUtils.isEmpty(processFlowPosLists) || count2 >= processFlowPosLists.size()) break;
                            CimPFPosListDO posList = processFlowPosLists.get(count2);
                            //--- Set previous operation information on active backup module PF
                            Infos.DurableOperationNameAttributes attributes = new Infos.DurableOperationNameAttributes();
                            attributes.setSeqno(backupSeqNo);
                            attributes.setRouteID(new ObjectIdentifier(backupMainPdid));
                            attributes.setStageID(new ObjectIdentifier(backupStageId, backupStageObj));
                            Infos.ProcessRef processRef = new Infos.ProcessRef();
                            processRef.setProcessFlow(backupPfObj);
                            processRef.setMainProcessFlow(backupMainPfObj);
                            processRef.setModuleNumber(backupModuleNo);
                            processRef.setModuleProcessFlow(modulePfObj);
                            attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(backupModuleNo, posList.getDKey()));
                            processRef.setModulePOS(posList.getProcessOperationSpecificationsObj());
                            attributes.setProcessRef(processRef);
                            opeCount = addDurableOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                            count2++;
                        }
                    }
                    if (Objects.equals(opeCount, searchCount)) {
                        return attributesList;
                    }

                    //-----------------------------------------------------------------------------
                    // (4-2-3-2) Get previous module PD from backup/active main PF
                    //-----------------------------------------------------------------------------
                    // If main PF is active, set previous module PD's seq_no from backup main PF
                    if (backupMainPfState) {
                        mainPfObj = backupMainPfObj;
                        mainPfPdlistSeqno = backupMainPfPdlistSeqno - 1;
                        findFlag = true;
                    }
                    // If main PF is NOT active, search previous module PD's seq_no from active main PF
                    else {
                        findFlag = false;
                        //--- Get active main PF information
                        String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE;
                        sql = "SELECT ID\n" +
                                "                                   FROM OMPRF\n" +
                                "                                  WHERE PRP_ID = ?1 \n" +
                                "                                    AND PRP_LEVEL  = ?2 \n" +
                                "                                    AND ACTIVE_FLAG     = ?3 ";
                        flow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class, backupMainPdid, processDefinitionLevel, hvTrue);
                        Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                        activeMainPfObj = flow.getId();
                        i = 0;
                        while (opeCount < searchCount) {
                            // Search the previous module PD by finding the backup module number on active main PF
                            if (i == 0) {
                                sql = "SELECT IDX_NO,\n" +
                                        "                                                ROUTE_ID\n" +
                                        "                                           FROM OMPRF_ROUTESEQ\n" +
                                        "                                          WHERE REFKEY = ?1 \n" +
                                        "                                            AND LINK_KEY  = ?2 ";
                                definitionList = cimJpaRepository.queryOne(sql, CimPFDefinitionListDO.class, activeMainPfObj, backupModuleNo);
                                if (!CimObjectUtils.isEmpty(definitionList)) {
                                    //--- Set the next module PD's seq_no on active module PF
                                    mainPfObj = activeMainPfObj;
                                    mainPfPdlistSeqno = definitionList.getSequenceNumber() - 1;
                                    findFlag = true;
                                    break;
                                }
                            }
                            // Search the previous module PD by finding the previous module number on active main PF
                            else {
                                //--- Get the previous module PD's seq_no on backup main PF
                                backupMainPfPdlistSeqno--;
                                sql = "SELECT ROUTE_ID,\n" +
                                        "                                                ROUTE_NO,\n" +
                                        "                                                STAGE_ID,\n" +
                                        "                                                STAGE_RKEY\n" +
                                        "                                           FROM OMPRF_ROUTESEQ\n" +
                                        "                                          WHERE REFKEY = ?1 \n" +
                                        "                                            AND IDX_NO = ?2 ";
                                definitionList = cimJpaRepository.queryOne(sql, CimPFDefinitionListDO.class, backupMainPfObj, backupMainPfPdlistSeqno);
                                if (!CimObjectUtils.isEmpty(definitionList)) {
                                    //--- Keep the previous module information on backup main PF
                                    previousModulePdid = definitionList.getProcessDefinitionID();
                                    previousModuleNo = definitionList.getModuleNO();
                                    previousStageId = definitionList.getStageID();
                                    previousStageObj = definitionList.getStageObj();

                                    //--- Search the corresponding previous module number from the active main PF
                                    sql = "SELECT IDX_NO\n" +
                                            "                                               FROM OMPRF_ROUTESEQ\n" +
                                            "                                              WHERE REFKEY = ?1 \n" +
                                            "                                                AND LINK_KEY  = ?2 ";
                                    definitionList = cimJpaRepository.queryOne(sql, CimPFDefinitionListDO.class, activeMainPfObj, previousModuleNo);
                                    if (!CimObjectUtils.isEmpty(definitionList)) {
                                        mainPfObj = activeMainPfObj;
                                        mainPfPdlistSeqno = definitionList.getSequenceNumber();
                                        findFlag = true;
                                        break;
                                    } else {
                                        //---------------------------------------------------------------------------
                                        // Set previous POS from active previous module PF and backup(inactive) main PF
                                        //---------------------------------------------------------------------------
                                        //--- Get active module PF information
                                        processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                                        String previousModulePfObj = getActiveProcessFlowObj(previousModulePdid, processDefinitionLevel);

                                        //--- Set previous operation information on active module PF
                                        sql = "SELECT LINK_KEY,\n" +
                                                "                                                    PRSS_RKEY\n" +
                                                "                                               FROM OMPRF_PRSSSEQ\n" +
                                                "                                              WHERE REFKEY = ?1 \n" +
                                                "                                              ORDER BY IDX_NO DESC";
                                        List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query(sql, CimPFPosListDO.class, previousModulePfObj);
                                        count2 = 0;
                                        while (opeCount < searchCount) {
                                            if (CimArrayUtils.isEmpty(processFlowPosLists) || count2 >= processFlowPosLists.size())
                                                break;
                                            CimPFPosListDO posList = processFlowPosLists.get(count2);
                                            //--- Set next operation information on active module PF
                                            Infos.DurableOperationNameAttributes attributes = new Infos.DurableOperationNameAttributes();
                                            attributes.setSeqno(backupSeqNo);
                                            attributes.setRouteID(new ObjectIdentifier(backupMainPdid, backupMainPdobj));
                                            attributes.setStageID(new ObjectIdentifier(previousStageId, previousStageObj));
                                            Infos.ProcessRef processRef = new Infos.ProcessRef();
                                            processRef.setProcessFlow(backupPfObj);
                                            processRef.setMainProcessFlow(backupMainPfObj);
                                            processRef.setModuleNumber(previousModuleNo);
                                            processRef.setModuleProcessFlow(previousModulePfObj);
                                            processRef.setModuleProcessFlow(modulePfObj);
                                            attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(previousModuleNo, posList.getDKey()));
                                            processRef.setModulePOS(posList.getProcessOperationSpecificationsObj());
                                            attributes.setProcessRef(processRef);
                                            opeCount = addDurableOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                                            count2++;
                                        }
                                    }
                                } else break;
                            }// end of else if( i == 0 )
                            i++;
                        }// end of while
                    }// end of else if( mainPFState == TRUE )
                    if (Objects.equals(opeCount, searchCount)) {
                        return attributesList;
                    }

                    //-----------------------------------------------------------------------------
                    // Set previous POS from active previous module PF and active main PF
                    //-----------------------------------------------------------------------------
                    if (findFlag) {
                        //--- Get previous module pdid, module_no from active main PF
                        sql = "SELECT ROUTE_ID,\n" +
                                "                                    ROUTE_NO,\n" +
                                "                                    STAGE_ID,\n" +
                                "                                    STAGE_RKEY\n" +
                                "                               FROM OMPRF_ROUTESEQ\n" +
                                "                              WHERE REFKEY = ?1 \n" +
                                "                                AND IDX_NO <= ?2 \n" +
                                "                           ORDER BY IDX_NO DESC";
                        List<CimPFDefinitionListDO> pfPdLists = cimJpaRepository.query(sql, CimPFDefinitionListDO.class, mainPfObj, mainPfPdlistSeqno);
                        count2 = 0;
                        while (true) {
                            if (CimArrayUtils.isEmpty(pfPdLists) || count2 >= pfPdLists.size()) break;
                            CimPFDefinitionListDO flowDefinitionList = pfPdLists.get(count2);
                            if (CimObjectUtils.isEmpty(flowDefinitionList)) break;
                            //--- Get active module PF information
                            String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                            String processFlowObj = getActiveProcessFlowObj(flowDefinitionList.getProcessDefinitionID(), processDefinitionLevel);
                            //--- Set previous operation information on active module PF
                            sql = "SELECT LINK_KEY,\n" +
                                    "                                       PRSS_RKEY\n" +
                                    "                                  FROM OMPRF_PRSSSEQ\n" +
                                    "                                 WHERE REFKEY = ?1 \n" +
                                    "                              ORDER BY IDX_NO DESC";
                            List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query(sql, CimPFPosListDO.class, processFlowObj);
                            count3 = 0;
                            while (opeCount < searchCount) {
                                if (CimArrayUtils.isEmpty(processFlowPosLists) || count3 >= processFlowPosLists.size())
                                    break;
                                CimPFPosListDO posList = processFlowPosLists.get(count3);
                                Infos.DurableOperationNameAttributes attributes = new Infos.DurableOperationNameAttributes();
                                attributes.setSeqno(backupSeqNo);
                                attributes.setRouteID(new ObjectIdentifier(backupMainPdid, backupMainPdobj));
                                attributes.setStageID(new ObjectIdentifier(flowDefinitionList.getStageID(), flowDefinitionList.getStageObj()));
                                Infos.ProcessRef processRef = new Infos.ProcessRef();
                                processRef.setProcessFlow(backupPfObj);
                                processRef.setModuleProcessFlow(processFlowObj);
                                processRef.setModuleNumber(flowDefinitionList.getModuleNO());
                                processRef.setMainProcessFlow(mainPfObj);
                                attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(flowDefinitionList.getModuleNO(), posList.getDKey()));
                                processRef.setModulePOS(posList.getProcessOperationSpecificationsObj());
                                attributes.setProcessRef(processRef);
                                opeCount = addDurableOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                                count3++;
                            }
                            count2++;
                        }
                    }// end of if( findFlag == TRUE )
                    count++;
                }// end of while( CURSOR AF35_17 )
            }// end of (4-2)
        }
        return attributesList;
    }

    private int addDurableOperationNameAttributes(Infos.ObjCommon objCommon, List<Infos.DurableOperationNameAttributes> operationAttributesList, Infos.DurableOperationNameAttributes attributes,
                                                  ObjectIdentifier searchRouteID, String searchOperationNumber, int opeCount, int searchCount) {
        operationAttributesList.add(attributes);
        Infos.DurableOperationNameAttributes lastValue = this.processOperationListForDurableHelperDR(objCommon, attributes);
        opeCount++;
        if (opeCount < searchCount && ObjectIdentifier.equalsWithValue(lastValue.getRouteID(), searchRouteID)
                && lastValue.getOperationNumber().equals(searchOperationNumber)) {
            opeCount = searchCount;
        }
        return opeCount;
    }

    @Override
    public void processActualCompInformationSet(Infos.ObjCommon objCommon, List<Infos.StartCassette> startCassettes) {
        /*-------------------------*/
        /*   Check lot Condition   */
        /*-------------------------*/
        for (Infos.StartCassette startCassette : startCassettes) {
            List<Infos.LotInCassette> lotInCassettes = startCassette.getLotInCassetteList();
            for (Infos.LotInCassette lotInCassette : lotInCassettes) {
                if (!lotInCassette.getMoveInFlag()) {
                    continue;
                }
                /*--------------------*/
                /*   Get lot Object   */
                /*--------------------*/
                com.fa.cim.newcore.bo.product.CimLot lot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotInCassette.getLotID());
                Validations.check(null == lot, new OmCode(retCodeConfig.getNotFoundLot(), lotInCassette.getLotID().getValue()));
                /*-------------------------------------------*/
                /*   Get and Check lot's Process Operation   */
                /*-------------------------------------------*/
                com.fa.cim.newcore.bo.pd.CimProcessOperation processOperation = lot.getProcessOperation();
                if (processOperation != null) {
                    processOperation.setActualCompTimeStamp(objCommon.getTimeStamp().getReportTimeStamp());
                    CimMachine aMachine = processOperation.getAssignedMachine();
                    if (aMachine != null) {
                        com.fa.cim.newcore.bo.recipe.CimMachineRecipe aMachineRecipe = processOperation.getAssignedMachineRecipe();
                        String updateRecipeFlagStr = StandardProperties.OM_UPDATE_LAST_USED_RECIPE.getValue();
                        int updateRecipeFlag = CimStringUtils.isEmpty(updateRecipeFlagStr) ? 0 : Integer.parseInt(updateRecipeFlagStr);
                        if (updateRecipeFlag != 0) {
                            aMachine.setUsedMachineRecipe(aMachineRecipe);
                        }
                    } else {
                        Validations.check(true, new OmCode(retCodeConfig.getNotFoundEquipment(), "*****"));
                    }
                } else {
                    Validations.check(true, new OmCode(retCodeConfig.getNotFoundProcessOperation(), "*****", lotInCassette.getLotID().getValue()));
                }
            }
        }
    }

    @Override
    public Outputs.ObjProcessMoveOut processMove(Infos.ObjCommon objCommon, ObjectIdentifier lotId) {
        CimLot aLot = baseCoreFactory.getBO(CimLot.class, lotId);
        Validations.check(aLot == null, new OmCode(retCodeConfig.getNotFoundLot(), lotId.getValue()));
        //--------------------------------------------------------------------------------------------------
        // (1) Remove aLot from current dispatching queue
        //--------------------------------------------------------------------------------------------------
        dispatchingManager.removeFromQueue(aLot);

        //--------------------------------------------------------------------------------------------------
        // (2) Move operation ( Set next operation into the position of current operation )
        //--------------------------------------------------------------------------------------------------
        aLot.beginNextProcessOperation() ;
        //--------------------------------------------------------------------------------------------------
        // (3) Set out autoBankInFlag.
        //--------------------------------------------------------------------------------------------------
        CimProcessOperation aProcessOperation = aLot.getProcessOperation() ;
        Validations.check(aProcessOperation == null,new OmCode(retCodeConfig.getNotFoundOperation(),""));

        Boolean autoBankInFlag     = false;
        Boolean bankInRequiredFlag = false;
        autoBankInFlag = aProcessOperation.isAutoBankInRequired() ;
        if (CimBooleanUtils.isTrue(autoBankInFlag)) {
            bankInRequiredFlag = aLot.isBankInRequired();
        }
        Outputs.ObjProcessMoveOut strProcessMoveOut=new Outputs.ObjProcessMoveOut();
        if ( CimBooleanUtils.isTrue(autoBankInFlag)  &&
                CimBooleanUtils.isTrue(bankInRequiredFlag)  ) {
            strProcessMoveOut.setAutoBankInFlag ( TRUE );
        } else {
            strProcessMoveOut.setAutoBankInFlag ( FALSE );
        }

        //--------------------------------------------------------------------------------------------------
        // (4) Remove aLot from the flowBatch
        //--------------------------------------------------------------------------------------------------
        CimFlowBatch aFlowBatch = aLot.getFlowBatch();
        if( aFlowBatch!=null ) {
            Boolean flowBatchEntryFlag = aProcessOperation.isFlowBatchEntryOperation() ;
            int flowBatchOpeCount = 0;
            if( CimBooleanUtils.isFalse(flowBatchEntryFlag) ) {
                flowBatchOpeCount = aProcessOperation.getFlowBatchOperationCount() ;
            }
            if( (CimBooleanUtils.isTrue(flowBatchEntryFlag) ) || ( flowBatchOpeCount == 0 ) ) {
                dispatchingManager.removeFlowBatch( aFlowBatch ) ;
            }
        }

        //--------------------------------------------------------------------------------------------------
        // (5) Add aLot into new current dispatching queue
        //--------------------------------------------------------------------------------------------------
        Boolean addToQueueErrFlag ;
        addToQueueErrFlag = FALSE ;
        if ( CimStringUtils.equals(objCommon.getTransactionID(), TransactionIDEnum.GATE_PASS_REQ.getValue()) ) {
            /*--------------------------------------------------------------------------------------------*/
            /* transaction : GatePass                                                                     */
            /*--------------------------------------------------------------------------------------------*/
            dispatchingManager.addToQueue( aLot ) ;
        } else {
            /*--------------------------------------------------------------------------------------------*/
            /* transaction : OpeComp,ForceOpeComp,OpeCompForInternalBuffer,ForceOpeCompForInternalBuffer  */
            /*--------------------------------------------------------------------------------------------*/
            try {
                dispatchingManager.addToQueue( aLot ) ;
            }catch (ServiceException ex){
                addToQueueErrFlag = TRUE ;
            }
        }

        //--------------------------------------------------------------------------------------------------
        // (6) Change lot production state.
        //--------------------------------------------------------------------------------------------------
        CimPerson aPerson = baseCoreFactory.getBO(CimPerson.class,objCommon.getUser().getUserID());
        try {
            aLot.changeProductionStateBy(CimDateUtils.getTimestampAsString(objCommon.getTimeStamp().getReportTimeStamp()), aPerson) ;
        }catch (ServiceException ex){
            Validations.check(true,new OmCode(retCodeConfig.getInvalidStateTrans(),"*****", "*****"));
        }

        //set required carrier category for lot
        contaminationMethod.lotReqCastCategorySetForPP(lotId);

        //--------------------------------------------------------------------------------------------------
        // (6) Set Last Claim Time and Last Claim Person
        //--------------------------------------------------------------------------------------------------
        aLot.setLastClaimedTimeStamp( objCommon.getTimeStamp().getReportTimeStamp() ) ;
        aLot.setLastClaimedPerson( aPerson );
        Validations.check(TRUE.equals(addToQueueErrFlag),retCodeConfig.getAddToQueueFail());
        return strProcessMoveOut;
    }

    @Override
    public void processCheckSplit(Infos.ObjCommon objCommon, ObjectIdentifier mergedRouteID, String mergedOperationNumber, String returnOperationNumber) {
        if (CimStringUtils.isEmpty(mergedOperationNumber) || CimStringUtils.isEmpty(returnOperationNumber)){
            //ok
            return;
        }
        if (CimStringUtils.equals(mergedOperationNumber,returnOperationNumber)){
            //ok
            return;
        }
        com.fa.cim.newcore.bo.pd.CimProcessDefinition processDefinition = baseCoreFactory.getBO(com.fa.cim.newcore.bo.pd.CimProcessDefinition.class, mergedRouteID);
        Validations.check(CimObjectUtils.isEmpty(processDefinition),retCodeConfig.getNotFoundProcessDefinition());
        com.fa.cim.newcore.bo.pd.CimProcessFlow processFlow = processDefinition.getActiveMainProcessFlow();
        if (CimBooleanUtils.isTrue(processFlow.isNewlyCreated())){
            processFlow = processDefinition.getPreviousActiveMainProcessFlow();
            Validations.check(CimObjectUtils.isEmpty(processFlow),retCodeConfig.getNotFoundProcessFlow());
        }
        com.fa.cim.newcore.bo.pd.CimProcessFlow aModulePF = null;
        Boolean isAfterOperationNumber = processFlow.isAfterOperationNumberForMain(aModulePF, mergedOperationNumber, returnOperationNumber);
        Validations.check(CimBooleanUtils.isFalse(isAfterOperationNumber),retCodeConfigEx.getSpMergeOperationEarly());
    }

    @Override
    public Outputs.ObjProcessCompareCurrentOut processCompareCurrent(Infos.ObjCommon objCommon, ObjectIdentifier parentLotID, ObjectIdentifier mergedRouteID, String mergedOperationNumber) {

        Outputs.ObjProcessCompareCurrentOut resultObject = new Outputs.ObjProcessCompareCurrentOut();
        com.fa.cim.newcore.bo.product.CimLot lot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, parentLotID);
        Validations.check(null == lot,retCodeConfig.getNotFoundLot());
        //-------------------------------------------------------------------------------------
        // Set current route information into out-parameters
        //-------------------------------------------------------------------------------------
        com.fa.cim.newcore.bo.pd.CimProcessOperation processOperation = lot.getProcessOperation();
        Validations.check(null == processOperation,retCodeConfig.getNotFoundProcessOperation());
        com.fa.cim.newcore.bo.pd.CimProcessDefinition processDefinition = processOperation.getMainProcessDefinition();
        Validations.check(null == processDefinition,retCodeConfig.getNotFoundProcessDefinition());

        ObjectIdentifier currentRouteID = new ObjectIdentifier(processDefinition.getIdentifier(),processDefinition.getPrimaryKey());
        resultObject.setCurrentRouteID(currentRouteID);

        String currentOperationNumber = processOperation.getOperationNumber();
        resultObject.setCurrentOperationNumber(currentOperationNumber);

        com.fa.cim.newcore.bo.pd.CimProcessFlow mainProcessFlow = processDefinition.getActiveMainProcessFlow();
        Validations.check(mainProcessFlow == null,retCodeConfig.getNotFoundProcessFlow());
        if (mainProcessFlow.isNewlyCreated()){
            mainProcessFlow = processDefinition.getPreviousActiveMainProcessFlow();
            Validations.check(null == mainProcessFlow,retCodeConfig.getNotFoundProcessFlow());
        }

        mergedOperationNumber = CimStringUtils.isEmpty(mergedOperationNumber) ? "0" : mergedOperationNumber;

        if (CimStringUtils.equals(mergedOperationNumber,currentOperationNumber)
                && ObjectIdentifier.equalsWithValue(mergedRouteID, currentRouteID)) {
            throw new ServiceException(retCodeConfig.getCurrentToperationSame(),resultObject);
        } else if (mainProcessFlow.isAfterOperationNumberForMain( null, mergedOperationNumber, processOperation.getOperationNumber())){
            if (CimBooleanUtils.isTrue(mainProcessFlow.isAfterOperationNumberForMain( null, mergedOperationNumber, processOperation.getOperationNumber()))){
                throw new ServiceException(retCodeConfig.getCurrentToperationEarly(),resultObject);
            }
        } else {
            throw new ServiceException(retCodeConfig.getCurrentToperationLate(),resultObject);
        }
        return resultObject;
    }

    @Override
    public Outputs.ObjProcessResourceStateConvertOut processResourceStateConvert(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, List<Infos.EqpChamberStatus> chamberStatuses) {
        Outputs.ObjProcessResourceStateConvertOut out = new Outputs.ObjProcessResourceStateConvertOut();

        List<Infos.EqpChamberStatus> statuses = Lists.newArrayList();
        out.setEqpChamberStatusCheckResults(statuses);

        //  sort the sequence strEqpChamberStatus by chamberStatusCode
        chamberStatuses.sort(Comparator.comparing(status -> status.getChamberStatusCode().getValue()));

        Map<String, ObjectIdentifier> convertMap = Maps.newHashMap();
        chamberStatuses.forEach(status -> {
            Infos.EqpChamberStatus tmp = new Infos.EqpChamberStatus();
            tmp.setChamberID(status.getChamberID());

            ObjectIdentifier convertState = convertMap.get(status.getChamberStatusCode().getValue());
            if (convertState != null) {
                tmp.setChamberStatusCode(convertState);
            } else {
                Outputs.ObjEquipmentStateConvertOut convertOut = equipmentMethod.equipmentStateConvertV2(
                        equipmentID, status.getChamberStatusCode());
                tmp.setChamberStatusCode(convertOut.getConvertedStatusCode());
                convertMap.put(status.getChamberStatusCode().getValue(), convertOut.getConvertedStatusCode());
            }

            statuses.add(tmp);
        });

        return out;
    }

    private void cloneEqpChamberStatusList(List<Infos.EqpChamberStatus> sources, List<Infos.EqpChamberStatus> destinations) {
        if (destinations == null) {
            destinations = new ArrayList<>();
        }
        for (Infos.EqpChamberStatus source : sources) {
            Infos.EqpChamberStatus destination = new Infos.EqpChamberStatus();
            destination.setChamberID(source.getChamberID());
            destination.setChamberStatusCode(source.getChamberStatusCode());

            destinations.add(destination);
        }
    }

    @Override
    public void processStartReserveInformationSet(Infos.ObjCommon objCommon,
                                                  ObjectIdentifier equipmentID,
                                                  String portGroupID,
                                                  ObjectIdentifier controlJobID,
                                                  List<Infos.StartCassette> startCassetteList,
                                                  boolean processJobPauseFlag) {
        //【step1】set controlJobID and start info into cassette/lot
        log.debug("【step1】set controlJobID and start info into cassette/lot");
        CimControlJob controlJob = baseCoreFactory.getBO(CimControlJob.class, controlJobID);
        Validations.check(null == controlJob,retCodeConfig.getNotFoundControlJob());

        int startCassetteSize = CimArrayUtils.getSize(startCassetteList);
        for (int i = 0; i < startCassetteSize; i++) {
            Infos.StartCassette startCassetteObj = startCassetteList.get(i);
            //【step1-1】get cassette object
            log.debug("【step1-1】get cassette object");
            CimCassette cassette = baseCoreFactory.getBO(CimCassette.class, startCassetteObj.getCassetteID());
            Validations.check(cassette == null, new OmCode(retCodeConfig.getNotFoundCassette(), startCassetteObj.getCassetteID().getValue()));
            //【step1-2】set controlJobID
            cassette.setControlJob(controlJob);
            int lotInCassetteSize = CimArrayUtils.getSize(startCassetteObj.getLotInCassetteList());
            for (int j = 0; j < lotInCassetteSize; j++) {
                Infos.LotInCassette lotInCassetteObj = startCassetteObj.getLotInCassetteList().get(j);
                //【step1-3】omit not start not
                log.debug("【step1-3】omit not start not");
                boolean operationStartFlag = lotInCassetteObj.getMoveInFlag();
                if (!operationStartFlag) {
                    continue;
                }

                //【step1-4】get lot object
                log.debug("【step1-4】get lot object");
                CimLot lot = baseCoreFactory.getBO(CimLot.class, lotInCassetteObj.getLotID());
                Validations.check(null == lot, new OmCode(retCodeConfig.getNotFoundLot(), lotInCassetteObj.getLotID().getValue()));
                //【step1-5】set controlJobID
                lot.setControlJob(controlJob);
                //【step1-6】get current po
                CimProcessOperation processOperation = lot.getProcessOperation();
                Validations.check(null == processOperation, new OmCode(retCodeConfig.getNotFoundProcessOperation(), "", lotInCassetteObj.getLotID().getValue()));

                //【step1-7】prepare recipe parameter set info
                int lotWaferSize = CimArrayUtils.getSize(lotInCassetteObj.getLotWaferList());
                int startRecipeParameterSize = 0;
                if (lotWaferSize > 0) {
                    startRecipeParameterSize = CimArrayUtils.getSize(lotInCassetteObj.getLotWaferList().get(0).getStartRecipeParameterList());
                }

                List<ProcessDTO.StartRecipeParameterSetInfo> parameterSetInfoList = new ArrayList<>();
                if (0 == startRecipeParameterSize) {
                    Infos.StartRecipeParameterSetInfo parameterSetInfo = new Infos.StartRecipeParameterSetInfo();
                    parameterSetInfo.setSetNumber(1);

                    // set the sequence of start recipe parameter
                    Infos.StartRecipeParameter recipeParameter = new Infos.StartRecipeParameter();
                    recipeParameter.setParameterName("");
                    recipeParameter.setParameterValue("");
                    recipeParameter.setTargetValue("");
                    recipeParameter.setUseCurrentSettingValueFlag(false);
                    List<Infos.StartRecipeParameter> startRecipeParameterList = new ArrayList<>();

                    /*
                     //【bear】【Bug-1729】in fact, the source code add the dummy data into startRecipeParameterList, but we neen't do
                    // means, if we run int common eqp which don't set the Recipe Parameter value, so we neen't set the recipeParameterList and applyWaferInfoList
                    // at resut, the FRPO_ASGNRPRM_APWF and FRPO_ASGNRPRM_PRM don't store the data.
                    startRecipeParameterList.add(recipeParameter);
                    parameterSetInfo.setRecipeParameterList(startRecipeParameterList);

                    //set the sequence of parameter apply wafer info
                    List<Infos.ParameterApplyWaferInfo> applyWaferInfoList = new ArrayList<>();
                    for (int k = 0; k < lotWaferSize; k++) {
                        Infos.LotWafer lotWafer = lotInCassetteObj.getLotWaferList().get(k);
                        Infos.ParameterApplyWaferInfo applyWaferInfo = new Infos.ParameterApplyWaferInfo();
                        applyWaferInfo.setWaferID(lotWafer.getWaferID());
                        applyWaferInfo.setSlotNumber(lotWafer.getSlotNumber());
                        applyWaferInfo.setControlWaferFlag(lotWafer.getControlWaferFlag());
                        applyWaferInfoList.add(applyWaferInfo);
                    }
                    parameterSetInfo.setApplyWaferInfoList(applyWaferInfoList);
                    parameterSetInfoList.add(parameterSetInfo);
                    */
                } else {
                    String recipeParameterChangeType = lotInCassetteObj.getRecipeParameterChangeType();
                    if (CimStringUtils.equals(BizConstant.SP_RPARM_CHANGETYPE_BYLOT, recipeParameterChangeType)) {
                        ProcessDTO.StartRecipeParameterSetInfo parameterSetInfo = new ProcessDTO.StartRecipeParameterSetInfo();
                        parameterSetInfo.setSetNumber(1);

                        // set the sequence of start recipe parameter
                        List<ProcessDTO.StartRecipeParameter> startRecipeParameterList = new ArrayList<>();
                        for (int k = 0; k < startRecipeParameterSize; k++) {
                            Infos.StartRecipeParameter startRecipeParameter = lotInCassetteObj.getLotWaferList().get(0).getStartRecipeParameterList().get(k);
                            ProcessDTO.StartRecipeParameter recipeParameter = new ProcessDTO.StartRecipeParameter();
                            recipeParameter.setParameterName(startRecipeParameter.getParameterName());
                            recipeParameter.setParameterValue(startRecipeParameter.getParameterValue());
                            recipeParameter.setTargetValue(startRecipeParameter.getTargetValue());
                            recipeParameter.setUseCurrentSettingValueFlag(startRecipeParameter.getUseCurrentSettingValueFlag());
                            startRecipeParameterList.add(recipeParameter);
                        }
                        parameterSetInfo.setRecipeParameterList(startRecipeParameterList);

                        //set the sequence of parameter apply wafer info
                        List<ProcessDTO.ParameterApplyWaferInfo> applyWaferInfoList = new ArrayList<>();
                        for (int k = 0; k < lotWaferSize; k++) {
                            Infos.LotWafer lotWafer = lotInCassetteObj.getLotWaferList().get(k);
                            ProcessDTO.ParameterApplyWaferInfo applyWaferInfo = new ProcessDTO.ParameterApplyWaferInfo();
                            applyWaferInfo.setSlotNumber(lotWafer.getSlotNumber());
                            applyWaferInfo.setWaferID(lotWafer.getWaferID());
                            applyWaferInfo.setControlWaferFlag(lotWafer.getControlWaferFlag());
                            applyWaferInfoList.add(applyWaferInfo);
                        }
                        parameterSetInfo.setApplyWaferInfoList(applyWaferInfoList);
                        parameterSetInfoList.add(parameterSetInfo);
                    } else {
                        for (int k = 0; k < lotWaferSize; k++) {
                            Infos.LotWafer lotWafer = lotInCassetteObj.getLotWaferList().get(k);
                            ProcessDTO.StartRecipeParameterSetInfo parameterSetInfo = new ProcessDTO.StartRecipeParameterSetInfo();
                            parameterSetInfo.setSetNumber(k + 1);

                            // set the sequence of start recipe parameter
                            List<ProcessDTO.StartRecipeParameter> startRecipeParameterList = new ArrayList<>();
                            for (int l = 0; l < startRecipeParameterSize; l++) {
                                Infos.StartRecipeParameter startRecipeParameter = lotInCassetteObj.getLotWaferList().get(k).getStartRecipeParameterList().get(l);
                                ProcessDTO.StartRecipeParameter recipeParameter = new ProcessDTO.StartRecipeParameter();
                                recipeParameter.setTargetValue(startRecipeParameter.getTargetValue());
                                recipeParameter.setParameterName(startRecipeParameter.getParameterName());
                                recipeParameter.setParameterValue(startRecipeParameter.getParameterValue());
                                recipeParameter.setUseCurrentSettingValueFlag(startRecipeParameter.getUseCurrentSettingValueFlag());
                                startRecipeParameterList.add(recipeParameter);
                            }
                            parameterSetInfo.setRecipeParameterList(startRecipeParameterList);

                            //set the sequence of parameter apply wafer info
                            List<ProcessDTO.ParameterApplyWaferInfo> applyWaferInfoList = new ArrayList<>();
                            ProcessDTO.ParameterApplyWaferInfo applyWaferInfo = new ProcessDTO.ParameterApplyWaferInfo();
                            applyWaferInfo.setSlotNumber(lotWafer.getSlotNumber());
                            applyWaferInfo.setWaferID(lotWafer.getWaferID());
                            applyWaferInfo.setControlWaferFlag(lotWafer.getControlWaferFlag());
                            applyWaferInfoList.add(applyWaferInfo);
                            parameterSetInfo.setApplyWaferInfoList(applyWaferInfoList);
                            parameterSetInfoList.add(parameterSetInfo);
                        }
                    }
                }

                //【step1-8】set start info to current po
                log.debug("【step1-8】set start info to current po");
                ProcessDTO.ActualStartInformationForPO actualStartInfo = new ProcessDTO.ActualStartInformationForPO();

                CimMachine equipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
                Validations.check(null == equipment, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
                ObjectIdentifier idIdentifier = equipmentID;
                //【step1-8-1】set pmcmg info
                actualStartInfo.setAssignedMachine(idIdentifier);

                //【step1-8-2】set port group info
                actualStartInfo.setAssignedPortGroup(portGroupID);

                //【step1-8-3】set recipe info
                actualStartInfo.setAssignedLogicalRecipe(lotInCassetteObj.getStartRecipe().getLogicalRecipeID());
                actualStartInfo.setAssignedMachineRecipe(lotInCassetteObj.getStartRecipe().getMachineRecipeID());
                // chamber level recipe 处理
                if (ObjectIdentifier.isNotEmptyWithValue(lotInCassetteObj.getStartRecipe().getChamberLevelRecipeID())) {
                    actualStartInfo.setAssignedPhysicalRecipe(
                            ObjectIdentifier.fetchValue(lotInCassetteObj.getStartRecipe().getChamberLevelRecipeID())
                    );
                } else {
                    actualStartInfo.setAssignedPhysicalRecipe(lotInCassetteObj.getStartRecipe().getPhysicalRecipeID());
                }

                //【step1-8-4】set reticle info
                int startReticleSize = CimArrayUtils.getSize(lotInCassetteObj.getStartRecipe().getStartReticleList());
                List<ProcessDTO.StartReticleInfo> startReticleList = new ArrayList<>();
                actualStartInfo.setAssignedReticles(startReticleList);
                for (int m = 0; m < startReticleSize; m++) {
                    ProcessDTO.StartReticleInfo startReticle = new ProcessDTO.StartReticleInfo();
                    startReticle.setSequenceNumber(lotInCassetteObj.getStartRecipe().getStartReticleList().get(m).getSequenceNumber());
                    startReticle.setReticleID(lotInCassetteObj.getStartRecipe().getStartReticleList().get(m).getReticleID());
                    startReticleList.add(startReticle);
                    CimProcessDurable aReticle = baseCoreFactory.getBO(CimProcessDurable.class, startReticle.getReticleID());
                    Validations.check(aReticle == null, new OmCode(retCodeConfig.getNotFoundReticle(), startReticle.getReticleID().getValue()));
                    /*********************************************/
                    /* get existing control jobs in this reticle */
                    /*********************************************/
                    List<com.fa.cim.newcore.bo.product.CimControlJob> controlJobs = aReticle.allReservedControlJobs();
                    //********************************************//*
                    //* check all controlJobs is on same machine *//*
                    //********************************************//*
                    CimMachine aMachine = controlJob.getMachine();
                    Validations.check(null == aMachine,retCodeConfig.getNotFoundMachine());
                    Boolean ctrlJobFlag = false;
                    Integer nMachineLen = CimArrayUtils.getSize(controlJobs);
                    CimMachine currMachine = null;
                    for (int l = 0; l < nMachineLen; l++) {
                        currMachine = controlJob.getMachine();
                        Validations.check(null == currMachine,retCodeConfig.getNotFoundMachine());
                        String environmentVariableValueStr = StandardProperties.OM_RETICLE_RETRIEVE_WHEN_LOT_PROCESS.getValue();
                        int environmentVariableValue = CimStringUtils.isEmpty(environmentVariableValueStr) ? 0 : Integer.parseInt(environmentVariableValueStr);
                        if (0 == Integer.valueOf(environmentVariableValue)) {
                            //************************************************************************************//*
                            //* Compare with current Machine name and additional machine name                    *//*
                            //* If these machine name are different, this function should be return error code   *//*
                            //************************************************************************************//*
                            String machineString = aMachine.getIdentifier();
                            String curMachineString = currMachine.getIdentifier();
                            Validations.check(!machineString.equals(curMachineString),new OmCode(retCodeConfig.getReticleRsvedForDiffEqp(), startReticle.getReticleID().getValue()));
                        }
                        String reservedControlJob = controlJobs.get(l).getIdentifier();
                        if (ObjectIdentifier.equalsWithValue(controlJobID, reservedControlJob)) {
                            ctrlJobFlag = true;
                        }
                    }
                    if (!ctrlJobFlag){
                        aReticle.addReservedControlJob(controlJob);
                    }
                }
                //【step1-8-4】set fixture info
                int fixtureSize = CimArrayUtils.getSize(lotInCassetteObj.getStartRecipe().getStartFixtureList());

                List<Infos.StartFixtureInfo> startFixtureListTmp = lotInCassetteObj.getStartRecipe().getStartFixtureList();
                List<ProcessDTO.StartFixtureInfo> startFixtureList = Optional.ofNullable(startFixtureListTmp).map(data -> data.stream().map(startFixtureInfo -> {
                    ProcessDTO.StartFixtureInfo fixtureInfo = new ProcessDTO.StartFixtureInfo();
                    fixtureInfo.setFixtureID(startFixtureInfo.getFixtureID());
                    fixtureInfo.setFixtureCategory(startFixtureInfo.getFixtureCategory());
                    return fixtureInfo;
                }).collect(Collectors.toList())).orElseGet(Collections::emptyList);
                actualStartInfo.setAssignedFixtures(startFixtureList);

                //【step1-8-5】set recipe parameter info
                actualStartInfo.setAssignedRecipeParameterChangeType(lotInCassetteObj.getRecipeParameterChangeType());
                actualStartInfo.setAssignedRecipeParameterSets(parameterSetInfoList);

                /************************************************************************************/
                /*【step1-8-6】set data collection info                                             */
                /*    - process_startReserveInformation_Set__090 (line: 462 - 614) - DC: can ship   */
                /************************************************************************************/
                Boolean dataColloectionFlag = lotInCassetteObj.getStartRecipe().getDataCollectionFlag();
                actualStartInfo.setAssignedDataCollectionFlag(dataColloectionFlag);

                // zqi: EDC 性能优化
                final boolean edcItemsInformationExist = this.edcItemsInformationExist(objCommon, lotInCassetteObj.getLotID());
                actualStartInfo.setEdcInformationUpdateFlag(!edcItemsInformationExist);
                // MoveInReserve、MoveIn相关的接口将不在执行下面逻辑，将此逻辑的移入PostPocess中执行
                if (CimBooleanUtils.isTrue(dataColloectionFlag)
                        && TransactionIDEnum.RECIPE_PARAMETER_ADJUST_REQ.equals(objCommon.getTransactionID()) // EDC 性能优化
                ) {
                    log.debug("assignedDataCollectionFlag == TRUE");
                    int dcLen = CimArrayUtils.getSize(lotInCassetteObj.getStartRecipe().getDcDefList());
                    List<ProcessDTO.DataCollectionInfo> assignedDataCollectionList = new ArrayList<>();
                    for (int k = 0; k < dcLen; k++) {
                        Infos.DataCollectionInfo sourceDcDef = lotInCassetteObj.getStartRecipe().getDcDefList().get(k);
                        ProcessDTO.DataCollectionInfo targetDcDef = new ProcessDTO.DataCollectionInfo();
                        targetDcDef.setDataCollectionDefinitionID(sourceDcDef.getDataCollectionDefinitionID());
                        targetDcDef.setDescription(sourceDcDef.getDescription());
                        targetDcDef.setDataCollectionType(sourceDcDef.getDataCollectionType());
                        targetDcDef.setCalculationRequiredFlag(sourceDcDef.getCalculationRequiredFlag());
                        targetDcDef.setSpecCheckRequiredFlag(sourceDcDef.getSpecCheckRequiredFlag());
                        targetDcDef.setDataCollectionSpecificationID(sourceDcDef.getDataCollectionSpecificationID());
                        ObjectIdentifier dataCollectionSpecificationID = sourceDcDef.getDataCollectionSpecificationID();
                        if (ObjectIdentifier.isNotEmptyWithValue(dataCollectionSpecificationID)) {
                            if (CimStringUtils.isEmpty(sourceDcDef.getDescription())) {
                                // get DCSpec Object
                                com.fa.cim.newcore.bo.dc.CimDataCollectionSpecification dataCollectionSpec = baseCoreFactory.getBO(com.fa.cim.newcore.bo.dc.CimDataCollectionSpecification.class, sourceDcDef.getDataCollectionSpecificationID());
                                Validations.check(null == dataCollectionSpec,retCodeConfig.getNotFoundDcspec());
                                // get and set description of DCSpec
                                targetDcDef.setDcSpecDescription(dataCollectionSpec.getDescription());
                            } else {
                                targetDcDef.setDcSpecDescription(sourceDcDef.getDcSpecDescription());
                            }
                        }
                        targetDcDef.setPreviousDataCollectionDefinitionID(sourceDcDef.getPreviousDataCollectionDefinitionID());
                        targetDcDef.setPreviousOperationID(sourceDcDef.getPreviousOperationID());
                        targetDcDef.setPreviousOperationNumber(sourceDcDef.getPreviousOperationNumber());

                        int dcItemSize = CimArrayUtils.getSize(sourceDcDef.getDcItems());
                        List<ProcessDTO.DataCollectionItemInfo> targetDcItemList = new ArrayList<>();
                        for (int l = 0; l < dcItemSize; l++) {
                            Infos.DataCollectionItemInfo sourceDcItem = sourceDcDef.getDcItems().get(l);
                            ProcessDTO.DataCollectionItemInfo targetDcItem = new ProcessDTO.DataCollectionItemInfo();
                            targetDcItem.setDataCollectionItemName(sourceDcItem.getDataCollectionItemName());
                            targetDcItem.setDataCollectionMode(sourceDcItem.getDataCollectionMode());
                            targetDcItem.setDataCollectionUnit(sourceDcItem.getDataCollectionUnit());
                            targetDcItem.setDataType(sourceDcItem.getDataType());
                            targetDcItem.setItemType(sourceDcItem.getItemType());
                            targetDcItem.setMeasurementType(sourceDcItem.getMeasurementType());
                            targetDcItem.setWaferID(sourceDcItem.getWaferID());
                            targetDcItem.setWaferPosition(sourceDcItem.getWaferPosition());
                            targetDcItem.setSitePosition(sourceDcItem.getSitePosition());
                            targetDcItem.setHistoryRequiredFlag(sourceDcItem.getHistoryRequiredFlag());
                            targetDcItem.setCalculationType(sourceDcItem.getCalculationType());
                            targetDcItem.setCalculationExpression(sourceDcItem.getCalculationExpression());
                            targetDcItem.setDataValue(sourceDcItem.getDataValue());
                            targetDcItem.setTargetValue(sourceDcItem.getTargetValue());
                            targetDcItem.setSpecCheckResult(sourceDcItem.getSpecCheckResult());
                            targetDcItem.setActionCodes(sourceDcItem.getActionCodes());
                            targetDcItemList.add(targetDcItem);
                        }
                        targetDcDef.setDcItems(targetDcItemList);


                        if (k != 0) {
                            // for delta
                            log.debug("reset delta dcSpec for po");
                            targetDcDef.setDcSpecs(null);
                        } else {
                            // for RWA - DOC is only for RAW
                            int dcSpecListSize = CimArrayUtils.getSize(sourceDcDef.getDcSpecs());
                            List<ProcessDTO.DataCollectionSpecInfo> targetDcSpecList = new ArrayList<>();
                            for (int l = 0; l < dcSpecListSize; l++) {
                                Infos.DataCollectionSpecInfo sourceDcSpec = sourceDcDef.getDcSpecs().get(l);
                                ProcessDTO.DataCollectionSpecInfo targetDcSpec = new ProcessDTO.DataCollectionSpecInfo();
                                BeanUtils.copyProperties(sourceDcSpec,targetDcSpec);
                                targetDcSpec.setDataItemName(sourceDcSpec.getDataItemName());
                                targetDcSpec.setScreenLimitUpperRequired(sourceDcSpec.getScreenLimitUpperRequired());
                                targetDcSpec.setScreenLimitUpper(sourceDcSpec.getScreenLimitUpper());
                                targetDcSpec.setActionCodesUscrn(sourceDcSpec.getActionCodesUscrn());
                                targetDcSpec.setScreenLimitLowerRequired(sourceDcSpec.getScreenLimitLowerRequired());

                                targetDcSpec.setScreenLimitLower(sourceDcSpec.getScreenLimitLower());
                                targetDcSpec.setActionCodesLscrn(sourceDcSpec.getActionCodesLscrn());
                                targetDcSpec.setScreenLimitUpperRequired(sourceDcSpec.getScreenLimitUpperRequired());
                                targetDcSpec.setScreenLimitUpper(sourceDcSpec.getScreenLimitUpper());
                                targetDcSpec.setActionCodesUsl(sourceDcSpec.getActionCodesUsl());

                                targetDcSpec.setActionCodesLsl(sourceDcSpec.getActionCodesLsl());
                                targetDcSpec.setControlLimitUpperRequired(sourceDcSpec.getControlLimitUpperRequired());
                                targetDcSpec.setControlLimitUpper(sourceDcSpec.getControlLimitUpper());

                                targetDcSpec.setActionCodesUcl(sourceDcSpec.getActionCodesUcl());
                                targetDcSpec.setControlLimitLowerRequired(sourceDcSpec.getControlLimitLowerRequired());
                                targetDcSpec.setControlLimitLower(sourceDcSpec.getControlLimitLower());
                                targetDcSpec.setActionCodesLcl(sourceDcSpec.getActionCodesLcl());
                                targetDcSpec.setTarget(sourceDcSpec.getTarget());
                                targetDcSpec.setTag(sourceDcSpec.getTag());
                                targetDcSpecList.add(targetDcSpec);
                            }
                            targetDcDef.setDcSpecs(targetDcSpecList);
                        }
                        assignedDataCollectionList.add(targetDcDef);
                    }
                    actualStartInfo.setAssignedDataCollections(assignedDataCollectionList);
                }

                //【step1-8-7】set wafer sampling info
                List<String> samplingWaferList = null;
                if (!processJobPauseFlag) {
                    samplingWaferList = new ArrayList<>();
                    // int lotWaferSize = ArrayUtils.getSize(lotInCassetteObj.getLotWaferList());
                    boolean sampledOperation = false;
                    for (int k = 0; k < lotWaferSize; k++) {
                        Infos.LotWafer lotWaferObj = lotInCassetteObj.getLotWaferList().get(k);
                        if (CimBooleanUtils.isFalse(lotWaferObj.getProcessJobExecFlag())){
                            sampledOperation = true;
                            break;
                        }
                    }
                    if (!sampledOperation) {
                        log.debug("part of wafers ate processed. -> regist wafersID to PO");
                    } else {
                        //all the wafers are processed.
                        log.debug("all the wafers are processed.");
                        log.debug("set wafer sampling info");
                        for (int l = 0; l < lotWaferSize; l++) {
                            Infos.LotWafer lotWaferObj = lotInCassetteObj.getLotWaferList().get(l);
                            //put the wafers to be processed.
                            if (TRUE.equals(lotWaferObj.getProcessJobExecFlag())) {
                                samplingWaferList.add(ObjectIdentifier.fetchValue(lotWaferObj.getWaferID()));
                            }
                        }
                    }
                }
                actualStartInfo.setAssignedSamplingWafers(samplingWaferList);

                //【step1-8-8】set prepared data to po
                processOperation.setActualStartInfo(actualStartInfo);

                //【step1-8-9】set controlJobID to po
                processOperation.setAssignedControlJob(controlJob);

                //【step1-8-10】set the actual start timestamp
                String transportStart = cassette.getTransportState();
                if (CimStringUtils.equals(BizConstant.SP_TRANSSTATE_EQUIPMENTIN, transportStart)) {
                    Machine equipment1 = cassette.currentAssignedMachine();
                    Validations.check(null == equipment1,retCodeConfig.getNotFoundEqp());
                    String cassetteEquipmentID = null;
                    boolean isStorageBool = equipment1.isStorageMachine();
                    if (!isStorageBool) {
                        log.debug("the eqp:%s is not storage pmcmg", equipment1.getIdentifier());
                        cassetteEquipmentID = equipment1.getIdentifier();
                    } else {
                        log.debug("the eqp:%s is storage pmcmg", equipment1.getIdentifier());
                    }

                    if (CimStringUtils.equals(equipmentID.getValue(), cassetteEquipmentID)) {
                        processOperation.setActualStartTimeStamp(objCommon.getTimeStamp().getReportTimeStamp());
                    }
                }

                //【step1-8-11】set the pd info
                com.fa.cim.newcore.bo.pd.CimProcessOperationSpecification modulePos = processOperation.getModuleProcessOperationSpecification();
                Validations.check(null == modulePos,retCodeConfig.getNotFoundPos());

                List<ProcessDefinition> processDefinitionList = modulePos.getProcessDefinitions();
                if (!CimArrayUtils.isEmpty(processDefinitionList)) {
                    //【bear】yes,it just get the first one to set
                    processOperation.setProcessDefinition((com.fa.cim.newcore.bo.pd.CimProcessDefinition) processDefinitionList.get(0));
                }
            }
        }

    }

    @Override
    public List<Infos.OperationProcessRefListAttributes> processOperationProcessRefListForLot(Infos.ObjCommon objCommon, Inputs.ObjProcessOperationProcessRefListForLotIn in) {

        boolean searchDirection = in.isSearchDirection();
        boolean posSearchFlag = in.isPosSearchFlag();
        Integer searchCount = in.getSearchCount();
        ObjectIdentifier searchRouteID = in.getSearchRouteID();
        String searchOperationNumber = in.getSearchOperationNumber();
        Boolean currentFlag = in.isCurrentFlag();
        ObjectIdentifier lotID = in.getLotID();

        String branchCheckModeVar = StandardProperties.OM_BRANCH_RETURN_ACTIVE_ROUTE.getValue();
        int branchCheckMode = CimObjectUtils.isEmpty(branchCheckModeVar)
                || Integer.parseInt(branchCheckModeVar) > 1 ? 0 : Integer.parseInt(branchCheckModeVar);
        Validations.check(searchCount <= 0,retCodeConfig.getInvalidInputParam());

        boolean hvTrue = true;
        int opeCount = 0, count, count2, count3;
        List<Infos.OperationProcessRefListAttributes> attributesList = new ArrayList<>();
        //-----------------------------------------------------------------------------
        // (1) Get current process information
        //-----------------------------------------------------------------------------

        //--- Get Lot information
        log.debug("Get Lot information");
        com.fa.cim.newcore.bo.product.CimLot aLot = baseCoreFactory
                .getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotID);
        Validations.check(CimObjectUtils.isEmpty(aLot),retCodeConfig.getNotFoundLot());
        String lotProcessFlowContextObj = aLot.getProcessFlowContext().getPrimaryKey();
        String lotProcessOperationObj = aLot.getProcessOperation().getPrimaryKey();


        //--- Get current PO information
        log.debug("Get current PO information");
        com.fa.cim.newcore.bo.pd.CimProcessOperation aProcessOperation = aLot.getProcessOperation();
        String currentPoObj = lotProcessOperationObj;
        Validations.check(CimObjectUtils.isEmpty(aProcessOperation),retCodeConfig.getNotFoundProcessOperation());
        ProcessOperationSpecification currPOS = aProcessOperation.getProcessOperationSpecification();
        String currentPosObj = currPOS == null? null : currPOS.getPrimaryKey();
        String currentModulePosObj = aProcessOperation.getModuleProcessOperationSpecification().getPrimaryKey();
        String currentPfObj = aProcessOperation.getProcessFlow().getPrimaryKey();
        String currentMainPfObj = aProcessOperation.getMainProcessFlow().getPrimaryKey();
        String currentModulePfObj = aProcessOperation.getModuleProcessFlow().getPrimaryKey();
        String currentModuleNo = aProcessOperation.getModuleNumber();
        String currentModuleOpeNo = aProcessOperation.getModuleOperationNumber();
        String currentOpeNo = aProcessOperation.getOperationNumber();

        //--- Get main PF information
        log.debug("Get main PF information");
        List<Object[]> pfAndPDField = cimJpaRepository
                .query("SELECT A.PRP_ID, A.PRP_RKEY, A.ACTIVE_FLAG, B.PRP_TYPE FROM OMPRF A, OMPRP B " +
                                "WHERE A.ID = ?1 AND A.PRP_ID = B.PRP_ID AND B.PRP_LEVEL = ?2",
                currentMainPfObj,
                CIMStateConst.SP_PD_FLOWLEVEL_MAIN);

        Validations.check(null == pfAndPDField,retCodeConfig.getNotFoundProcessFlow());
        String currentMainPdid = CimObjectUtils.toString(pfAndPDField.get(0)[0]);
        String currentMainPdobj = CimObjectUtils.toString(pfAndPDField.get(0)[1]);
        String currentMainPdtype = CimObjectUtils.toString(pfAndPDField.get(0)[3]);
        Boolean mainPFState = CimBooleanUtils.getBoolean(CimObjectUtils.toString(pfAndPDField.get(0)[2]));

        //--- Get seq_no of current module from main PF
        log.debug("Get seq_no of current module from main PF");
        List<Object> oneResultQuery = cimJpaRepository
                .queryOneColumn("select IDX_NO from OMPRF_ROUTESEQ " +
                        "WHERE ROUTE_NO = ?1 " +
                        "AND REFKEY = ?2",
                        currentModuleNo, currentMainPfObj);
        Integer currentMainPfPdlistSeqno = Integer.parseInt(CimObjectUtils.toString(oneResultQuery.get(0)));

        //--- Get module PF information #303
        log.debug("Get module PF information");
        List<Object[]> aModulePFInfo = cimJpaRepository
                .query("SELECT PRP_ID, ACTIVE_FLAG FROM OMPRF WHERE ID = ?1", currentModulePfObj);
        Validations.check(CimObjectUtils.isEmpty(aModulePFInfo),retCodeConfig.getNotFoundProcessFlow());
        Boolean modulePFState = Boolean.parseBoolean(CimObjectUtils.toString(aModulePFInfo.get(0)[1]));
        String currentModulePdid = CimObjectUtils.toString(aModulePFInfo.get(0)[0]);


        //--- Get seq_no of current process from module PF #328
        log.debug("Get seq_no of current process from module PF");
        oneResultQuery = cimJpaRepository
                .queryOneColumn("select IDX_NO from OMPRF_PRSSSEQ " +
                        "WHERE LINK_KEY = ?1 AND REFKEY = ?2",
                        currentModuleOpeNo, currentModulePfObj);
        Validations.check(CimObjectUtils.isEmpty(oneResultQuery),
                new OmCode(retCodeConfig.getNotFoundProcessFlow(), ObjectIdentifier.fetchValue(lotID)));
        Integer currentModulePfPoslistSeqno = Integer.parseInt(CimObjectUtils.toString(oneResultQuery.get(0)));

        //-----------------------------------------------------------------------------
        // (2) Set the current operation information
        //-----------------------------------------------------------------------------
        log.debug("Set the current operation information");
        log.trace("currentFlag : {}",currentFlag);
        if (currentFlag) {
            Infos.OperationProcessRefListAttributes attributes = new Infos.OperationProcessRefListAttributes();
            attributes.setSeqno(-1);
            attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
            attributes.setOperationNumber(currentOpeNo);
            Infos.ProcessRef processRef = new Infos.ProcessRef();
            processRef.setProcessFlow(currentPfObj);
            processRef.setProcessOperationSpecification(currentPosObj);
            processRef.setMainProcessFlow(currentMainPfObj);
            processRef.setModuleNumber(currentModuleNo);
            processRef.setModuleProcessFlow(currentModulePfObj);
            processRef.setModulePOS(currentModulePosObj);
            log.trace("StringUtils.isEmpty(currentPosObj) : {}", CimStringUtils.isEmpty(currentPosObj));
            if(CimStringUtils.isEmpty(currentPosObj)) {
                processRef.setProcessOperationSpecification(processOperationProcessRefListForLotHelper(objCommon,
                        attributes.getOperationNumber(), processRef.getProcessFlow()));
            }
            attributes.setProcessRef(processRef);
            opeCount = addRefListAttributes(objCommon, attributesList, attributes,
                    searchRouteID, searchOperationNumber, opeCount, searchCount);
            log.trace("opeCount < searchCount && ObjectUtils.equalsWithValue(attributes.getRouteID(), searchRouteID)\n" +
                    "                    && StringUtils.equals(attributes.getOperationNumber(),searchOperationNumber) " +
                    ": {}",opeCount < searchCount
                    && ObjectIdentifier.equalsWithValue(attributes.getRouteID(), searchRouteID)
                    && CimStringUtils.equals(attributes.getOperationNumber(),searchOperationNumber));
            if(opeCount < searchCount && ObjectIdentifier.equalsWithValue(attributes.getRouteID(), searchRouteID)
                    && CimStringUtils.equals(attributes.getOperationNumber(),searchOperationNumber)){
                opeCount = searchCount;
            }
        }
        log.trace("opeCount == searchCount : {}",opeCount == searchCount);
        if (opeCount == searchCount) {
            return attributesList;
        }

        //-----------------------------------------------------------------------------
        //   Get next process info for backup processing lot.
        //-----------------------------------------------------------------------------
        log.debug("Get next process info for backup processing lot.");
        boolean backupProcessingFlag = false;
        log.trace("BaseStaticMethod.isTrue(aLot.isBackupProcessingFlagOn()) && searchDirection " +
                ": {}",CimBooleanUtils.isTrue(aLot.isBackupProcessingFlagOn()) && searchDirection);
        if (CimBooleanUtils.isTrue(aLot.isBackupProcessingFlagOn()) && searchDirection) {
            log.debug("Lot is backup processing.");

            // get the count
            List<Object[]> multiResultQuery = cimJpaRepository
                    .query("SELECT ID FROM OMPROPE_INTFABDATA WHERE PROPE_RKEY = ?1", lotProcessOperationObj);
            int backupPOCount = multiResultQuery.size();

            //-----------------------------------------------------------------------------
            //   Get BackupInfo from FRPO_BKUPDATA
            //-----------------------------------------------------------------------------
            log.debug("####Get BackupInfo from OMPROPE_INTFABDATA. ");
            backupPOCount--;
            boolean sourceFlag = false;
            boolean entryFlag = false;
            log.trace("backupPOCount >= 0 : {}",backupPOCount >= 0);
            if (backupPOCount >= 0) {
                multiResultQuery = cimJpaRepository.query("SELECT SOURCE_FLAG, ENTRY_FLAG FROM  OMPROPE_INTFABDATA" +
                        "                         WHERE IDX_NO = ?1 ", backupPOCount);
                log.trace("!ObjectUtils.isEmpty(multiResultQuery) : {}",!CimObjectUtils.isEmpty(multiResultQuery));
                if(!CimObjectUtils.isEmpty(multiResultQuery)) {
                    sourceFlag = CimBooleanUtils.getBoolean(multiResultQuery.get(0)[0].toString());
                    entryFlag = CimBooleanUtils.getBoolean(multiResultQuery.get(0)[1].toString());
                }
            }
            log.trace("sourceFlag && entryFlag : {}",sourceFlag && entryFlag);
            if (sourceFlag && entryFlag) {
                //-----------------------------------------------------------------------------
                // Get return process information as next
                //-----------------------------------------------------------------------------
                log.debug("Get return process information as next");
                backupProcessingFlag = true;
                multiResultQuery = cimJpaRepository
                        .query("SELECT  OPE_NO, MPROCESS_PRF_RKEY, MROUTE_PRF_RKEY, " +
                                "ROUTE_PRF_RKEY FROM OMPRFCX_RTNSEQ " +
                                "WHERE   REFKEY = ?1 " +
                                "AND     IDX_NO = 0 ", lotProcessFlowContextObj);
                Validations.check(CimObjectUtils.isEmpty(multiResultQuery),retCodeConfig.getNotFoundReturnOpe());

                String nextOpeNo = CimObjectUtils.toString(multiResultQuery.get(0)[0]);
                String nextModuleNo = BaseStaticMethod.convertOpeNoToModuleNo(nextOpeNo);
                String nextModuleOpeNo = BaseStaticMethod.convertOpeNoToModuleOpeNo(nextOpeNo);
                String nextPfObj = CimObjectUtils.toString(multiResultQuery.get(0)[1]);
                String nextMainPfObj = CimObjectUtils.toString(multiResultQuery.get(0)[2]);
                String nextModulePfObj = CimObjectUtils.toString(multiResultQuery.get(0)[3]);

                //-----------------------------------------------------------------------------
                // Get return process information from FRPF_POSLIST
                //-----------------------------------------------------------------------------
                log.debug("Get return process information from OMPRF_PRSSSEQ");
                 oneResultQuery = cimJpaRepository.queryOneColumn("SELECT PRSS_RKEY " +
                        "                         FROM   OMPRF_PRSSSEQ " +
                        "                         WHERE  REFKEY = ?1 " +
                        "                         AND    LINK_KEY = ?2", nextPfObj, nextOpeNo);
                String nextPosObj = CimObjectUtils.toString(oneResultQuery.get(0));

                //-----------------------------------------------------------------------------
                // Get return process information from FRPF
                //-----------------------------------------------------------------------------
                log.debug("Get return process information from OMPRF");
                multiResultQuery = cimJpaRepository
                        .query("SELECT PRP_ID, PRP_RKEY, ACTIVE_FLAG FROM OMPRF WHERE ID = ?1", nextMainPfObj);
                Validations.check(CimObjectUtils.isEmpty(multiResultQuery),retCodeConfig.getNotFoundProcessFlow());
                String nextMainPdid = CimObjectUtils.toString(multiResultQuery.get(0)[0]);
                String nextMainPdobj = CimObjectUtils.toString(multiResultQuery.get(0)[1]);
                boolean nextMainPfState = CimBooleanUtils.getBoolean(multiResultQuery.get(0)[3].toString());

                //-----------------------------------------------------------------------------
                // Get return process information from FRPF_PDLIST
                //-----------------------------------------------------------------------------
                log.debug("Get return process information from OMPRF_ROUTESEQ");
                oneResultQuery = cimJpaRepository
                        .queryOneColumn("SELECT IDX_NO FROM OMPRF_ROUTESEQ " +
                                "WHERE  REFKEY = ?1 " +
                                "AND LINK_KEY = ?2", nextMainPfObj, nextModuleNo);
                Validations.check(CimObjectUtils.isEmpty(oneResultQuery),retCodeConfig.getNotFoundProcessFlow());
                Integer nextMainPfPdlistSeqno = Integer.parseInt(CimObjectUtils.toString(oneResultQuery));

                //-----------------------------------------------------------------------------
                // Get return process information from FRPF
                //-----------------------------------------------------------------------------
                log.debug("Get return process information from OMPRF");
                multiResultQuery = cimJpaRepository
                        .query("SELECT PRP_ID, ACTIVE FROM OMPRF WHERE ID = ?1", nextModulePfObj);
               // processFlow = processFlowCore.findProcessFlowById(nextModulePfObj);
                Validations.check(CimObjectUtils.isEmpty(multiResultQuery),retCodeConfig.getNotFoundProcessFlow());
                String nextModulePDID = CimObjectUtils.toString(multiResultQuery.get(0)[0]);
                boolean nextModulePfState = CimBooleanUtils.getBoolean(multiResultQuery.get(0)[1].toString());

                //-----------------------------------------------------------------------------
                // Get return process information from FRPF_POSLIST
                //-----------------------------------------------------------------------------
                log.debug("Get return process information from OMPRF_PRSSSEQ");
                multiResultQuery = cimJpaRepository
                        .query("SELECT IDX_NO, PRSS_RKEY FROM OMPRF_PRSSSEQ " +
                                "WHERE  REFKEY = ?1 AND LINK_KEY = ?2", nextModulePfObj, nextModuleOpeNo);
            //    CimPFPosListDO flowPosList = processFlowCore.findByProcessFlowIDAndDKey(nextModulePfObj, nextModuleOpeNo);
                Validations.check(CimObjectUtils.isEmpty(multiResultQuery),retCodeConfig.getNotFoundProcessFlow());
                Integer nextModulePfPoslistSeqno = Integer.valueOf(CimObjectUtils.toString(multiResultQuery.get(0)[0]));
                String nextModulePosObj = CimObjectUtils.toString(multiResultQuery.get(0)[1]);

                //-----------------------------------------------------------------------------
                // Set return process information by process_OperationListForLot_Helper()
                //-----------------------------------------------------------------------------
                log.debug("Set return process information by process_OperationListForLot_Helper()");
                Infos.OperationProcessRefListAttributes attributes = new Infos.OperationProcessRefListAttributes();
                attributes.setSeqno(-1);
                attributes.setRouteID(new ObjectIdentifier(nextMainPdid, nextMainPdobj));
                attributes.setOperationNumber(nextOpeNo);
                Infos.ProcessRef processRef = new Infos.ProcessRef();
                processRef.setProcessFlow(nextPfObj);
                processRef.setProcessOperationSpecification(nextPosObj);
                processRef.setMainProcessFlow(nextMainPfObj);
                processRef.setModuleNumber(nextModuleNo);
                processRef.setModuleProcessFlow(nextModulePfObj);
                processRef.setModulePOS(nextModulePosObj);
                attributes.setProcessRef(processRef);
                attributesList.add(attributes);

                // Helper
                log.trace("nextPosObj.length()==0 : {}",nextPosObj.length()==0);
                if(nextPosObj.length()==0){
                   processRef.setProcessOperationSpecification(
                           processOperationProcessRefListForLotHelper(objCommon, attributes.getOperationNumber(),
                                   processRef.getProcessFlow()));
                }

                // opeCount++ after the method executed
                opeCount = addRefListAttributes(objCommon, attributesList, attributes, searchRouteID,
                        searchOperationNumber, opeCount, searchCount);

                currentMainPdid = nextMainPdid;
                currentMainPdobj = nextMainPdobj;
                currentOpeNo = nextOpeNo;
                currentPoObj = null;
                currentPfObj = nextPfObj;
                currentPosObj = nextPosObj;
                currentMainPfObj = nextMainPfObj;
                currentModuleNo = nextModuleNo;
                currentModulePfObj = nextModulePfObj;
                currentModulePosObj = nextModulePosObj;

                mainPFState = nextMainPfState;
                currentMainPfPdlistSeqno = nextMainPfPdlistSeqno;
                currentModulePfPoslistSeqno = nextModulePfPoslistSeqno;
                modulePFState = nextModulePfState;
            }
        }

        //-----------------------------------------------------------------------------
        // (3) Get forward process information
        //-----------------------------------------------------------------------------
        log.debug("step-3 Get forward process information");
        String modulePfObj = null, activeModulePfObj, nextModuleOpeNo = null, nextModulePosObj = null,
                previousModuleOpeNo, previousModulePosObj;
        int modulePfPoslistSeqno = 0;
        int i;
        boolean findFlag;
        log.trace("searchDirection : {}",searchDirection);
        if (searchDirection) {
            //-----------------------------------------------------------------------------
            // (3-1) Get next POS from current/active module PF
            //-----------------------------------------------------------------------------
            // If module PF is active, set next POS's seq_no from current module PF
            log.debug("step - 3-1 Get next POS from current/active module PF");
            log.trace("modulePFState");
            if (modulePFState) {
                modulePfObj = currentModulePfObj;
                modulePfPoslistSeqno = currentModulePfPoslistSeqno + 1;
                findFlag = true;
            } else {
                findFlag = false;

                //--- Get active module PF information
                String processDefinitionLevel = CIMStateConst.SP_PD_FLOWLEVEL_MODULE;


                // including extractVersionFromID method
                activeModulePfObj = getActiveProcessFlowObj(currentModulePdid, processDefinitionLevel);

                i = 0;
                while (opeCount < searchCount) {
                    // Search the next operation by finding the current module openo on active module PF
                    log.debug("Search the next operation by finding the current module openo on active module PF");
                    log.trace("i <= 0 : {}",i <= 0);
                    if (i <= 0) {
                        oneResultQuery = cimJpaRepository
                                .queryOneColumn("SELECT IDX_NO FROM OMPRF_PRSSSEQ " +
                                        "WHERE REFKEY = ?1  AND LINK_KEY = ?2", activeModulePfObj, currentModuleOpeNo);
                        if (!CimObjectUtils.isEmpty(oneResultQuery)) {
                            modulePfObj = activeModulePfObj;
                            modulePfPoslistSeqno = Integer.parseInt(CimObjectUtils.toString(oneResultQuery.get(0))) + 1;
                            findFlag = true;
                            break;
                        }
                    } else {
                        // Search the next operation by finding the next module openo on active module PF
                        currentModulePfPoslistSeqno++;
                        List<Object[]> multiResultQuery= cimJpaRepository
                                .query("SELECT LINK_KEY, PRSS_RKEY FROM OMPRF_PRSSSEQ " +
                                        "WHERE REFKEY = ?1 " +
                                        "AND IDX_NO = ?2",
                                        currentModulePfObj, currentModulePfPoslistSeqno);

                        log.trace("!ObjectUtils.isEmpty(multiResultQuery) : {}",
                                !CimObjectUtils.isEmpty(multiResultQuery));
                        if (!CimObjectUtils.isEmpty(multiResultQuery)) {
                            //--- Keep the next operation information on current module PF
                            nextModuleOpeNo = CimObjectUtils.toString(multiResultQuery.get(0)[0]);
                            nextModulePosObj = CimObjectUtils.toString(multiResultQuery.get(0)[1]);
                            //--- Search the corresponding next module openo from active module PF
                            oneResultQuery = cimJpaRepository
                                    .queryOneColumn("SELECT IDX_NO FROM   OMPRF_PRSSSEQ " +
                                            "WHERE REFKEY = ?1 " +
                                            "AND LINK_KEY = ?2",
                                            activeModulePfObj, nextModuleOpeNo );
                            log.trace("!ObjectUtils.isEmpty(oneResultQuery) : {}",
                                    !CimObjectUtils.isEmpty(oneResultQuery));
                            if (!CimObjectUtils.isEmpty(oneResultQuery)) {
                                modulePfObj = activeModulePfObj;
                                modulePfPoslistSeqno = Integer.parseInt(CimObjectUtils.toString(oneResultQuery.get(0)));
                                findFlag = true;
                                break;
                            } else {
                                Infos.OperationProcessRefListAttributes attributes
                                        = new Infos.OperationProcessRefListAttributes();
                                attributes.setSeqno(-1);
                                attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                                attributes.setOperationNumber(BaseStaticMethod
                                        .convertModuleOpeNoToOpeNo(currentModuleNo, nextModuleOpeNo));
                                Infos.ProcessRef processRef = new Infos.ProcessRef();
                                processRef.setProcessFlow(currentPfObj);
                                processRef.setMainProcessFlow(currentMainPfObj);
                                processRef.setModuleNumber(currentModuleNo);
                                processRef.setModuleProcessFlow(currentModulePfObj);
                                processRef.setModulePOS(nextModulePosObj);
                                processRef.setProcessOperationSpecification(
                                        processOperationProcessRefListForLotHelper(objCommon,
                                                attributes.getOperationNumber(), processRef.getProcessFlow()));

                                attributes.setProcessRef(processRef);
                                opeCount = addRefListAttributes(objCommon, attributesList, attributes, searchRouteID,
                                        searchOperationNumber, opeCount, searchCount);
                            }
                        } else {
                            break;
                        }
                    }
                    i++;
                }
            }


            log.trace("opeCount == searchCount : {}",opeCount == searchCount);
            if (opeCount == searchCount) {
                return attributesList;
            }

            //-----------------------------------------------------------------------------
            // Set next POS from active current module PF
            //-----------------------------------------------------------------------------
            log.debug("Set next POS from active current module PF");
            log.trace("findFlag : {}",findFlag);
            if (findFlag) {
                List<Object[]> processFlowPOSLists = cimJpaRepository
                        .query("SELECT LINK_KEY, PRSS_RKEY FROM OMPRF_PRSSSEQ " +
                                "WHERE  REFKEY = ?1 " +
                                "and IDX_NO >= ?2 " +
                                "ORDER BY IDX_NO",
                                modulePfObj, modulePfPoslistSeqno);

                count = 0;
                while (opeCount < searchCount) {
                    log.trace("ObjectUtils.isEmpty(processFlowPOSLists) || count >= processFlowPOSLists.size() : {}",
                            CimObjectUtils.isEmpty(processFlowPOSLists) || count >= processFlowPOSLists.size());
                    if (CimObjectUtils.isEmpty(processFlowPOSLists) || count >= processFlowPOSLists.size()) {
                        break;
                    }

                    //--- Set next operation information on active current module PF
                    log.debug("Set next operation information on active current module PF");
                    Infos.OperationProcessRefListAttributes attributes = new Infos.OperationProcessRefListAttributes();
                    attributes.setSeqno(-1);
                    attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                    Infos.ProcessRef processRef = new Infos.ProcessRef();
                    processRef.setProcessFlow(currentPfObj);
                    processRef.setMainProcessFlow(currentMainPfObj);
                    processRef.setModuleNumber(currentModuleNo);
                    processRef.setModuleProcessFlow(modulePfObj);
                    attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(currentModuleNo,
                            CimObjectUtils.toString(processFlowPOSLists.get(count)[0])));
                    processRef.setModulePOS(CimObjectUtils.toString(processFlowPOSLists.get(count)[1]));
                    processRef.setProcessOperationSpecification(processOperationProcessRefListForLotHelper(objCommon,
                            attributes.getOperationNumber(), processRef.getProcessFlow()));
                    attributes.setProcessRef(processRef);
                    opeCount = addRefListAttributes(objCommon, attributesList, attributes, searchRouteID,
                            searchOperationNumber, opeCount, searchCount);
                    count++;

                    log.trace("opeCount < searchCount && attributes.getRouteID().getValue().length() == 0\n" +
                            "&& searchRouteID.getValue().length() == 0 " +
                            "&& attributes.getOperationNumber().length() == 0\n" +
                            "&& searchOperationNumber.length() == 0 : {}",opeCount < searchCount
                            && attributes.getRouteID().getValue().length() == 0
                            && searchRouteID.getValue().length() == 0 && attributes.getOperationNumber().length() == 0
                            && searchOperationNumber.length() == 0);
                    if(opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                    && searchRouteID.getValue().length() == 0 && attributes.getOperationNumber().length() == 0
                    && searchOperationNumber.length() == 0){
                        opeCount = searchCount;
                    }
                }
            }
            if (opeCount == searchCount) {
                return attributesList;
            }

            //-----------------------------------------------------------------------------
            // (3-2) Get next module PD from current/active main PF
            //-----------------------------------------------------------------------------
            log.debug("step - 3-2 Get next module PD from current/active main PF");
            String mainPfObj = null, activeMainPfObj, nextModulePdid, nextModuleNo;
            int mainPfPdlistSeqno = 0;
            // If main PF is active, set next module PD's seq_no from current main PF
            log.debug("If main PF is active, set next module PD's seq_no from current main PF");
            log.trace("mainPFState : {}",mainPFState);
            if (mainPFState) {
                mainPfObj = currentMainPfObj;
                mainPfPdlistSeqno = currentMainPfPdlistSeqno + 1;
                findFlag = true;

            } else { // If main PF is NOT active, search next module PD's seq_no from active main PF
                findFlag = false;

                String processDefinitionLevel = CIMStateConst.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE;
                oneResultQuery = cimJpaRepository
                        .queryOneColumn("SELECT ID FROM OMPRF " +
                                "WHERE  PRP_ID = ?1 " +
                                "AND PRP_LEVEL = ?2 " +
                                "AND ACTIVE_FLAG = ?3",
                                currentMainPdid, processDefinitionLevel, hvTrue);
                Validations.check(CimObjectUtils.isEmpty(oneResultQuery),retCodeConfig.getNotFoundProcessFlow());

                activeMainPfObj = CimObjectUtils.toString(oneResultQuery.get(0));
                i = 0;
                while (true) {
                    log.trace("i == 0 : {}",i == 0);
                    if (i == 0) {
                        List<Object[]> multiResultQuery = cimJpaRepository
                                .query("SELECT IDX_NO, ROUTE_ID FROM OMPRF_ROUTESEQ " +
                                        "WHERE REFKEY = ?1 " +
                                        "AND LINK_KEY = ?2",
                                        activeMainPfObj, currentModuleNo);
                        log.trace("!ObjectUtils.isEmpty(multiResultQuery) : {}",
                                !CimObjectUtils.isEmpty(multiResultQuery));
                        if (!CimObjectUtils.isEmpty(multiResultQuery)) {
                            mainPfObj = activeMainPfObj;
                            mainPfPdlistSeqno = Integer.parseInt(CimObjectUtils
                                    .toString(multiResultQuery.get(0)[0])) + 1;
                            findFlag = true;
                            break;
                        }
                    } else { // Search the next module PD by finding the next module number on active main PF
                        //--- Get the next module PD's seq_no on current main PF
                        log.debug("Get the next module PD's seq_no on current main PF");
                        currentMainPfPdlistSeqno++;
                        List<Object[]> multiResultQuery = cimJpaRepository
                                .query("SELECT ROUTE_ID, ROUTE_NO FROM OMPRF_ROUTESEQ " +
                                        "WHERE REFKEY = ?1 " +
                                        "AND IDX_NO = ?2",
                                        currentMainPfObj, currentMainPfPdlistSeqno);
                        log.trace("!ObjectUtils.isEmpty(multiResultQuery) : {}",
                                !CimObjectUtils.isEmpty(multiResultQuery));
                        if (!CimObjectUtils.isEmpty(multiResultQuery)) {
                            nextModulePdid = CimObjectUtils.toString(multiResultQuery.get(0)[0]);
                            nextModuleNo = CimObjectUtils.toString(multiResultQuery.get(0)[0]);

                            //--- Search the corresponding next module number from the active main PF
                            log.debug("Search the corresponding next module number from the active main PF");
                            oneResultQuery = cimJpaRepository
                                    .queryOneColumn("SELECT IDX_NO FROM OMPRF_ROUTESEQ " +
                                            "WHERE REFKEY = ?1 " +
                                            "AND LINK_KEY = ?2",
                                            activeMainPfObj, nextModuleNo);
                            log.trace("!ObjectUtils.isEmpty(oneResultQuery) : {}",
                                    !CimObjectUtils.isEmpty(oneResultQuery));
                            if (!CimObjectUtils.isEmpty(oneResultQuery)) {
                                mainPfObj = activeMainPfObj;
                                mainPfPdlistSeqno =Integer.parseInt(CimObjectUtils.toString(oneResultQuery.get(0)));
                                findFlag = true;
                                break;
                            } else {
                                //---------------------------------------------------------------------------
                                // Set next POS from active next module PF and current(inactive) main PF
                                //---------------------------------------------------------------------------
                                log.debug("Set next POS from active next module PF and current(inactive) main PF");
                                processDefinitionLevel = CIMStateConst.SP_PD_FLOWLEVEL_MODULE;
                                String processFlowObj = getActiveProcessFlowObj(nextModulePdid, processDefinitionLevel);
                                //--- Set next operation information on active module PF
                                log.debug("Set next operation information on active module PF");
                                List<Object[]> processFlowPOSList= cimJpaRepository
                                        .query("SELECT LINK_KEY, PRSS_RKEY FROM OMPRF_PRSSSEQ " +
                                                "WHERE  REFKEY = ?1 " +
                                                "ORDER BY IDX_NO",
                                                processFlowObj);

                                count = 0;
                                while (opeCount < searchCount) {
                                    log.debug("ObjectUtils.isEmpty(processFlowPOSList) " +
                                            "|| count >= processFlowPOSList.size() : {}",
                                            CimObjectUtils.isEmpty(processFlowPOSList)
                                                    || count >= processFlowPOSList.size());
                                    if (CimObjectUtils.isEmpty(processFlowPOSList)
                                            || count >= processFlowPOSList.size()) {
                                        break;
                                    }
                                    Object[] posList = processFlowPOSList.get(count);
                                    Infos.OperationProcessRefListAttributes attributes
                                            = new Infos.OperationProcessRefListAttributes();
                                    attributes.setSeqno(-1);
                                    attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                                    attributes.setOperationNumber(
                                            BaseStaticMethod.convertModuleOpeNoToOpeNo(nextModuleNo,
                                                    CimObjectUtils.toString(posList[0])));
                                    Infos.ProcessRef processRef = new Infos.ProcessRef();
                                    processRef.setProcessFlow(currentPfObj);
                                    processRef.setMainProcessFlow(currentMainPfObj);
                                    processRef.setModuleNumber(nextModuleNo);
                                    processRef.setModuleProcessFlow(processFlowObj);
                                    processRef.setModulePOS(CimObjectUtils.toString(posList[1]));
                                    processRef.setProcessOperationSpecification(
                                            processOperationProcessRefListForLotHelper(objCommon,
                                                    attributes.getOperationNumber(), processRef.getProcessFlow()));
                                    attributes.setProcessRef(processRef);
                                    opeCount = addRefListAttributes(objCommon, attributesList, attributes,
                                            searchRouteID, searchOperationNumber, opeCount, searchCount);
                                    count++;

                                    log.trace("opeCount < searchCount " +
                                            "&& attributes.getRouteID().getValue().length() == 0\n" +
                                            "&& searchRouteID.getValue().length() == 0 " +
                                            "&& attributes.getOperationNumber().length() == 0\n" +
                                            "&& searchOperationNumber.length() == 0 : {}",
                                            opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                            && searchRouteID.getValue().length() == 0
                                            && attributes.getOperationNumber().length() == 0
                                            && searchOperationNumber.length() == 0);
                                    if(opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                            && searchRouteID.getValue().length() == 0
                                            && attributes.getOperationNumber().length() == 0
                                            && searchOperationNumber.length() == 0){
                                        opeCount = searchCount;
                                    }
                                }
                            }
                        } else break;
                    }
                    i++;
                }
            }
            log.trace("opeCount == searchCount : {}",opeCount == searchCount);
            if (opeCount == searchCount) {
                return attributesList;
            }
            //-----------------------------------------------------------------------------
            // Set next POS from active next module PF and active main PF
            //-----------------------------------------------------------------------------
            log.debug("Set next POS from active next module PF and active main PF");
            log.trace("findFlag : {}",findFlag);
            if (findFlag) {
                List<Object[]> processFlowPDList = cimJpaRepository
                        .query("SELECT ROUTE_ID, ROUTE_NO FROM OMPRF_ROUTESEQ " +
                                "WHERE  REFKEY = ?1 " +
                                "and IDX_NO >= ?2 " +
                                "ORDER BY IDX_NO",
                                mainPfObj, mainPfPdlistSeqno);

                count = 0;
                while (opeCount < searchCount) {
                    log.trace("ObjectUtils.isEmpty(processFlowPDList) || count >= processFlowPDList.size() : {}",
                            CimObjectUtils.isEmpty(processFlowPDList) || count >= processFlowPDList.size());
                    if (CimObjectUtils.isEmpty(processFlowPDList) || count >= processFlowPDList.size())
                        break;
                    Object[] definitionList = processFlowPDList.get(count);
                    //--- Get active module PF information
                    log.debug("Get active module PF information");
                    String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                    String processFlowObj = getActiveProcessFlowObj(
                            CimObjectUtils.toString(definitionList[0]), processDefinitionLevel);

                    //--- Set next operation information on active module PF
                    log.debug("Set next operation information on active module PF");
                    List<Object[]> processFlowPOSList = cimJpaRepository
                            .query("SELECT LINK_KEY, PRSS_RKEY FROM OMPRF_PRSSSEQ " +
                                    "WHERE  REFKEY = ?1 " +
                                    "ORDER BY IDX_NO",
                                    processFlowObj);
            //        List<CimPFPosListDO> processFlowPosLists = processFlowCore.findAllByProcessFlowKey(processFlowObj);
                    count2 = 0;
                    while (opeCount < searchCount) {
                        log.trace("ObjectUtils.isEmpty(processFlowPOSList) || count2 >= processFlowPOSList.size() : {}",
                                CimObjectUtils.isEmpty(processFlowPOSList) || count2 >= processFlowPOSList.size());
                        if (CimObjectUtils.isEmpty(processFlowPOSList) || count2 >= processFlowPOSList.size()) {
                            break;
                        }
                        Object[] posList = processFlowPOSList.get(count2);
                        //--- Set next operation information on active current module PF
                        Infos.OperationProcessRefListAttributes attributes
                                = new Infos.OperationProcessRefListAttributes();
                        attributes.setSeqno(-1);
                        attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                        attributes.setOperationNumber(BaseStaticMethod
                                .convertModuleOpeNoToOpeNo(CimObjectUtils.toString(definitionList[1]),
                                        CimObjectUtils.toString(posList[0])));
                        Infos.ProcessRef processRef = new Infos.ProcessRef();
                        processRef.setProcessFlow(currentPfObj);
                        processRef.setMainProcessFlow(mainPfObj);
                        processRef.setModuleNumber(CimObjectUtils.toString(definitionList[1]));
                        processRef.setModuleProcessFlow(processFlowObj);
                        processRef.setModulePOS(CimObjectUtils.toString(posList[1]));
                        processRef.setProcessOperationSpecification(
                                processOperationProcessRefListForLotHelper(objCommon, attributes.getOperationNumber(),
                                        processRef.getProcessFlow()));
                        attributes.setProcessRef(processRef);
                        opeCount = addRefListAttributes(objCommon, attributesList, attributes, searchRouteID,
                                searchOperationNumber, opeCount, searchCount);
                        count2++;

                        log.trace("opeCount < searchCount " +
                                "&& attributes.getRouteID().getValue().length() == 0\n" +
                                "&& searchRouteID.getValue().length() == 0 " +
                                "&& attributes.getOperationNumber().length() == 0\n" +
                                "&& searchOperationNumber.length() == 0 : {}",
                                opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                && searchRouteID.getValue().length() == 0
                                        && attributes.getOperationNumber().length() == 0
                                && searchOperationNumber.length() == 0);
                        if(opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                && searchRouteID.getValue().length() == 0
                                && attributes.getOperationNumber().length() == 0
                                && searchOperationNumber.length() == 0){
                            opeCount = searchCount;
                        }
                    }
                    count++;
                }
            }
            log.trace("opeCount == searchCount : {}",opeCount == searchCount);
            if (opeCount == searchCount) {
                return attributesList;
            }

            //---------------------------------------------------------------------------------------------------------------
            // (3-3) If the lot is on sub/rework route, set the return operaion and the following operations from return flow
            //---------------------------------------------------------------------------------------------------------------
            log.debug("step - 3-3 If the lot is on sub/rework route, " +
                    "set the return operaion and the following operations from return flow");
            String beforeMainPdtype = null;
            List<Object[]> pfxReturns = cimJpaRepository.query("SELECT  IDX_NO," +
                    "                    OPE_NO," +
                    "                    MPROCESS_PRF_RKEY," +
                    "                    MROUTE_PRF_RKEY," +
                    "                    ROUTE_PRF_RKEY" +
                    "            FROM    OMPRFCX_RTNSEQ" +
                    "            WHERE   REFKEY = ?1" +
                    "            ORDER BY IDX_NO ", lotProcessFlowContextObj);

            count = 0;
            while (opeCount < searchCount) {
                log.trace("ObjectUtils.isEmpty(pfxReturns) || count >= pfxReturns.size() : {}",
                        CimObjectUtils.isEmpty(pfxReturns) || count >= pfxReturns.size());
                if (CimObjectUtils.isEmpty(pfxReturns) || count >= pfxReturns.size())
                    break;
                Object[] processFlowContextReturn = pfxReturns.get(count);
                log.trace("backupProcessingFlag : {}",backupProcessingFlag);
                if (backupProcessingFlag) {
                    backupProcessingFlag = false;
                    continue;
                }
                Integer returnSeqNo = Integer.valueOf(CimObjectUtils.toString(processFlowContextReturn[0]));
                String returnOpeNo = CimObjectUtils.toString(processFlowContextReturn[1]);
                String returnModuleNo = BaseStaticMethod.convertOpeNoToModuleNo(returnOpeNo);
                String returnModuleOpeNo = BaseStaticMethod.convertOpeNoToModuleOpeNo(returnOpeNo);
                String returnPfObj = CimObjectUtils.toString(processFlowContextReturn[2]);
                String returnMainPfObj = CimObjectUtils.toString(processFlowContextReturn[3]);
                String returnModulePfObj = CimObjectUtils.toString(processFlowContextReturn[4]);

                String mainPDTYPE = count == 0 ? currentMainPdtype : beforeMainPdtype;
                pfAndPDField = cimJpaRepository
                        .query("SELECT A.PRP_ID, A.PRP_RKEY, A.ACTIVE_FLAG, B.PRP_TYPE FROM OMPRF A, OMPRP B " +
                                "WHERE A.ID = ?1 AND A.PRP_ID = B.PRP_ID AND B.PRP_LEVEL = ?2",
                                returnMainPfObj, CIMStateConst.SP_PD_FLOWLEVEL_MAIN);
                Validations.check(null == pfAndPDField,retCodeConfig.getNotFoundProcessFlow());
                beforeMainPdtype = CimObjectUtils.toString(pfAndPDField.get(0)[3]);
                String originalReturnMainPfObj = returnMainPfObj;
                String originalReturnModulePfObj = returnModulePfObj;
                boolean bSameModuleFlag = true;
                log.trace("branchCheckMode == 1 : {}",branchCheckMode == 1);
                if (branchCheckMode == 1) {
                    List<Object[]> pfxBackPO = cimJpaRepository
                            .query("SELECT PROPE_RKEY, RWKOUT_STRING FROM OMPRFCX_BCKPROPESEQ " +
                                    "WHERE REFKEY = ?1 " +
                                    "AND IDX_NO = ?2",
                                    lotProcessFlowContextObj, returnSeqNo);

                    Validations.check(CimObjectUtils.isEmpty(pfxBackPO),retCodeConfig.getNotFoundProcessFlow());
                    String reworkOutKey = CimObjectUtils.toString(pfxBackPO.get(0)[1]);
                    lotProcessOperationObj = CimObjectUtils.toString(pfxBackPO.get(0)[0]);

                    oneResultQuery = cimJpaRepository
                            .queryOneColumn("SELECT ROUTE_NO FROM OMPROPE WHERE ID = ?1 ",
                                    lotProcessOperationObj);
                    Validations.check(CimObjectUtils.isEmpty(oneResultQuery),retCodeConfig.getNotFoundProcessFlow());
                    String backupModuleNo = CimObjectUtils.toString(oneResultQuery.get(0));

                    log.trace("StringUtils.equals(CIMStateConst.CIM_MAINPDTYPE_REWORK, mainPDTYPE) : {}",
                            CimStringUtils.equals(CIMStateConst.CIM_MAINPDTYPE_REWORK, mainPDTYPE));
                    if (CimStringUtils.equals(CIMStateConst.CIM_MAINPDTYPE_REWORK, mainPDTYPE)) {
                        log.trace("!StringUtils.isEmpty(reworkOutKey) : {}",!CimStringUtils.isEmpty(reworkOutKey));
                        if (!CimStringUtils.isEmpty(reworkOutKey)) {
                            backupModuleNo = BaseStaticMethod.convertOpeNoToModuleNo(reworkOutKey);
                            Validations.check(CimObjectUtils.isEmpty(backupModuleNo),retCodeConfig.getInvalidRouteId());
                        } else {
                            // get backup PO object
                            log.debug("get backup PO object");
                            com.fa.cim.newcore.bo.pd.CimProcessOperation aBackupPO
                                    = baseCoreFactory.getBO(com.fa.cim.newcore.bo.pd.CimProcessOperation.class,
                                    lotProcessOperationObj);
                            Validations.check(CimObjectUtils.isEmpty(aBackupPO),retCodeConfig.getNotFoundOperation());

                            // get MainPF from backup PO
                            log.debug("get MainPF from backup PO");
                            com.fa.cim.newcore.bo.pd.CimProcessFlow aMainPF = aBackupPO.getMainProcessFlow();
                            Validations.check(CimObjectUtils.isEmpty(aMainPF),retCodeConfig.getNotFoundProcessFlow());

                            // get Module number from backup PO
                            log.debug("get Module number from backup PO");
                            String aModuleNo = aBackupPO.getModuleNumber();

                            // get ModulePF from backup PO
                            log.debug("get ModulePF from backup PO");
                            com.fa.cim.newcore.bo.pd.CimProcessFlow aModulePF = aBackupPO.getModuleProcessFlow();
                            Validations.check(CimObjectUtils.isEmpty(aModulePF),retCodeConfig.getNotFoundProcessFlow());

                            // get ModulePOS from backup PO
                            log.debug("get ModulePOS from backup PO");
                            com.fa.cim.newcore.bo.pd.CimProcessOperationSpecification aModulePOS
                                    = aBackupPO.getModuleProcessOperationSpecification();
                            Validations.check(CimObjectUtils.isEmpty(aModulePOS),retCodeConfig.getNotFoundPos());

                            // get previous ModulePOS
                            log.debug("get previous ModulePOS");
                            AtomicReference<com.fa.cim.newcore.bo.pd.CimProcessFlow> outMainPF=null;
                            AtomicReference<String> outModuleNo=null;
                            AtomicReference<com.fa.cim.newcore.bo.pd.CimProcessFlow > outModulePF=null;
                            com.fa.cim.newcore.bo.pd.CimProcessOperationSpecification aPrevPOS
                                    = aMainPF.getPreviousProcessOperationSpecificationFor(aModuleNo, aModulePF,
                                    aModulePOS, outMainPF, outModuleNo, outModulePF);
                            Validations.check(CimObjectUtils.isEmpty(aPrevPOS),retCodeConfig.getNotFoundPos());

                            backupModuleNo = outModuleNo.get();
                        }
                    }
                    // Compare ModuleNumber
                    log.debug("Compare ModuleNumber");
                    log.trace("!StringUtils.equals(returnModuleNo,backupModuleNo)");
                    if (!CimStringUtils.equals(returnModuleNo,backupModuleNo)) {
                        bSameModuleFlag = false;
                    }
                }

                //--- Get return main PF information
                log.debug("Get return main PF information");
                List<Object[]> pfInfo= cimJpaRepository
                        .query("SELECT PRP_ID, PRP_RKEY, ACTIVE_FLAG FROM OMPRF " +
                                "WHERE ID = ?1 ",
                                returnMainPfObj);
                Validations.check(CimObjectUtils.isEmpty(pfInfo),retCodeConfig.getNotFoundProcessFlow());
                String returnMainPdid = CimObjectUtils.toString(pfInfo.get(0)[0]);
                String returnMainPdobj = CimObjectUtils.toString(pfInfo.get(0)[1]);
                Boolean returnMainPfState = CimBooleanUtils.getBoolean(CimObjectUtils.toString(pfInfo.get(0)[2]));

                int returnMainPfPdlistSeqno;
                int returnModulePfPoslistSeqno = 0;
                String returnModulePosObj = null;
                String returnModulePdid;
                Boolean returnModulePfState;

                log.trace("bSameModuleFlag : {}",bSameModuleFlag);
                if (bSameModuleFlag) {
                    //=========================================================================
                    //
                    // In this case,
                    //    Out-ModuleNumber and In-ModuleNumber is the same.
                    //    (Mod-A:10)
                    // ---10.10--10.20--10.30--10.40--(Main route)
                    //      |             ^
                    //      |             |
                    //      +-------------+ (Sub route)
                    //
                    //=========================================================================
                    //--- Get seq_no of return module from main PF
                    log.debug("Get seq_no of return module from main PF");
                    oneResultQuery = cimJpaRepository
                            .queryOneColumn("SELECT IDX_NO FROM OMPRF_ROUTESEQ " +
                                    "WHERE  REFKEY = ?1 " +
                                    "AND LINK_KEY = ?2",
                                    returnMainPfObj, returnModuleNo);
                    Validations.check(CimObjectUtils.isEmpty(oneResultQuery),retCodeConfig.getNotFoundProcessFlow());
                    returnMainPfPdlistSeqno = Integer.parseInt(CimObjectUtils.toString(oneResultQuery.get(0)));

                    //--- Get return module PF information
                    log.debug("Get return module PF information");
                    List<Object[]> modulePFInfo = cimJpaRepository
                            .query("SELECT PRP_ID, ACTIVE_FLAG FROM OMPRF " +
                                    "WHERE ID = ?1",
                                    returnModulePfObj);
                    Validations.check(CimObjectUtils.isEmpty(modulePFInfo),retCodeConfig.getNotFoundProcessFlow());
                    returnModulePdid = CimObjectUtils.toString(modulePFInfo.get(0)[0]);
                    returnModulePfState = CimBooleanUtils.getBoolean(CimObjectUtils.toString(modulePFInfo.get(0)[1]));

                    //--- Get seq_no of return process from module PF
                    log.debug("Get seq_no of return process from module PF");
                    List<Object[]> modulePOSInfo = cimJpaRepository
                            .query("SELECT IDX_NO, PRSS_RKEY FROM OMPRF_PRSSSEQ " +
                                    "WHERE REFKEY = ?1 " +
                                    "AND LINK_KEY = ?2",
                                    returnModulePfObj, returnModuleOpeNo);
                    Validations.check(CimObjectUtils.isEmpty(modulePOSInfo),retCodeConfig.getNotFoundProcessFlow());
                    returnModulePfPoslistSeqno = Integer.parseInt(CimObjectUtils.toString(modulePOSInfo.get(0)[0]));
                    returnModulePosObj = CimObjectUtils.toString(modulePOSInfo.get(0)[1]);
                } else {
                    boolean bFindFlag = true;
                    //=========================================================================
                    //
                    // In this case,
                    //   Out-ModuleNumber and In-ModuleNumber is different.
                    //   (Mod-A:10)           (Mod-B:20)
                    // ---10.10--10.20- -20.10--20.20---(Main route)
                    //             |              ^
                    //             |              |
                    //             +--------------+ (Sub route)
                    //
                    //=========================================================================

                    //=================================================================
                    // Step1
                    //  Check STATE of MAIN_PF_OBJ(MainPF-A) in FRPXF_RETNLIST
                    //=================================================================
                    log.debug("!returnMainPfState : {}",!returnMainPfState);
                    if (!returnMainPfState) { //return_mainPF_state == 0
                        //=================================================================
                        // Step2
                        //  When STATE of MAIN_PF_OBJ is 0,
                        //   Get the latest MAIN_PF_OBJ(MainPF-B) from MainPD
                        //=================================================================
                        log.trace("Step2 Get the latest MAIN_PF_OBJ(MainPF-B) from MainPD");
                        String processDefinitionLevel = CIMStateConst.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE;
                        oneResultQuery= cimJpaRepository
                                .queryOneColumn("SELECT ID FROM OMPRF " +
                                        "WHERE PRP_ID = ?1 " +
                                        "AND PRP_LEVEL = ?2 " +
                                        "AND ACTIVE_FLAG = ?3",
                                        returnMainPdid, processDefinitionLevel, hvTrue);
                        Validations.check(CimObjectUtils.isEmpty(oneResultQuery.get(0)),
                                retCodeConfig.getNotFoundProcessFlow());
                        returnMainPfObj = CimObjectUtils.toString(oneResultQuery.get(0));

                        //=================================================================
                        // Step2-1
                        //   Get ModulePD with return ModuleNo from the latest MAIN_PF_OBJ(MainPF-B)
                        //=================================================================
                        log.debug("Step2-1 Get ModulePD with return ModuleNo from the latest MAIN_PF_OBJ(MainPF-B)");
                        oneResultQuery = cimJpaRepository
                                .queryOneColumn("SELECT ROUTE_ID FROM OMPRF_ROUTESEQ " +
                                        "WHERE REFKEY = ?1 " +
                                        "AND LINK_KEY = ?2",
                                        returnMainPfObj, returnModuleNo);

                        log.trace("ObjectUtils.isEmpty(oneResultQuery) : {}", CimObjectUtils.isEmpty(oneResultQuery));
                        if (CimObjectUtils.isEmpty(oneResultQuery)) {
                            returnMainPfObj = originalReturnMainPfObj;
                            bFindFlag = false;
                        }
                        log.trace("bFindFlag :{}",bFindFlag);
                        if (bFindFlag) {
                            returnModulePdid = CimObjectUtils.toString(oneResultQuery.get(0));
                            //=================================================================
                            // Step2-2
                            //   Get MOUDLE_PF_OBJ(mdpd-B) from mdpd
                            //=================================================================
                            log.debug("Step2-2 Get MOUDLE_PF_OBJ(mdpd-B) from mdpd");
                            processDefinitionLevel = CIMStateConst.SP_PD_FLOWLEVEL_MODULE;
                            returnModulePfObj = getActiveProcessFlowObj(returnModulePdid, processDefinitionLevel);
                            //=================================================================
                            // Step2-3
                            //   Get ModulePOS with return ModuleOpeNo from MOUDLE_PF_OBJ(mdpd-B)
                            //=================================================================
                            log.debug("Step2-3 Get ModulePOS with return ModuleOpeNo from MOUDLE_PF_OBJ(mdpd-B)");
                            List<Object[]> modulePOSInfo = cimJpaRepository
                                    .query("SELECT IDX_NO, PRSS_RKEY FROM OMPRF_PRSSSEQ " +
                                            "WHERE REFKEY = ?1 " +
                                            "AND LINK_KEY = ?2",
                                            returnModulePfObj, returnModuleOpeNo);

                            log.trace("!ObjectUtils.isEmpty(modulePOSInfo) : {}",
                                    !CimObjectUtils.isEmpty(modulePOSInfo));
                            if (!CimObjectUtils.isEmpty(modulePOSInfo)) {
                                returnModulePfPoslistSeqno = Integer
                                        .parseInt(CimObjectUtils.toString(modulePOSInfo.get(0)[0]));
                                returnModulePosObj = CimObjectUtils.toString(modulePOSInfo.get(0)[1]);
                            } else {
                                returnMainPfObj = originalReturnMainPfObj;
                                returnModulePfObj = originalReturnModulePfObj;
                                bFindFlag = false;
                            }
                        }
                    } //if( returnMainPfState == 0 )

                    log.debug("returnMainPfState || !bFindFlag : {}",returnMainPfState || !bFindFlag);
                    if (returnMainPfState || !bFindFlag) {
                        //=================================================================
                        // Step3
                        //  When STATE of MAIN_PF_OBJ is 1 or ModulePOS does not found,
                        //=================================================================
                        //=================================================================
                        // Step3-1
                        //   Get mdpd with return ModuleNo from MAINP_PF_OBJ(MainPF-A)
                        //    if mdpd does not found, Go to Step4.
                        //=================================================================
                        log.debug("Step3 When STATE of MAIN_PF_OBJ is 1 or ModulePOS does not found,");
                        String processDefinitionID = null;
                        bFindFlag = true;
                        oneResultQuery = cimJpaRepository
                                .queryOneColumn("SELECT ROUTE_ID FROM OMPRF_ROUTESEQ " +
                                        "WHERE REFKEY = ?1 " +
                                        "AND LINK_KEY = ?2",
                                        returnMainPfObj, returnModuleNo);

                        log.trace("ObjectUtils.isEmpty(oneResultQuery) : {}", CimObjectUtils.isEmpty(oneResultQuery));
                        if (CimObjectUtils.isEmpty(oneResultQuery)) {
                            bFindFlag = false;
                        } else {
                            processDefinitionID = CimObjectUtils.toString(oneResultQuery.get(0));
                        }
                        log.trace("bFindFlag : {}",bFindFlag);
                        if (bFindFlag) {
                            returnModulePdid = processDefinitionID;
                            //=================================================================
                            // Step3-2
                            //   Get the latest ModulePF(ModulePF-C) from mdpd
                            //=================================================================
                            log.debug("Step3-2  Get the latest ModulePF(ModulePF-C) from mdpd");
                            String processDefinitionLevel = CIMStateConst.SP_PD_FLOWLEVEL_MODULE;
                            //--- If module PDID's version is "##", convert it to real PDID
                            returnModulePfObj = getActiveProcessFlowObj(returnModulePdid, processDefinitionLevel);
                            //=================================================================
                            // Step3-3
                            //   Get ModulePOS from the latest ModulePF(ModulePF-C)
                            //=================================================================
                            log.debug(" Step3-3 Get ModulePOS from the latest ModulePF(ModulePF-C)");
                            Integer sequenceNumber = 0;
                            String processOperationSpecificationsObj = null;
                            List<Object[]> multiResultQuery= cimJpaRepository
                                    .query("SELECT IDX_NO, PRSS_RKEY FROM OMPRF_PRSSSEQ " +
                                            "WHERE REFKEY = ?1 " +
                                            "AND LINK_KEY = ?2",
                                            returnModulePfObj, returnModuleOpeNo);

                            log.trace("ObjectUtils.isEmpty(multiResultQuery) : {}",
                                    CimObjectUtils.isEmpty(multiResultQuery));
                            if (CimObjectUtils.isEmpty(multiResultQuery)) {
                                returnModulePfObj = originalReturnModulePfObj;
                                bFindFlag = false;
                            } else {
                                sequenceNumber = Integer.parseInt(CimObjectUtils.toString(multiResultQuery.get(0)[0]));
                                processOperationSpecificationsObj = CimObjectUtils.toString(multiResultQuery.get(0)[1]);
                            }
                            log.trace("bFindFlag : {}",bFindFlag);
                            if (bFindFlag) {
                                returnModulePfPoslistSeqno = sequenceNumber;
                                returnModulePosObj = processOperationSpecificationsObj;
                            }
                        }
                    } //if( returnMainPfState == 1 || bFindFlag == FALSE )

                    //=================================================================
                    // Step4
                    //  Check STATE of MODULE_PF_OBJ(ModlePF-A) in FRPXF_RETNLIST
                    //=================================================================
                    // TODO:check 2779 bFindFlag == FALSE
                    // check when testing
                    log.trace("Step4 Check STATE of MODULE_PF_OBJ(ModlePF-A) in FRPXF_RETNLIST");
                    log.trace("bFindFlag : {}",bFindFlag);
                    if (!bFindFlag) {
                        //=================================================================
                        // Get STATE of MODULE_PF_OBJ(ModlePF-A)
                        //=================================================================
                        log.debug("Get STATE of MODULE_PF_OBJ(ModlePF-A)");
                        List<Object[]> multiResultQuery = cimJpaRepository
                                .query(" SELECT PRP_ID, ACTIVE_FLAG FROM OMPRF WHERE ID = ?1",
                                        returnModulePfObj);
                        Validations.check(CimObjectUtils
                                .isEmpty(multiResultQuery),retCodeConfig.getNotFoundProcessFlow());
                        returnMainPdid = CimObjectUtils
                                .toString(multiResultQuery.get(0)[0]);
                        returnModulePfState = CimBooleanUtils
                                .getBoolean(CimObjectUtils.toString(multiResultQuery.get(0)[1]));
                        log.trace("!returnModulePfState : {}",!returnModulePfState);
                        if (!returnModulePfState) { // TODO:check state should be 0
                            //=================================================================
                            // Step5
                            //  When STATE of MODULE_PF_OBJ is 0,
                            //   Get mdpd from MODULE_PF_OBJ(ModlePF-A)
                            //=================================================================
                            log.debug("Step5 Get mdpd from MODULE_PF_OBJ(ModlePF-A) ");
                            oneResultQuery = cimJpaRepository
                                    .queryOneColumn("  SELECT PRP_ID FROM OMPRF WHERE ID = ?1",
                                            returnModulePfObj);
                            Validations.check(
                                    CimObjectUtils.isEmpty(oneResultQuery),retCodeConfig.getNotFoundProcessFlow());
                            returnModulePdid = CimObjectUtils.toString(oneResultQuery.get(0));
                            //=================================================================
                            // Get new MODULE_PF_OBJ(ModlePF-D) from mdpd
                            //=================================================================
                            String processFlowObj = null;
                            String processDefinitionLevel = CIMStateConst.SP_PD_FLOWLEVEL_MODULE;
                            oneResultQuery = cimJpaRepository
                                    .queryOneColumn("SELECT ID FROM OMPRF " +
                                            "WHERE PRP_ID = ?1 " +
                                            "AND PRP_LEVEL = ?2 " +
                                            "AND  ACTIVE_FLAG = ?3",
                                            returnModulePdid, processDefinitionLevel, hvTrue);

                            bFindFlag = true;
                            log.debug("ObjectUtils.isEmpty(oneResultQuery)");
                            if (CimObjectUtils.isEmpty(oneResultQuery)) {
                                bFindFlag = false;
                            } else {
                                processFlowObj = CimObjectUtils.toString(oneResultQuery.get(0));
                            }

                            //=================================================================
                            // Step5-1
                            // Get ModulePOS with return ModuleOpeNo from new MODULE_PF_OBJ(ModlePF-D)
                            //  if ModulePOS is not found, Go to Step6.
                            //=================================================================
                            log.debug("Step5-1 Get ModulePOS with return ModuleOpeNo from " +
                                    "new MODULE_PF_OBJ(ModlePF-D) if ModulePOS is not found, Go to Step6.");
                            log.trace("bFindFlag : {}",bFindFlag);
                            if (bFindFlag) {
                                returnModulePfObj = processFlowObj;
                                //--- Get seq_no of return process from module PF
                                Integer sequenceNumber = 0;
                                String processOperationSpecificationsObj = null;
                                multiResultQuery = cimJpaRepository
                                        .query(" SELECT IDX_NO, PRSS_RKEY FROM OMPRF_PRSSSEQ " +
                                                "WHERE REFKEY = ?1 " +
                                                "AND LINK_KEY = ?2",
                                                returnModulePfObj, returnModuleOpeNo);

                                log.trace("ObjectUtils.isEmpty(multiResultQuery) : {}",
                                        CimObjectUtils.isEmpty(multiResultQuery));
                                if (CimObjectUtils.isEmpty(multiResultQuery)) {
                                    returnModulePfObj = originalReturnModulePfObj;
                                    bFindFlag = false;
                                } else {
                                    sequenceNumber = Integer.parseInt(
                                            CimObjectUtils.toString(multiResultQuery.get(0)[0]));
                                    processOperationSpecificationsObj = CimObjectUtils
                                            .toString(multiResultQuery.get(0)[1]);
                                }
                                log.trace("bFindFlag : {}",bFindFlag);
                                if (bFindFlag) {
                                    returnModulePfPoslistSeqno = sequenceNumber;
                                    returnModulePosObj = processOperationSpecificationsObj;
                                }
                            }
                        } //if( returnModulePfState == 0 )

                        log.trace("returnModulePfState || !bFindFlag : {}",returnModulePfState || !bFindFlag);
                        if (returnModulePfState || !bFindFlag) { //TODO:check state is one
                            //=================================================================
                            // Step6
                            //  When STATE of MODULE_PF_OBJ is 1 or ModulePOS does not found,
                            //   Get ModulePOS with return ModuleOpeNo from new MODULE_PF_OBJ(ModlePF-A)
                            //=================================================================
                            log.trace("Step6 Get ModulePOS with return ModuleOpeNo from new MODULE_PF_OBJ(ModlePF-A)");
                            multiResultQuery = cimJpaRepository
                                    .query("SELECT IDX_NO,  PRSS_RKEY FROM OMPRF_PRSSSEQ " +
                                            "WHERE REFKEY = ?1 " +
                                            "AND LINK_KEY = ?2",
                                            returnModulePfObj, returnModuleOpeNo);

                            Validations.check(CimObjectUtils.isEmpty(multiResultQuery),
                                    retCodeConfig.getNotFoundProcessFlow());
                            returnModulePfPoslistSeqno =  Integer.parseInt(
                                    CimObjectUtils.toString(multiResultQuery.get(0)[0]));
                            returnModulePosObj = CimObjectUtils.toString(multiResultQuery.get(0)[1]);
                        } //if( returnModulePfState == 1 || bFindFlag == FALSE )
                    } //if( bFindFlag == FALSE )

                    //--- Get seq_no of return module from main PF
                    log.debug("Get seq_no of return module from main PF");
                    oneResultQuery = cimJpaRepository
                            .queryOneColumn(" SELECT IDX_NO FROM OMPRF_ROUTESEQ " +
                                    "WHERE REFKEY = ?1 " +
                                    "AND LINK_KEY = ?2",
                                    returnMainPfObj, returnModuleNo);
                    Validations.check(CimObjectUtils.isEmpty(oneResultQuery),retCodeConfig.getNotFoundProcessFlow());
                    returnMainPfPdlistSeqno =Integer.parseInt(CimObjectUtils.toString(oneResultQuery.get(0)));

                    //--- Get return module PF information
                    log.debug("Get return module PF information");
                    List<Object[]> multiResultQuery = cimJpaRepository
                            .query(" SELECT PRP_ID, ACTIVE_FLAG FROM OMPRF WHERE  ID = ?1", returnModulePfObj);
                    Validations.check(CimObjectUtils.isEmpty(multiResultQuery),retCodeConfig.getNotFoundProcessFlow());
                    returnModulePdid = CimObjectUtils.toString(multiResultQuery.get(0)[0]);
                    returnModulePfState = CimBooleanUtils.getBoolean(CimObjectUtils.toString(multiResultQuery.get(0)[1]));
                }
                //-----------------------------------------------------------------------------
                // (3-3-1) Get next POS from return/active module PF
                //-----------------------------------------------------------------------------
                log.debug("step - 3-3-1 Get next POS from return/active module PF");
                log.trace("returnModulePfState : {}",returnModulePfState);
                if (returnModulePfState) {
                    // Module PF is active, set return POS's seq_no from return module PF
                    modulePfObj = returnModulePfObj;
                    modulePfPoslistSeqno = returnModulePfPoslistSeqno;
                    findFlag = true;
                } else {
                    // Module PF is NOT active, search return POS's seq_no from active module PF
                    findFlag = false;

                    //--- Get active module PF information
                    log.debug("Get active module PF information");
                    String processDefinitionLevel = CIMStateConst.SP_PD_FLOWLEVEL_MODULE;
                    oneResultQuery= cimJpaRepository
                            .queryOneColumn("SELECT ID FROM OMPRF " +
                                    "WHERE PRP_ID = ?1 " +
                                    "AND PRP_LEVEL = ?2 " +
                                    "AND  ACTIVE_FLAG = ?3",
                                    returnModulePdid, processDefinitionLevel, hvTrue);
                    Validations.check(CimObjectUtils.isEmpty(oneResultQuery),retCodeConfig.getNotFoundProcessFlow());
                    activeModulePfObj = CimObjectUtils.toString(oneResultQuery.get(0));
                    i = 0;
                    while (opeCount < searchCount) {
                        // Search the return operation by finding the return module openo on active module PF
                        log.trace("i <= 0 : {}",i <= 0);
                        if (i <= 0) {
                            oneResultQuery = cimJpaRepository
                                    .queryOneColumn("SELECT IDX_NO FROM OMPRF_PRSSSEQ " +
                                            "WHERE REFKEY = ?1 " +
                                            "AND LINK_KEY = ?2",
                                            activeModulePfObj, returnModuleOpeNo);
                            log.trace("!ObjectUtils.isEmpty(oneResultQuery) : {}",
                                    !CimObjectUtils.isEmpty(oneResultQuery));
                            if (!CimObjectUtils.isEmpty(oneResultQuery)) {
                                modulePfObj = activeModulePfObj;
                                modulePfPoslistSeqno = Integer.parseInt(CimObjectUtils.toString(oneResultQuery.get(0)));
                                findFlag = true;
                                break;
                            } else {
                                Infos.OperationProcessRefListAttributes attributes
                                        = new Infos.OperationProcessRefListAttributes();
                                attributes.setSeqno(returnSeqNo);
                                attributes.setRouteID(new ObjectIdentifier(returnMainPdid, returnMainPdobj));
                                attributes.setOperationNumber(returnOpeNo);
                                Infos.ProcessRef processRef = new Infos.ProcessRef();
                                processRef.setProcessFlow(returnPfObj);
                                processRef.setMainProcessFlow(returnMainPfObj);
                                processRef.setModuleNumber(returnModuleNo);
                                processRef.setModuleProcessFlow(returnModulePfObj);
                                processRef.setModulePOS(returnModulePosObj);
                                processRef.setProcessOperationSpecification(
                                        processOperationProcessRefListForLotHelper(objCommon,
                                                attributes.getOperationNumber(), processRef.getProcessFlow()));
                                attributes.setProcessRef(processRef);
                                opeCount = addRefListAttributes(objCommon, attributesList,
                                        attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);

                                log.trace("opeCount < searchCount " +
                                        "&& attributes.getRouteID().getValue().length() == 0\n" +
                                        "&& searchRouteID.getValue().length() == 0 " +
                                        "&& attributes.getOperationNumber().length() == 0\n" +
                                        "&& searchOperationNumber.length() == 0 : {}",
                                        opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                        && searchRouteID.getValue().length() == 0
                                        && attributes.getOperationNumber().length() == 0
                                        && searchOperationNumber.length() == 0);
                                if(opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                        && searchRouteID.getValue().length() == 0
                                        && attributes.getOperationNumber().length() == 0
                                        && searchOperationNumber.length() == 0){
                                    opeCount = searchCount;
                                }
                            }
                        } else {
                            // Search the next operation by finding the next module openo on active module PF
                            //--- Get the next operation seq_no on return module PF
                            log.debug("Search the next operation by finding the next module openo on active module PF");
                            returnModulePfPoslistSeqno++;
                            List<Object[]> multiResultQuery= cimJpaRepository
                                    .query("SELECT LINK_KEY, PRSS_RKEY FROM OMPRF_PRSSSEQ " +
                                            "WHERE  REFKEY = ?1 " +
                                            "AND IDX_NO = ?2",
                                            returnModulePfObj, returnModulePfPoslistSeqno);

                            log.trace("!ObjectUtils.isEmpty(multiResultQuery) : {}",!CimObjectUtils.isEmpty(multiResultQuery));
                            if (!CimObjectUtils.isEmpty(multiResultQuery)) {
                                //--- Keep the next operation information on return module PF
                                nextModuleOpeNo = CimObjectUtils.toString(multiResultQuery.get(0)[0]);
                                nextModulePosObj = CimObjectUtils.toString(multiResultQuery.get(0)[1]);

                                //--- Search the corresponding next module openo from active module PF
                                log.debug("Search the corresponding next module openo from active module PF");
                                oneResultQuery = cimJpaRepository
                                        .queryOneColumn(" SELECT IDX_NO FROM OMPRF_PRSSSEQ " +
                                                "WHERE REFKEY = ?1 " +
                                                "AND LINK_KEY = ?2", activeModulePfObj, nextModuleOpeNo);

                                log.trace("!ObjectUtils.isEmpty(oneResultQuery) : {}",
                                        !CimObjectUtils.isEmpty(oneResultQuery));
                                if (!CimObjectUtils.isEmpty(oneResultQuery)) {
                                    modulePfObj = activeModulePfObj;
                                    modulePfPoslistSeqno = Integer.parseInt(
                                            CimObjectUtils.toString(oneResultQuery.get(0)));
                                    findFlag = true;
                                    break;
                                } else {
                                    Infos.OperationProcessRefListAttributes attributes
                                            = new Infos.OperationProcessRefListAttributes();
                                    attributes.setSeqno(returnSeqNo);
                                    attributes.setRouteID(new ObjectIdentifier(returnMainPdid, returnMainPdobj));
                                    attributes.setOperationNumber(
                                            BaseStaticMethod.convertModuleOpeNoToOpeNo(
                                                    returnModuleNo, nextModuleOpeNo));
                                    Infos.ProcessRef processRef = new Infos.ProcessRef();
                                    processRef.setProcessFlow(returnPfObj);
                                    processRef.setMainProcessFlow(returnMainPfObj);
                                    processRef.setModuleNumber(returnModuleNo);
                                    processRef.setModuleProcessFlow(returnModulePfObj);
                                    processRef.setModulePOS(nextModulePosObj);
                                    processRef.setProcessOperationSpecification(
                                            processOperationProcessRefListForLotHelper(objCommon,
                                                    attributes.getOperationNumber(), processRef.getProcessFlow()));
                                    attributes.setProcessRef(processRef);
                                    opeCount = addRefListAttributes(objCommon, attributesList, attributes,
                                            searchRouteID, searchOperationNumber, opeCount, searchCount);

                                    log.trace("opeCount < searchCount " +
                                            "&& attributes.getRouteID().getValue().length() == 0\n" +
                                            "&& searchRouteID.getValue().length() == 0 " +
                                            "&& attributes.getOperationNumber().length() == 0\n" +
                                            "&& searchOperationNumber.length() == 0 : {}",
                                            opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                            && searchRouteID.getValue().length() == 0
                                            && attributes.getOperationNumber().length() == 0
                                            && searchOperationNumber.length() == 0);
                                    if(opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                            && searchRouteID.getValue().length() == 0
                                            && attributes.getOperationNumber().length() == 0
                                            && searchOperationNumber.length() == 0){
                                        opeCount = searchCount;
                                    }
                                }
                            } else break;
                        }// end of else if( i == 0 )
                        i++;
                    }// end of while
                }
                log.trace("opeCount == searchCount : {}",opeCount == searchCount);
                if (opeCount == searchCount) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // Set next POS from active return module PF
                //-----------------------------------------------------------------------------
                log.debug("Set next POS from active return module PF");
                log.trace("findFlag");
                if (findFlag) {
                    List<Object[]> processFlowPOSLists = cimJpaRepository
                            .query("SELECT LINK_KEY, " +
                                    "PRSS_RKEY FROM " +
                                    "OMPRF_PRSSSEQ " +
                                    "WHERE  REFKEY = ?1 " +
                                    "and IDX_NO >= ?2 " +
                                    "ORDER BY IDX_NO", modulePfObj, modulePfPoslistSeqno);

                    count2 = 0;
                    while (opeCount < searchCount) {
                        log.trace("ObjectUtils.isEmpty(processFlowPOSLists) " +
                                "|| count2 >= processFlowPOSLists.size() : {}",
                                CimObjectUtils.isEmpty(processFlowPOSLists) || count2 >= processFlowPOSLists.size());
                        if (CimObjectUtils.isEmpty(processFlowPOSLists) || count2 >= processFlowPOSLists.size())
                            break;
                        Object[] posList = processFlowPOSLists.get(count2);
                        Infos.OperationProcessRefListAttributes attributes
                                = new Infos.OperationProcessRefListAttributes();
                        attributes.setSeqno(returnSeqNo);
                        attributes.setRouteID(new ObjectIdentifier(returnMainPdid, returnMainPdobj));
                        Infos.ProcessRef processRef = new Infos.ProcessRef();
                        processRef.setProcessFlow(returnPfObj);
                        processRef.setMainProcessFlow(returnMainPfObj);
                        processRef.setModuleNumber(returnModuleNo);
                        processRef.setModuleProcessFlow(returnModulePfObj);
                        processRef.setModulePOS(String.valueOf(posList[1]));
                        attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(returnModuleNo,
                                CimObjectUtils.toString(posList[0])));
                        processRef.setProcessOperationSpecification(CimStringUtils.EMPTY);
                        log.trace("CimStringUtils.isEmpty(processRef.getProcessOperationSpecification()) : {}",
                                processRef.getProcessOperationSpecification());
                        if(CimStringUtils.isEmpty(processRef.getProcessOperationSpecification())) {
                            processRef.setProcessOperationSpecification(
                                    processOperationProcessRefListForLotHelper(objCommon,
                                            attributes.getOperationNumber(), processRef.getProcessFlow()));
                        }

                        attributes.setProcessRef(processRef);
                        opeCount = addRefListAttributes(objCommon, attributesList,
                                attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                        count2++;

                        log.trace("opeCount < searchCount && attributes.getRouteID().getValue().length() == 0\n" +
                                "&& searchRouteID.getValue().length() == 0 " +
                                "&& attributes.getOperationNumber().length() == 0\n" +
                                "&& searchOperationNumber.length() == 0 : {}",
                                opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                && searchRouteID.getValue().length() == 0
                                        && attributes.getOperationNumber().length() == 0
                                && searchOperationNumber.length() == 0);
                        if(opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                && searchRouteID.getValue().length() == 0
                                && attributes.getOperationNumber().length() == 0
                                && searchOperationNumber.length() == 0){
                            opeCount = searchCount;
                        }
                    }
                }
                log.debug("opeCount == searchCount : {}",opeCount == searchCount);
                if (opeCount == searchCount) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // (3-3-2) Get next module PD from return/active main PF
                //-----------------------------------------------------------------------------
                // If main PF is active, set next module PD's seq_no from return main PF
                log.debug("(3-3-2) Get next module PD from return/active main PF");
                log.trace("returnMainPfState : {}",returnMainPfState);
                if (returnMainPfState) {
                    mainPfObj = returnMainPfObj;
                    mainPfPdlistSeqno = returnMainPfPdlistSeqno + 1;
                    findFlag = true;
                }
                // If main PF is NOT active, search next module PD's seq_no from active main PF
                else {
                    findFlag = false;
                    //--- Get active main PF information
                    String processDefinitionLevel = CIMStateConst.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE;
                    oneResultQuery = cimJpaRepository
                            .queryOneColumn(" SELECT ID FROM OMPRF " +
                                    "WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2 " +
                                    "AND  ACTIVE_FLAG = ?3",
                                    returnMainPdid, processDefinitionLevel, hvTrue);

                    Validations.check(CimObjectUtils.isEmpty(oneResultQuery),retCodeConfig.getNotFoundProcessFlow());
                    activeMainPfObj = CimObjectUtils.toString(oneResultQuery.get(0));
                    i = 0;
                    while (opeCount < searchCount) {
                        // Search the next module PD by finding the return module number on active main PF
                        log.trace("i == 0 : {}",i == 0);
                        if (i == 0) {
                            List<Object[]> multiResultQuery = cimJpaRepository
                                    .query("SELECT IDX_NO, ROUTE_ID FROM OMPRF_ROUTESEQ " +
                                            "WHERE  REFKEY = ?1 " +
                                            "AND LINK_KEY = ?2",
                                            activeMainPfObj, returnModuleNo);

                            log.trace("!ObjectUtils.isEmpty(multiResultQuery) : {}",
                                    !CimObjectUtils.isEmpty(multiResultQuery));
                            if (!CimObjectUtils.isEmpty(multiResultQuery)) {
                                mainPfObj = activeMainPfObj;
                                mainPfPdlistSeqno = Integer
                                        .parseInt(CimObjectUtils.toString(multiResultQuery.get(0)[0]));
                                findFlag = true;
                                break;
                            }

                        }
                        // Search the next module PD by finding the next module number on active main PF
                        else {
                            returnMainPfPdlistSeqno++;

                            List<Object[]> multiResultQuery = cimJpaRepository
                                    .query("SELECT ROUTE_ID, ROUTE_NO FROM OMPRF_ROUTESEQ " +
                                            "WHERE REFKEY = ?1 " +
                                            "AND IDX_NO = ?2",
                                            returnMainPfObj, returnMainPfPdlistSeqno);

                            log.trace("!ObjectUtils.isEmpty(multiResultQuery) : {}",
                                    !CimObjectUtils.isEmpty(multiResultQuery));
                            if (!CimObjectUtils.isEmpty(multiResultQuery)) {
                                nextModulePdid = CimObjectUtils.toString(multiResultQuery.get(0)[0]);
                                nextModuleNo = CimObjectUtils.toString(multiResultQuery.get(0)[1]);

                                //--- Search the corresponding next module number from the active main PF
                                log.debug("Search the corresponding next module number from the active main PF");
                                oneResultQuery = cimJpaRepository
                                        .queryOneColumn("SELECT IDX_NO FROM OMPRF_ROUTESEQ " +
                                                "WHERE REFKEY = ?1 " +
                                                "AND LINK_KEY = ?2",
                                                activeMainPfObj, nextModuleNo);

                                log.trace("!ObjectUtils.isEmpty(oneResultQuery) : {}",
                                        !CimObjectUtils.isEmpty(oneResultQuery));
                                if (!CimObjectUtils.isEmpty(oneResultQuery)) {
                                    mainPfObj = activeMainPfObj;
                                    mainPfPdlistSeqno = Integer
                                            .parseInt(CimObjectUtils.toString(oneResultQuery.get(0)));
                                    findFlag = true;
                                    break;
                                } else {
                                    //---------------------------------------------------------------------------
                                    // Set next POS from active next module PF and return(inactive) main PF
                                    //---------------------------------------------------------------------------
                                    //--- Get active module PF information
                                    //--- If module PDID's version is "##", convert it to real PDID
                                    processDefinitionLevel = CIMStateConst.SP_PD_FLOWLEVEL_MODULE;
                                    String processFlowObj = getActiveProcessFlowObj(nextModulePdid,
                                            processDefinitionLevel);
                                    //--- Set next operation information on active module PF
                                    List<Object[]> pfPOSList = cimJpaRepository
                                            .query("SELECT LINK_KEY, PRSS_RKEY FROM OMPRF_PRSSSEQ " +
                                                    "WHERE REFKEY = ?1 " +
                                                    "ORDER BY IDX_NO ",
                                                    processFlowObj);

                                    count2 = 0;
                                    while (opeCount < searchCount) {
                                        log.trace("ObjectUtils.isEmpty(pfPOSList) || count2 >= pfPOSList.size() : {}",
                                                CimObjectUtils.isEmpty(pfPOSList) || count2 >= pfPOSList.size());
                                        if (CimObjectUtils.isEmpty(pfPOSList) || count2 >= pfPOSList.size())
                                            break;
                                        Object[] posList = pfPOSList.get(count2);
                                        Infos.OperationProcessRefListAttributes attributes
                                                = new Infos.OperationProcessRefListAttributes();
                                        attributes.setSeqno(returnSeqNo);
                                        attributes.setRouteID(new ObjectIdentifier(returnMainPdid, returnMainPdobj));
                                        Infos.ProcessRef processRef = new Infos.ProcessRef();
                                        processRef.setProcessFlow(returnPfObj);
                                        processRef.setMainProcessFlow(returnMainPfObj);
                                        processRef.setModuleNumber(nextModuleNo);
                                        processRef.setModuleProcessFlow(processFlowObj);
                                        processRef.setProcessOperationSpecification(
                                                processOperationProcessRefListForLotHelper(objCommon,
                                                        attributes.getOperationNumber(), processRef.getProcessFlow()));
                                        attributes.setProcessRef(processRef);
                                        attributes.setOperationNumber(BaseStaticMethod
                                                .convertModuleOpeNoToOpeNo(nextModuleNo,
                                                        CimObjectUtils.toString(posList[0])));
                                        processRef.setModulePOS(CimObjectUtils.toString(posList[0]));
                                        attributes.setProcessRef(processRef);
                                        opeCount = addRefListAttributes(objCommon, attributesList, attributes,
                                                searchRouteID, searchOperationNumber, opeCount, searchCount);
                                        count2++;

                                        log.trace("opeCount < searchCount " +
                                                "&& attributes.getRouteID().getValue().length() == 0\n" +
                                                "&& searchRouteID.getValue().length() == 0 " +
                                                "&& attributes.getOperationNumber().length() == 0\n" +
                                                "&& searchOperationNumber.length() == 0 : {}",
                                                opeCount < searchCount
                                                && attributes.getRouteID().getValue().length() == 0
                                                && searchRouteID.getValue().length() == 0
                                                && attributes.getOperationNumber().length() == 0
                                                && searchOperationNumber.length() == 0);
                                        if(opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                                && searchRouteID.getValue().length() == 0
                                                && attributes.getOperationNumber().length() == 0
                                                && searchOperationNumber.length() == 0){
                                            opeCount = searchCount;
                                        }
                                    }
                                }
                            } else break;
                        }// end of else if( i == 0 )
                        i++;
                    }// end of while
                }// end of else if( mainPFState == TRUE )
                log.trace("opeCount == searchCount : {}",opeCount == searchCount);
                if (opeCount == searchCount) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // Set next POS from active next module PF and active main PF
                //-----------------------------------------------------------------------------
                log.debug("Set next POS from active next module PF and active main PF");
                log.trace("findFlag : {}",findFlag);
                if (findFlag) {
                    //--- Get next module pdid, module_no from active main PF
                    log.debug("Get next module pdid, module_no from active main PF");
                    List<Object[]> pfPDList = cimJpaRepository
                            .query("SELECT ROUTE_ID, ROUTE_NO FROM OMPRF_ROUTESEQ " +
                                    "WHERE  REFKEY = ?1 " +
                                    "AND IDX_NO >= ?2 " +
                                    "ORDER BY IDX_NO ",
                                    mainPfObj, mainPfPdlistSeqno);

                    count2 = 0;
                    while (true) {
                        log.trace("ObjectUtils.isEmpty(pfPDList) || count2 >= pfPDList.size() : {}",
                                CimObjectUtils.isEmpty(pfPDList) || count2 >= pfPDList.size());
                        if (CimObjectUtils.isEmpty(pfPDList) || count2 >= pfPDList.size()) break;
                        Object[] definitionList = pfPDList.get(count2);
                        String moduleNO = CimObjectUtils.toString(definitionList[1]);
                        log.debug("Get active module PF information");
                        //--- Get active module PF information
                        String processDefinitionLevel = CIMStateConst.SP_PD_FLOWLEVEL_MODULE;
                        //--- If module PDID's version is "##", convert it to real PDID
                        String processFlowObj = getActiveProcessFlowObj(CimObjectUtils.toString(definitionList[0]), processDefinitionLevel);

                        //--- Set next operation information on active module PF
                        List<Object[]> pfPOSList = cimJpaRepository
                                .query("SELECT LINK_KEY, PRSS_RKEY FROM OMPRF_PRSSSEQ " +
                                        "WHERE REFKEY = ?1 " +
                                        "ORDER BY IDX_NO ",
                                        processFlowObj);
                        count3 = 0;
                        while (opeCount < searchCount) {
                            log.debug("ObjectUtils.isEmpty(pfPOSList) || count3 >= pfPOSList.size() : {}",
                                    CimObjectUtils.isEmpty(pfPOSList) || count3 >= pfPOSList.size());
                            if (CimObjectUtils.isEmpty(pfPOSList) || count3 >= pfPOSList.size())
                                break;
                            Object[] posList = pfPOSList.get(count3);
                            Infos.OperationProcessRefListAttributes attributes
                                    = new Infos.OperationProcessRefListAttributes();
                            attributes.setSeqno(returnSeqNo);
                            attributes.setRouteID(new ObjectIdentifier(returnMainPdid, returnMainPdobj));
                            Infos.ProcessRef processRef = new Infos.ProcessRef();
                            processRef.setModuleProcessFlow(processFlowObj);
                            processRef.setModuleNumber(moduleNO);
                            processRef.setProcessFlow(returnPfObj);
                            processRef.setMainProcessFlow(mainPfObj);
                            attributes.setOperationNumber(BaseStaticMethod
                                    .convertModuleOpeNoToOpeNo(moduleNO, CimObjectUtils.toString(posList[0])));
                            processRef.setProcessOperationSpecification(
                                    processOperationProcessRefListForLotHelper(objCommon,
                                            attributes.getOperationNumber(), processRef.getProcessFlow()));
                            processRef.setModulePOS(CimObjectUtils.toString(posList[1]));
                            attributes.setProcessRef(processRef);
                            opeCount = addRefListAttributes(objCommon, attributesList, attributes,
                                    searchRouteID, searchOperationNumber, opeCount, searchCount);
                            count3++;

                            log.trace("opeCount < searchCount " +
                                    "&& attributes.getRouteID().getValue().length() == 0\n" +
                                    "&& searchRouteID.getValue().length() == 0 " +
                                    "&& attributes.getOperationNumber().length() == 0\n" +
                                    "&& searchOperationNumber.length() == 0 : {}",
                                    opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                    && searchRouteID.getValue().length() == 0
                                    && attributes.getOperationNumber().length() == 0
                                    && searchOperationNumber.length() == 0);
                            if(opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                    && searchRouteID.getValue().length() == 0
                                    && attributes.getOperationNumber().length() == 0
                                    && searchOperationNumber.length() == 0){
                                opeCount = searchCount;
                            }
                        }
                        count2++;
                    }
                }// end of if( findFlag == TRUE )
                count++;
                log.trace("opeCount == searchCount : {}",opeCount == searchCount);
                if (opeCount == searchCount) {
                    return attributesList;
                }
            }
        }
        //-----------------------------------------------------------------------------
        // (4) Get backward process information         if( searchDirection == FALSE )
        //-----------------------------------------------------------------------------
        else {
            log.debug("step 4 Get backward process information         if( searchDirection == FALSE )");
            //-----------------------------------------------------------------------------
            // (4-1) Get backward process from FRPO, if( posSearchFlag == FALSE )
            //-----------------------------------------------------------------------------
            log.debug("step 4-1 Get backward process from OMPROPE, if( posSearchFlag == FALSE )");
            log.trace("!posSearchFlag : {}",!posSearchFlag);
            if (!posSearchFlag) {
                //Get a sequence number of current operation in FRPFX_POLIST
                Object[] obj = cimJpaRepository
                        .queryOne("SELECT IDX_NO FROM OMPRFCX_PROPESEQ " +
                                "WHERE REFKEY = ?1 " +
                                "AND PROPE_RKEY = ?2",
                                lotProcessFlowContextObj, currentPoObj);
                Integer sequenceNumber = CimNumberUtils.intValue((Number) obj[0]);
                Validations.check(CimObjectUtils.isEmpty(sequenceNumber),retCodeConfig.getNotFoundProcessFlow());

                //Get the backward operations from FRPFX_POLIST ( It does not include current operation.)
                List<Object[]> pfxPOList = cimJpaRepository
                        .query("SELECT PROPE_RKEY FROM OMPRFCX_PROPESEQ " +
                                "WHERE  REFKEY = ?1 " +
                                "AND IDX_NO < ?2 " +
                                "ORDER BY IDX_NO ",
                                lotProcessFlowContextObj, sequenceNumber);

                count = 0;
                while (opeCount < searchCount) {
                    log.trace("ArrayUtils.isEmpty(pfxPOList) || count >= pfxPOList.size() : {]",
                            CimArrayUtils.isEmpty(pfxPOList) || count >= pfxPOList.size());
                    if (CimArrayUtils.isEmpty(pfxPOList) || count >= pfxPOList.size()) break;
                    String pfxPoLessThanListObj = CimObjectUtils.toString(pfxPOList.get(count)[0]);
                    List<Object[]> multiResultQuery = cimJpaRepository.query("SELECT MAIN_PROCESS_ID, " +
                            "       MAIN_PROCESS_RKEY, " +
                            "       OPE_NO, " +
                            "       MPROCESS_PRF_RKEY, " +
                            "       MPROCESS_PRSS_RKEY, " +
                            "       MROUTE_PRF_RKEY, " +
                            "       ROUTE_NO, " +
                            "       ROUTE_PRF_RKEY, " +
                            "       ROUTE_PRSS_RKEY FROM OMPROPE  WHERE  ID = ?1",pfxPoLessThanListObj);

                    Validations.check(CimObjectUtils.isEmpty(multiResultQuery),
                            retCodeConfig.getNotFoundProcessOperation());
                    Infos.OperationProcessRefListAttributes attributes = new Infos.OperationProcessRefListAttributes();
                    attributes.setSeqno(-1);
                    attributes.setRouteID(new ObjectIdentifier(CimObjectUtils.toString(multiResultQuery.get(0)[0]),
                            CimObjectUtils.toString(multiResultQuery.get(0)[1])));
                    attributes.setOperationNumber(CimObjectUtils.toString(multiResultQuery.get(0)[2]));
                    Infos.ProcessRef processRef = new Infos.ProcessRef();
                    processRef.setProcessFlow(CimObjectUtils.toString(multiResultQuery.get(0)[3]));
                    processRef.setProcessOperationSpecification(CimObjectUtils.toString(multiResultQuery.get(0)[4]));
                    processRef.setMainProcessFlow(CimObjectUtils.toString(multiResultQuery.get(0)[5]));
                    processRef.setModuleNumber(CimObjectUtils.toString(multiResultQuery.get(0)[6]));
                    processRef.setModuleProcessFlow(CimObjectUtils.toString(multiResultQuery.get(0)[7]));
                    processRef.setModulePOS(CimObjectUtils.toString(multiResultQuery.get(0)[8]));
                    attributes.setProcessRef(processRef);

                    log.trace("StringUtils.isEmpty(StringUtils.toString(multiResultQuery.get(0)[4])) : {}",
                            CimStringUtils.isEmpty(CimObjectUtils.toString(multiResultQuery.get(0)[4])));
                    if(CimStringUtils.isEmpty(CimObjectUtils.toString(multiResultQuery.get(0)[4]))) {
                        processRef.setProcessOperationSpecification(
                                processOperationProcessRefListForLotHelper(objCommon, attributes.getOperationNumber(),
                                        processRef.getProcessFlow()));
                    }

                    opeCount = addRefListAttributes(objCommon, attributesList, attributes, searchRouteID,
                            searchOperationNumber, opeCount, searchCount);
                    count++;

                    log.trace("opeCount < searchCount && attributes.getRouteID().getValue().length() == 0\n" +
                            "&& searchRouteID.getValue().length() == 0 " +
                            "&& attributes.getOperationNumber().length() == 0\n" +
                            "&& searchOperationNumber.length() == 0 : {}",
                            opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                            && searchRouteID.getValue().length() == 0
                                    && attributes.getOperationNumber().length() == 0
                            && searchOperationNumber.length() == 0);
                    if(opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                            && searchRouteID.getValue().length() == 0
                            && attributes.getOperationNumber().length() == 0
                            && searchOperationNumber.length() == 0){
                        opeCount = searchCount;
                    }
                }
            }
            //-----------------------------------------------------------------------------
            // (4-2) Get backward process from FRPOS, if( posSearchFlag == TRUE )
            //-----------------------------------------------------------------------------
            else {
                log.debug("step 4-2 Get backward process from OMPRSS, if( posSearchFlag == TRUE )");
                //-----------------------------------------------------------------------------
                // (4-2-1) Get previous POS from current/active module PF
                //-----------------------------------------------------------------------------
                // If module PF is active, set previous POS's seq_no from current module PF
                log.debug("step 4-2-1 Get previous POS from current/active module PF");
                log.trace("modulePFState : {}",modulePFState);
                if (modulePFState) {
                    modulePfObj = currentModulePfObj;
                    modulePfPoslistSeqno = currentModulePfPoslistSeqno - 1;
                    findFlag = true;
                } else {
                    findFlag = false;
                    //--- Get active module PF information
                    log.debug("Get active module PF information");
                    String processDefinitionLevel = CIMStateConst.SP_PD_FLOWLEVEL_MODULE;
                    activeModulePfObj = getActiveProcessFlowObj(currentModulePdid, processDefinitionLevel);

                    i = 0;
                    while (opeCount < searchCount) {
                        // Search the previous operation by finding the current module openo on active module PF
                        log.debug("Search the previous operation by finding the current module openo on active module PF");
                        log.trace("i <= 0 : {}",i <= 0);
                        if (i <= 0) {
                            oneResultQuery = cimJpaRepository
                                    .queryOneColumn("SELECT IDX_NO FROM OMPRF_PRSSSEQ " +
                                            "WHERE  REFKEY = ?1 AND LINK_KEY = ?2",
                                            activeModulePfObj, currentModuleOpeNo);
                            log.trace("!ObjectUtils.isEmpty(oneResultQuery) : {}",
                                    !CimObjectUtils.isEmpty(oneResultQuery));
                            if (!CimObjectUtils.isEmpty(oneResultQuery)) {
                                //--- Set the previous operation seq_no on active module PF
                                modulePfObj = activeModulePfObj;
                                modulePfPoslistSeqno = Integer.parseInt(
                                        CimObjectUtils.toString(oneResultQuery.get(0))) - 1;
                                findFlag = true;
                                break;
                            }
                        }
                        // Search the previous operation by finding the previous module openo on active module PF
                        else {
                            //--- Get the previous operation seq_no on current module PF
                            currentModulePfPoslistSeqno--;
                            List<Object[]> multiResultQuery = cimJpaRepository
                                    .query("SELECT LINK_KEY, PRSS_RKEY FROM OMPRF_PRSSSEQ " +
                                            "WHERE  REFKEY = ?1 " +
                                            "AND IDX_NO = ?2",
                                            currentModulePfObj, currentModulePfPoslistSeqno);
                            if (!CimObjectUtils.isEmpty(multiResultQuery)) {
                                //--- Keep the previous operation information on current module PF
                                previousModuleOpeNo = CimObjectUtils.toString(multiResultQuery.get(0)[0]);
                                previousModulePosObj = CimObjectUtils.toString(multiResultQuery.get(0)[1]);

                                //--- Search the corresponding previous module openo from active module PF
                                oneResultQuery = cimJpaRepository
                                        .queryOneColumn("SELECT IDX_NO FROM OMPRF_PRSSSEQ " +
                                                "WHERE REFKEY = ?1 AND LINK_KEY = ?2",
                                                activeModulePfObj, previousModuleOpeNo);

                                log.trace("!ObjectUtils.isEmpty(oneResultQuery) : {}",
                                        !CimObjectUtils.isEmpty(oneResultQuery));
                                if (!CimObjectUtils.isEmpty(oneResultQuery)) {
                                    modulePfObj = activeModulePfObj;
                                    modulePfPoslistSeqno = Integer.parseInt(
                                            CimObjectUtils.toString(oneResultQuery.get(0)));
                                    findFlag = true;
                                    break;
                                } else {
                                    //---------------------------------------------------------------------------
                                    // Set previous POS from inactive current module PF
                                    //---------------------------------------------------------------------------
                                    log.debug("Set previous POS from inactive current module PF");
                                    Infos.OperationProcessRefListAttributes attributes
                                            = new Infos.OperationProcessRefListAttributes();
                                    attributes.setSeqno(-1);
                                    attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                                    attributes.setOperationNumber(
                                            BaseStaticMethod.convertModuleOpeNoToOpeNo(currentModuleNo,
                                                    previousModuleOpeNo));
                                    Infos.ProcessRef processRef = new Infos.ProcessRef();
                                    processRef.setProcessFlow(currentPfObj);
                                    processRef.setMainProcessFlow(currentMainPfObj);
                                    processRef.setModuleNumber(currentModuleNo);
                                    processRef.setModuleProcessFlow(currentModulePfObj);
                                    processRef.setModulePOS(previousModulePosObj);
                                    processRef.setProcessOperationSpecification(
                                            processOperationProcessRefListForLotHelper(objCommon,
                                                    attributes.getOperationNumber(), processRef.getProcessFlow()));
                                    attributes.setProcessRef(processRef);
                                    opeCount = addRefListAttributes(objCommon, attributesList, attributes,
                                            searchRouteID, searchOperationNumber, opeCount, searchCount);
                                }
                            } else break;
                        }// end of else if( i == 0 )
                        i++;
                    }// end of while
                }// end of else if( modulePFState == TRUE )
                log.trace("opeCount == searchCount : {}",searchDirection == FALSE);
                if (opeCount == searchCount) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // Set previous POS from active current module PF
                //-----------------------------------------------------------------------------
                log.debug("Set previous POS from active current module PF");
                log.trace("findFlag");
                if (findFlag) {
                    List<Object[]> pfPOSList = cimJpaRepository
                            .query("SELECT LINK_KEY, PRSS_RKEY FROM OMPRF_PRSSSEQ " +
                                    "WHERE REFKEY = ?1 " +
                                    "AND IDX_NO <= ?2 " +
                                    "ORDER BY IDX_NO DESC", modulePfObj, modulePfPoslistSeqno);

                    count = 0;
                    while (opeCount < searchCount) {
                        log.trace("ObjectUtils.isEmpty(pfPOSList) || count >= pfPOSList.size() : {}",
                                CimObjectUtils.isEmpty(pfPOSList) || count >= pfPOSList.size());
                        if (CimObjectUtils.isEmpty(pfPOSList) || count >= pfPOSList.size()) {
                            break;
                        }
                        Object[] pfPosList = pfPOSList.get(count);
                        //--- Set previous operation information on active current module PF
                        Infos.OperationProcessRefListAttributes attributes
                                = new Infos.OperationProcessRefListAttributes();
                        attributes.setSeqno(-1);
                        attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                        Infos.ProcessRef processRef = new Infos.ProcessRef();
                        processRef.setProcessFlow(currentPfObj);
                        processRef.setMainProcessFlow(currentMainPfObj);
                        processRef.setModuleNumber(currentModuleNo);
                        processRef.setModuleProcessFlow(modulePfObj);
                        attributes.setOperationNumber(BaseStaticMethod
                                .convertModuleOpeNoToOpeNo(currentModuleNo, CimObjectUtils.toString(pfPosList[0])));
                        processRef.setProcessOperationSpecification(processOperationProcessRefListForLotHelper(objCommon,
                                attributes.getOperationNumber(), processRef.getProcessFlow()));
                        processRef.setModulePOS(CimObjectUtils.toString(pfPosList[1]));
                        attributes.setProcessRef(processRef);
                        opeCount = addRefListAttributes(objCommon, attributesList, attributes, searchRouteID,
                                searchOperationNumber, opeCount, searchCount);
                        count++;

                        log.trace("opeCount < searchCount && attributes.getRouteID().getValue().length() == 0\n" +
                                "&& searchRouteID.getValue().length() == 0 " +
                                "&& attributes.getOperationNumber().length() == 0\n" +
                                "&& searchOperationNumber.length() == 0 : {}",
                                opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                && searchRouteID.getValue().length() == 0
                                && attributes.getOperationNumber().length() == 0
                                && searchOperationNumber.length() == 0);
                        if(opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                && searchRouteID.getValue().length() == 0
                                && attributes.getOperationNumber().length() == 0
                                && searchOperationNumber.length() == 0){
                            opeCount = searchCount;
                        }
                    }
                }
                log.trace("opeCount == searchCount : {}",opeCount == searchCount);
                if (opeCount == searchCount) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // (4-2-2) Get previous module PD from current/active main PF
                //-----------------------------------------------------------------------------
                log.debug("step 4-2-2 Get previous module PD from current/active main PF");
                String mainPfObj = null, activeMainPfObj;
                String previousModulePdid, previousModuleNo;
                Integer mainPfPdlistSeqno = 0;

                // If main PF is active, set previous module PD's seq_no from current main PF
                log.debug("If main PF is active, set previous module PD's seq_no from current main PF");
                log.trace("mainPFState : {}",mainPFState);
                if (mainPFState) {
                    mainPfObj = currentMainPfObj;
                    mainPfPdlistSeqno = currentMainPfPdlistSeqno - 1;
                    findFlag = true;
                }
                // If main PF is NOT active, search previous module PD's seq_no from active main PF
                else {
                    findFlag = false;

                    //--- Get active main PF information
                    log.debug("Get active main PF information");
                    String processDefinitionLevel = CIMStateConst.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE;
                    oneResultQuery = cimJpaRepository
                            .queryOneColumn("SELECT ID FROM  OMPRF " +
                                    "WHERE  PRP_ID = ?1 " +
                                    "AND PRP_LEVEL = ?2 " +
                                    "AND ACTIVE_FLAG = ?3",
                                    currentMainPdid, processDefinitionLevel, hvTrue );
                    Validations.check(CimObjectUtils.isEmpty(oneResultQuery),retCodeConfig.getNotFoundProcessFlow());
                    activeMainPfObj = CimObjectUtils.toString(oneResultQuery.get(0));

                    i = 0;
                    while (true) {
                        // Search the previous module PD by finding the current module number on active main PF
                        log.trace("i == 0 : {}",i == 0);
                        if (i == 0) {
                            List<Object[]> multiResultQuery = cimJpaRepository
                                    .query("SELECT IDX_NO, ROUTE_ID FROM OMPRF_ROUTESEQ " +
                                            "WHERE REFKEY = ?1  " +
                                            "AND LINK_KEY = ?2",
                                            activeMainPfObj, currentModuleNo);
                            if (!CimObjectUtils.isEmpty(multiResultQuery)) {
                                //--- Set the previous module PD's seq_no on active module PF
                                log.debug("Set the previous module PD's seq_no on active module PF");
                                mainPfObj = activeMainPfObj;
                                mainPfPdlistSeqno = Integer.parseInt(CimObjectUtils
                                        .toString(multiResultQuery.get(0)[0])) - 1;
                                findFlag = true;
                                break;
                            }
                        }
                        // Search the previous PD by finding the previous module number on active main PF
                        else {
                            //--- Get the previous module PD's seq_no on current main PF
                            log.debug("Get the previous module PD's seq_no on current main PF");
                            currentMainPfPdlistSeqno--;
                            List<Object[]> multiResultQuery = cimJpaRepository
                                    .query("SELECT ROUTE_ID, ROUTE_NO FROM OMPRF_ROUTESEQ " +
                                            "WHERE REFKEY = ?1 " +
                                            "AND IDX_NO = ?2",
                                            currentMainPfObj, currentMainPfPdlistSeqno);

                            log.trace("!ObjectUtils.isEmpty(multiResultQuery) : {}",
                                    !CimObjectUtils.isEmpty(multiResultQuery));
                            if (!CimObjectUtils.isEmpty(multiResultQuery)) {
                                //--- Keep the previous module information on current main PF
                                previousModulePdid = CimObjectUtils.toString(multiResultQuery.get(0)[0]);
                                previousModuleNo = CimObjectUtils.toString(multiResultQuery.get(0)[1]);
                                //--- Search the corresponding previous module number from the active main PF
                                oneResultQuery= cimJpaRepository
                                        .queryOneColumn("SELECT IDX_NO FROM OMPRF_ROUTESEQ " +
                                                "WHERE REFKEY = ?1 " +
                                                "AND LINK_KEY = ?2",
                                                activeMainPfObj, previousModuleNo);

                                log.trace("!ObjectUtils.isEmpty(oneResultQuery) : {}",
                                        !CimObjectUtils.isEmpty(oneResultQuery));
                                if (!CimObjectUtils.isEmpty(oneResultQuery)) {
                                    mainPfObj = activeMainPfObj;
                                    mainPfPdlistSeqno = Integer.parseInt(CimObjectUtils.toString(oneResultQuery.get(0)));
                                    findFlag = true;
                                    break;
                                } else {
                                    //---------------------------------------------------------------------------
                                    // Set previous POS from active previous module PF and current(inactive) main PF
                                    //---------------------------------------------------------------------------
                                    //--- Get active module PF information
                                    //--- If module PDID's version is "##", convert it to real PDID
                                    log.debug("Set previous POS from active previous module PF " +
                                            "and current(inactive) main PF");
                                    processDefinitionLevel = CIMStateConst.SP_PD_FLOWLEVEL_MODULE;
                                    String previousModulePfObj
                                            = getActiveProcessFlowObj(previousModulePdid, processDefinitionLevel);


                                    //--- Set previous operation information on active module PF
                                     List<Object[]> pfPOSList = cimJpaRepository
                                             .query("SELECT LINK_KEY, PRSS_RKEY FROM OMPRF_PRSSSEQ " +
                                                     "WHERE REFKEY = ?1 " +
                                                     "ORDER  BY IDX_NO DESC",
                                                     previousModulePfObj);

                                    count = 0;
                                    while (opeCount < searchCount) {
                                        log.trace("ArrayUtils.isEmpty(pfPOSList) || count >= pfPOSList.size() : {}",
                                                CimArrayUtils.isEmpty(pfPOSList) || count >= pfPOSList.size());
                                        if (CimArrayUtils.isEmpty(pfPOSList) || count >= pfPOSList.size())
                                            break;
                                        Object[] posList = pfPOSList.get(count);
                                        //--- Set previous operation information on active module PF
                                        Infos.OperationProcessRefListAttributes attributes
                                                = new Infos.OperationProcessRefListAttributes();
                                        attributes.setSeqno(-1);
                                        attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                                        Infos.ProcessRef processRef = new Infos.ProcessRef();
                                        processRef.setProcessFlow(currentPfObj);
                                        processRef.setMainProcessFlow(currentMainPfObj);
                                        processRef.setModuleNumber(previousModuleNo);
                                        processRef.setModuleProcessFlow(previousModulePfObj);
                                        attributes.setOperationNumber(BaseStaticMethod
                                                .convertModuleOpeNoToOpeNo(previousModuleNo, CimObjectUtils
                                                        .toString(posList[0])));
                                        processRef.setModulePOS(CimObjectUtils.toString(posList[1]));
                                        processRef.setProcessOperationSpecification(
                                                processOperationProcessRefListForLotHelper(objCommon,
                                                        attributes.getOperationNumber(), processRef.getProcessFlow()));
                                        attributes.setProcessRef(processRef);
                                        opeCount = addRefListAttributes(objCommon, attributesList, attributes,
                                                searchRouteID, searchOperationNumber, opeCount, searchCount);
                                        count++;

                                        log.trace("opeCount < searchCount " +
                                                        "&& attributes.getRouteID().getValue().length() == 0\n" +
                                                "&& searchRouteID.getValue().length() == 0 " +
                                                "&& attributes.getOperationNumber().length() == 0\n" +
                                                "&& searchOperationNumber.length() == 0 : {}",
                                                opeCount < searchCount
                                                        && attributes.getRouteID().getValue().length() == 0
                                                        && searchRouteID.getValue().length() == 0
                                                        && attributes.getOperationNumber().length() == 0
                                                        && searchOperationNumber.length() == 0);
                                        if(opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                                && searchRouteID.getValue().length() == 0
                                                && attributes.getOperationNumber().length() == 0
                                                && searchOperationNumber.length() == 0){
                                            opeCount = searchCount;
                                        }
                                    }
                                }
                            } else break;
                        }// end of else if( i == 0 )
                        i++;
                    }// end of while
                }// end of else if( mainPFState == TRUE )
                log.trace("opeCount == searchCount : {}",opeCount == searchCount);
                if (opeCount == searchCount) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // Set previous POS from active previous module PF and active main PF
                //-----------------------------------------------------------------------------
                log.debug("Set previous POS from active previous module PF and active main PF");
                log.trace("findFlag : {}",findFlag);
                if (findFlag) {
                    //--- Get previous module pdid, module_no from active main PF
                    List<Object[]> pfdList = cimJpaRepository
                            .query("SELECT ROUTE_ID, ROUTE_NO FROM OMPRF_ROUTESEQ " +
                                    "WHERE REFKEY = ?1 " +
                                    "AND IDX_NO <= ?2 " +
                                    "ORDER BY IDX_NO DESC",
                                    mainPfObj, mainPfPdlistSeqno);

                    count = 0;
                    while (true) {
                        log.trace("ArrayUtils.isEmpty(pfdList) || count >= pfdList.size() : {}",
                                CimArrayUtils.isEmpty(pfdList) || count >= pfdList.size());
                        if (CimArrayUtils.isEmpty(pfdList) || count >= pfdList.size()) break;
                        Object[] definitionList = pfdList.get(count);
                        if (CimObjectUtils.isEmpty(definitionList)) break;
                        //--- Get active module PF information
                        log.debug("Get active module PF information");
                        String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                        String processFlowObj = getActiveProcessFlowObj(CimObjectUtils
                                .toString(definitionList[0]), processDefinitionLevel);

                        //--- Set previous operation information on active module PF
                        log.debug("Set previous operation information on active module PF");
                        List<Object[]> pfPOSList = cimJpaRepository
                                .query("SELECT LINK_KEY, PRSS_RKEY FROM OMPRF_PRSSSEQ " +
                                        "WHERE REFKEY = ?1 ORDER  BY IDX_NO DESC", processFlowObj);
                        count2 = 0;
                        while (opeCount < searchCount) {
                            log.trace("ArrayUtils.isEmpty(pfPOSList) || count2 >= pfPOSList.size() : {}",
                                    CimArrayUtils.isEmpty(pfPOSList) || count2 >= pfPOSList.size());
                            if (CimArrayUtils.isEmpty(pfPOSList) || count2 >= pfPOSList.size()) break;
                            Object[] posList = pfPOSList.get(count2);
                            Infos.OperationProcessRefListAttributes attributes = new Infos.OperationProcessRefListAttributes();
                            attributes.setSeqno(-1);
                            attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                            Infos.ProcessRef processRef = new Infos.ProcessRef();
                            processRef.setModuleProcessFlow(processFlowObj);
                            processRef.setModuleNumber(CimObjectUtils.toString(definitionList[1]));
                            processRef.setProcessFlow(currentPfObj);
                            processRef.setMainProcessFlow(mainPfObj);
                            attributes.setOperationNumber(BaseStaticMethod
                                    .convertModuleOpeNoToOpeNo(CimObjectUtils.toString(definitionList[1]),
                                            CimObjectUtils.toString(posList[0])));
                            processRef.setProcessOperationSpecification(
                                    processOperationProcessRefListForLotHelper(objCommon,
                                            attributes.getOperationNumber(), processRef.getProcessFlow()));
                            processRef.setModulePOS(CimObjectUtils.toString(posList[1]));
                            attributes.setProcessRef(processRef);
                            opeCount = addRefListAttributes(objCommon, attributesList, attributes,
                                    searchRouteID, searchOperationNumber, opeCount, searchCount);
                            count2++;

                            log.trace("opeCount < searchCount && attributes.getRouteID().getValue().length() == 0\n" +
                                    "&& searchRouteID.getValue().length() == 0 " +
                                    "&& attributes.getOperationNumber().length() == 0\n" +
                                    "&& searchOperationNumber.length() == 0 : {}",
                                    opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                            && searchRouteID.getValue().length() == 0
                                            && attributes.getOperationNumber().length() == 0
                                            && searchOperationNumber.length() == 0);
                            if(opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                    && searchRouteID.getValue().length() == 0
                                    && attributes.getOperationNumber().length() == 0
                                    && searchOperationNumber.length() == 0){
                                opeCount = searchCount;
                            }
                        }
                        count++;
                    }
                }
                log.trace("opeCount == searchCount : {}",opeCount == searchCount);
                if (opeCount == searchCount) {
                    return attributesList;
                }

                //---------------------------------------------------------------------------------------------------------------
                // (4-2-3) If the lot is on sub/rework route, set the backup operaion and the following operations from backup flow
                //---------------------------------------------------------------------------------------------------------------
                log.debug("step 4-2-3 If the lot is on sub/rework route, " +
                        "set the backup operaion and the following operations from backup flow");
                List<Object[]> pfxBackPOList = cimJpaRepository
                        .query("SELECT IDX_NO, PROPE_RKEY FROM OMPRFCX_BCKPROPESEQ " +
                                "WHERE REFKEY = ?1 " +
                                "ORDER BY IDX_NO",
                                lotProcessFlowContextObj);

                count = 0;
                while (opeCount < searchCount) {
                    log.trace("ArrayUtils.isEmpty(pfxBackPOList) || count >= pfxBackPOList.size() : {}",
                            CimArrayUtils.isEmpty(pfxBackPOList) || count >= pfxBackPOList.size());
                    if (CimArrayUtils.isEmpty(pfxBackPOList) || count >= pfxBackPOList.size()) break;
                    Object[] pfxBackPO = pfxBackPOList.get(count);
                    //--- Keep backup operation information
                    log.debug("Keep backup operation information");
                    Integer backupSeqNo = (Integer) pfxBackPO[0];
                    // Get process information from FRPO
                    log.debug("Get process information from OMPROPE");
                    List<Object[]> sqlResult = cimJpaRepository.query("SELECT OPE_NO, " + //0
                            "       ROUTE_NO, " +//1
                            "       ROUTE_OPE_NO, " + //2
                            "       MPROCESS_PRF_RKEY, " +//3
                            "       MPROCESS_PRSS_RKEY, " +//4
                            "       MROUTE_PRF_RKEY, " +//5
                            "       ROUTE_PRF_RKEY, " +//6
                            "       ROUTE_PRSS_RKEY " + //7
                            "FROM OMPROPE WHERE ID = ?1",  pfxBackPO[1]);

                    Validations.check(CimObjectUtils.isEmpty(sqlResult),retCodeConfig.getNotFoundProcessOperation());
                    //--- Keep backup operation information
                    String backupOpeNo = CimObjectUtils.toString(sqlResult.get(0)[0]);
                    String backupModuleNo = CimObjectUtils.toString(sqlResult.get(0)[1]);
                    String backupModuleOpeNo = CimObjectUtils.toString(sqlResult.get(0)[2]);
                    String backupPfObj = CimObjectUtils.toString(sqlResult.get(0)[3]);
                    String backupPosObj = CimObjectUtils.toString(sqlResult.get(0)[4]);
                    String backupMainPfObj = CimObjectUtils.toString(sqlResult.get(0)[5]);
                    String backupModulePfObj = CimObjectUtils.toString(sqlResult.get(0)[6]);
                    String backupModulePosObj = CimObjectUtils.toString(sqlResult.get(0)[7]);

                    //--- Get backup main PF information
                    log.debug("Get backup main PF information");
                    List<Object[]> flow = cimJpaRepository.query("SELECT PRP_ID, PRP_RKEY, ACTIVE_FLAG " +
                            "FROM OMPRF " +
                            "WHERE ID = ?1",
                            backupMainPfObj);

                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    String backupMainPdid = CimObjectUtils.toString(flow.get(0)[0]);
                    String backupMainPdobj = CimObjectUtils.toString(flow.get(0)[1]);
                    Boolean backupMainPfState = CimBooleanUtils.getBoolean(CimObjectUtils.toString(flow.get(0)[2]));

                    //--- Get seq_no of backup module from main PF
                    log.debug("Get seq_no of backup module from main PF");
                    oneResultQuery = cimJpaRepository
                            .queryOneColumn("SELECT IDX_NO FROM OMPRF_ROUTESEQ " +
                                    "WHERE REFKEY = ?1  " +
                                    "AND LINK_KEY = ?2",
                                    backupMainPfObj, backupModuleNo);
                    Validations.check(CimObjectUtils.isEmpty(oneResultQuery),retCodeConfig.getNotFoundProcessFlow());
                    Integer backupMainPfPdlistSeqno = Integer.valueOf(CimObjectUtils.toString(oneResultQuery.get(0)));

                    //--- Get backup module PF information
                    log.debug("Get backup module PF information");
                    flow = cimJpaRepository.query("SELECT PRP_ID, ACTIVE_FLAG FROM OMPRF " +
                            "WHERE ID = ?1", backupModulePfObj);

                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    String backupModulePdid = CimObjectUtils.toString(flow.get(0)[0]);
                    Boolean backupModulePfState = CimBooleanUtils.getBoolean(CimObjectUtils.toString(flow.get(0)[1]));

                    //--- Get seq_no of backup process from module PF
                    log.debug("Get seq_no of backup process from module PF");
                    oneResultQuery = cimJpaRepository.queryOneColumn("SELECT IDX_NO FROM OMPRF_PRSSSEQ " +
                            "WHERE REFKEY = ?1  " +
                            "AND LINK_KEY = ?2",
                            backupModulePfObj, backupModuleOpeNo);
                    Validations.check(CimObjectUtils.isEmpty(oneResultQuery),retCodeConfig.getNotFoundProcessFlow());
                    Integer backupModulePfPoslistSeqno = Integer.valueOf(CimObjectUtils.toString(oneResultQuery.get(0)));

                    //-----------------------------------------------------------------------------
                    // (4-2-3-1) Get previous POS from backup/active module PF
                    //-----------------------------------------------------------------------------
                    log.debug("step 4-2-3-1 Get previous POS from backup/active module PF");
                    if (backupModulePfState) {
                        // Module PF is active, set backup POS's seq_no from backup module PF
                        log.debug("Module PF is active, set backup POS's seq_no from backup module PF");
                        modulePfObj = backupModulePfObj;
                        modulePfPoslistSeqno = backupModulePfPoslistSeqno;
                        findFlag = true;
                    } else {
                        log.debug("Module PF is NOT active, search backup POS's seq_no from active module PF");
                        // Module PF is NOT active, search backup POS's seq_no from active module PF
                        findFlag = false;

                        //--- Get active module PF information
                        log.debug("Get active module PF information");
                        String processDefinitionLevel = CIMStateConst.SP_PD_FLOWLEVEL_MODULE;
                        oneResultQuery = cimJpaRepository
                                .queryOneColumn("SELECT ID FROM OMPRF " +
                                        "WHERE  PRP_ID = ?1 " +
                                        "AND PRP_LEVEL = ?2 AND ACTIVE_FLAG = ?3",
                                        backupModulePdid, processDefinitionLevel, hvTrue);

                        Validations.check(CimObjectUtils.isEmpty(oneResultQuery),retCodeConfig.getNotFoundProcessFlow());
                        activeModulePfObj = CimObjectUtils.toString(oneResultQuery.get(0));
                        i = 0;
                        while (opeCount < searchCount) {
                            // Search the backup operation by finding the backup module openo on active module PF
                            log.debug("Search the backup operation by finding " +
                                    "the backup module openo on active module PF");
                            log.trace("i <= 0");
                            if (i <= 0) {
                                List<Object> pfPosList = cimJpaRepository
                                        .queryOneColumn(" SELECT IDX_NO FROM OMPRF_PRSSSEQ " +
                                                "WHERE REFKEY = ?1  " +
                                                "AND LINK_KEY = ?2",
                                                activeModulePfObj, backupModuleOpeNo);
                                if (!CimObjectUtils.isEmpty(pfPosList)) {
                                    //--- Set the backup operation seq_no on active module PF
                                    log.debug("Set the backup operation seq_no on active module PF");
                                    modulePfObj = activeModulePfObj;
                                    modulePfPoslistSeqno =  Integer.parseInt(CimObjectUtils.toString(pfPosList.get(0)));
                                    findFlag = true;
                                    break;
                                } else {
                                    //---------------------------------------------------------------------------
                                    // Set backup POS from inactive backup module PF
                                    //---------------------------------------------------------------------------
                                    log.debug("Set backup POS from inactive backup module PF");
                                    Infos.OperationProcessRefListAttributes attributes
                                            = new Infos.OperationProcessRefListAttributes();
                                    attributes.setSeqno(backupSeqNo);
                                    attributes.setRouteID(new ObjectIdentifier(backupMainPdid, backupMainPdobj));
                                    attributes.setOperationNumber(backupOpeNo);
                                    Infos.ProcessRef processRef = new Infos.ProcessRef();
                                    processRef.setProcessFlow(backupPfObj);
                                    processRef.setProcessOperationSpecification(backupPosObj);
                                    processRef.setMainProcessFlow(backupMainPfObj);
                                    processRef.setModuleNumber(backupModuleNo);
                                    processRef.setModuleProcessFlow(backupModulePfObj);
                                    processRef.setModulePOS(backupModulePosObj);
                                    log.trace("StringUtils.isEmpty(backupPosObj) : {}",
                                            CimStringUtils.isEmpty(backupPosObj));
                                    if(CimStringUtils.isEmpty(backupPosObj)){
                                        processRef.setProcessOperationSpecification(
                                                processOperationProcessRefListForLotHelper(objCommon,
                                                        attributes.getOperationNumber(), processRef.getProcessFlow()));
                                    }
                                    attributes.setProcessRef(processRef);
                                    opeCount = addRefListAttributes(objCommon, attributesList, attributes,
                                            searchRouteID, searchOperationNumber, opeCount, searchCount);

                                    log.trace("opeCount < searchCount " +
                                                    "&& attributes.getRouteID().getValue().length() == 0\n" +
                                            "&& searchRouteID.getValue().length() == 0 " +
                                            "&& attributes.getOperationNumber().length() == 0\n" +
                                            "&& searchOperationNumber.length() == 0 : {}",
                                            opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                                    && searchRouteID.getValue().length() == 0
                                                    && attributes.getOperationNumber().length() == 0
                                                    && searchOperationNumber.length() == 0);
                                    if(opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                            && searchRouteID.getValue().length() == 0
                                            && attributes.getOperationNumber().length() == 0
                                            && searchOperationNumber.length() == 0){
                                        opeCount = searchCount;
                                    }
                                }
                            } else {
                                //--- Get the previous operation seq_no on backup module PF
                                log.debug("Get the previous operation seq_no on backup module PF");
                                backupModulePfPoslistSeqno--;
                                List<Object[]> multiResultQuery = cimJpaRepository
                                        .query("SELECT LINK_KEY, PRSS_RKEY FROM OMPRF_PRSSSEQ " +
                                                "WHERE REFKEY = ?1 " +
                                                "AND IDX_NO = ?2",
                                                backupModulePfObj, backupModulePfPoslistSeqno);
                                log.trace("!ObjectUtils.isEmpty(multiResultQuery) : {}",
                                        !CimObjectUtils.isEmpty(multiResultQuery));
                                if (!CimObjectUtils.isEmpty(multiResultQuery)) {
                                    //--- Keep the previous operation information on backup module PF
                                    log.debug("Keep the previous operation information on backup module PF");
                                    previousModuleOpeNo = CimObjectUtils.toString(multiResultQuery.get(0)[0]);
                                    previousModulePosObj = CimObjectUtils.toString(multiResultQuery.get(0)[1]);

                                    //--- Search the corresponding previous module openo from active module PF
                                    log.debug("Search the corresponding previous module openo from active module PF");
                                    multiResultQuery = cimJpaRepository
                                            .query("SELECT IDX_NO FROM OMPRF_PRSSSEQ " +
                                                    "WHERE REFKEY = ?1  " +
                                                    "AND LINK_KEY = ?2",
                                                    activeModulePfObj, previousModuleOpeNo);
                                    log.trace("!ObjectUtils.isEmpty(multiResultQuery) :  {}",
                                            !CimObjectUtils.isEmpty(multiResultQuery));
                                    if (!CimObjectUtils.isEmpty(multiResultQuery)) {
                                        modulePfObj = activeModulePfObj;
                                        modulePfPoslistSeqno = Integer
                                                .parseInt(CimObjectUtils.toString(multiResultQuery.get(0)[0]));
                                        break;
                                    } else {
                                        //---------------------------------------------------------------------------
                                        // Set previous POS from inactive return module PF
                                        //---------------------------------------------------------------------------
                                        log.debug("Set previous POS from inactive return module PF");
                                        Infos.OperationProcessRefListAttributes attributes
                                                = new Infos.OperationProcessRefListAttributes();
                                        attributes.setSeqno(backupSeqNo);
                                        attributes.setRouteID(new ObjectIdentifier(backupMainPdid, backupMainPdobj));
                                        attributes.setOperationNumber(BaseStaticMethod
                                                .convertModuleOpeNoToOpeNo(backupModuleNo, previousModuleOpeNo));
                                        Infos.ProcessRef processRef = new Infos.ProcessRef();
                                        processRef.setProcessFlow(backupPfObj);
                                        processRef.setMainProcessFlow(backupMainPfObj);
                                        processRef.setModuleNumber(backupModuleNo);
                                        processRef.setModuleProcessFlow(backupModulePfObj);
                                        processRef.setModulePOS(previousModulePosObj);
                                        processRef.setProcessOperationSpecification(
                                                processOperationProcessRefListForLotHelper(objCommon,
                                                        attributes.getOperationNumber(), processRef.getProcessFlow()));
                                        attributes.setProcessRef(processRef);
                                        opeCount = addRefListAttributes(objCommon, attributesList, attributes,
                                                searchRouteID, searchOperationNumber, opeCount, searchCount);

                                        log.debug("opeCount < searchCount " +
                                                        "&& attributes.getRouteID().getValue().length() == 0\n" +
                                                "&& searchRouteID.getValue().length() == 0 " +
                                                "&& attributes.getOperationNumber().length() == 0\n" +
                                                "&& searchOperationNumber.length() == 0 : {}",
                                                opeCount < searchCount
                                                        && attributes.getRouteID().getValue().length() == 0
                                                        && searchRouteID.getValue().length() == 0
                                                        && attributes.getOperationNumber().length() == 0
                                                        && searchOperationNumber.length() == 0);
                                        if(opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                                && searchRouteID.getValue().length() == 0
                                                && attributes.getOperationNumber().length() == 0
                                                && searchOperationNumber.length() == 0){
                                            opeCount = searchCount;
                                        }
                                    }
                                } else break;
                            }// end of else if( i == 0 )
                            i++;
                        }// end of while
                    }//end of else if( backupModulePfState == TRUE )
                    log.trace("opeCount == searchCount : {}",opeCount == searchCount);
                    if (opeCount == searchCount) {
                        return attributesList;
                    }
                    //-----------------------------------------------------------------------------
                    // Set previous POS from active backup module PF
                    //-----------------------------------------------------------------------------
                    log.debug("Set previous POS from active backup module PF");
                    log.trace("findFlag : {}",findFlag);
                    if (findFlag) {
                        List<Object[]> pfPOSList = cimJpaRepository
                                .query("SELECT LINK_KEY, PRSS_RKEY FROM OMPRF_PRSSSEQ " +
                                        "WHERE  REFKEY = ?1 " +
                                        "AND IDX_NO <= ?2 " +
                                        "ORDER BY IDX_NO DESC",
                                        modulePfObj, modulePfPoslistSeqno);

                        count2 = 0;
                        while (opeCount < searchCount) {
                            log.trace("ArrayUtils.isEmpty(pfPOSList) || count2 >= pfPOSList.size() : {}",
                                    CimArrayUtils.isEmpty(pfPOSList) || count2 >= pfPOSList.size());
                            if (CimArrayUtils.isEmpty(pfPOSList) || count2 >= pfPOSList.size()) break;
                            Object[] posList = pfPOSList.get(count2);
                            //--- Set previous operation information on active backup module PF
                            log.debug("Set previous operation information on active backup module PF");
                            Infos.OperationProcessRefListAttributes attributes
                                    = new Infos.OperationProcessRefListAttributes();
                            attributes.setSeqno(backupSeqNo);
                            attributes.setRouteID(new ObjectIdentifier(backupMainPdid));
                            Infos.ProcessRef processRef = new Infos.ProcessRef();
                            processRef.setProcessFlow(backupPfObj);
                            processRef.setMainProcessFlow(backupMainPfObj);
                            processRef.setModuleNumber(backupModuleNo);
                            processRef.setModuleProcessFlow(modulePfObj);
                            attributes.setOperationNumber(BaseStaticMethod
                                    .convertModuleOpeNoToOpeNo(backupModuleNo, CimObjectUtils.toString(posList[0])));
                            processRef.setModulePOS(CimObjectUtils.toString(posList[1]));
                            processRef.setProcessOperationSpecification(
                                    processOperationProcessRefListForLotHelper(objCommon,
                                            attributes.getOperationNumber(), processRef.getProcessFlow()));
                            attributes.setProcessRef(processRef);
                            opeCount = addRefListAttributes(objCommon, attributesList, attributes,
                                    searchRouteID, searchOperationNumber, opeCount, searchCount);
                            count2++;

                            log.trace("opeCount < searchCount && attributes.getRouteID().getValue().length() == 0\n" +
                                    "&& searchRouteID.getValue().length() == 0 " +
                                    "&& attributes.getOperationNumber().length() == 0\n" +
                                    "&& searchOperationNumber.length() == 0 : {}",
                                    opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                            && searchRouteID.getValue().length() == 0
                                            && attributes.getOperationNumber().length() == 0
                                            && searchOperationNumber.length() == 0);
                            if(opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                    && searchRouteID.getValue().length() == 0
                                    && attributes.getOperationNumber().length() == 0
                                    && searchOperationNumber.length() == 0){
                                opeCount = searchCount;
                            }
                        }
                    }
                    log.trace("opeCount == searchCount : {}",opeCount == searchCount);
                    if (opeCount == searchCount) {
                        return attributesList;
                    }

                    //-----------------------------------------------------------------------------
                    // (4-2-3-2) Get previous module PD from backup/active main PF
                    //-----------------------------------------------------------------------------
                    // If main PF is active, set previous module PD's seq_no from backup main PF
                    log.debug("step 4-2-3-2 Get previous module PD from backup/active main PF");
                    log.trace("backupMainPfState : {}",backupMainPfState);
                    if (backupMainPfState) {
                        mainPfObj = backupMainPfObj;
                        mainPfPdlistSeqno = backupMainPfPdlistSeqno - 1;
                        findFlag = true;
                    }
                    // If main PF is NOT active, search previous module PD's seq_no from active main PF
                    else {
                        findFlag = false;
                        //--- Get active main PF information
                        log.debug("Get active main PF information");
                        String processDefinitionLevel = CIMStateConst.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE;
                        flow = cimJpaRepository
                                .query("SELECT ID FROM OMPRF " +
                                        "WHERE  PRP_ID = ?1 " +
                                        "AND PRP_LEVEL = ?2 " +
                                        "AND ACTIVE_FLAG = ?3",
                                        backupMainPdid, processDefinitionLevel, hvTrue );
                        Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                        activeMainPfObj = CimObjectUtils.toString(flow.get(0)[0]);
                        i = 0;
                        while (opeCount < searchCount) {
                            // Search the previous module PD by finding the backup module number on active main PF
                            log.debug("Search the previous module PD by finding the backup module number on active main PF");
                            log.trace("i == 0 : {}",i == 0);
                            if (i == 0) {
                                oneResultQuery = cimJpaRepository
                                        .queryOneColumn("SELECT IDX_NO, ROUTE_ID FROM OMPRF_ROUTESEQ " +
                                                "WHERE REFKEY = ?1  " +
                                                "AND LINK_KEY = ?2",
                                                activeMainPfObj, backupModuleNo);
                                log.trace("!ObjectUtils.isEmpty(sqlResult) : {}",!CimObjectUtils.isEmpty(sqlResult));
                                if (!CimObjectUtils.isEmpty(sqlResult)) {
                                    //--- Set the next module PD's seq_no on active module PF
                                    mainPfObj = activeMainPfObj;
                                    mainPfPdlistSeqno = Integer
                                            .parseInt(CimObjectUtils.toString(oneResultQuery.get(0))) - 1;
                                    findFlag = true;
                                    break;
                                }
                            }
                            // Search the previous module PD by finding the previous module number on active main PF
                            else {
                                //--- Get the previous module PD's seq_no on backup main PF
                                log.debug("Get the previous module PD's seq_no on backup main PF");
                                backupMainPfPdlistSeqno--;
                                List<Object[]> multiResultQuery = cimJpaRepository
                                        .query("SELECT ROUTE_ID, ROUTE_NO FROM OMPRF_ROUTESEQ " +
                                                "WHERE REFKEY = ?1  " +
                                                "AND IDX_NO = ?2",
                                                backupMainPfObj, backupMainPfPdlistSeqno);
                                log.trace("!ObjectUtils.isEmpty(multiResultQuery) : {}",
                                        !CimObjectUtils.isEmpty(multiResultQuery));
                                if (!CimObjectUtils.isEmpty(multiResultQuery)) {
                                    //--- Keep the previous module information on backup main PF
                                    log.debug("Keep the previous module information on backup main PF");
                                    previousModulePdid = CimObjectUtils.toString(multiResultQuery.get(0)[0]);
                                    previousModuleNo = CimObjectUtils.toString(multiResultQuery.get(0)[1]);

                                    //--- Search the corresponding previous module number from the active main PF
                                    log.debug("Search the corresponding previous module number from the active main PF");
                                    oneResultQuery = cimJpaRepository
                                            .queryOneColumn("SELECT IDX_NO FROM OMPRF_ROUTESEQ " +
                                                    "WHERE REFKEY = ?1  " +
                                                    "AND LINK_KEY = ?2",
                                                    activeMainPfObj, previousModuleNo);
                                    log.trace("!ObjectUtils.isEmpty(oneResultQuery) : {}",
                                            !CimObjectUtils.isEmpty(oneResultQuery));
                                    if (!CimObjectUtils.isEmpty(oneResultQuery)) {
                                        mainPfObj = activeMainPfObj;
                                        mainPfPdlistSeqno = Integer
                                                .parseInt(CimObjectUtils.toString(oneResultQuery.get(0)));
                                        findFlag = true;
                                        break;
                                    } else {
                                        //---------------------------------------------------------------------------
                                        // Set previous POS from active previous module PF and backup(inactive) main PF
                                        //---------------------------------------------------------------------------
                                        //--- Get active module PF information
                                        log.debug("Set previous POS from active previous module PF " +
                                                "and backup(inactive) main PF");
                                        processDefinitionLevel = CIMStateConst.SP_PD_FLOWLEVEL_MODULE;
                                        String previousModulePfObj
                                                = getActiveProcessFlowObj(previousModulePdid, processDefinitionLevel);

                                        //--- Set previous operation information on active module PF
                                        log.debug("Set previous operation information on active module PF");
                                        List<Object[]> pfPOSList = cimJpaRepository
                                                .query("SELECT LINK_KEY, PRSS_RKEY FROM OMPRF_PRSSSEQ " +
                                                        "WHERE REFKEY = ?1 " +
                                                        "ORDER  BY IDX_NO DESC",
                                                        previousModulePfObj);
                                        count2 = 0;
                                        while (opeCount < searchCount) {
                                            if (CimArrayUtils.isEmpty(pfPOSList) || count2 >= pfPOSList.size())
                                                break;
                                            Object[] posList = pfPOSList.get(count2);
                                            //--- Set next operation information on active module PF
                                            Infos.OperationProcessRefListAttributes attributes
                                                    = new Infos.OperationProcessRefListAttributes();
                                            attributes.setSeqno(backupSeqNo);
                                            attributes.setRouteID(new ObjectIdentifier(
                                                    backupMainPdid, backupMainPdobj));
                                            Infos.ProcessRef processRef = new Infos.ProcessRef();
                                            processRef.setProcessFlow(backupPfObj);
                                            processRef.setMainProcessFlow(backupMainPfObj);
                                            processRef.setModuleNumber(previousModuleNo);
                                            processRef.setModuleProcessFlow(previousModulePfObj);
                                            processRef.setModuleProcessFlow(modulePfObj);
                                            attributes.setOperationNumber(
                                                    BaseStaticMethod.convertModuleOpeNoToOpeNo(previousModuleNo,
                                                            CimObjectUtils.toString(posList[0])));
                                            processRef.setModulePOS(CimObjectUtils.toString(posList[1]));
                                            processRef.setProcessOperationSpecification(
                                                    processOperationProcessRefListForLotHelper(objCommon,
                                                            attributes.getOperationNumber(),
                                                            processRef.getProcessFlow()));
                                            attributes.setProcessRef(processRef);
                                            opeCount = addRefListAttributes(objCommon, attributesList,
                                                    attributes, searchRouteID,
                                                    searchOperationNumber, opeCount, searchCount);
                                            count2++;

                                            log.trace("opeCount < searchCount " +
                                                            "&& attributes.getRouteID().getValue().length() == 0\n" +
                                                    "&& searchRouteID.getValue().length() == 0 " +
                                                    "&& attributes.getOperationNumber().length() == 0\n" +
                                                    "&& searchOperationNumber.length() == 0 : {}",
                                                    opeCount < searchCount
                                                            && attributes.getRouteID().getValue().length() == 0
                                                            && searchRouteID.getValue().length() == 0
                                                            && attributes.getOperationNumber().length() == 0
                                                            && searchOperationNumber.length() == 0);
                                            if(opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                                    && searchRouteID.getValue().length() == 0
                                                    && attributes.getOperationNumber().length() == 0
                                                    && searchOperationNumber.length() == 0){
                                                opeCount = searchCount;
                                            }
                                        }
                                    }
                                } else break;
                            }// end of else if( i == 0 )
                            i++;
                        }// end of while
                    }// end of else if( mainPFState == TRUE )
                    log.debug("opeCount == searchCount : {}{",opeCount == searchCount);
                    if (opeCount == searchCount) {
                        return attributesList;
                    }

                    //-----------------------------------------------------------------------------
                    // Set previous POS from active previous module PF and active main PF
                    //-----------------------------------------------------------------------------
                    log.debug("Set previous POS from active previous module PF and active main PF");
                    log.trace("findFlag : {}",findFlag);
                    if (findFlag) {
                        //--- Get previous module pdid, module_no from active main PF
                        log.debug("Get previous module pdid, module_no from active main PF");
                        List<Object[]> pfPDList = cimJpaRepository
                                .query("SELECT ROUTE_ID, ROUTE_NO FROM OMPRF_ROUTESEQ " +
                                        "WHERE REFKEY = ?1 " +
                                        "AND IDX_NO <= ?2 " +
                                        "ORDER BY IDX_NO DESC",
                                        mainPfObj, mainPfPdlistSeqno );
                        count2 = 0;
                        while (true) {
                            log.trace("ArrayUtils.isEmpty(pfPDList) || count2 >= pfPDList.size() : {}",
                                    CimArrayUtils.isEmpty(pfPDList) || count2 >= pfPDList.size());
                            if (CimArrayUtils.isEmpty(pfPDList) || count2 >= pfPDList.size()) break;
                            Object[] flowDefinitionList = pfPDList.get(count2);
                            log.trace("ObjectUtils.isEmpty(flowDefinitionList) : {}",
                                    CimObjectUtils.isEmpty(flowDefinitionList));
                            if (CimObjectUtils.isEmpty(flowDefinitionList)) break;
                            //--- Get active module PF information
                            log.debug("Get active module PF information");
                            String processDefinitionLevel = CIMStateConst.SP_PD_FLOWLEVEL_MODULE;
                            String processFlowObj = getActiveProcessFlowObj(CimObjectUtils
                                    .toString(flowDefinitionList[0]), processDefinitionLevel);
                            log.debug("Set previous operation information on active module PF");
                            //--- Set previous operation information on active module PF
                            List<Object[]> pfPOSList = cimJpaRepository.query("SELECT LINK_KEY, PRSS_RKEY " +
                                    "FROM OMPRF_PRSSSEQ " +
                                    "WHERE REFKEY = ?1 " +
                                    "ORDER  BY IDX_NO DESC ",
                                    processFlowObj);

                            count3 = 0;
                            while (opeCount < searchCount) {
                                log.trace("ArrayUtils.isEmpty(pfPOSList) || count3 >= pfPOSList.size() : {}",
                                        CimArrayUtils.isEmpty(pfPOSList) || count3 >= pfPOSList.size());
                                if (CimArrayUtils.isEmpty(pfPOSList) || count3 >= pfPOSList.size())
                                    break;
                                Object[] posList = pfPOSList.get(count3);
                                Infos.OperationProcessRefListAttributes attributes
                                        = new Infos.OperationProcessRefListAttributes();
                                attributes.setSeqno(backupSeqNo);
                                attributes.setRouteID(new ObjectIdentifier(backupMainPdid, backupMainPdobj));
                                Infos.ProcessRef processRef = new Infos.ProcessRef();
                                processRef.setProcessFlow(backupPfObj);
                                processRef.setModuleProcessFlow(processFlowObj);
                                processRef.setModuleNumber(CimObjectUtils.toString(flowDefinitionList[1]));
                                processRef.setMainProcessFlow(mainPfObj);
                                attributes.setOperationNumber(
                                        BaseStaticMethod.convertModuleOpeNoToOpeNo(CimObjectUtils
                                                .toString(flowDefinitionList[1]), CimObjectUtils.toString(posList[0])));
                                processRef.setModulePOS(CimObjectUtils.toString(posList[1]));
                                processRef.setProcessOperationSpecification(
                                        processOperationProcessRefListForLotHelper(objCommon,
                                                attributes.getOperationNumber(), processRef.getProcessFlow()));
                                attributes.setProcessRef(processRef);
                                opeCount = addRefListAttributes(objCommon, attributesList, attributes, searchRouteID,
                                        searchOperationNumber, opeCount, searchCount);
                                count3++;

                                log.trace("opeCount < searchCount " +
                                                "&& attributes.getRouteID().getValue().length() == 0\n" +
                                        "&& searchRouteID.getValue().length() == 0 " +
                                        "&& attributes.getOperationNumber().length() == 0\n" +
                                        "&& searchOperationNumber.length() == 0 : {}",
                                        opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                                && searchRouteID.getValue().length() == 0
                                                && attributes.getOperationNumber().length() == 0
                                                && searchOperationNumber.length() == 0);
                                if(opeCount < searchCount && attributes.getRouteID().getValue().length() == 0
                                        && searchRouteID.getValue().length() == 0
                                        && attributes.getOperationNumber().length() == 0
                                        && searchOperationNumber.length() == 0){
                                    opeCount = searchCount;
                                }
                            }
                            count2++;
                        }
                    }// end of if( findFlag == TRUE )
                    count++;
                }// end of while( CURSOR AF35_17 )
            }// end of (4-2)
        }
        return attributesList;
    }

    @Override
    public String processOperationProcessRefListForLotHelper(Infos.ObjCommon objCommon, String operationNumber, String processFlow) {
        //-----------------------------------------------------------------------------
        //  Check input parameter's.
        //-----------------------------------------------------------------------------
        Validations.check(CimStringUtils.isEmpty(processFlow),retCodeConfig.getSomeopelistDataError());
        Validations.check(CimStringUtils.isEmpty(operationNumber),retCodeConfig.getSomeopelistDataError());
        List<Object> oneResultQuery = cimJpaRepository.queryOneColumn("SELECT PRSS_RKEY FROM OMPRF_PRSSSEQ WHERE  REFKEY = ?1 AND LINK_KEY = ?2", processFlow, operationNumber);

        return CimObjectUtils.isEmpty(oneResultQuery) ? "*" : CimObjectUtils.toString(oneResultQuery.get(0));
    }

    @Override
    public Outputs.ObjProcessDurableCheckConditionForOperationStartOut processDurableCheckConditionForOpeStart(
            Infos.ObjCommon objCommon,
            ObjectIdentifier equipmentID,
            ObjectIdentifier logicalRecipeID,
            ObjectIdentifier machineRecipeID,
            ObjectIdentifier lotID) {
        Outputs.ObjProcessDurableCheckConditionForOperationStartOut checkConditionForOperationStartOut = new Outputs.ObjProcessDurableCheckConditionForOperationStartOut();
        String strSearchCondition = StandardProperties.OM_CONSTRAINT_CHK_WITH_SEARCH.getValue();
        int searchCondition = CimNumberUtils.intValue(strSearchCondition);
        //【Step1】check equipment requires process durables or not
        log.debug("【Step1】check equipment requires process durables or not");
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(null == aMachine, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        boolean reticleRequiredFlag = CimBooleanUtils.isTrue(aMachine.isReticleRequired());
        boolean fixtureRequiredFlag = CimBooleanUtils.isTrue(aMachine.isFixtureRequired());
        //get and check reticle status for each lot
        log.debug("get and check reticle status for each lot");
        if (reticleRequiredFlag) {
            //get and check reticle status for each lot
            log.debug("get and check reticle status for each lot");
            com.fa.cim.newcore.bo.product.CimLot aLot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotID);
            Validations.check(null == aLot, new OmCode(retCodeConfig.getNotFoundLot(), lotID.getValue()));
            com.fa.cim.newcore.bo.pd.CimProcessOperation aPosPO = aLot.getProcessOperation();
            Validations.check(null == aPosPO,new OmCode(retCodeConfig.getNotFoundProcessOperation(), ""));
            String aPhotoLayer = aPosPO.getPhotoLayer();
            if (!CimStringUtils.isEmpty(aPhotoLayer)) {
                // get reticle group list
                com.fa.cim.newcore.bo.recipe.CimLogicalRecipe aLogicalRecipe = baseCoreFactory.getBO(com.fa.cim.newcore.bo.recipe.CimLogicalRecipe.class, logicalRecipeID);
                Validations.check(null == aLogicalRecipe,new OmCode(retCodeConfig.getNotFoundLogicalRecipe()));
                String anEqpID = aMachine.getIdentifier();
                List<CimProcessDurableCapability> reticleGroupList = aLot.getReticleGroupsFor(anEqpID);
                int reticleGroupListSize = CimArrayUtils.getSize(reticleGroupList);
                String subLotType = aLot.getSubLotType();
                List<String> subLotTypeList = new ArrayList<>();
                subLotTypeList.add(subLotType);
                //【step2】get lot effective DOC info
                String tmpFPCCategory = null;
                Outputs.ObjLotEffectiveFPCInfoGetOut objLotEffectiveFPCInfoGetOut = lotMethod.lotEffectiveFPCInfoGet(objCommon, BizConstant.SP_FPC_EXCHANGETYPE_STARTRESERVEREQ, equipmentID, lotID);
                if (CimBooleanUtils.isTrue(objLotEffectiveFPCInfoGetOut.isReticleActionRequiredFlag())) {
                    reticleGroupListSize = CimArrayUtils.getSize(objLotEffectiveFPCInfoGetOut.getFpcInfo().getReticleInfoList());
                }
                Validations.check(0 == reticleGroupListSize, retCodeConfig.getNotAvailableReticle());

                List<Infos.StartReticleInfo> startReticleList = new ArrayList<>();
                for (int i = 0; i < reticleGroupListSize; i++) {
                    ObjectIdentifier reticleGroupID = null;
                    if (CimBooleanUtils.isTrue(objLotEffectiveFPCInfoGetOut.isReticleActionRequiredFlag())) {
                        log.debug("the operation is overwritten by DOC");
                        reticleGroupID = objLotEffectiveFPCInfoGetOut.getFpcInfo().getReticleInfoList().get(i).getReticleGroup();
                    } else {
                        reticleGroupID = new ObjectIdentifier(reticleGroupList.get(i).getIdentifier(), reticleGroupList.get(i).getPrimaryKey());
                    }
                    //【step3】get reticle list
                    log.debug("【step3】get reticle list");
                    Params.ReticleListInqParams in = new Params.ReticleListInqParams();
                    in.setEquipmentID(equipmentID);
                    in.setReticleGroupID(reticleGroupID);
                    in.setMaxRetrieveCount(0);
                    in.setFPCCategory(tmpFPCCategory);
                    in.setWhiteDefSearchCriteria(BizConstant.SP_WHITEDEF_SEARCHCRITERIA_ALL);
                    Results.ReticleListInqResult reticleListInqResult = null;
                    try {
                        reticleListInqResult = reticleMethod.reticleListGetDR(objCommon, in);
                    } catch (ServiceException e) {
                        if (CimNumberUtils.eq(e.getCode(),retCodeConfig.getNotFoundReticle().getCode())){
                            Validations.check(true,retCodeConfig.getNotAvailableReticle());
                        }
                    }

                    Boolean inhibitErrorFlag = false;
                    ObjectIdentifier inhibitErrorReticleID = null;
                    Boolean findFlag = false;
                    int foudReticleSize = CimArrayUtils.getSize(reticleListInqResult.getStrFoundReticle());
                    List<Infos.FoundReticle> strFoundReticle = reticleListInqResult.getStrFoundReticle();

                    if (CimBooleanUtils.isTrue(objLotEffectiveFPCInfoGetOut.isReticleActionRequiredFlag())) {
                        Boolean reticleExistFlag = false;
                        List<Infos.FoundReticle> foundReticleList = new ArrayList<>();
                        for (int j = 0; j < foudReticleSize; j++) {
                            Infos.FoundReticle foundReticle = reticleListInqResult.getStrFoundReticle().get(j);
                            Infos.ReticleInfo reticleInfo = objLotEffectiveFPCInfoGetOut.getFpcInfo().getReticleInfoList().get(i);
                            if (ObjectIdentifier.equalsWithValue(foundReticle.getReticleID(), reticleInfo.getReticleID())) {
                                foundReticleList.add(foundReticle);
                                reticleExistFlag = true;
                                break;
                            }
                        }
                        if (CimBooleanUtils.isTrue(reticleExistFlag)) {
                            //because, specified reticle and reticleGroup for DOC is one-one relation.
                            foudReticleSize = 1;
                            reticleListInqResult.setStrFoundReticle(foundReticleList);
                        } else {
                            log.debug("Specified Reticle by DOC is not found in equipment");
                            Validations.check(true,retCodeConfig.getNotAvailableReticle());
                        }
                    }
                    Infos.FoundReticle foundReticle = null;
                    for (int j = 0; j < foudReticleSize; j++) {
                        foundReticle = reticleListInqResult.getStrFoundReticle().get(j);
                        CimProcessDurable reticle = baseCoreFactory.getBO(CimProcessDurable.class, foundReticle.getReticleID());
                        Validations.check(null == reticle , new OmCode(retCodeConfig.getNotFoundReticle(), foundReticle.getReticleID().getValue()));
                        Boolean availableFlag = reticle.isLotProcessAvailable(subLotTypeList);
                        if (ObjectIdentifier.equalsWithValue(foundReticle.getReticleStatusInfo().getEquipmentID(), equipmentID)
                                && CimStringUtils.equals(BizConstant.SP_TRANSSTATE_EQUIPMENTIN, foundReticle.getReticleStatusInfo().getTransferStatus())
                                && CimBooleanUtils.isTrue(availableFlag)) {
                            //【step4】check equippment inhibit for lot with machine recipe
                            log.debug("【step4】check equippment inhibit for lot with machine recipe");
                            List<Infos.StartCassette> startCassetteList = new ArrayList<>();
                            Infos.StartCassette startCassette = new Infos.StartCassette();

                            List<Infos.StartReticleInfo> startReticles = new ArrayList<>();
                            List<Infos.LotInCassette> lotInCassetteList = new ArrayList<>();
                            Infos.LotInCassette lotInCassette = new Infos.LotInCassette();
                            Infos.StartRecipe startRecipe = new Infos.StartRecipe();
                            startRecipe.setMachineRecipeID(machineRecipeID);
                            startRecipe.setLogicalRecipeID(logicalRecipeID);
                            Infos.StartReticleInfo startReticle = new Infos.StartReticleInfo();
                            startReticle.setReticleID(foundReticle.getReticleID());
                            startRecipe.setStartReticleList(startReticles);
                            startReticles.add(startReticle);


                            lotInCassette.setStartRecipe(startRecipe);
                            lotInCassette.setLotID(lotID);
                            lotInCassetteList.add(lotInCassette);
                            startCassette.setLotInCassetteList(lotInCassetteList);
                            startCassetteList.add(startCassette);

                            List<ObjectIdentifier> checkLotIDList = new ArrayList<>();
                            checkLotIDList.add(lotID);

                            try {
                                equipmentMethod.equipmentCheckInhibitForLotWithMachineRecipe(objCommon, equipmentID, checkLotIDList, startCassetteList);
                            }catch (ServiceException e) {
                                continue;
                            }
                            //【step5】check reticle Dispacth Job existence
                            log.debug("【step5】check reticle Dispatch Job existence");
                            try {
                                reticleMethod.reticleDispatchJobCheckExistenceDR(objCommon, foundReticle.getReticleID(), null, null);
                            } catch (ServiceException e) {
                                continue;
                            }
                            // check reticle pod relation
                            log.debug("check reticle pod relation");
                            if (!ObjectIdentifier.isEmptyWithValue(foundReticle.getReticleStatusInfo().getReticlePodID())) {
                                log.debug("required reticle relates with reticlePod");
                                continue;
                            }
                            findFlag = true;
                            break;
                        }
                    }
                    if (CimBooleanUtils.isTrue(findFlag))  {
                        Infos.StartReticleInfo startReticle = new Infos.StartReticleInfo();
                        startReticle.setSequenceNumber(i+1);
                        startReticle.setReticleID(foundReticle.getReticleID());
                        startReticleList.add(startReticle);
                    } else {
                        Validations.check(true,retCodeConfig.getNotAvailableReticle());
                    }
                }
                checkConditionForOperationStartOut.setStartReticleList(startReticleList);

            }
        }
        //【step6】get and check fixture status for each lot
        log.debug("【step6】get and check fixture status for each lot");
        if (CimBooleanUtils.isTrue(fixtureRequiredFlag)) {
            //Step6 - Get and Check Fixture Status for Each Lot
            /*----------------------------*/
            /*   Get Fixture Group List   */
            /*----------------------------*/
            com.fa.cim.newcore.bo.recipe.CimLogicalRecipe aLogicalRecipe = baseCoreFactory.getBO(com.fa.cim.newcore.bo.recipe.CimLogicalRecipe.class, logicalRecipeID);
            Validations.check(aLogicalRecipe == null, retCodeConfig.getNotFoundLogicalRecipe());
            com.fa.cim.newcore.bo.recipe.CimMachineRecipe aMachineRecipe = null;
            /************************/
            /*   Get subLotType     */
            /************************/
            com.fa.cim.newcore.bo.product.CimLot aLot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotID);
            Validations.check(aLot == null, new OmCode(retCodeConfig.getNotFoundLot(), lotID.getValue()));
            String subLotType = aLot.getSubLotType();
            if (searchCondition == 1){
                aMachineRecipe = aLogicalRecipe.findMachineRecipeFor(aLot, aMachine);
            } else {
                aMachineRecipe = aLogicalRecipe.findMachineRecipeForSubLotType(aMachine, subLotType);
                //move in reserve, check if the recipe chamber setting match the lot's contamination flag
                contaminationMethod.recipeContaminationCheck(logicalRecipeID,ObjectIdentifier.build(aMachineRecipe.getIdentifier(),aMachineRecipe.getPrimaryKey()),lotID,equipmentID);
            }
            List<CimProcessDurableCapability> aFixtureGroupSeq = aLogicalRecipe.findFixtureGroupsForSubLotType(aMachine, aMachineRecipe, subLotType);
            /*----------------------*/
            /*   Get Fixture List   */
            /*----------------------*/
            int FGSLength = CimArrayUtils.getSize(aFixtureGroupSeq);
            Validations.check(FGSLength == 0, retCodeConfig.getNotAvailableFixture());
            List<Infos.StartFixtureInfo> startFixtureList = new ArrayList<>();
            for (int i = 0; i < FGSLength; i++){
                CimProcessDurableCapability cimProcessDurableCapability = aFixtureGroupSeq.get(i);
                ObjectIdentifier fixtureGroupID = new ObjectIdentifier(cimProcessDurableCapability.getIdentifier(), cimProcessDurableCapability.getPrimaryKey());
                //Step7 - fixture_FillInTxPDQ001DR
                Results.FixtureListInqResult fixtureListInqResult = fixtureMethod.fixtureFillInTxPDQ001DR(objCommon, equipmentID, null, null, null, fixtureGroupID, null, null, 0L);
                boolean findFlag = false;
                List<Infos.FoundFixture> strFoundFixture = fixtureListInqResult.getStrFoundFixture();
                int FFLength = CimArrayUtils.getSize(strFoundFixture);
                Infos.FoundFixture foundFixture = null;
                for (int j = 0; j < FFLength; j++){
                    foundFixture = strFoundFixture.get(j);
                    if (ObjectIdentifier.equalsWithValue(foundFixture.getFixtureStatusInfo().getEquipmentID(), equipmentID)
                            && CimStringUtils.equals(foundFixture.getFixtureStatusInfo().getTransferStatus(), BizConstant.SP_TRANSSTATE_EQUIPMENTIN)
                            && (CimStringUtils.equals(foundFixture.getFixtureStatusInfo().getFixtureStatus(), CIMStateConst.CIM_DURABLE_AVAILABLE)
                            || CimStringUtils.equals(foundFixture.getFixtureStatusInfo().getFixtureStatus(), CIMStateConst.CIM_DURABLE_INUSE))){
                        List<Infos.StartFixtureInfo> startFixtures = new ArrayList<>();
                        List<Infos.StartCassette> strStartCassetteSeq = new ArrayList<>();
                        List<ObjectIdentifier> checkLotIDs = new ArrayList<>();
                        checkLotIDs.add(lotID);
                        Infos.StartCassette startCassette = new Infos.StartCassette();
                        strStartCassetteSeq.add(startCassette);
                        List<Infos.LotInCassette> lotInCassetteList = new ArrayList<>();
                        startCassette.setLotInCassetteList(lotInCassetteList);
                        Infos.LotInCassette lotInCassette = new Infos.LotInCassette();
                        lotInCassetteList.add(lotInCassette);
                        lotInCassette.setLotID(lotID);
                        Infos.StartRecipe startRecipe = new Infos.StartRecipe();
                        lotInCassette.setStartRecipe(startRecipe);
                        startRecipe.setMachineRecipeID(machineRecipeID);
                        startRecipe.setStartFixtureList(startFixtures);
                        Infos.StartFixtureInfo startFixtureInfo = new Infos.StartFixtureInfo();
                        startFixtures.add(startFixtureInfo);
                        startFixtureInfo.setFixtureID(foundFixture.getFixtureStatusInfo().getFixtureID());
                        startRecipe.setLogicalRecipeID(logicalRecipeID);
                        //Step8 - equipment_CheckInhibitForLotWithMachineRecipe
                        try {
                            equipmentMethod.equipmentCheckInhibitForLotWithMachineRecipe(objCommon, equipmentID, checkLotIDs, strStartCassetteSeq);
                        } catch (ServiceException e) {
                            continue;
                        }
                        findFlag = true;
                        break;
                    }
                }
                if (findFlag){
                    Infos.StartFixtureInfo startFixtureInfo = new Infos.StartFixtureInfo();
                    startFixtureList.add(startFixtureInfo);
                    startFixtureInfo.setFixtureID(foundFixture.getFixtureStatusInfo().getFixtureID());
                    startFixtureInfo.setFixtureCategory(foundFixture.getFixtureCategoryID().getValue());
                } else {
                    throw new ServiceException(retCodeConfig.getNotAvailableFixture());
                }
            }
            checkConditionForOperationStartOut.setStartFixtureList(startFixtureList);
        }
        return checkConditionForOperationStartOut;
    }

    @Override
    public Outputs.ObjProcessStartReserveInformationGetOut processStartReserveInformationGet(Infos.ObjCommon objCommon,
                                                                                             List<Infos.StartCassette> startCassetteList,
                                                                                             ObjectIdentifier equipmentID,
                                                                                             boolean edcItemsNeedFlag) {
        Outputs.ObjProcessStartReserveInformationGetOut retVal = new Outputs.ObjProcessStartReserveInformationGetOut();
        int searchCondition = StandardProperties.OM_CONSTRAINT_CHK_WITH_SEARCH.getIntValue();
        //【step1】get pmcmg object
        log.debug("【step1】get pmcmg object");
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(null == aMachine, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));

        //【step2】get and set information info strStartCassette
        log.debug("【step2】get and set information info strStartCassette");
        int startCassetteSize = CimArrayUtils.getSize(startCassetteList);
        for (int i = 0; i < startCassetteSize; i++) {
            Infos.StartCassette startCassette = startCassetteList.get(i);
            //【step2-1】get/set unload port ID
            log.debug("【step2-1】get/set unload port ID");
            PortResource aPort = aMachine.findPortResourceNamed(startCassette.getLoadPortID().getValue());
            Validations.check(null == aPort, new OmCode(retCodeConfig.getNotFoundPort(), startCassette.getLoadPortID().getValue()));
            CimPortResource aLoadPort = (CimPortResource) aPort;

            CimPortResource aUnloadPort = aLoadPort.getAssociatedPort();
            startCassette.setUnloadPortID(ObjectIdentifier.build(aUnloadPort.getIdentifier(), aUnloadPort.getPrimaryKey()));
            startCassette.setLoadPortID(ObjectIdentifier.build(aLoadPort.getIdentifier(), aLoadPort.getPrimaryKey()));

            /*-------------------------*/
            /*   Omit Empty Cassette   */
            /*-------------------------*/
            log.debug("omit empty cassette");
            String loadPurposeType = startCassette.getLoadPurposeType();
            if (CimStringUtils.equals(BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE, loadPurposeType)) {
                continue;
            }

            //【step2-2】get/set lot related info
            log.debug("【step2-2】get/set lot related info");
            int lotInCassetteSize = CimArrayUtils.getSize(startCassette.getLotInCassetteList());
            for (int j = 0; j < lotInCassetteSize; j++) {
                boolean skipFlag = false;
                Infos.LotInCassette lotInCassette = startCassette.getLotInCassetteList().get(j);

                //【step2-2-1】get DOC info
                log.debug("【step2-2-1】get DOC info");
                Outputs.ObjLotEffectiveFPCInfoGetOut fpcInfoGetOut = null;
                boolean operationStartFlag = lotInCassette.getMoveInFlag();
                if (operationStartFlag) {
                    fpcInfoGetOut = lotMethod.lotEffectiveFPCInfoGet(
                            objCommon, BizConstant.SP_FPC_EXCHANGETYPE_STARTRESERVEINFO, equipmentID, lotInCassette.getLotID());
                }
                //【step2-2-2】get wafer info
                log.debug("【step2-2-2】get wafer info");
                int lotWaferSize = CimArrayUtils.getSize(lotInCassette.getLotWaferList());
                if (0 == lotWaferSize) {
                    lotInCassette.setRecipeParameterChangeType(BizConstant.SP_RPARM_CHANGETYPE_BYLOT);

                    //------------------------
                    // Wafer information get
                    //------------------------
                    Inputs.ObjLotWafersGetIn lotWafersGetIn = new Inputs.ObjLotWafersGetIn();
                    lotWafersGetIn.setLotID(lotInCassette.getLotID());
                    lotWafersGetIn.setScrapCheckFlag(true);
                    List<Infos.LotWaferInfoAttributes> lotWaferInfoAttributesList = lotMethod.lotWaferInfoListGetDR(objCommon, lotWafersGetIn);

                    int lotWaferAttributesSize = CimArrayUtils.getSize(lotWaferInfoAttributesList);

                    // omit not opeStart lot
                    log.debug("omit not opeStart lot");
                    if (!operationStartFlag) {
                        // set wafer info and recipe parameter to each wafer
                        log.debug("set wafer info and recipe parameter to each wafer");
                        for (int k = 0; k < lotWaferAttributesSize; k++) {
                            Infos.LotWaferInfoAttributes lotWaferInfoAttributes = lotWaferInfoAttributesList.get(k);
                            Infos.LotWafer lotWaferObj = lotInCassette.getLotWaferList().get(k);
                            lotWaferObj.setWaferID(lotWaferInfoAttributes.getWaferID());
                            lotWaferObj.setSlotNumber((long) lotWaferInfoAttributes.getSlotNumber());
                            lotWaferObj.setControlWaferFlag(lotWaferInfoAttributes.getControlWaferFlag());
                        }
                        continue;
                    }
                    // get recipe parameter
                    log.debug("get recipe parameter");
                    CimLogicalRecipe aLogicalRecipe = baseCoreFactory.getBO(CimLogicalRecipe.class,
                            lotInCassette.getStartRecipe().getLogicalRecipeID());
                    Validations.check(null == aLogicalRecipe, retCodeConfig.getNotFoundLogicalRecipe());

                    CimMachineRecipe aMachineRecipe;
                    // get subLotType
                    log.debug("get subLotType");
                    CimLot aLot = null;
                    String subLotType = lotInCassette.getSubLotType();
                    if (CimStringUtils.isEmpty(lotInCassette.getSubLotType())) {
                        aLot = baseCoreFactory.getBO(CimLot.class, lotInCassette.getLotID());
                        Validations.check(null == aLot, new OmCode(retCodeConfig.getNotFoundLot(), lotInCassette.getLotID().getValue()));
                        subLotType = aLot.getSubLotType();
                    }
                    if (1 == searchCondition) {
                        if (null == aLot) {
                            aLot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotInCassette.getLotID());
                            Validations.check(null == aLot, new OmCode(retCodeConfig.getNotFoundLot(), lotInCassette.getLotID().getValue()));
                        }
                        aMachineRecipe = aLogicalRecipe.findMachineRecipeFor(aLot, aMachine);
                    } else {
                        aMachineRecipe = aLogicalRecipe.findMachineRecipeForSubLotType(aMachine, subLotType);
                    }

                    List<RecipeDTO.RecipeParameter> recipeParameterSeq = aLogicalRecipe.findRecipeParametersForSubLotType(aMachine, aMachineRecipe, subLotType);
                    int recipeCount = CimArrayUtils.getSize(recipeParameterSeq);
                    log.debug("set wafer info and recipe parameter to each wafer");
                    for (int k = 0; k < lotWaferAttributesSize; k++) {
                        Infos.LotWaferInfoAttributes lotWaferInfoAttributes = lotWaferInfoAttributesList.get(k);
                        Infos.LotWafer lotWaferObj = lotInCassette.getLotWaferList().get(k);
                        lotWaferObj.setSlotNumber((long) lotWaferInfoAttributes.getSlotNumber());
                        lotWaferObj.setWaferID(lotWaferInfoAttributes.getWaferID());
                        lotWaferObj.setControlWaferFlag(lotWaferInfoAttributes.getControlWaferFlag());
                        List<Infos.StartRecipeParameter> startRecipeParameterList = new ArrayList<>();
                        for (int l = 0; l < recipeCount; l++) {
                            RecipeDTO.RecipeParameter recipeParameter = recipeParameterSeq.get(l);
                            Infos.StartRecipeParameter startRecipeParameter = new Infos.StartRecipeParameter();
                            startRecipeParameter.setParameterName(recipeParameter.getParameterName());
                            if (CimBooleanUtils.isTrue(recipeParameter.getUseCurrentValueFlag())) {
                                startRecipeParameter.setParameterValue("");
                            } else {
                                startRecipeParameter.setParameterValue(recipeParameter.getDefaultValue());
                            }
                            startRecipeParameter.setTargetValue(recipeParameter.getDefaultValue());
                            startRecipeParameter.setUseCurrentSettingValueFlag(recipeParameter.getUseCurrentValueFlag());
                            startRecipeParameterList.add(startRecipeParameter);
                        }
                        lotWaferObj.setStartRecipeParameterList(startRecipeParameterList);
                    }
                }

                if (!operationStartFlag) {
                    continue;
                }
                log.debug("get subLotType");
                CimLot aLot = baseCoreFactory.getBO(CimLot.class, lotInCassette.getLotID());
                Validations.check(null == aLot, new OmCode(retCodeConfig.getNotFoundLot(), lotInCassette.getLotID().getValue()));

                //QianDao add MES-EAP Integration add maskLevel flag in startCassetteList
                CimProcessOperation processOperation = aLot.getProcessOperation();
                Validations.check(null == processOperation, retCodeConfig.getNotFoundProcessOperation(), "****");
                String photoLayer = processOperation.getPhotoLayer();
                lotInCassette.getStartOperationInfo().setMaskLevel(photoLayer);

                String subLotType = aLot.getSubLotType();
                CimLogicalRecipe aLogicalRecipe = baseCoreFactory.getBO(CimLogicalRecipe.class, lotInCassette.getStartRecipe().getLogicalRecipeID());
                Validations.check(null == aLogicalRecipe, retCodeConfig.getNotFoundLogicalRecipe());

                CimMachineRecipe aMachineRecipe;
                if (searchCondition == 1) {
                    aMachineRecipe = aLogicalRecipe.findMachineRecipeFor(aLot, aMachine);
                } else {
                    aMachineRecipe = aLogicalRecipe.findMachineRecipeForSubLotType(aMachine, subLotType);
                }

                if (null == aMachineRecipe) {
                    if (fpcInfoGetOut != null && CimBooleanUtils.isTrue(fpcInfoGetOut.isMachineRecipeActionRequiredFlag())) {
                        log.debug("machineRecipe is overwritten by DOC");
                        skipFlag = true;
                    } else {
                        throw new ServiceException(retCodeConfig.getNotFoundMachineRecipe());
                    }
                }

                if (!skipFlag) {
                    // EDC 性能优化，将此段代码逻辑移入到 PostProcess EDCInformationSetExecutor 中
                    ObjectIdentifier baseMachineRecipeID = ObjectIdentifier.build(aMachineRecipe.getIdentifier(),
                            aMachineRecipe.getPrimaryKey());

                    final boolean edcDetailInformationGetFlag = this.edcDetailInformationGetFlag(objCommon,
                            equipmentID,
                            lotInCassette.getLotID(),
                            lotInCassette.getStartRecipe().getLogicalRecipeID(),
                            baseMachineRecipeID);
                    lotInCassette.getStartRecipe().setDataCollectionFlag(edcDetailInformationGetFlag);
                    if (edcDetailInformationGetFlag && edcItemsNeedFlag) {
                        // EDC information get
                        Outputs.ObjProcessDataCollectionDefinitionGetOut dataCollectionDefinitionGetOut
                                = this.processDataCollectionDefinitionGet(objCommon,
                                equipmentID,
                                lotInCassette.getLotID(),
                                lotInCassette.getStartRecipe().getLogicalRecipeID(),
                                baseMachineRecipeID);
                        lotInCassette.getStartRecipe().setDcDefList(dataCollectionDefinitionGetOut.getDataCollectionDefList());
                    }
                }
            }
        }
        retVal.setStartCassetteList(startCassetteList);
        return retVal;
    }

    @Override
    public Outputs.ObjProcessDataCollectionDefinitionGetOut processDataCollectionDefinitionGet(Infos.ObjCommon objCommon,
                                                                                               ObjectIdentifier equipmentID,
                                                                                               ObjectIdentifier lotID,
                                                                                               ObjectIdentifier logicalRecipeID,
                                                                                               ObjectIdentifier machineRecipeID) {
        Outputs.ObjProcessDataCollectionDefinitionGetOut retVal = new Outputs.ObjProcessDataCollectionDefinitionGetOut();
        /*--------------------------------------------------------------*/
        /*                                                              */
        /*   Get Machine / Lot / LogicalRecipe / MachineRecipe Object   */
        /*                                                              */
        /*--------------------------------------------------------------*/
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(aMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));

        CimLot aLot = baseCoreFactory.getBO(CimLot.class, lotID);
        Validations.check(aLot == null, new OmCode(retCodeConfig.getNotFoundLot(), lotID.getValue()));

        CimLogicalRecipe aLogicalRecipe = baseCoreFactory.getBO(CimLogicalRecipe.class, logicalRecipeID);
        Validations.check(aLogicalRecipe == null, new OmCode(retCodeConfig.getNotFoundLogicalRecipe()));

        CimMachineRecipe aMachineRecipe = baseCoreFactory.getBO(CimMachineRecipe.class, machineRecipeID);
        Validations.check(aMachineRecipe == null, new OmCode(retCodeConfig.getNotFoundMachineRecipe()));
        /*----------------------------------*/
        /*                                  */
        /*   Get PO / ProdSpec / PFX        */
        /*   Get PO / ProdSpec / PFX / POS  */
        /*                                  */
        /*----------------------------------*/
        CimProcessOperation aPosPO = aLot.getProcessOperation();
        Validations.check(aPosPO == null, new OmCode(retCodeConfig.getNotFoundProcessOperation(), "*****", lotID.getValue()));

        CimProductSpecification aPosProdSpec = aLot.getProductSpecification();
        Validations.check(aPosProdSpec == null, retCodeConfig.getNotFoundProductSpec());

        CimProcessFlowContext aPFX = aLot.getProcessFlowContext();
        Validations.check(aPFX == null, new OmCode(retCodeConfig.getNotFoundPfx(), ""));

        /*----------------------*/
        /*   Get subLotType     */
        /*----------------------*/

        String subLotType = aLot.getSubLotType();
        /*------------------------*/
        /*   Get EDCPlan          */
        /*------------------------*/
        CimDataCollectionDefinition aDCDef = aLogicalRecipe.findDataCollectionDefinitionForSubLotType(aMachine, aMachineRecipe, subLotType);
        if (aDCDef == null) {
            retVal.setDataCollectionFlag(false);
            retVal.setDataCollectionDefList(new ArrayList<>());
            return retVal;
        }

        retVal.setDataCollectionFlag(true);
        /*-------------------------*/
        /*                         */
        /*   Get DCSpecification   */
        /*                         */
        /*-------------------------*/
        CimDataCollectionSpecification aDCSpec;
        String recipeType = aLogicalRecipe.getRecipeType();
        if (CimStringUtils.unEqual(recipeType, BizConstant.SP_RECIPE_MEASUREMENT)) {
            //------------------------------------------------------
            // Get OM_EDC_SPEC_FOR_PROCESS
            //------------------------------------------------------
            String isDCSpecForProcess = StandardProperties.OM_EDC_SPEC_FOR_PROCESS.getValue();
            boolean bFoundFlag = false;
            if (CimStringUtils.equals(isDCSpecForProcess, BizConstant.VALUE_ONE)) {
                aDCSpec = aPosPO.findMeasurementDCSpecification(aPosProdSpec);
                if (aDCSpec != null) {
                    bFoundFlag = true;
                }
                if (!bFoundFlag) {
                    aDCSpec = aLogicalRecipe.findProcessDCSpecificationForSubLotType(aMachine, aMachineRecipe, subLotType);
                }
            } else {
                aDCSpec = aLogicalRecipe.findProcessDCSpecificationForSubLotType(aMachine, aMachineRecipe, subLotType);
            }
        } else {
            aDCSpec = aPosPO.findMeasurementDCSpecification(aPosProdSpec);
        }
        //-----------------------------------------------------------------------------------------------------
        // Confirm that DC spec is same between Logical Recipe and DC Specification.
        //-----------------------------------------------------------------------------------------------------
        if (aDCSpec != null) {
            String anAssignedDCDefId = null;
            CimDataCollectionDefinition anAssignedDCDef = aLogicalRecipe.findDataCollectionDefinitionForSubLotType(aMachine, aMachineRecipe, subLotType);
            if (anAssignedDCDef != null) {
                anAssignedDCDefId = anAssignedDCDef.getIdentifier();
            }
            //--- Get DC definition ID defined for DC Specification. ---//

            boolean foundFlag = false;
            String aDCDefInDCSpecId;
            List<CimDataCollectionDefinition> aDCDefSeq = aDCSpec.allDataCollectionDefinitions();
            int dcDefSeqLen = CimArrayUtils.getSize(aDCDefSeq);
            for (int i = 0; i < dcDefSeqLen; i++) {
                CimDataCollectionDefinition dcDef = aDCDefSeq.get(i);
                if (dcDef != null) {
                    aDCDefInDCSpecId = dcDef.getIdentifier();
                    if (CimStringUtils.equals(aDCDefInDCSpecId, anAssignedDCDefId)) {                                                                                             //D4100126
                        foundFlag = true;
                        break;
                    }
                }
            }
            if (!foundFlag) {
                String dcRelationCheckFlag = StandardProperties.OM_EDC_PLAN_SPEC_RELATION_CHECK.getValue();
                if (CimStringUtils.equals(dcRelationCheckFlag, "1")) {
                    String aDCSpecId = aDCSpec.getIdentifier();
                    throw new ServiceException(new OmCode(retCodeConfig.getDcdefDcspecMismatch(), anAssignedDCDefId, aDCSpecId, lotID.getValue()));
                } else {
                    aDCSpec = null;
                }
            }
        }
        /*---------------------------------------------*/
        /*                                             */
        /*   Get Delta-DCDefinition                    */
        /*                                             */
        /*   posDeltaDCDefInfo includes ...            */
        /*    - string             processOperation    */
        /*    - objectIdentifier   deltaDCDefinition   */
        /*                                             */
        /*---------------------------------------------*/
        List<ProcessDTO.DeltaDcDefInfo> deltaDCDefInfoSeq = aPFX.findDeltaDCDefinitions(aDCDef);
        int deltaDCDefInfoLen = CimArrayUtils.getSize(deltaDCDefInfoSeq);
        /*------------------------------------------------*/
        /*                                                */
        /*   Get Delta-DCSpecification                    */
        /*                                                */
        /*   posDeltaDCSpecInfo includes ...              */
        /*    - objectIdentifier   deltaDCDefinition      */
        /*    - objectIdentifier   deltaDCSpecification   */
        /*                                                */
        /*------------------------------------------------*/
        List<Infos.PosDeltaDCSpecInfo> deltaDCSpecInfoSeq = new ArrayList<>();
        int deltaDCSpecInfoLen = 0;
        String prodSpecID = aPosProdSpec.getIdentifier();
        for (int i = 0; i < deltaDCDefInfoLen; i++) {
            ProcessDTO.DeltaDcDefInfo deltaDCDefInfo = deltaDCDefInfoSeq.get(i);
            CimDataCollectionSpecification aDeltaDCSpec = aPosPO.findDeltaDCSpecification(prodSpecID, deltaDCDefInfo.getDeltaDCDefinition().getValue());
            if (aDeltaDCSpec != null) {
                Infos.PosDeltaDCSpecInfo posDeltaDCSpecInfo = new Infos.PosDeltaDCSpecInfo();
                deltaDCSpecInfoSeq.add(posDeltaDCSpecInfo);
                deltaDCSpecInfoLen++;
                posDeltaDCSpecInfo.setDeltaDCSpecification(ObjectIdentifier.build(aDeltaDCSpec.getIdentifier(), aDeltaDCSpec.getPrimaryKey()));
                posDeltaDCSpecInfo.setDeltaDCDefinition(deltaDCDefInfo.getDeltaDCDefinition());
            }
        }

        /*------------------------------------------*/
        /*                                          */
        /*   Set Returned DCDef Information - Raw   */
        /*                                          */
        /*------------------------------------------*/
        /*===== set Raw-DC def info =====*/
        List<Infos.DataCollectionInfo> strDCDef = new ArrayList<>();
        retVal.setDataCollectionDefList(strDCDef);
        Infos.DataCollectionInfo dCDef = new Infos.DataCollectionInfo();
        strDCDef.add(dCDef);
        dCDef.setDataCollectionDefinitionID(ObjectIdentifier.build(aDCDef.getIdentifier(), aDCDef.getPrimaryKey()));
        dCDef.setDescription(aDCDef.getDescription());
        dCDef.setDataCollectionType(aDCDef.getCollectionType());

        /*---------------------------------------------*/
        /* author: zqi                                 */
        /* date: 2021/7/5 20:00:00                     */
        /* Add EDC setting type                        */
        /*---------------------------------------------*/
        dCDef.setEdcSettingType(aDCDef.getDCSettingType());

        /*===== set Raw-DC spec info =====*/
        if (aDCSpec == null) {
            dCDef.setSpecCheckRequiredFlag(false);
        } else {
            dCDef.setSpecCheckRequiredFlag(true);
            dCDef.setDataCollectionSpecificationID(ObjectIdentifier.build(aDCSpec.getIdentifier(), aDCSpec.getPrimaryKey()));
        }
        /*===== set Raw-DC item Info =====*/
        List<EDCDTO.DCItemDefinition> dcItemSeq = aDCDef.getDCItems();

        /*---------------------------------------------*/
        /* author: zqi                                 */
        /* date: 2021/7/5 20:00:00                     */
        /* 3片9点功能添加，在Runtime时生成 item数据        */
        /*---------------------------------------------*/
        AtomicBoolean derivedRequiredFlag =  new AtomicBoolean(false);
        final List<Infos.DataCollectionItemInfo> actualEDCItemsInfo = this.getActualEDCItemsInfo(dcItemSeq,
                aDCDef.getDCSettingType(),
                aDCSpec,
                derivedRequiredFlag);
        dCDef.setDcItems(actualEDCItemsInfo);
        dCDef.setCalculationRequiredFlag(derivedRequiredFlag.get());

        /*--------------------------------------------*/
        /*                                            */
        /*   Set Returned DCDef Information - Delta   */
        /*                                            */
        /*--------------------------------------------*/
        /*===== Start of Delta-DC Set =====*/
        int itemLen;
        for (int i = 1; i <= deltaDCDefInfoLen; i++) {
            /*===== prepare dDCDef / dDCSpec =====*/
            ProcessDTO.DeltaDcDefInfo deltaDCDefInfo = deltaDCDefInfoSeq.get(i - 1);
            CimDataCollectionDefinition dDCDef = baseCoreFactory.getBO(CimDataCollectionDefinition.class, deltaDCDefInfo.getDeltaDCDefinition());
            Validations.check(dDCDef == null, retCodeConfig.getNotFoundDcdef());

            CimProcessOperation dPO = baseCoreFactory.getBO(CimProcessOperation.class, deltaDCDefInfo.getProcessOperation());
            CimDataCollectionSpecification dDCSpec = null;
            for (int dd = 0; dd < deltaDCSpecInfoLen; dd++) {
                String deltaDCDefInfoSeq_deltaDCDefinition = deltaDCDefInfo.getDeltaDCDefinition().getValue();
                String deltaDCSpecInfoSeq_deltaDCDefinition = deltaDCSpecInfoSeq.get(dd).getDeltaDCDefinition().getValue();

                if (CimStringUtils.equals(deltaDCDefInfoSeq_deltaDCDefinition, deltaDCSpecInfoSeq_deltaDCDefinition)) {
                    dDCSpec = baseCoreFactory.getBO(CimDataCollectionSpecification.class, deltaDCSpecInfoSeq.get(dd).getDeltaDCSpecification());
                    Validations.check(dDCSpec == null, retCodeConfig.getNotFoundDcspec());
                    break;
                }
            }
            /*===== set Delta-DC def info =====*/
            Infos.DataCollectionInfo dCDef2 = new Infos.DataCollectionInfo();
            strDCDef.add(dCDef2);
            dCDef2.setDataCollectionDefinitionID(ObjectIdentifier.build(dDCDef.getIdentifier(), dDCDef.getPrimaryKey()));
            dCDef2.setDescription(dDCDef.getDescription());
            dCDef2.setDataCollectionType(dDCDef.getCollectionType());
            /*===== set Delta-DC spec info =====*/
            if (dDCSpec == null) {
                dCDef2.setSpecCheckRequiredFlag(false);
            } else {
                dCDef2.setSpecCheckRequiredFlag(true);
                dCDef2.setDataCollectionSpecificationID(ObjectIdentifier.build(dDCSpec.getIdentifier(), dDCSpec.getPrimaryKey()));
            }
            /*===== set Delta-DC item info =====*/
            List<EDCDTO.DCItemDefinition> dcItemSeq2 = dDCDef.getDCItems();
            itemLen = CimArrayUtils.getSize(dcItemSeq2);
            int delivedItemCnt = 0;
            List<Infos.DataCollectionItemInfo> dcItems = new ArrayList<>();
            dCDef2.setDcItems(dcItems);
            for (int j = 0; j < itemLen; j++) {
                EDCDTO.DCItemDefinition dcItemDefinition = dcItemSeq2.get(j);
                Infos.DataCollectionItemInfo dataCollectionItemInfo = new Infos.DataCollectionItemInfo();
                dcItems.add(dataCollectionItemInfo);
                dataCollectionItemInfo.setDataCollectionItemName(dcItemDefinition.getDataItemName());
                dataCollectionItemInfo.setDataCollectionMode(dcItemDefinition.getDataCollectionMethod());
                dataCollectionItemInfo.setDataCollectionUnit(dcItemDefinition.getUnitOfMeasure());
                dataCollectionItemInfo.setDataType(dcItemDefinition.getValType());
                dataCollectionItemInfo.setItemType(dcItemDefinition.getItemType());
                String itemType = dataCollectionItemInfo.getItemType();
                if (CimStringUtils.equals(itemType, BizConstant.SP_DCDEF_ITEM_DERIVED)
                        || CimStringUtils.equals(itemType, BizConstant.SP_DCDEF_ITEM_USERFUNCTION)) {
                    delivedItemCnt++;
                }
                dataCollectionItemInfo.setMeasurementType(dcItemDefinition.getMeasType());
                dataCollectionItemInfo.setWaferID(ObjectIdentifier.emptyIdentifier());
                dataCollectionItemInfo.setWaferPosition(dcItemDefinition.getWaferPosition());
                dataCollectionItemInfo.setSitePosition(dcItemDefinition.getSitePosition());
                dataCollectionItemInfo.setHistoryRequiredFlag(dcItemDefinition.isStored());
                dataCollectionItemInfo.setCalculationType(dcItemDefinition.getCalculationType());
                dataCollectionItemInfo.setCalculationExpression(dcItemDefinition.getCalculationExpression());
                dataCollectionItemInfo.setDataValue("");
                /*===== get from DCSpec =====*/
                if (dDCSpec == null) {
                    dataCollectionItemInfo.setTargetValue("");
                } else {
                    EDCDTO.DCItemSpecification aItemSpecVar = dDCSpec.findDCSpec(dataCollectionItemInfo.getDataCollectionItemName());
                    String dataItemName = aItemSpecVar == null ? null : aItemSpecVar.getDataItemName();
                    if (CimStringUtils.isEmpty(dataItemName)) {
                        dataCollectionItemInfo.setTargetValue("");
                    } else {
                        String dbTarget;
                        Double target = CimNumberUtils.doubleValue(aItemSpecVar.getTarget());
                        if (null != target) {
                            if (-1.0 < target && target < 1.0) {
                                dbTarget = target.longValue() + "";
                            } else if (-100000000000.0 < target && target < 1000000000000.0) {
                                dbTarget = target.floatValue() + "";
                                if (CimStringUtils.length(dbTarget) > 12) {
                                    dbTarget = dbTarget.substring(0, 12);
                                }
                            } else {
                                dbTarget = target.longValue() + "";
                            }
                            dataCollectionItemInfo.setTargetValue(dbTarget);
                        }
                    }
                }
                dataCollectionItemInfo.setSpecCheckResult("");
                dataCollectionItemInfo.setActionCodes("");
            }
            dCDef2.setCalculationRequiredFlag(delivedItemCnt != 0);
            /*-------------------------------------*/
            /*   Set Delta ProcessOperation Info   */
            /*-------------------------------------*/
            if (dPO != null) {
                CimDataCollectionDefinition pDCDef = dPO.getAssignedDCDef();
                Validations.check(pDCDef == null, new OmCode(retCodeConfig.getNotFoundPrevDcDef(), "*****"));

                CimProcessDefinition pPD = dPO.getProcessDefinition();
                Validations.check(pPD == null, new OmCode(retCodeConfigEx.getNotFoundPrevpd(), "*****"));

                dCDef2.setPreviousDataCollectionDefinitionID(ObjectIdentifier.build(pDCDef.getIdentifier(), pDCDef.getPrimaryKey()));
                dCDef2.setPreviousOperationID(ObjectIdentifier.build(pPD.getIdentifier(), pPD.getPrimaryKey()));
                dCDef2.setPreviousOperationNumber(dPO.getOperationNumber());
            }
            /*-----------------------------------*/
            /* Get actual start info of delta PO */
            /*-----------------------------------*/
            Validations.check(dPO == null, new OmCode(retCodeConfig.getNotFoundProcessOperation(), "", lotID.getValue()));
            ProcessDTO.ActualStartInformationForPO pActualStartInfo = dPO.getActualStartInfo(true);
            if (pActualStartInfo != null && CimArrayUtils.getSize(pActualStartInfo.getAssignedDataCollections()) > 0) {
                List<ProcessDTO.DataCollectionItemInfo> dataCollectionItemInfoList = pActualStartInfo.getAssignedDataCollections().get(0).getDcItems();
                int pItemLen = CimArrayUtils.getSize(dataCollectionItemInfoList);
                for (int ii = 0; ii < pItemLen; ii++) {
                    String pDcItemName = dataCollectionItemInfoList.get(ii).getDataCollectionItemName();
                    String pWaferPos = dataCollectionItemInfoList.get(ii).getWaferPosition();
                    String pSitePos = dataCollectionItemInfoList.get(ii).getSitePosition();
                    String pWaferID = ObjectIdentifier.fetchValue(dataCollectionItemInfoList.get(ii).getWaferID());
                    /*----------------------*/
                    /* Omit waferID is NULL */
                    /*----------------------*/
                    if (CimStringUtils.isEmpty(pWaferID)) {
                        continue;
                    }
                    /*----------------------------------------------------*/
                    /* Pre-measured waferID does not exist in current Lot */
                    /*----------------------------------------------------*/
                    Material aWafer = aLot.findMaterialNamed(pWaferID);
                    if (aWafer == null) {
                        continue;
                    }
                    /*------------------------------------*/
                    /* Check and Set pre-measured waferID */
                    /*------------------------------------*/
                    int dItemLen = CimArrayUtils.getSize(dCDef2.getDcItems());
                    for (int jj = 0; jj < dItemLen; jj++) {
                        //skip case of derived data item
                        Infos.DataCollectionItemInfo dataCollectionItemInfo = dCDef2.getDcItems().get(jj);
                        String dCalcType = dataCollectionItemInfo.getCalculationType();
                        if (!CimStringUtils.equals(dCalcType, BizConstant.SP_DCDEF_CALC_DELTA)) {
                            continue;
                        }
                        String dCalcExpression = dataCollectionItemInfo.getCalculationExpression();
                        List<EDCDTO.CalculationExpressionInfo> aCalcExpresInfoSeq = cimFrameWorkGlobals.convertFromCalculationExpression(dCalcExpression, true);
                        String preDcItemName = null, preWaferPos = null, preSitePos = null, postDcItemName = null, postWaferPos = null, postSitePos = null;
                        if (CimArrayUtils.getSize(aCalcExpresInfoSeq) >= 2) {
                            if (aCalcExpresInfoSeq.get(0).getWhichDef() == 1) {
                                preDcItemName = aCalcExpresInfoSeq.get(0).getItemName();
                                preWaferPos = aCalcExpresInfoSeq.get(0).getWaferPosition();
                                preSitePos = aCalcExpresInfoSeq.get(0).getSitePosition();
                                postDcItemName = aCalcExpresInfoSeq.get(1).getItemName();
                                postWaferPos = aCalcExpresInfoSeq.get(1).getWaferPosition();
                                postSitePos = aCalcExpresInfoSeq.get(1).getSitePosition();
                            } else {
                                preDcItemName = aCalcExpresInfoSeq.get(1).getItemName();
                                preWaferPos = aCalcExpresInfoSeq.get(1).getWaferPosition();
                                preSitePos = aCalcExpresInfoSeq.get(1).getSitePosition();
                                postDcItemName = aCalcExpresInfoSeq.get(0).getItemName();
                                postWaferPos = aCalcExpresInfoSeq.get(0).getWaferPosition();
                                postSitePos = aCalcExpresInfoSeq.get(0).getSitePosition();
                            }
                        }
                        // skip the case for delta item pre-post on different position
                        if (!CimStringUtils.equals(preWaferPos, postWaferPos)) {
                            continue;
                        }
                        if (CimStringUtils.equals(pDcItemName, preDcItemName)
                                && CimStringUtils.equals(pWaferPos, preWaferPos)
                                && CimStringUtils.equals(pSitePos, preSitePos)) {
                            int cItemLen = CimArrayUtils.getSize(strDCDef.get(0).getDcItems());
                            for (int ll = 0; ll < cItemLen; ll++) {
                                Infos.DataCollectionItemInfo dcItemInfo = strDCDef.get(0).getDcItems().get(ll);
                                String cDcItemName = dcItemInfo.getDataCollectionItemName();
                                String cWaferPos = dcItemInfo.getWaferPosition();
                                String cSitePos = dcItemInfo.getSitePosition();
                                if (CimStringUtils.equals(cDcItemName, postDcItemName)
                                        && CimStringUtils.equals(cWaferPos, postWaferPos)
                                        && CimStringUtils.equals(cSitePos, postSitePos)) {
                                    dcItemInfo.setWaferID(dataCollectionItemInfoList.get(ll).getWaferID());
                                }
                            }
                        }
                    }
                }
            }

        }
        return retVal;
    }


    /**
     * 在运行时，通过下列计算获取实际的 EDC Items 信息
     *
     * @param dcItemSeq           dcItemSeq
     * @param edcSettingType      edcSettingType
     * @param aDCSpec             aDCSpec
     * @param derivedRequiredFlag derivedRequiredFlag
     * @return actual EDC item information
     */
    private List<Infos.DataCollectionItemInfo> getActualEDCItemsInfo(List<EDCDTO.DCItemDefinition> dcItemSeq,
                                                                     String edcSettingType,
                                                                     CimDataCollectionSpecification aDCSpec,
                                                                     AtomicBoolean derivedRequiredFlag) {
        List<Infos.DataCollectionItemInfo> retVal = new ArrayList<>();
        Map<String, String> targetValue = new HashMap<>();

        switch (CimStringUtils.isEmpty(edcSettingType) ? BizConstant.EDC_PLAN_SETTING_TYPE_SPECIFIC : edcSettingType) {
            // EDC Setting Type = Specific
            case BizConstant.EDC_PLAN_SETTING_TYPE_SPECIFIC:
                dcItemSeq.stream().sorted(Comparator.comparing(EDCDTO.DCItemDefinition::getSeqNo)).forEach(dcItemDefinition -> {
                    Infos.DataCollectionItemInfo itemInfo = new Infos.DataCollectionItemInfo();
                    retVal.add(itemInfo);

                    itemInfo.setDataCollectionItemName(dcItemDefinition.getDataItemName());
                    itemInfo.setDataCollectionMode(dcItemDefinition.getDataCollectionMethod());
                    itemInfo.setDataCollectionUnit(dcItemDefinition.getUnitOfMeasure());
                    itemInfo.setDataType(dcItemDefinition.getValType());
                    itemInfo.setItemType(dcItemDefinition.getItemType());
                    itemInfo.setSeqNo(dcItemDefinition.getSeqNo());

                    String itemType = itemInfo.getItemType();
                    if (CimStringUtils.equals(itemType, BizConstant.SP_DCDEF_ITEM_DERIVED)
                            || CimStringUtils.equals(itemType, BizConstant.SP_DCDEF_ITEM_USERFUNCTION)) {
                        derivedRequiredFlag.set(true);
                    }
                    itemInfo.setMeasurementType(dcItemDefinition.getMeasType());
                    itemInfo.setWaferID(ObjectIdentifier.emptyIdentifier());
                    itemInfo.setWaferPosition(dcItemDefinition.getWaferPosition());
                    itemInfo.setSitePosition(dcItemDefinition.getSitePosition());
                    itemInfo.setHistoryRequiredFlag(dcItemDefinition.isStored());
                    itemInfo.setCalculationType(dcItemDefinition.getCalculationType());
                    itemInfo.setCalculationExpression(dcItemDefinition.getCalculationExpression());
                    itemInfo.setDataValue("");

                    if (aDCSpec == null) {
                        itemInfo.setTargetValue("");
                    } else {
                        final String value = targetValue.get(itemInfo.getDataCollectionItemName());
                        if (CimStringUtils.isNotEmpty(value)) {
                            itemInfo.setTargetValue(value);
                        } else {
                            final String edcItemTargetValue = this.getEDCItemTargetValue(aDCSpec, itemInfo.getDataCollectionItemName());
                            itemInfo.setTargetValue(edcItemTargetValue);
                            targetValue.put(itemInfo.getDataCollectionItemName(), edcItemTargetValue);
                        }
                    }
                    itemInfo.setSpecCheckResult("");
                    itemInfo.setActionCodes("");
                    itemInfo.setWaferCount(null);
                    itemInfo.setSiteCount(null);
                });
                break;
            // EDC Setting Type = General
            case BizConstant.EDC_PLAN_SETTING_TYPE_GENERAL:
                dcItemSeq.stream().sorted(Comparator.comparing(EDCDTO.DCItemDefinition::getSeqNo)).forEach(edcItem -> {
                    final String itemType = edcItem.getItemType();

                    // EDC item = Raw
                    if (CimStringUtils.equals(itemType, BizConstant.SP_DCDEF_ITEM_RAW)) {
                        final String waferPosition = edcItem.getWaferPosition();
                        final String sitePosition = edcItem.getSitePosition();
                        final int waferCount = CimNumberUtils.intValue(waferPosition);
                        final int siteCount = CimNumberUtils.intValue(sitePosition);
                        final String measurementType = edcItem.getMeasType();

                        switch (measurementType) {
                            case BizConstant.SP_DCDEF_MEAS_WAFER:
                                for (int i = 0; i < waferCount; i++) {
                                    Infos.DataCollectionItemInfo itemInfo = new Infos.DataCollectionItemInfo();
                                    retVal.add(itemInfo);

                                    itemInfo.setDataCollectionItemName(edcItem.getDataItemName());
                                    itemInfo.setDataCollectionMode(edcItem.getDataCollectionMethod());
                                    itemInfo.setDataCollectionUnit(edcItem.getUnitOfMeasure());
                                    itemInfo.setDataType(edcItem.getValType());
                                    itemInfo.setItemType(itemType);
                                    itemInfo.setMeasurementType(edcItem.getMeasType());
                                    itemInfo.setWaferID(ObjectIdentifier.emptyIdentifier());
                                    itemInfo.setHistoryRequiredFlag(edcItem.isStored());
                                    itemInfo.setCalculationType(edcItem.getCalculationType());
                                    itemInfo.setCalculationExpression(edcItem.getCalculationExpression());
                                    itemInfo.setDataValue("");

                                    if (aDCSpec == null) {
                                        itemInfo.setTargetValue("");
                                    } else {
                                        final String value = targetValue.get(itemInfo.getDataCollectionItemName());
                                        if (CimStringUtils.isNotEmpty(value)) {
                                            itemInfo.setTargetValue(value);
                                        } else {
                                            final String edcItemTargetValue = this.getEDCItemTargetValue(aDCSpec, itemInfo.getDataCollectionItemName());
                                            itemInfo.setTargetValue(edcItemTargetValue);
                                            targetValue.put(itemInfo.getDataCollectionItemName(), edcItemTargetValue);
                                        }
                                    }
                                    itemInfo.setSpecCheckResult("");
                                    itemInfo.setActionCodes("");
                                    itemInfo.setWaferCount(waferCount);
                                    itemInfo.setSiteCount(null);
                                }
                                break;
                            case BizConstant.SP_DCDEF_MEAS_SITE:
                                for (int i = 0; i < waferCount; i++) {
                                    for (int j = 0; j < siteCount; j++) {
                                        Infos.DataCollectionItemInfo itemInfo = new Infos.DataCollectionItemInfo();
                                        retVal.add(itemInfo);

                                        itemInfo.setDataCollectionItemName(edcItem.getDataItemName());
                                        itemInfo.setDataCollectionMode(edcItem.getDataCollectionMethod());
                                        itemInfo.setDataCollectionUnit(edcItem.getUnitOfMeasure());
                                        itemInfo.setDataType(edcItem.getValType());
                                        itemInfo.setItemType(itemType);
                                        itemInfo.setMeasurementType(edcItem.getMeasType());
                                        itemInfo.setWaferID(ObjectIdentifier.emptyIdentifier());
                                        itemInfo.setHistoryRequiredFlag(edcItem.isStored());
                                        itemInfo.setCalculationType(edcItem.getCalculationType());
                                        itemInfo.setCalculationExpression(edcItem.getCalculationExpression());
                                        itemInfo.setDataValue("");
                                        if (aDCSpec == null) {
                                            itemInfo.setTargetValue("");
                                        } else {
                                            final String value = targetValue.get(itemInfo.getDataCollectionItemName());
                                            if (CimStringUtils.isNotEmpty(value)) {
                                                itemInfo.setTargetValue(value);
                                            } else {
                                                final String edcItemTargetValue = this.getEDCItemTargetValue(aDCSpec, itemInfo.getDataCollectionItemName());
                                                itemInfo.setTargetValue(edcItemTargetValue);
                                                targetValue.put(itemInfo.getDataCollectionItemName(), edcItemTargetValue);
                                            }
                                        }
                                        itemInfo.setSpecCheckResult("");
                                        itemInfo.setActionCodes("");
                                        itemInfo.setWaferCount(waferCount);
                                        itemInfo.setSiteCount(siteCount);
                                    }
                                }
                                break;
                            default:
                                if (log.isDebugEnabled()) {
                                    log.debug("MeasurementType is : {}, do nothing.", measurementType);
                                }
                                break;
                        }
                    }

                    // EDC item = Derived
                    if (CimStringUtils.equals(itemType, BizConstant.SP_DCDEF_ITEM_DERIVED)) {
                        Infos.DataCollectionItemInfo itemInfo = new Infos.DataCollectionItemInfo();
                        retVal.add(itemInfo);

                        itemInfo.setDataCollectionItemName(edcItem.getDataItemName());
                        itemInfo.setDataCollectionMode(edcItem.getDataCollectionMethod());
                        itemInfo.setDataCollectionUnit(edcItem.getUnitOfMeasure());
                        itemInfo.setDataType(edcItem.getValType());
                        itemInfo.setItemType(itemType);
                        itemInfo.setMeasurementType(edcItem.getMeasType());
                        itemInfo.setWaferID(ObjectIdentifier.emptyIdentifier());
                        itemInfo.setHistoryRequiredFlag(edcItem.isStored());
                        itemInfo.setCalculationType(edcItem.getCalculationType());
                        itemInfo.setCalculationExpression(edcItem.getCalculationExpression());
                        itemInfo.setWaferPosition(edcItem.getWaferPosition());
                        itemInfo.setSitePosition(edcItem.getSitePosition());
                        itemInfo.setDataValue("");

                        if (aDCSpec == null) {
                            itemInfo.setTargetValue("");
                        } else {
                            final String value = targetValue.get(itemInfo.getDataCollectionItemName());
                            if (CimStringUtils.isNotEmpty(value)) {
                                itemInfo.setTargetValue(value);
                            } else {
                                final String edcItemTargetValue = this.getEDCItemTargetValue(aDCSpec, itemInfo.getDataCollectionItemName());
                                itemInfo.setTargetValue(edcItemTargetValue);
                                targetValue.put(itemInfo.getDataCollectionItemName(), edcItemTargetValue);
                            }
                        }
                        itemInfo.setSpecCheckResult("");
                        itemInfo.setActionCodes("");
                        itemInfo.setWaferCount(null);
                        itemInfo.setSiteCount(null);
                    }
                });
                break;
            default:
                if (log.isDebugEnabled()) {
                    log.debug("EDC setting type is : {}, do nothing.", edcSettingType);
                }
                break;
        }

        return retVal;
    }

    /**
     * Get the EDC item target value.
     *
     * @param aDCSpec  aDCSpec
     * @param itemName itemName
     * @return target value
     */
    private String getEDCItemTargetValue(CimDataCollectionSpecification aDCSpec, String itemName) {
        String targetValue = "";
        EDCDTO.DCItemSpecification aItemSpecVar = aDCSpec.findDCSpec(itemName);
        String dataItemName = aItemSpecVar == null ? null : aItemSpecVar.getDataItemName();
        if (CimStringUtils.isEmpty(dataItemName)) {
            targetValue = "";
        } else {
            String dbTarget;
            Double target = CimNumberUtils.doubleValue(aItemSpecVar.getTarget());
            if (null != target) {
                if (-1.0 < target && target < 1.0) {
                    dbTarget = target.longValue() + "";
                } else if (-100000000000.0 < target && target < 1000000000000.0) {
                    dbTarget = target.floatValue() + "";
                    if (CimStringUtils.length(dbTarget) > 12) {
                        dbTarget = dbTarget.substring(0, 12);
                    }
                } else {
                    dbTarget = target.longValue() + "";
                }
                targetValue = dbTarget;
            }
        }
        return targetValue;
    }


    @Override
    public boolean edcDetailInformationGetFlag(Infos.ObjCommon objCommon,
                                               ObjectIdentifier equipmentID,
                                               ObjectIdentifier lotID,
                                               ObjectIdentifier logicalRecipeID,
                                               ObjectIdentifier machineRecipeID) {
        /*--------------------------------------------------------------*/
        /*   Get Machine / Lot / LogicalRecipe / MachineRecipe Object   */
        /*--------------------------------------------------------------*/
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(aMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));

        CimLot aLot = baseCoreFactory.getBO(CimLot.class, lotID);
        Validations.check(aLot == null, new OmCode(retCodeConfig.getNotFoundLot(), lotID.getValue()));

        CimLogicalRecipe aLogicalRecipe = baseCoreFactory.getBO(CimLogicalRecipe.class, logicalRecipeID);
        Validations.check(aLogicalRecipe == null, new OmCode(retCodeConfig.getNotFoundLogicalRecipe()));

        CimMachineRecipe aMachineRecipe = baseCoreFactory.getBO(CimMachineRecipe.class, machineRecipeID);
        Validations.check(aMachineRecipe == null, new OmCode(retCodeConfig.getNotFoundMachineRecipe()));
        /*----------------------*/
        /*   Get subLotType     */
        /*----------------------*/

        String subLotType = aLot.getSubLotType();
        /*------------------------*/
        /*   Get EDCPlan          */
        /*------------------------*/
        return null != aLogicalRecipe.findDataCollectionDefinitionForSubLotType(aMachine,
                aMachineRecipe,
                subLotType);
    }

    @Override
    public boolean edcItemsInformationExist(Infos.ObjCommon objCommon, ObjectIdentifier lotID) {
        Validations.check(null == lotID, retCodeConfig.getNotFoundLot(), ObjectIdentifier.fetchValue(lotID));

        /*---------------------------*/
        /* Get Lot Object            */
        /*---------------------------*/
        final CimLot aLot = baseCoreFactory.getBO(CimLot.class, lotID);
        Validations.check(null == aLot, retCodeConfig.getNotFoundLot(), ObjectIdentifier.fetchValue(lotID));

        /*---------------------------*/
        /* Get PO Object            */
        /*---------------------------*/
        final CimProcessOperation aPO = aLot.getProcessOperation();
        Validations.check(null == aPO, retCodeConfig.getNotFoundPoForLot());
        CimPODataCollectionItemsDO itemsDO = new CimPODataCollectionItemsDO();
        itemsDO.setReferenceKey(aPO.getPrimaryKey());
        return cimJpaRepository.count(Example.of(itemsDO)) > 0;
    }

    /**
     * Get assigned reticle IDs from specified lot's PO.
     * process_assignedReticle_Get
     *
     * @param objCommon
     * @param lotID
     * @return
     * @author Ho
     */
    @Override
    public List<Infos.StartReticle> processAssignedReticleGet(Infos.ObjCommon objCommon, ObjectIdentifier lotID) {
        CimLot lot = baseCoreFactory.getBO(CimLot.class, lotID);

        /*--------------------------------*/
        /*   Get lot's po   */
        /*--------------------------------*/
        CimProcessOperation processOperation = lot.getProcessOperation();
        Validations.check(processOperation == null, new OmCode(retCodeConfig.getNotFoundProcessOperation(), "", lotID.getValue()));

        /*---------------------------------*/
        /*   Get Actual Start Info of PO   */
        /*---------------------------------*/
        ProcessDTO.ActualStartInformationForPO actualStartInfo = processOperation.getActualStartInfo(false);

        /*----------------------------------*/
        /*   Set Reticle IDs to Structure   */
        /*----------------------------------*/
        List<ProcessDTO.StartReticleInfo> assignedReticleList = actualStartInfo.getAssignedReticles();
        List<Infos.StartReticle> startReticles = new ArrayList<>();
        if (CimArrayUtils.isNotEmpty(assignedReticleList)) {
            assignedReticleList.forEach(startReticleInfo -> {
                Infos.StartReticle startReticle = new Infos.StartReticle();
                startReticle.setReticleID(startReticleInfo.getReticleID());
                startReticle.setSequenceNumber(CimNumberUtils.longValue(startReticleInfo.getSequenceNumber()));
                startReticles.add(startReticle);
            });
        }
        return startReticles;
    }

    @Override
    public List<Infos.StartFixture> processAssignedFixtureGet(Infos.ObjCommon objCommon, ObjectIdentifier lotID) {
        List<Infos.StartFixture> startFixtures = new ArrayList<>();
        /*--------------------*/
        /*   Get Lot Object   */
        /*--------------------*/
        CimLot aLot = baseCoreFactory.getBO(CimLot.class, lotID);
        /*--------------------------------*/
        /*   Get Lot's ProcessOperation   */
        /*--------------------------------*/
        CimProcessOperation aPO = aLot.getProcessOperation();
        Validations.check(null == aPO, new OmCode(retCodeConfig.getNotFoundProcessOperation(), "", lotID.getValue()));
        ProcessDTO.ActualStartInformationForPO actualStartInfo = aPO.getActualStartInfo(false);
        /*----------------------------------*/
        /*   Set Fixture IDs to Structure   */
        /*----------------------------------*/
        int fixtLen = CimArrayUtils.getSize(actualStartInfo.getAssignedFixtures());
        for (int i = 0; i < fixtLen; i++) {
            Infos.StartFixture startFixture = new Infos.StartFixture();
            startFixture.setFixtureID(actualStartInfo.getAssignedFixtures().get(i).getFixtureID());
            startFixture.setFixtureCategory(actualStartInfo.getAssignedFixtures().get(i).getFixtureCategory());
            startFixtures.add(startFixture);
        }
        return startFixtures;
    }


    /**
     * process_startReserveInformation_Clear
     * 1. Clear controlJobID of each cassette.
     * 2. Clear controlJobID of each lot.
     * 3. Clear control job info of each lot's cunrrent PO.
     *
     * @param objCommon         objCommon
     * @param controlJobID      controlJobID
     * @param startCassetteList startCassetteList
     * @return
     * @author Ho
     */
    @Override
    public void processStartReserveInformationClear(Infos.ObjCommon objCommon, ObjectIdentifier controlJobID, List<Infos.StartCassette> startCassetteList) {
        com.fa.cim.newcore.bo.product.CimControlJob aControlJob = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimControlJob.class, controlJobID);
        if (!CimObjectUtils.isEmpty(startCassetteList)){
            for (Infos.StartCassette startCassette : startCassetteList){
                // blank start cassetteID is allowed because of SLM
                if (!ObjectIdentifier.isEmptyWithValue(startCassette.getCassetteID())){
                    /*-------------------------*/
                    /*   Get Cassette Object   */
                    /*-------------------------*/
                    CimCassette aCassette = baseCoreFactory.getBO(CimCassette.class, startCassette.getCassetteID());
                    /*------------------------------------*/
                    /*   Clear ControlJobID of Cassette   */
                    /*------------------------------------*/
                    aCassette.setControlJob(null);
                }
                List<Infos.LotInCassette> lotInCassetteList = startCassette.getLotInCassetteList();
                for (Infos.LotInCassette lotInCassette : lotInCassetteList){
                    /*------------------------*/
                    /*   Omit Not Start Not   */
                    /*------------------------*/
                    boolean operationStartFlag = lotInCassette.getMoveInFlag();
                    if (!operationStartFlag){
                        continue;
                    }
                    /*--------------------*/
                    /*   Get Lot Object   */
                    /*--------------------*/
                    com.fa.cim.newcore.bo.product.CimLot aLot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotInCassette.getLotID());
                    /*-------------------------------*/
                    /*   Clear ControlJobID of Lot   */
                    /*-------------------------------*/
                    aLot.setControlJob(null);
                    /*-------------------------------*/
                    /*   Get Used Reticles for Lot   */
                    /*-------------------------------*/
                    List<Infos.StartReticle> processAssignedReticleResult = processMethod.processAssignedReticleGet(objCommon, lotInCassette.getLotID());
                    List<Infos.StartReticle> startReticleList = processAssignedReticleResult;
                    List<String> checkReticleIDList = new ArrayList<>();
                    if (!CimObjectUtils.isEmpty(startReticleList)){
                        for (Infos.StartReticle startReticle : startReticleList){
                            boolean overlapFlg = false;
                            for (String checkReticleID : checkReticleIDList){
                                if (CimStringUtils.equals(startReticle.getReticleID().getValue(), checkReticleID)){
                                    overlapFlg = true;
                                    break;
                                }
                            }
                            if (overlapFlg){
                                continue;
                            }
                            checkReticleIDList.add(startReticle.getReticleID().getValue());
                            // Remove controlJob from Reticle
                            CimProcessDurable aReticle = baseCoreFactory.getBO(CimProcessDurable.class, startReticle.getReticleID());
                            com.fa.cim.newcore.bo.product.CimControlJob aRtclCJ = aReticle.findReservedControlJobNamed(controlJobID.getValue());
                            if (aRtclCJ != null){
                                aReticle.removeReservedControlJob(aRtclCJ);
                            }
                        }
                    }
                    /*--------------------*/
                    /*   Get Current PO   */
                    /*--------------------*/
                    com.fa.cim.newcore.bo.pd.CimProcessOperation aPosPO = aLot.getProcessOperation();
                    Validations.check(aPosPO == null,new OmCode(retCodeConfig.getNotFoundProcessOperation(), "", lotInCassette.getLotID().getValue()));
                    /*---------------------------------*/
                    /*   Clear ActualStatrInfo of PO   */
                    /*---------------------------------*/
                    ProcessDTO.ActualStartInformationForPO actStartInfo = new ProcessDTO.ActualStartInformationForPO();
                    actStartInfo.setAssignedDataCollectionFlag(false);
                    aPosPO.setActualStartInfo(actStartInfo);
                    /*--------------------------------------*/
                    /*   Clear ActualStartTimeStamp of PO   */
                    /*--------------------------------------*/
                    aPosPO.setActualStartTimeStamp(null);
                    /*-------------------------------*/
                    /*   Clear Proces Wafer of PO   */
                    /*-------------------------------*/
                    aPosPO.setProcessWafers(new ArrayList<>());
                    /*-------------------------------*/
                    /*   Clear Action Result of PO   */
                    /*-------------------------------*/
                    aPosPO.setActionResultInfo(new ArrayList<>());
                    /*------------------------------*/
                    /*   Clear ControlJobID of PO   */
                    /*------------------------------*/
                    aPosPO.setAssignedControlJob(null);
                }
            }
        }
    }

    @Override
    public void processWaferChamberInformationClear(Infos.ObjCommon objCommon, List<Infos.StartCassette> startCassetteList) {
        int lenCast = CimArrayUtils.getSize(startCassetteList);
        for (int i = 0; i < lenCast; i++) {
            int lenLot = CimArrayUtils.getSize(startCassetteList.get(i).getLotInCassetteList());
            for (int j = 0; j < lenLot; j++) {
                Infos.LotInCassette lotInCassette = startCassetteList.get(i).getLotInCassetteList().get(j);
                /*------------------------*/
                /*   Omit Not Start Lot   */
                /*------------------------*/
                if (!lotInCassette.getMoveInFlag()) {
                    continue;
                }
                /*--------------------*/
                /*   Get Lot Object   */
                /*--------------------*/
                com.fa.cim.newcore.bo.product.CimLot aPosLot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotInCassette.getLotID());
                /*--------------------------------------------------*/
                /*   Get and Check Lot's Process Operation Object   */
                /*--------------------------------------------------*/
                com.fa.cim.newcore.bo.pd.CimProcessOperation aPosPO = aPosLot.getProcessOperation();
                if (null != aPosPO) {
                    /*-------------------------------------*/
                    /*   Clear Wafer-Chamber Information   */
                    /*-------------------------------------*/
                    aPosPO.removeAllAssignedProcessResourceInfo();
                }else {
                    Validations.check(true,new OmCode(retCodeConfig.getNotFoundProcessOperation(), "*****", lotInCassette.getLotID().getValue()));
                }
            }
        }
    }

    @Override
    public void processWaferPositionInProcessResourceInformationClear(Infos.ObjCommon objCommon, List<Infos.StartCassette> startCassetteList) {
        int lenCast = CimArrayUtils.getSize(startCassetteList);
        for (int i = 0; i < lenCast; i++) {
            int lenLot = CimArrayUtils.getSize(startCassetteList.get(i).getLotInCassetteList());
            for (int j = 0; j < lenLot; j++) {
                Infos.LotInCassette lotInCassette = startCassetteList.get(i).getLotInCassetteList().get(j);
                /*------------------------*/
                /*   Omit Not Start Lot   */
                /*------------------------*/
                if (!lotInCassette.getMoveInFlag()) {
                    continue;
                }
                /*--------------------*/
                /*   Get Lot Object   */
                /*--------------------*/
                com.fa.cim.newcore.bo.product.CimLot aPosLot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotInCassette.getLotID());
                Validations.check(CimObjectUtils.isEmpty(aPosLot), retCodeConfig.getNotFoundLot());
                /*--------------------------------------------------*/
                /*   Get and Check Lot's Process Operation Object   */
                /*--------------------------------------------------*/
                com.fa.cim.newcore.bo.pd.CimProcessOperation aPO = aPosLot.getProcessOperation();
                Validations.check(null == aPO,retCodeConfig.getNotFoundProcessOperation());
                aPO.removeAllAssignedProcessResourceInfo();
            }
        }
    }

    /**
     * description:
     * change history:
     * date             defect             person             comments
     * ---------------------------------------------------------------------------------------------------------------------
     * @author Nyx
     * @date 2018/7/25 12:35
     * @param objCommon
     * @param attributesList
     * @param attributes
     * @param searchRouteID
     * @param searchOperationNumber
     * @param operationCount
     * @param searchCount -
     * @return int
     */
    private int addRefListAttributes(Infos.ObjCommon objCommon, List<Infos.OperationProcessRefListAttributes> attributesList, Infos.OperationProcessRefListAttributes attributes,
                                     ObjectIdentifier searchRouteID, String searchOperationNumber, int operationCount, int searchCount) {
        Infos.ProcessRef processRef = attributes.getProcessRef();
        if (CimObjectUtils.isEmpty(processRef.getProcessOperationSpecification())) {
            String helperOut = processOperationProcessRefListForLotHelper(objCommon, attributes.getOperationNumber(), processRef.getProcessFlow());
            processRef.setProcessOperationSpecification(helperOut);
            attributes.setProcessRef(processRef);
        }
        attributesList.add(attributes);
        operationCount++;
        if (operationCount < searchCount && ObjectIdentifier.equalsWithValue(attributes.getRouteID(), searchRouteID) && attributes.getOperationNumber().equals(searchOperationNumber)) {
            operationCount = searchCount;
        }
        return operationCount;
    }

    @Override
    public List<Infos.StartCassette> processStartReserveInformationGetByCassette(Infos.ObjCommon objCommon,
                                                                                 ObjectIdentifier equipmentID,
                                                                                 List<ObjectIdentifier> cassetteIDs,
                                                                                 boolean edcItemsNeedFlag) {
        /*----------------*/
        /*                */
        /*   Initialize   */
        /*                */
        /*----------------*/
        int searchCondition = 0;
        String searchConditionVar = StandardProperties.OM_CONSTRAINT_CHK_WITH_SEARCH.getValue();
        if (CimStringUtils.isNotEmpty(searchConditionVar)) {
            searchCondition = Integer.parseInt(searchConditionVar);
        }
        /*--------------------*/
        /*                    */
        /*   Get Eqp Object   */
        /*                    */
        /*--------------------*/
        CimMachine equipment = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(null == equipment, new OmCode(retCodeConfig.getNotFoundEqp(), ObjectIdentifier.fetchValue(equipmentID)));
        /*-----------------------*/
        /*                       */
        /*   Get Eqp port Info   */
        /*                       */
        /*-----------------------*/
        Infos.EqpPortInfo eqpPortInfo = equipmentMethod.equipmentPortInfoGet(objCommon, equipmentID);
        int portLen = CimObjectUtils.isEmpty(eqpPortInfo) ? 0 : CimArrayUtils.getSize(eqpPortInfo.getEqpPortStatuses());

        /*---------------------------------------------------*/
        /*                                                   */
        /*   Get and Set Information into strStartCassette   */
        /*                                                   */
        /*---------------------------------------------------*/
        boolean virtualOperationFlag = false;
        //------------------------//
        //   Get LotIDs in FOUP   //
        //------------------------//
        for (ObjectIdentifier cassetteID : cassetteIDs) {
            Infos.LotListInCassetteInfo cassetteLotListGetResult = cassetteMethod.cassetteGetLotList(objCommon, cassetteID);
            for (int j = 0; j < cassetteLotListGetResult.getLotIDList().size(); j++) {
                Infos.LotInfoInqFlag lotInfoInqFlag = new Infos.LotInfoInqFlag();
                lotInfoInqFlag.setLotBasicInfoFlag(false);
                lotInfoInqFlag.setLotControlUseInfoFlag(false);
                lotInfoInqFlag.setLotFlowBatchInfoFlag(false);
                lotInfoInqFlag.setLotNoteFlagInfoFlag(false);
                lotInfoInqFlag.setLotOperationInfoFlag(true);
                lotInfoInqFlag.setLotOrderInfoFlag(false);
                lotInfoInqFlag.setLotControlJobInfoFlag(false);
                lotInfoInqFlag.setLotProductInfoFlag(false);
                lotInfoInqFlag.setLotRecipeInfoFlag(false);
                lotInfoInqFlag.setLotLocationInfoFlag(false);
                lotInfoInqFlag.setLotWipOperationInfoFlag(false);
                lotInfoInqFlag.setLotWaferAttributesFlag(false);
                lotInfoInqFlag.setLotBackupInfoFlag(false);
                Infos.LotInfo objLotDetailInfoGetDROut = lotMethod.lotDBInfoGetDR(objCommon,
                        lotInfoInqFlag,
                        cassetteLotListGetResult.getLotIDList().get(j));

                CimProcessDefinition aPD = baseCoreFactory.getBO(CimProcessDefinition.class,
                        objLotDetailInfoGetDROut.getLotOperationInfo().getOperationID());
                Validations.check(null == aPD, retCodeConfig.getNotFoundProcessDefinition());
                //-------------------------------//
                //   Get processDefinitionType   //
                //-------------------------------//
                if (CimStringUtils.equals(aPD.getProcessDefinitionType(), BizConstant.SP_OPEPDTYPE_VIRTUAL)) {
                    virtualOperationFlag = true;
                    break;
                }
            }
            if (virtualOperationFlag) {
                break;
            }
        }
        List<Infos.StartCassette> startCassetteList = new ArrayList<>();
        for (int i = 0; i < CimArrayUtils.getSize(cassetteIDs); i++) {
            boolean loadFlag = true;
            /*---------------------------*/
            /*   Find  / Set port Info   */
            /*---------------------------*/
            int j = 0;
            for (j = 0; j < portLen; j++) {
                if (ObjectIdentifier.equalsWithValue(cassetteIDs.get(i), eqpPortInfo.getEqpPortStatuses().get(j).getLoadedCassetteID())) {
                    break;
                }
            }
            if (portLen == j) {
                Validations.check(!virtualOperationFlag, new OmCode(retCodeConfig.getCassetteNotInLoader(),cassetteIDs.get(i).getValue()));
                loadFlag = false;
            }
            Infos.StartCassette startCassette = new Infos.StartCassette();
            if (loadFlag) {
                Infos.EqpPortStatus eqpPortStatus = eqpPortInfo.getEqpPortStatuses().get(j);
                startCassette.setLoadSequenceNumber(eqpPortStatus.getLoadSequenceNumber());
                startCassette.setCassetteID(eqpPortStatus.getLoadedCassetteID());
                //[bear]yes, must be set load startCassette.setLoadPurposeType() by eqpPortStatus.getCassetteLoadPurposeType();
                // not eqpPortStatus.getLoadPurposeType();
                //[Bug-2272]Move in操作时报错
                startCassette.setLoadPurposeType(eqpPortStatus.getCassetteLoadPurposeType());
                startCassette.setLoadPortID(eqpPortStatus.getPortID());
                startCassette.setUnloadPortID(eqpPortStatus.getAssociatedPortID());
            } else {
                startCassette.setCassetteID(cassetteIDs.get(i));
            }
            /*-------------------------*/
            /*   Omit Empty cassette   */
            /*-------------------------*/
            if (CimStringUtils.equals(BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE, startCassette.getLoadPurposeType())) {
                continue;
            }
            /*--------------------------------*/
            /*   Get / Set lot Related Info   */
            /*--------------------------------*/
            int lotLen;
            Infos.LotListInCassetteInfo cassetteLotListGetResult = null;
            if (loadFlag) {
                lotLen = eqpPortInfo.getEqpPortStatuses().get(j).getLotOnPorts().size();
            } else {
                cassetteLotListGetResult = cassetteMethod.cassetteGetLotList(objCommon, cassetteIDs.get(i));
                lotLen = CimArrayUtils.getSize(cassetteLotListGetResult.getLotIDList());
            }
            List<Infos.LotInCassette> lotInCassetteList = new ArrayList<>();
            startCassette.setLotInCassetteList(lotInCassetteList);
            for (int k = 0; k < lotLen; k++) {
                Infos.LotInCassette lotInCassette = new Infos.LotInCassette();
                lotInCassetteList.add(lotInCassette);
                if (loadFlag) {
                    /*------------------*/
                    /*   Set lot Info   */
                    /*------------------*/

                    lotInCassette.setMoveInFlag(eqpPortInfo.getEqpPortStatuses().get(j).getLotOnPorts().get(k).isMoveInFlag());
                    lotInCassette.setMonitorLotFlag(eqpPortInfo.getEqpPortStatuses().get(j).getLotOnPorts().get(k).isMonitorLotFlag());
                    ObjectIdentifier lotId = eqpPortInfo.getEqpPortStatuses().get(j).getLotOnPorts().get(k).getLotID();
                    //Validations.check(StringUtils.isEmpty(lotId), "lotID is empty");
                    lotInCassette.setLotID(lotId);
                    lotInCassette.setLotType(eqpPortInfo.getEqpPortStatuses().get(j).getLotOnPorts().get(k).getLotType());
                    lotInCassette.setSubLotType(eqpPortInfo.getEqpPortStatuses().get(j).getLotOnPorts().get(k).getSubLotType());

                } else {
                    Infos.LotInfoInqFlag lotInfoInqFlag = new Infos.LotInfoInqFlag();
                    lotInfoInqFlag.setLotBasicInfoFlag(true);
                    lotInfoInqFlag.setLotControlUseInfoFlag(false);
                    lotInfoInqFlag.setLotFlowBatchInfoFlag(false);
                    lotInfoInqFlag.setLotNoteFlagInfoFlag(false);
                    lotInfoInqFlag.setLotOperationInfoFlag(true);
                    lotInfoInqFlag.setLotOrderInfoFlag(false);
                    lotInfoInqFlag.setLotControlJobInfoFlag(false);
                    lotInfoInqFlag.setLotProductInfoFlag(false);
                    lotInfoInqFlag.setLotRecipeInfoFlag(false);
                    lotInfoInqFlag.setLotLocationInfoFlag(false);
                    lotInfoInqFlag.setLotWipOperationInfoFlag(false);
                    lotInfoInqFlag.setLotWaferAttributesFlag(false);
                    lotInfoInqFlag.setLotBackupInfoFlag(false);
                    Infos.LotInfo objLotDetailInfoGetDROut = lotMethod.lotDBInfoGetDR(objCommon, lotInfoInqFlag, cassetteLotListGetResult.getLotIDList().get(k));

                    /*------------------*/
                    /*   Set lot Info   */
                    /*------------------*/
                    lotInCassette.setMonitorLotFlag(false);
                    lotInCassette.setLotID(cassetteLotListGetResult.getLotIDList().get(k));
                    lotInCassette.setLotType(objLotDetailInfoGetDROut.getLotBasicInfo().getLotType());
                    lotInCassette.setSubLotType(objLotDetailInfoGetDROut.getLotBasicInfo().getSubLotType());
                    boolean operatioStartFlag = false;
                    for (int l = 0; l < objLotDetailInfoGetDROut.getLotOperationInfo().getLotEquipmentList().size(); l++) {
                        if (ObjectIdentifier.equalsWithValue(equipmentID, objLotDetailInfoGetDROut.getLotOperationInfo().getLotEquipmentList().get(l).getEquipmentID())) {
                            operatioStartFlag = true;
                            break;
                        }
                    }
                    lotInCassette.setMoveInFlag(operatioStartFlag);
                }
                /*----------------------------*/
                /*   Get and Set wafer Info   */
                /*----------------------------*/
                Inputs.ObjLotWafersGetIn objLotWafersGetIn = new Inputs.ObjLotWafersGetIn();
                objLotWafersGetIn.setLotID(lotInCassette.getLotID());
                objLotWafersGetIn.setScrapCheckFlag(true);
                List<Infos.LotWaferInfoAttributes> objLotWaferInfoListGetDROut = lotMethod.lotWaferInfoListGetDR(objCommon, objLotWafersGetIn);


                List<Infos.LotWafer> lotWaferList1 = new ArrayList<>();
                lotInCassette.setLotWaferList(lotWaferList1);
                for (int l = 0; l < CimArrayUtils.getSize(objLotWaferInfoListGetDROut); l++) {
                    Infos.LotWafer lotWafer = new Infos.LotWafer();
                    lotWafer.setWaferID(objLotWaferInfoListGetDROut.get(l).getWaferID());
                    lotWafer.setSlotNumber(objLotWaferInfoListGetDROut.get(l).getSlotNumber().longValue());
                    lotWafer.setControlWaferFlag(objLotWaferInfoListGetDROut.get(l).getControlWaferFlag());
                    lotWaferList1.add(lotWafer);
                }
                /*------------------------------------------*/
                /*   Get ProductID from LotWaferAttributs   */
                /*------------------------------------------*/
                if (0 < CimArrayUtils.getSize(objLotWaferInfoListGetDROut)) {
                    lotInCassette.setProductID(objLotWaferInfoListGetDROut.get(0).getProductID());
                }
                /*----------------------------------*/
                /*    Get / Set Start Recipe Info   */
                /*----------------------------------*/
                CimLot aLot;
                CimLogicalRecipe aLogicalRecipe = null;
                CimMachineRecipe aMachineRecipe = null;
                if (CimBooleanUtils.isTrue(lotInCassette.getMoveInFlag())) {
                    aLot = baseCoreFactory.getBO(CimLot.class, lotInCassette.getLotID());
                    Validations.check(null == aLot,
                            new OmCode(retCodeConfig.getNotFoundLot(), ObjectIdentifier.fetchValue(lotInCassette.getLotID())));
                    CimProcessOperation aPO = aLot.getProcessOperation();
                    Validations.check(null == aPO, new OmCode(retCodeConfig.getNotFoundProcessOperation()
                            , "*****", ObjectIdentifier.fetchValue(lotInCassette.getLotID())));

                    CimProductSpecification aProdSpec = aLot.getProductSpecification();
                    Validations.check(null == aProdSpec, retCodeConfig.getNotFoundProductSpec());

                    aLogicalRecipe = aPO.findLogicalRecipeFor(aProdSpec);
                    Validations.check(null == aLogicalRecipe, retCodeConfig.getNotFoundLogicRecipe());
                    Infos.StartRecipe startRecipe = new Infos.StartRecipe();
                    startRecipe.setLogicalRecipeID(aLogicalRecipe.getLogicalRecipeID());

                    if (1 == searchCondition) {
                        aMachineRecipe = aLogicalRecipe.findMachineRecipeFor(aLot, equipment);
                    } else {
                        aMachineRecipe = aLogicalRecipe.findMachineRecipeForSubLotType(equipment, lotInCassette.getSubLotType());
                    }

                    Validations.check(null == aMachineRecipe, new OmCode(retCodeConfig.getCannotGetStartinfo()
                            , ObjectIdentifier.fetchValue(startCassette.getCassetteID())
                            , ObjectIdentifier.fetchValue(lotInCassette.getLotID())));
                    startRecipe.setMachineRecipeID(aMachineRecipe.getMachineRecipeID());
                    startRecipe.setPhysicalRecipeID(aMachineRecipe.getPhysicalRecipeId());
                    //--------------------------//
                    //   RouteID                //
                    //--------------------------//
                    CimProcessDefinition aMainPD = aLot.getMainProcessDefinition();
                    Validations.check(null == aMainPD,retCodeConfig.getNotFoundRoute());

                    Infos.StartOperationInfo startOperationInfo = new Infos.StartOperationInfo();
                    startOperationInfo.setProcessFlowID(ObjectIdentifier.build(aMainPD.getIdentifier(), aMainPD.getPrimaryKey()));
                    //--------------------------//
                    //   PDID                   //
                    //--------------------------//
                    CimProcessDefinition aPD = aPO.getProcessDefinition();
                    Validations.check(null == aPD, retCodeConfig.getNotFoundProcessDefinition());
                    startOperationInfo.setOperationID(ObjectIdentifier.build(aPD.getIdentifier(), aPD.getPrimaryKey()));
                    //--------------------------//
                    //   OperationNumber        //
                    //--------------------------//
                    startOperationInfo.setOperationNumber(aLot.getOperationNumber());
                    //--------------------------//
                    //   PassCount              //
                    //--------------------------//
                    startOperationInfo.setPassCount( null == aPO.getPassCount()? 0: aPO.getPassCount().intValue());
                    lotInCassette.setStartOperationInfo(startOperationInfo);
                    lotInCassette.setStartRecipe(startRecipe);
                }
                /*---------------------------*/
                /*   Omit Not OpeStart lot   */
                /*---------------------------*/
                if (CimBooleanUtils.isFalse(lotInCassette.getMoveInFlag())) {
                    continue;
                }
                /*------------------------------------------------*/
                /*    Get / Set wafer and Recipe Parameter Info   */
                /*------------------------------------------------*/
                lotInCassette.setRecipeParameterChangeType(BizConstant.SP_RPARM_CHANGETYPE_BYLOT);
                /*--------------------------*/
                /*   Get Recipe parameter   */
                /*--------------------------*/
                assert aLogicalRecipe != null;
                List<RecipeDTO.RecipeParameter> recipeParameters = aLogicalRecipe.findRecipeParametersForSubLotType(equipment,
                        aMachineRecipe,
                        lotInCassette.getSubLotType());

                /*-------------------------------------------------------*/
                /*   Set wafer Info and Recipe parameter to Each wafer   */
                /*-------------------------------------------------------*/
                for (int l = 0; l < CimArrayUtils.getSize(objLotWaferInfoListGetDROut); l++) {
                    Infos.LotWafer lotWafer = lotInCassette.getLotWaferList().get(l);
                    List<Infos.StartRecipeParameter> startRecipeParameterList = new ArrayList<>();

                    if (CimArrayUtils.isNotEmpty(recipeParameters)) {
                        for (RecipeDTO.RecipeParameter recipeParameter : recipeParameters) {
                            Infos.StartRecipeParameter startRecipeParameter = new Infos.StartRecipeParameter();
                            startRecipeParameter.setParameterName(recipeParameter.getParameterName());
                            Boolean useCurrentValueFlag = recipeParameter.getUseCurrentValueFlag();
                            if (useCurrentValueFlag) {
                                startRecipeParameter.setParameterValue(null);
                            } else {
                                startRecipeParameter.setParameterValue(recipeParameter.getDefaultValue());
                            }
                            startRecipeParameter.setTargetValue(recipeParameter.getDefaultValue());
                            startRecipeParameter.setUseCurrentSettingValueFlag(recipeParameter.getUseCurrentValueFlag());
                            startRecipeParameterList.add(startRecipeParameter);
                        }
                    }
                    lotWafer.setStartRecipeParameterList(startRecipeParameterList);

                }
                /*------------------------------------*/
                /*   Get / Set Data Collection Info   */
                /*------------------------------------*/
                final boolean isDataCollectionFlag = this.edcDetailInformationGetFlag(
                        objCommon,
                        equipmentID,
                        lotInCassette.getLotID(),
                        lotInCassette.getStartRecipe().getLogicalRecipeID(),
                        lotInCassette.getStartRecipe().getMachineRecipeID());
                lotInCassette.getStartRecipe().setDataCollectionFlag(isDataCollectionFlag);

                if (edcItemsNeedFlag && isDataCollectionFlag) {
                    Outputs.ObjProcessDataCollectionDefinitionGetOut dataCollectionDefinitionGetOut
                            = this.processDataCollectionDefinitionGet(objCommon,
                            equipmentID,
                            lotInCassette.getLotID(),
                            lotInCassette.getStartRecipe().getLogicalRecipeID(),
                            lotInCassette.getStartRecipe().getMachineRecipeID());
                    /*lotInCassette.getStartRecipe().setDataCollectionFlag(dataCollectionDefinitionGetOut.isDataCollectionFlag());*/
                    lotInCassette.getStartRecipe().setDcDefList(dataCollectionDefinitionGetOut.getDataCollectionDefList());
                }
            }
            startCassetteList.add(startCassette);
        }
        /*------------------------------------*/
        /*                                    */
        /*   Get / Set Process durable Info   */
        /*                                    */
        /*------------------------------------*/

        /*-----------------------------------------*/
        /*   Check Process durable Required Flag   */
        /*-----------------------------------------*/
        try {
            equipmentMethod.equipmentProcessDurableRequiredFlagGet(objCommon, equipmentID);
        } catch (ServiceException e){
            if (Validations.isEquals(e.getCode(), retCodeConfig.getEquipmentProcessDurableReticleRequired())
                    || Validations.isEquals(e.getCode(), retCodeConfig.getEquipmentProcessDurableFixtRequired())){
                for (Infos.StartCassette startCassette : startCassetteList){
                    String loadPurposeType = startCassette.getLoadPurposeType();
                    if (CimObjectUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE)){
                        continue;
                    }
                    List<Infos.LotInCassette> lotInCassetteList = startCassette.getLotInCassetteList();
                    for (Infos.LotInCassette lotInCassette : lotInCassetteList){
                        boolean operationStartFlag = CimBooleanUtils.isTrue(lotInCassette.getMoveInFlag());
                        if (!operationStartFlag){
                            continue;
                        }
                        /*--------------------------------------------------*/
                        /*   Check Process Durable Condition for OpeStart   */
                        /*--------------------------------------------------*/
                        Outputs.ObjProcessDurableCheckConditionForOperationStartOut objProcessDurableCheckConditionForOperationStartOutRetCode = processMethod.processDurableCheckConditionForOpeStart(objCommon, equipmentID, lotInCassette.getStartRecipe().getLogicalRecipeID(),
                                lotInCassette.getStartRecipe().getMachineRecipeID(), lotInCassette.getLotID());
                        /*---------------------------------------*/
                        /*   Set Available Reticles / Fixtures   */
                        /*---------------------------------------*/
                        Infos.StartRecipe startRecipe = lotInCassette.getStartRecipe();
                        startRecipe.setStartReticleList(objProcessDurableCheckConditionForOperationStartOutRetCode.getStartReticleList());
                        startRecipe.setStartFixtureList(objProcessDurableCheckConditionForOperationStartOutRetCode.getStartFixtureList());
                    }
                }
            } else if (Validations.isEquals(e.getCode(), retCodeConfig.getEquipmentProcessDurableNotRequired())){

            } else {
                throw e;
            }
        }
        return startCassetteList;
    }


    @Override
    public Outputs.ObjProcessStartReserveInformationGetByCassetteOut processStartReserveInformationGetByCassetteForInternalBuffer(Infos.ObjCommon objCommon,
                                                                                                                                  ObjectIdentifier equipmentID,
                                                                                                                                  List<ObjectIdentifier> cassetteID,
                                                                                                                                  boolean edcItemsNeedFlag) {
        Outputs.ObjProcessStartReserveInformationGetByCassetteOut out = new Outputs.ObjProcessStartReserveInformationGetByCassetteOut();
        int searchCondition = StandardProperties.OM_CONSTRAINT_CHK_WITH_SEARCH.getIntValue();
        //--------------------
        //  Get Eqp Object
        //--------------------
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(aMachine == null, new OmCode(retCodeConfig.getNotFoundEqp(), equipmentID.getValue()));
        //---------------------------------
        //  Get Eqp Internal Buffer Info
        //---------------------------------
        List<Infos.EqpInternalBufferInfo> eqpInternalBufferInfos = equipmentMethod.equipmentInternalBufferInfoGet(objCommon, equipmentID);
        List<MachineDTO.MachineCassette> strMachineCassetteSeq = aMachine.allCassettes();
        //---------------------------------------------------
        //  Get and Set Information into strStartCassette
        //---------------------------------------------------
        int bufferCategoryLen = CimArrayUtils.getSize(eqpInternalBufferInfos);
        int castLen = CimArrayUtils.getSize(cassetteID);
        List<Infos.StartCassette> startCassetteList = new ArrayList<>();
        out.setStartCassetteList(startCassetteList);
        //-----------------------------------
        //  Find / Set Internal Buffer Info
        //-----------------------------------
        //  Input Cassette Loop
        for (int si = 0; si < castLen; si++){
            Infos.StartCassette startCassette = new Infos.StartCassette();
            startCassetteList.add(startCassette);
            startCassette.setLoadSequenceNumber(0L);//default set load sequenceNum 0
            boolean bCassetteFoundInBuffer = false;
            int bi = 0;
            int bj = 0;
            //-----------------------------------
            //  Find Internal Buffer Info
            //-----------------------------------
            for (bi = 0; bi < bufferCategoryLen; bi++){
                List<Infos.ShelfInBuffer> strShelfInBuffers = eqpInternalBufferInfos.get(bi).getShelfInBufferList();
                int nShelfLen = CimArrayUtils.getSize(strShelfInBuffers);
                for (bj = 0; bj < nShelfLen; bj++){
                    if (ObjectIdentifier.equalsWithValue(cassetteID.get(si), strShelfInBuffers.get(bj).getLoadedCarrierID())){
                        bCassetteFoundInBuffer = true;
                        break;
                    }
                }
                if (bCassetteFoundInBuffer){
                    break;
                }
            }
            Validations.check(!bCassetteFoundInBuffer, new OmCode(retCodeConfig.getCstNotInLoader(), cassetteID.get(si).getValue()));
            //----------------------------
            //  Set Internal Buffer Info
            //----------------------------
            startCassette.setCassetteID(eqpInternalBufferInfos.get(bi).getShelfInBufferList().get(bj).getLoadedCarrierID());
            startCassette.setLoadPurposeType(eqpInternalBufferInfos.get(bi).getBufferCategory());
            //-------------------------
            //   Omit Empty Cassette
            //-------------------------
            String loadPurposeType = startCassette.getLoadPurposeType();
            if (CimStringUtils.equals(BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE, loadPurposeType)){
                continue;
            }
            int lenMacCas = CimArrayUtils.getSize(strMachineCassetteSeq);
            for (int k = 0; k < lenMacCas; k++){
                MachineDTO.MachineCassette machineCassette = strMachineCassetteSeq.get(k);
                if (ObjectIdentifier.equalsWithValue(machineCassette.getCassetteID(), startCassette.getCassetteID())){
                    startCassette.setLoadPortID(machineCassette.getLoadPortID());
                    startCassette.setUnloadPortID(machineCassette.getUnloadPortID());
                    break;
                }
            }
            //--------------------------------
            //   Get / Set Lot Related Info
            //--------------------------------
            List<Infos.LotOnPort> strLotInShelfs = eqpInternalBufferInfos.get(bi).getShelfInBufferList().get(bj).getLotInShelfList();
            int lotLen = CimArrayUtils.getSize(strLotInShelfs);
            List<Infos.LotInCassette> lotInCassetteList = new ArrayList<>();
            startCassette.setLotInCassetteList(lotInCassetteList);
            for (int sj = 0, bk = 0; bk < lotLen; sj++, bk++){
                Infos.LotOnPort lotOnPort = strLotInShelfs.get(bk);
                //------------------
                //   Set Lot Info
                //------------------
                Infos.LotInCassette lotInCassette = new Infos.LotInCassette();
                lotInCassetteList.add(lotInCassette);
                lotInCassette.setMoveInFlag(lotOnPort.isMoveInFlag());
                lotInCassette.setMonitorLotFlag(lotOnPort.isMonitorLotFlag());
                lotInCassette.setLotID(lotOnPort.getLotID());
                lotInCassette.setLotType(lotOnPort.getLotType());
                lotInCassette.setSubLotType(lotOnPort.getSubLotType());
                //----------------------------
                //   Get and Set Wafer Info
                //----------------------------
                Inputs.ObjLotWafersGetIn objLotWafersGetIn = new Inputs.ObjLotWafersGetIn();
                objLotWafersGetIn.setLotID(lotInCassette.getLotID());
                objLotWafersGetIn.setScrapCheckFlag(true);
                List<Infos.LotWaferInfoAttributes> lotWaferInfoAttributesList = lotMethod.lotWaferInfoListGetDR(objCommon, objLotWafersGetIn);
                int wfrCnt = CimArrayUtils.getSize(lotWaferInfoAttributesList);
                int sk = 0;
                List<Infos.LotWafer> lotWaferList = new ArrayList<>();
                lotInCassette.setLotWaferList(lotWaferList);
                for (sk = 0; sk < wfrCnt; sk++){
                    Infos.LotWaferInfoAttributes lotWaferInfoAttributes = lotWaferInfoAttributesList.get(sk);
                    Infos.LotWafer lotWafer = new Infos.LotWafer();
                    lotWaferList.add(lotWafer);
                    lotWafer.setWaferID(lotWaferInfoAttributes.getWaferID());
                    lotWafer.setSlotNumber(lotWaferInfoAttributes.getSlotNumber().longValue());
                    lotWafer.setControlWaferFlag(lotWaferInfoAttributes.getControlWaferFlag());
                }
                //------------------------------------------
                //  Get ProductID from LotWaferAttributs
                //------------------------------------------
                if (!CimArrayUtils.isEmpty(lotWaferInfoAttributesList)){
                    lotInCassette.setProductID(lotWaferInfoAttributesList.get(0).getProductID());
                }
                //----------------------------------
                //    Get / Set Start Recipe Info
                //----------------------------------
                CimLogicalRecipe aLogicalRecipe = null;
                CimMachineRecipe aMachineRecipe = null;
                boolean operationStartFlag = lotInCassette.getMoveInFlag();
                if (operationStartFlag){
                    //===== get Lot object =====
                    CimLot aLot = baseCoreFactory.getBO(CimLot.class, lotInCassette.getLotID());
                    Validations.check(aLot == null, new OmCode(retCodeConfig.getNotFoundLot(), lotInCassette.getLotID().getValue()));
                    //===== get PO object =====
                    CimProcessOperation aPosPO = aLot.getProcessOperation();
                    Validations.check(aPosPO == null, new OmCode(retCodeConfig.getNotFoundProcessOperation(), "*****", lotInCassette.getLotID().getValue()));
                    //===== get ProdSpec object =====
                    CimProductSpecification aPosProdSpec = aLot.getProductSpecification();
                    Validations.check(aPosProdSpec == null, new OmCode(retCodeConfig.getNotFoundProductSpec()));
                    //===== get LogicalRecipe object and set objectIdentifier =====
                    aLogicalRecipe = aPosPO.findLogicalRecipeFor(aPosProdSpec);
                    Validations.check(aLogicalRecipe == null, new OmCode(retCodeConfig.getNotFoundLogicalRecipe()));
                    Infos.StartRecipe startRecipe = new Infos.StartRecipe();
                    lotInCassette.setStartRecipe(startRecipe);
                    startRecipe.setLogicalRecipeID(new ObjectIdentifier(aLogicalRecipe.getIdentifier(), aLogicalRecipe.getPrimaryKey()));
                    //===== get / set MachineRecipe object and set objectIdentifier =====
                    if (searchCondition == 1){
                        aMachineRecipe = aLogicalRecipe.findMachineRecipeFor(aLot, aMachine);
                    } else {
                        aMachineRecipe = aLogicalRecipe.findMachineRecipeForSubLotType(aMachine, lotInCassette.getSubLotType());
                    }
                    Validations.check(aMachineRecipe == null,
                            new OmCode(retCodeConfig.getCannotGetStartinfo(), startCassette.getCassetteID().getValue(), lotInCassette.getLotID().getValue()));
                    startRecipe.setMachineRecipeID(new ObjectIdentifier(aMachineRecipe.getIdentifier(), aMachineRecipe.getPrimaryKey()));
                    //===== get / set PhysicalRecipeID =====
                    startRecipe.setPhysicalRecipeID(aMachineRecipe.getPhysicalRecipeId());
                    //--------------------------//
                    //   RouteID                //
                    //--------------------------//
                    CimProcessDefinition aMainPD = aLot.getMainProcessDefinition();
                    Validations.check(aMainPD == null, new OmCode(retCodeConfig.getNotFoundRoute(), ""));
                    Infos.StartOperationInfo startOperationInfo = new Infos.StartOperationInfo();
                    lotInCassette.setStartOperationInfo(startOperationInfo);
                    startOperationInfo.setProcessFlowID(new ObjectIdentifier(aMainPD.getIdentifier(), aMainPD.getPrimaryKey()));
                    //--------------------------//
                    //   PDID                   //
                    //--------------------------//
                    CimProcessDefinition aPD = aPosPO.getProcessDefinition();
                    Validations.check(aPD == null, new OmCode(retCodeConfig.getNotFoundProcessDefinition(), ""));
                    startOperationInfo.setOperationID(new ObjectIdentifier(aPD.getIdentifier(), aPD.getPrimaryKey()));
                    //--------------------------//
                    //   OperationNumber        //
                    //--------------------------//
                    startOperationInfo.setOperationNumber(aLot.getOperationNumber());
                    //--------------------------//
                    //   PassCount              //
                    //--------------------------//
                    startOperationInfo.setPassCount(aPosPO.getPassCount().intValue());
                }
                //---------------------------
                //   Omit Not OpeStart Lot
                //---------------------------
                operationStartFlag = lotInCassette.getMoveInFlag();
                if (!operationStartFlag){
                    continue;
                }
                //------------------------------------------------
                //    Get / Set Wafer and Recipe Parameter Info
                //------------------------------------------------
                lotInCassette.setRecipeParameterChangeType(BizConstant.SP_RPARM_CHANGETYPE_BYLOT);
                //--------------------------
                //   Get Recipe parameter
                //--------------------------
                Validations.check(aLogicalRecipe == null, new OmCode(retCodeConfig.getNotFoundLogicalRecipe()));
                List<RecipeDTO.RecipeParameter> recipeParameterSeq = aLogicalRecipe.findRecipeParametersForSubLotType(aMachine, aMachineRecipe, lotInCassette.getSubLotType());
                int rpmCnt = CimArrayUtils.getSize(recipeParameterSeq);
                //-------------------------------------------------------
                //   Set Wafer Info and Recipe parameter to Each Wafer
                //-------------------------------------------------------
                for (sk = 0; sk < wfrCnt; sk++){
                    Infos.LotWafer lotWafer = lotWaferList.get(sk);
                    List<Infos.StartRecipeParameter> startRecipeParameterList = new ArrayList<>();
                    lotWafer.setStartRecipeParameterList(startRecipeParameterList);
                    for (int s1 = 0; s1 < rpmCnt; s1++){
                        Infos.StartRecipeParameter startRecipeParameter = new Infos.StartRecipeParameter();
                        startRecipeParameterList.add(startRecipeParameter);
                        startRecipeParameter.setParameterName(recipeParameterSeq.get(s1).getParameterName());
                        boolean useCurrentValueFlag = recipeParameterSeq.get(s1).getUseCurrentValueFlag();
                        if (useCurrentValueFlag){
                            startRecipeParameter.setParameterValue("");
                        } else {
                            startRecipeParameter.setParameterValue(recipeParameterSeq.get(s1).getDefaultValue());
                        }
                        startRecipeParameter.setTargetValue(recipeParameterSeq.get(s1).getDefaultValue());
                        startRecipeParameter.setUseCurrentSettingValueFlag(recipeParameterSeq.get(s1).getUseCurrentValueFlag());
                    }
                }
                //------------------------------------
                //   Get / Set Data Collection Info
                //------------------------------------
                final boolean isDataCollectionFlag = this.edcDetailInformationGetFlag(objCommon,
                        equipmentID,
                        lotInCassette.getLotID(),
                        lotInCassette.getStartRecipe().getLogicalRecipeID(),
                        lotInCassette.getStartRecipe().getMachineRecipeID());
                lotInCassette.getStartRecipe().setDataCollectionFlag(isDataCollectionFlag);

                if (edcItemsNeedFlag && isDataCollectionFlag) {
                    Outputs.ObjProcessDataCollectionDefinitionGetOut processDataCollectionDefinitionGetOut = this.processDataCollectionDefinitionGet(objCommon,
                            equipmentID,
                            lotInCassette.getLotID(),
                            lotInCassette.getStartRecipe().getLogicalRecipeID(),
                            lotInCassette.getStartRecipe().getMachineRecipeID());
                    /*lotInCassette.getStartRecipe().setDataCollectionFlag(processDataCollectionDefinitionGetOut.isDataCollectionFlag());*/
                    lotInCassette.getStartRecipe().setDcDefList(processDataCollectionDefinitionGetOut.getDataCollectionDefList());
                }
            }
        }
        //-----------------------------------------
        //   Check Process Durable Required Flag
        //-----------------------------------------
        try {
            equipmentMethod.equipmentProcessDurableRequiredFlagGet(objCommon, equipmentID);
        } catch (ServiceException e) {
            if (Validations.isEquals(retCodeConfig.getEquipmentProcessDurableReticleRequired(), e.getCode())
                    || Validations.isEquals(retCodeConfig.getEquipmentProcessDurableFixtRequired(), e.getCode())){
                int SCLength = CimArrayUtils.getSize(startCassetteList);
                for (int i = 0; i < SCLength; i++){
                    String loadPurposeType = startCassetteList.get(i).getLoadPurposeType();
                    if (CimStringUtils.equals(loadPurposeType, BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE)){
                        continue;
                    }
                    List<Infos.LotInCassette> lotInCassetteList = startCassetteList.get(i).getLotInCassetteList();
                    int LICLength = CimArrayUtils.getSize(lotInCassetteList);
                    for (int j = 0; j < LICLength; j++){
                        Infos.LotInCassette lotInCassette = lotInCassetteList.get(j);
                        boolean operationStartFlag = lotInCassette.getMoveInFlag();
                        if(!operationStartFlag){
                            continue;
                        }
                        //--------------------------------------------------
                        //   Check Process Durable Condition for OpeStart
                        //--------------------------------------------------
                        Outputs.ObjProcessDurableCheckConditionForOperationStartOut objProcessDurableCheckConditionForOperationStartOut = this.processDurableCheckConditionForOpeStart(objCommon, equipmentID, lotInCassette.getStartRecipe().getLogicalRecipeID(), lotInCassette.getStartRecipe().getMachineRecipeID(), lotInCassette.getLotID());
                        //---------------------------------------
                        //   Set Available Reticles / Fixtures
                        //---------------------------------------
                        lotInCassette.getStartRecipe().setStartReticleList(objProcessDurableCheckConditionForOperationStartOut.getStartReticleList());
                        lotInCassette.getStartRecipe().setStartFixtureList(objProcessDurableCheckConditionForOperationStartOut.getStartFixtureList());
                    }
                }
            } else if(Validations.isEquals(retCodeConfig.getEquipmentProcessDurableNotRequired(), e.getCode())){

            } else {
                throw e;
            }
        }
        return out;
    }

    @Override
    public Outputs.ObjProcessStartReserveInformationGetBaseInfoForClientOut processStartReserveInformationGetBaseInfoForClient(Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, List<Infos.StartCassette> startCassettes) {
        Outputs.ObjProcessStartReserveInformationGetBaseInfoForClientOut result = new Outputs.ObjProcessStartReserveInformationGetBaseInfoForClientOut();
        /*----------------*/
        /*   Initialize   */
        /*----------------*/
        Integer searchCondition = 0;
        String value = StandardProperties.OM_CONSTRAINT_CHK_WITH_SEARCH.getValue();
        if (!CimStringUtils.isEmpty(value)) {
            searchCondition = Integer.valueOf(value);
        }
        /*--------------------*/
        /*   Get Eqp Object   */
        /*--------------------*/
        CimMachine aMachine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(null == aMachine,retCodeConfig.getNotFoundEqp());
        /*---------------------------------------------*/
        /*   Set Retuen Structure's strStartCassette   */
        /*---------------------------------------------*/
        result.setEquipmentID(new ObjectIdentifier(aMachine.getIdentifier(),aMachine.getPrimaryKey()));
        result.setStartCassetteList(startCassettes);
        /*----------------------------*/
        /*   Loop for StartCassette   */
        /*----------------------------*/
        int castLen = CimArrayUtils.getSize(startCassettes);
        if (castLen > 0){
            for (Infos.StartCassette startCassette : startCassettes){
                /*-------------------------*/
                /*   Omit Empty Cassette   */
                /*-------------------------*/
                if (CimStringUtils.equals(startCassette.getLoadPurposeType(), BizConstant.SP_LOADPURPOSETYPE_EMPTYCASSETTE)){
                    continue;
                }
                /*----------------------------*/
                /*   Loop for LotInCassette   */
                /*----------------------------*/
                List<Infos.LotInCassette> lotInCassetteList = startCassette.getLotInCassetteList();
                for (Infos.LotInCassette lotInCassette : lotInCassetteList){

                    /*------------------------*/
                    /*   Omit Not Start Lot   */
                    /*------------------------*/
                    if (!lotInCassette.getMoveInFlag()){
                        continue;
                    }
                    /*----------------------------------*/
                    /*    Get / Set Start Recipe Info   */
                    /*----------------------------------*/
                    /*===== get Lot object =====*/
                    com.fa.cim.newcore.bo.product.CimLot aLot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotInCassette.getLotID());
                    boolean skipFlag = false;
                    Outputs.ObjLotEffectiveFPCInfoGetOut lotEffectiveFPCInfo = lotMethod.lotEffectiveFPCInfoGet(objCommon, BizConstant.SP_FPC_EXCHANGETYPE_STARTRESERVEINFO, equipmentID, lotInCassette.getLotID());

                    /*------------------------------------------*/
                    /*    Get / Set Lot Type and Sub Lot Type   */
                    /*------------------------------------------*/
                    lotInCassette.setLotType(aLot.getLotType());
                    lotInCassette.setSubLotType(aLot.getSubLotType());
                    /*===== get PO object =====*/
                    com.fa.cim.newcore.bo.pd.CimProcessOperation aPosPO = aLot.getProcessOperation();
                    Validations.check(aPosPO == null,new OmCode(retCodeConfig.getNotFoundProcessOperation(), "*****", lotInCassette.getLotID().getValue()));
                    /*===== get ProdSpec object =====*/
                    CimProductSpecification aPosProdSpec = aLot.getProductSpecification();
                    Validations.check(aPosProdSpec == null,retCodeConfig.getNotFoundProductSpec());

                    //Qiandao project add start
                    /*===== get productGroup object =====*/
                    CimProductGroup productGroup = aPosProdSpec.getProductGroup();
                    Validations.check(null == productGroup,retCodeConfig.getNotFoundProductGroup(),"******");
                    /*===== get technology object =====*/
                    CimTechnology technology = productGroup.getTechnology();
                    Validations.check(null == technology,retCodeConfig.getNotFoundTechnology(),"******");
                    lotInCassette.setProductGroupID(ObjectIdentifier.build(productGroup.getIdentifier(),productGroup.getPrimaryKey()));
                    lotInCassette.setTechnologyID(ObjectIdentifier.build(technology.getIdentifier(),technology.getPrimaryKey()));
                    //Qiandao project add end

                    /*===== get LogicalRecipe object and set objectIdentifier =====*/
                    com.fa.cim.newcore.bo.recipe.CimLogicalRecipe aLogicalRecipe = aPosPO.findLogicalRecipeFor(aPosProdSpec);
                    Validations.check(aLogicalRecipe == null,retCodeConfig.getNotFoundLogicalRecipe());
                    Infos.StartRecipe startRecipe = lotInCassette.getStartRecipe();
                    startRecipe.setLogicalRecipeID(ObjectIdentifier.build(aLogicalRecipe.getIdentifier(), aLogicalRecipe.getPrimaryKey()));
                    /*===== get / set MachineRecipe object and set objectIdentifier =====*/
                    com.fa.cim.newcore.bo.recipe.CimMachineRecipe aMachineRecipe = null;
                    if (searchCondition == 1){
                        aMachineRecipe = aLogicalRecipe.findMachineRecipeFor(aLot, aMachine);
                    } else {
                        aMachineRecipe = aLogicalRecipe.findMachineRecipeForSubLotType(aMachine, lotInCassette.getSubLotType());
                    }
                    if (aMachineRecipe == null){
                        if (lotEffectiveFPCInfo.isMachineRecipeActionRequiredFlag()){
                            skipFlag = true;
                        } else {
                            Validations.check(true,retCodeConfig.getNotFoundMachineRecipe());
                        }
                    }
                    if (!skipFlag){
                        startRecipe.setMachineRecipeID(new ObjectIdentifier(aMachineRecipe.getIdentifier(), aMachineRecipe.getPrimaryKey()));
                        //MES qiandao-dev physicalRecipe add fileLocation start
                        String physicalRecipeID = aMachineRecipe.getPhysicalRecipeId();
                        String fileLocation = aMachineRecipe.getRecipeBodyFileLocation();
                        if (CimStringUtils.isNotEmpty(fileLocation)) {
                            physicalRecipeID = fileLocation.trim() + physicalRecipeID;
                        }
                        //MES qiandao-dev physicalRecipe add fileLocation start
                        /*===== get / set PhysicalRecipeID =====*/
                        startRecipe.setPhysicalRecipeID(physicalRecipeID);
//                        startRecipe.setPhysicalRecipeID(aMachineRecipe.getPhysicalRecipeId());
                    }
                    /*--------------------------*/                                                                                           //D3000116
                    /*   Get ProductID          */                                                                                           //D3000116
                    /*--------------------------*/
                    lotInCassette.setProductID(new ObjectIdentifier(aPosProdSpec.getIdentifier(), aPosProdSpec.getPrimaryKey()));
                    /*------------------------------------------------*/
                    /*    Get / Set Wafer and Recipe Parameter Info   */
                    /*------------------------------------------------*/
                    lotInCassette.setRecipeParameterChangeType(BizConstant.SP_RPARM_CHANGETYPE_BYLOT);
                    if (!skipFlag){
                        /*--------------------------*/
                        /*   Get Recipe parameter   */
                        /*--------------------------*/
                        List<RecipeDTO.RecipeParameter> recipeParameterSeq = aLogicalRecipe.findRecipeParametersForSubLotType(aMachine, aMachineRecipe, lotInCassette.getSubLotType());
                        if (!CimObjectUtils.isEmpty(recipeParameterSeq)){
                            /*-----------------------*/
                            /*   Loop for LotWafer   */
                            /*-----------------------*/
                            List<Infos.LotWafer> lotWaferList = lotInCassette.getLotWaferList();
                            for (Infos.LotWafer lotWafer : lotWaferList){
                                /*-------------------------------------------------------*/
                                /*   Set Wafer Info and Recipe parameter to Each Wafer   */
                                /*-------------------------------------------------------*/
                                List<Infos.StartRecipeParameter> startRecipeParameterList = new ArrayList<>();
                                lotWafer.setStartRecipeParameterList(startRecipeParameterList);
                                for (RecipeDTO.RecipeParameter recipeParameter : recipeParameterSeq){
                                    Infos.StartRecipeParameter startRecipeParameter = new Infos.StartRecipeParameter();
                                    startRecipeParameterList.add(startRecipeParameter);
                                    startRecipeParameter.setParameterName(recipeParameter.getParameterName());
                                    if (!recipeParameter.getUseCurrentValueFlag()){
                                        startRecipeParameter.setParameterValue(recipeParameter.getDefaultValue());
                                    }
                                    startRecipeParameter.setTargetValue(recipeParameter.getDefaultValue());
                                    startRecipeParameter.setUseCurrentSettingValueFlag(recipeParameter.getUseCurrentValueFlag());
                                }
                            }
                        }
                    }
                    //--------------------------//
                    //   RouteID                //
                    //--------------------------//
                    com.fa.cim.newcore.bo.pd.CimProcessDefinition aMainPD = aLot.getMainProcessDefinition();
                    Validations.check(aMainPD == null,new OmCode(retCodeConfig.getNotFoundRoute(), ""));
                    Infos.StartOperationInfo startOperationInfo = lotInCassette.getStartOperationInfo();
                    startOperationInfo.setProcessFlowID(new ObjectIdentifier(aMainPD.getIdentifier(), aMainPD.getPrimaryKey()));
                    //--------------------------//
                    //   PDID                   //
                    //--------------------------//
                    com.fa.cim.newcore.bo.pd.CimProcessDefinition aPD = aPosPO.getProcessDefinition();
                    Validations.check(aPD == null,new OmCode(retCodeConfig.getNotFoundProcessDefinition(), ""));
                    startOperationInfo.setOperationID(new ObjectIdentifier(aPD.getIdentifier(), aPD.getPrimaryKey()));
                    //--------------------------//
                    //   OperationNumber        //
                    //--------------------------//
                    startOperationInfo.setOperationNumber(aLot.getOperationNumber());
                    //--------------------------//
                    //   PassCount              //
                    //--------------------------//
                    startOperationInfo.setPassCount(aPosPO.getPassCount() == null ? 0 : aPosPO.getPassCount().intValue());
                }
            }
        }
        return result;
    }

    @Override
    public List<Infos.ConnectedRouteList> processConnectedRouteList(Infos.ObjCommon objCommon, String routeType, ObjectIdentifier lotID) {
        int count = 0;
        com.fa.cim.newcore.bo.product.CimLot aLot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotID);
        Validations.check(aLot == null, new OmCode(retCodeConfig.getNotFoundLot(), lotID.getValue()));
        com.fa.cim.newcore.bo.pd.CimProcessDefinition returnMainPD = aLot.getMainProcessDefinition();
        Validations.check(returnMainPD == null, new OmCode(retCodeConfig.getNotFoundProcessDefinition(), ""));
        // --- Get rework route information -----------------------------------------------------------
        List<Infos.ConnectedRouteList> strConnectedRouteList = new ArrayList<>();
        if (CimStringUtils.equals(routeType, BizConstant.SP_MAINPDTYPE_REWORK)){
            //---------------------------------------
            // Current PO or Previous PO ?
            //---------------------------------------
            Boolean currentPOFlag = lotMethod.lotCheckConditionForPO(objCommon, lotID);
            com.fa.cim.newcore.bo.pd.CimProcessOperation aProcessOperation = null;
            if(currentPOFlag){
                //--------------------------------------------------------------------------
                // Get PO from Current Operation.
                //--------------------------------------------------------------------------
                aProcessOperation = aLot.getProcessOperation();
            } else {
                //--------------------------------------------------------------------------
                // Get PO from Previous Operation.
                //--------------------------------------------------------------------------
                aProcessOperation = aLot.getPreviousProcessOperation();
            }
            Validations.check(aProcessOperation == null, retCodeConfig.getNotFoundProcessOperation());
            List<ProcessDTO.ProcessFlowConnection> reworkFlows = aProcessOperation.allReworkProcessFlowConnections();
            Validations.check(CimArrayUtils.isEmpty(reworkFlows), retCodeConfig.getNotFoundEntryW());
            int seqLen = CimArrayUtils.getSize(reworkFlows);
            com.fa.cim.newcore.bo.pd.CimProcessDefinition aProcessDefinition = null;
            for (int i = count; i < seqLen; i++){
                ProcessDTO.ProcessFlowConnection processFlowConnection = reworkFlows.get(i);
                aProcessDefinition = baseCoreFactory.getBO(com.fa.cim.newcore.bo.pd.CimProcessDefinition.class, processFlowConnection.getBranchPD().getReferenceKey());
                Validations.check(aProcessDefinition == null, new OmCode(retCodeConfig.getNotFoundProcessDefinition(), processFlowConnection.getBranchPD().getValue()));
                Infos.ConnectedRouteList connectedRouteList = new Infos.ConnectedRouteList();
                strConnectedRouteList.add(connectedRouteList);
                connectedRouteList.setRouteID(new ObjectIdentifier(aProcessDefinition.getIdentifier(), processFlowConnection.getBranchPD().getReferenceKey()));
                connectedRouteList.setRouteDescription(aProcessDefinition.getDescription());
                connectedRouteList.setManufacturingLayerID(new ObjectIdentifier(aProcessDefinition.getMFGLayer()));
                Person aPerson = aProcessDefinition.getOwner();
                if (aPerson != null){
                    connectedRouteList.setRouteOwner(aPerson.getIdentifier());
                } else {
                    throw new ServiceException(new OmCode(retCodeConfig.getNotFoundPerson(), "*****"));
                }
                connectedRouteList.setReturnRouteID(new ObjectIdentifier(returnMainPD.getIdentifier(), returnMainPD.getPrimaryKey()));
                connectedRouteList.setReturnOperationNumber(processFlowConnection.getReturnOperationNumber());
                count++;
            }
        }
        // --- Get sub route information --------------------------------------------------------------
        else {
            com.fa.cim.newcore.bo.pd.CimProcessOperation aProcessOperation = aLot.getProcessOperation();
            Validations.check(aProcessOperation == null, retCodeConfig.getNotFoundProcessOperation());
            List<ProcessDTO.ProcessFlowConnection> subFlows = aProcessOperation.allProcessFlowConnections();
            int seqLen = CimArrayUtils.getSize(subFlows);
            com.fa.cim.newcore.bo.pd.CimProcessDefinition aProcessDefinition = null;
            for (int i = 0; i < seqLen; i++){
                ProcessDTO.ProcessFlowConnection processFlowConnection = subFlows.get(i);
                aProcessDefinition = baseCoreFactory.getBO(com.fa.cim.newcore.bo.pd.CimProcessDefinition.class, processFlowConnection.getBranchPD().getReferenceKey());
                Validations.check(aProcessDefinition == null, new OmCode(retCodeConfig.getNotFoundProcessDefinition(), processFlowConnection.getBranchPD().getValue()));
                Infos.ConnectedRouteList connectedRouteList = new Infos.ConnectedRouteList();
                strConnectedRouteList.add(connectedRouteList);
                connectedRouteList.setRouteID(new ObjectIdentifier(aProcessDefinition.getIdentifier(), processFlowConnection.getBranchPD().getReferenceKey()));
                connectedRouteList.setRouteDescription(aProcessDefinition.getDescription());
                connectedRouteList.setManufacturingLayerID(new ObjectIdentifier(aProcessDefinition.getMFGLayer()));
                Person aPerson = aProcessDefinition.getOwner();
                if (aPerson != null){
                    connectedRouteList.setRouteOwner(aPerson.getIdentifier());
                } else {
                    throw new ServiceException(new OmCode(retCodeConfig.getNotFoundPerson(), "*****"));
                }
                connectedRouteList.setReturnRouteID(new ObjectIdentifier(returnMainPD.getIdentifier(), returnMainPD.getPrimaryKey()));
                connectedRouteList.setReturnOperationNumber(processFlowConnection.getReturnOperationNumber());
                count++;
            }
        }
        Validations.check(count == 0, retCodeConfig.getNotFoundEntryW());
        return strConnectedRouteList;
    }

    @Override
    public void processCheckBankIn(Infos.ObjCommon objCommon, ObjectIdentifier lotID) {
        com.fa.cim.newcore.bo.product.CimLot lot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotID);
        Validations.check(CimObjectUtils.isEmpty(lot), retCodeConfig.getNotFoundLot());
        Validations.check(CimBooleanUtils.isTrue(lot.isBankInRequired()) ? retCodeConfig.getBankinOperation() : retCodeConfig.getNotBankInOperation());
    }

    @Override
    public List<Infos.EqpChamberStatusCheckResult> processResourceCurrentStateCheckTransition(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, List<Infos.EqpChamberStatus> chamberStatuses,
            boolean checkManufacturingFlag) {
        CimMachine machine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(machine == null, retCodeConfig.getNotFoundEqp());
        Validations.check(machine.isStorageMachine(), retCodeConfig.getInvalidRequestForStocker());

        CimPerson person = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());
        Validations.check(person == null, retCodeConfig.getNotFoundPerson());
        List<String> userGroups = person.getUserGroups();

        List<Infos.EqpChamberStatusCheckResult> result = Lists.newArrayList();

        chamberStatuses.forEach(status -> {
            ProcessResource resource = machine.findProcessResourceNamed(status.getChamberID().getValue());
            Validations.check(resource == null, retCodeConfig.getNotFoundChamber());

            CimProcessResource chamber = (CimProcessResource) resource;
            CimMachineState currentState = chamber.getCurrentMachineState();
            Validations.check(currentState == null, retCodeConfig.getNotFoundEqpState());

            CimMachineState newState = baseCoreFactory.getBO(CimMachineState.class, status.getChamberStatusCode());
            Validations.check(newState == null, retCodeConfig.getNotFoundEqpState());

            CimE10State currentE10 = currentState.getE10State();
            Validations.check(currentE10 == null, retCodeConfig.getNotFoundEqpState());

            CimE10State newE10 = newState.getE10State();
            Validations.check(newE10 == null, retCodeConfig.getNotFoundEqpState());

            if (checkManufacturingFlag && CimStringUtils.equalsIn(newE10.getIdentifier(),
                    CIMStateConst.CIM_E10_PRODUCTIVE, CIMStateConst.CIM_E10_STANDBY)) {
                Validations.check(CimBooleanUtils.isFalse(currentState.isManufacturingStateChangeable()),
                        retCodeConfig.getInvalidStateTransition());
            }

            boolean checkTransitionRule = true;
            if (CimStringUtils.unEqual(currentE10.getIdentifier(), newE10.getIdentifier())) {
                // get environment value with OM_EQP_STATUS_CHG_LIMIT,
                // this environment indicate whether need to check eqp status change rule limited.
                // if OM_EQP_STATUS_CHG_LIMIT = 1 ; then need to check ; else don't neet to check.
                if (CimStringUtils.unEqual(StandardProperties.OM_EQP_STATUS_CHG_LIMIT.getValue(), "1")) {
                    checkTransitionRule = false;
                }
                Validations.check(CimBooleanUtils.isFalse(currentState.isChangeToOtherE10()),
                        retCodeConfig.getInvalidStateTransition());
                Validations.check(CimBooleanUtils.isFalse(newState.isChangeFromOtherE10()),
                        retCodeConfig.getInvalidStateTransition());
            }

            if (checkTransitionRule) {
                ObjectIdentifier nextTransition = currentState.getStateNextTransition(
                        machine.getEqpModel(), newState.getIdentifier());
                Validations.check(ObjectIdentifier.isEmptyWithValue(nextTransition),
                        retCodeConfig.getInvalidStateTransition());

                if (CimStringUtils.equals(machine.getEqpModel(), BizConstant.SP_EQP_MODEL_ASSIST_NON_PROCESS)) {
                    // 如果当前设备是辅助设备(非加工产品), 则定制化为: 仅ME(设备/工艺工程师手动切换)权限可以操作
                    Validations.check(!userGroups.contains("ME"), retCodeConfigEx.getDepartmentEqpStateNotAuthority(),
                            equipmentID.getValue(), newState.getIdentifier());
                } else {
                    List<CodeDTO.BrEquipmentStateUserGroupData> userGroupLimits = currentState
                            .findUserGroupsForNextEquipmentState(machine.getEqpModel(), nextTransition.getValue());
                    if (CimArrayUtils.isNotEmpty(userGroupLimits)) {
                        // 有权限限制, 非Auto, 限制只能拥有指定权限的用户执行
                        Validations.check(userGroupLimits.stream().noneMatch(group ->
                                        userGroups.contains(group.getUserGroupId())),
                                retCodeConfigEx.getDepartmentEqpStateNotAuthority(),
                                equipmentID.getValue(), newState.getIdentifier());
                    }
                }
            }

            Infos.EqpChamberStatusCheckResult tmp = new Infos.EqpChamberStatusCheckResult();
            tmp.setResult(retCodeConfig.getSucc().getCode());
            tmp.setChamberID(status.getChamberID());
            tmp.setChamberStatusCode(status.getChamberStatusCode());
            result.add(tmp);
        });

        return result;
    }

    @Override
    public Outputs.ObjProcessResourceCurrentStateChangeOut processResourceCurrentStateChange(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID,
            List<Infos.EqpChamberStatusCheckResult> checkResults) {
        CimMachine machine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(machine == null, retCodeConfig.getNotFoundEquipment());

        List<ProcessResource> chambers = machine.allProcessResources();
        Validations.check(CimArrayUtils.isEmpty(chambers), retCodeConfig.getNotFoundChamber());

        CimPerson person = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());
        Validations.check(person == null, retCodeConfig.getNotFoundPerson(), objCommon.getUser().getUserID());

        List<Infos.EqpChamberState> chamberStates = Lists.newArrayList();
        Timestamp opeTime = objCommon.getTimeStamp().getReportTimeStamp();
        checkResults.forEach(status -> {
            CimProcessResource chamber = baseCoreFactory.getBO(CimProcessResource.class, status.getChamberID());
            Validations.check(chamber == null, retCodeConfig.getNotFoundChamber());

            CimMachineState newState = baseCoreFactory.getBO(CimMachineState.class, status.getChamberStatusCode());
            if (newState == null)
                return;

            CimE10State newE10 = newState.getE10State();

            CimMachineState currentState = chamber.getCurrentMachineState();
            CimE10State currentE10 = null;
            if (currentState != null) {
                currentE10 = currentState.getE10State();
            }
            CimMachineState currentActualState = chamber.getActualMachineState();
            CimE10State currentActualE10 = null;
            if (currentActualState != null) {
                currentActualE10 = currentActualState.getE10State();
            }

            Infos.EqpChamberState state = new Infos.EqpChamberState();
            state.setChamberID(ObjectIdentifier.build(chamber.getIdentifier(), chamber.getPrimaryKey()));
            state.setChamberStatusCode(ObjectIdentifier.build(newState.getIdentifier(), newState.getPrimaryKey()));
            if (newE10 != null) {
                state.setChamberE10Status(ObjectIdentifier.build(newE10.getIdentifier(), newE10.getPrimaryKey()));
            }
            if (currentState != null) {
                state.setPreviousStatus(ObjectIdentifier.build(
                        currentState.getIdentifier(), currentState.getPrimaryKey()));
            }
            if (currentE10 != null) {
                state.setPreviousE10Status(ObjectIdentifier.build(
                        currentE10.getIdentifier(), currentE10.getPrimaryKey()));
            }
            if (currentActualState != null) {
                state.setPreviousActualStatus(ObjectIdentifier.build(
                        currentActualState.getIdentifier(), currentActualState.getPrimaryKey()));
            }
            if (currentActualE10 != null) {
                state.setActualE10Status(ObjectIdentifier.build(
                        currentActualE10.getIdentifier(), currentActualE10.getPrimaryKey()));
                state.setPreviousActualE10Status(ObjectIdentifier.build(
                        currentActualE10.getIdentifier(), currentActualE10.getPrimaryKey()));
            }
            chamberStates.add(state);

            chamber.setCurrentMachineState(newState);
            chamber.setLastClaimedPerson(person);
            chamber.setLastClaimedTimeStamp(opeTime);
            chamber.setLastStatusChangePerson(person);
            chamber.setLastStatusChangeTimeStamp(opeTime);
            chamber.setAvailableFlag(newState.isMachineAvailable());
            chamber.setLastStatusHistoryTimeStamp(opeTime);
        });

        Outputs.ObjProcessResourceCurrentStateChangeOut out = new Outputs.ObjProcessResourceCurrentStateChangeOut();
        out.setEquipmentID(equipmentID);
        out.setEqpChamberStates(chamberStates);
        return out;
    }

    @Override
    public Outputs.ObjProcessResourceCurrentStateChangeByAutoOut processResourceCurrentStateChangeByAuto(
            Infos.ObjCommon objCommon, ObjectIdentifier equipmentID,
            List<Infos.ActualChamberStatus> actualChamberStatuses) {
        CimMachine machine = baseCoreFactory.getBO(CimMachine.class, equipmentID);
        Validations.check(machine == null, retCodeConfig.getNotFoundEquipment());
        Validations.check(machine.isStorageMachine(), retCodeConfig.getInvalidRequestForStocker());

        List<ProcessResource> chambers = machine.allProcessResources();
        Validations.check(CimArrayUtils.isEmpty(chambers), retCodeConfig.getNotFoundChamber());

        CimPerson person = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());
        Validations.check(person == null, retCodeConfig.getNotFoundPerson(), objCommon.getUser().getUserID());

        List<Infos.ChamberStateHisByAuto> chamberStates = Lists.newArrayList();
        Timestamp opeTime = objCommon.getTimeStamp().getReportTimeStamp();
        actualChamberStatuses.forEach(status -> {
            ProcessResource resource = machine.findProcessResourceNamed(status.getChamberID().getValue());
            Validations.check(resource == null, retCodeConfig.getNotFoundChamber());

            CimProcessResource chamber = (CimProcessResource) resource;

            CimMachineState newState = baseCoreFactory.getBO(CimMachineState.class, status.getChamberStatusCode());
            if (newState == null)
                return;

            CimE10State newE10 = newState.getE10State();

            CimMachineState newActualState = baseCoreFactory.getBO(CimMachineState.class, status.getActualStatusCode());
            CimE10State newActualE10 = null;
            if (newActualState != null) {
                newActualE10 = newActualState.getE10State();
            }

            CimMachineState currentState = chamber.getCurrentMachineState();
            CimE10State currentE10 = null;
            if (currentState != null) {
                currentE10 = currentState.getE10State();
            }
            CimMachineState currentActualState = chamber.getActualMachineState();
            CimE10State currentActualE10 = null;
            if (currentActualState != null) {
                currentActualE10 = currentActualState.getE10State();
            }

            Infos.ChamberStateHisByAuto state = new Infos.ChamberStateHisByAuto();
            if (newActualState != null) {
                state.setChamberID(ObjectIdentifier.build(chamber.getIdentifier(), chamber.getPrimaryKey()));
                if (status.getResult() == retCodeConfig.getSucc().getCode()) {
                    state.setChamberStatusCode(ObjectIdentifier.build(
                            newState.getIdentifier(), newState.getPrimaryKey()));
                    if (newE10 != null) {
                        state.setE10Status(ObjectIdentifier.build(newE10.getIdentifier(), newE10.getPrimaryKey()));
                    }
                } else {
                    if (currentState != null) {
                        state.setChamberStatusCode(ObjectIdentifier.build(
                                currentState.getIdentifier(), currentState.getPrimaryKey()));
                    }
                    if (currentE10 != null) {
                        state.setE10Status(ObjectIdentifier.build(
                                currentE10.getIdentifier(), currentE10.getPrimaryKey()));
                    }
                }
                if (currentState != null) {
                    state.setPreviousStatus(ObjectIdentifier.build(
                            currentState.getIdentifier(), currentState.getPrimaryKey()));
                }
                if (currentE10 != null) {
                    state.setPreviousE10Status(ObjectIdentifier.build(
                            currentE10.getIdentifier(), currentE10.getPrimaryKey()));
                }
                state.setActualStatus(ObjectIdentifier.build(
                        newActualState.getIdentifier(), newActualState.getPrimaryKey()));
                if (newActualE10 != null) {
                    state.setActualE10Status(ObjectIdentifier.build(
                            newActualE10.getIdentifier(), newActualE10.getPrimaryKey()));
                }
                if (currentActualState != null) {
                    state.setPreviousActualStatus(ObjectIdentifier.build(
                            currentActualState.getIdentifier(), currentActualState.getPrimaryKey()));
                }
                if (currentActualE10 != null) {
                    state.setPreviousActualE10Status(ObjectIdentifier.build(
                            currentActualE10.getIdentifier(), currentActualE10.getPrimaryKey()));
                }
                state.setPrevStateStartTime(chamber.getLastStatusHistoryTimeStamp().toString());
                state.setGenHistory(true);
                chamber.setLastStatusHistoryTimeStamp(opeTime);
            } else {
                state.setGenHistory(false);
            }
            chamberStates.add(state);

            if (status.getResult() == retCodeConfig.getSucc().getCode()) {
                chamber.setCurrentMachineState(newState);
                chamber.setLastStatusChangePerson(person);
                chamber.setLastStatusChangeTimeStamp(opeTime);
                chamber.setAvailableFlag(newState.isMachineAvailable());
            }
            if (newActualState != null) {
                chamber.setActualMachineState(newActualState);
            }
            chamber.setLastClaimedPerson(person);
            chamber.setLastClaimedTimeStamp(opeTime);
            chamber.setLastActualStatusChangeTimeStamp(opeTime);
        });

        Outputs.ObjProcessResourceCurrentStateChangeByAutoOut out =
                new Outputs.ObjProcessResourceCurrentStateChangeByAutoOut();
        out.setEquipmentID(equipmentID);
        out.setChamberStateHisByAuto(chamberStates);
        return out;
    }

    public List<Infos.OperationNameAttributes> processOperationListForRoute(Infos.ObjCommon objcommon, Inputs.ProcessOperationListForRoute strProcessOperationListForRouteIn) {
        ObjectIdentifier routeID = strProcessOperationListForRouteIn.getRouteID();
        ObjectIdentifier operationID = strProcessOperationListForRouteIn.getOperationID();
        String operationNumber = strProcessOperationListForRouteIn.getOperationNumber();
        String pdType = strProcessOperationListForRouteIn.getPdType();
        long searchCount = strProcessOperationListForRouteIn.getSearchCount();

        String hFRPFMAINPF_FOR_OPE = null;
        String hFRPFMAINPF_FOR_MOD = null;
        String hFRPFMODULE_NUMBER = null;
        String hFRPFMODULE_OPE_NUMBER = null;

        List<Infos.OperationNameAttributes> strOperationNameAttributesList = new ArrayList<>();
        String hFRPFMAINPD_ID = ObjectIdentifier.fetchValue(routeID);
        String hFRPFPD_LEVEL = BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_OPERATION;
        String hFRPOSOPE_NO_1 = operationNumber;

        //-------------------------------------------
        // Get Main Process Flow For Operation
        //-------------------------------------------
        log.info("### SELECT MAINPF_OBJ FROM OMPRF ");
        CimProcessFlowDO mainProcessFlowForOpe = cimJpaRepository.queryOne("SELECT ID FROM OMPRF WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2", CimProcessFlowDO.class, hFRPFMAINPD_ID, hFRPFPD_LEVEL);
        Validations.check(mainProcessFlowForOpe == null, new OmCode(retCodeConfig.getNotFoundRoute(), hFRPFMAINPD_ID));

        hFRPFMAINPF_FOR_OPE =  mainProcessFlowForOpe.getId();
        log.info("### Selected Main PF_ID for operation = {}", hFRPFMAINPF_FOR_OPE);

        //-------------------------------------------
        //  Get Main Process Flow For Module
        //-------------------------------------------
        log.info("### SELECT MODULEPF_OBJ FROM OMPRF");
        CimProcessFlowDO mainProcessFlowForMod = cimJpaRepository.queryOne("SELECT ID FROM OMPRF WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2 AND ACTIVE_FLAG = ?3", CimProcessFlowDO.class, hFRPFMAINPD_ID, BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE, true);
        Validations.check(mainProcessFlowForMod == null, new OmCode(retCodeConfig.getNotFoundRoute(), hFRPFMAINPD_ID));
        hFRPFMAINPF_FOR_MOD = mainProcessFlowForMod.getId();
        log.info("### Selected Main PF_ID for module = {}", hFRPFMAINPF_FOR_MOD);

        //-------------------------------------------
        //  Make SQL parameter marker.
        //-------------------------------------------
        log.info("### Make SQL parameter marker");
        boolean caseFlag = false;
        String hvBuffer = "SELECT  IDX_NO,\n" +
                "                                         ROUTE_NO,\n" +
                "                                         ROUTE_ID,\n" +
                "                                         STAGE_ID,\n" +
                "                                         STAGE_RKEY\n" +
                "                                 FROM    OMPRF_ROUTESEQ\n" +
                "                                 WHERE   REFKEY = '%s'";
        if (!CimStringUtils.isEmpty(operationNumber)) {
            log.info("### There is operationNumber");
            int lastIndex = operationNumber.lastIndexOf(".");
            hFRPFMODULE_OPE_NUMBER = operationNumber.substring(lastIndex + 1); //start position exclude '.';
            if (!CimStringUtils.isEmpty(hFRPFMODULE_OPE_NUMBER)) {
                int firstIndex = operationNumber.indexOf(".");
                if (firstIndex > 0) {
                    hFRPFMODULE_NUMBER = operationNumber.substring(0, firstIndex);
                }
            } else {
                throw new ServiceException(retCodeConfig.getSystemError());
            }
            hvBuffer += " AND LINK_KEY = '%s' ORDER BY IDX_NO";
            caseFlag = true;
        } else {
            log.info("### There is no operationNumber");
            hvBuffer += " ORDER BY IDX_NO";
        }
        String formatSql = null;
        if (CimBooleanUtils.isTrue(caseFlag)) {
            formatSql = String.format(hvBuffer, hFRPFMAINPF_FOR_MOD, hFRPFMODULE_NUMBER);
        } else {
            formatSql = String.format(hvBuffer, hFRPFMAINPF_FOR_MOD);
        }
        List<CimPFDefinitionListDO> pfpds = cimJpaRepository.query(formatSql, CimPFDefinitionListDO.class);
        int pfpdSize = CimArrayUtils.getSize(pfpds);
        Validations.check(pfpdSize == 0, new OmCode(retCodeConfig.getNotFoundOperation(), operationNumber));
        //-------------------------------------------
        //  Abstract operationName attributes.
        //-------------------------------------------
        for (int i = 0; i < pfpdSize; i++) {
            CimPFDefinitionListDO cimPFDefinitionListDO = pfpds.get(i);
            //-------------------------------------------
            // Get Module PD, Module No, Stage ID
            //-------------------------------------------
            log.info("### SequenceNumber = {}", cimPFDefinitionListDO.getSequenceNumber());
            log.info("### ModuleNO = {}", cimPFDefinitionListDO.getModuleNO());
            log.info("### ProcessDefinitionID = {}", cimPFDefinitionListDO.getProcessDefinitionID());
            log.info("### StageID = {}", cimPFDefinitionListDO.getStageID());

            //-------------------------------------------
            // Get Stage Group ID
            //-------------------------------------------
            log.info("####### Select Stage information");
            CimStageDO stage = cimJpaRepository.queryOne("SELECT STAGE_GRP_ID,STAGE_GRP_RKEY FROM OMSTAGE WHERE STAGE_ID = ?", CimStageDO.class, cimPFDefinitionListDO.getStageID());
            Validations.check(null == stage,retCodeConfig.getNotFoundStage());
            String hStageGroupId = stage.getStageGroupID();
            String hStageGroupObj = stage.getStageGroupObj();

            log.info("### Select Result(Stage) count = {}", i);
            log.info("### hStageGroupId  = {}", hStageGroupId);
            log.info("### hStageGroupObj = {}", hStageGroupObj);

            //-------------------------------------------
            // Get Module Process Flow
            //-------------------------------------------
            log.info("####### Select Module processFlow information");
            //--- If module PDID's version is "##", convert it to real PDID
            String strVersionId = cimFrameWorkGlobals.extractVersionFromID(cimPFDefinitionListDO.getProcessDefinitionID());
            if (CimStringUtils.equals(BizConstant.SP_ACTIVE_VERSION, strVersionId)) {
                log.info("### VERSION_ID == '##'");
                CimProcessDefinitionDO cimProcessDefinitionDO = cimJpaRepository.queryOne("SELECT ACTIVE_VER_ID FROM OMPRP WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2", CimProcessDefinitionDO.class, cimPFDefinitionListDO.getProcessDefinitionID(), BizConstant.SP_PD_FLOWLEVEL_MODULE);
                Validations.check(cimProcessDefinitionDO == null, new OmCode(retCodeConfig.getNotFoundProcessDefinition(), cimPFDefinitionListDO.getProcessDefinitionID()));
                hFRPFMAINPD_ID = cimProcessDefinitionDO.getActiveID();
            } else {
                log.info("### VERSION_ID != '##'");
                hFRPFMAINPD_ID = cimPFDefinitionListDO.getProcessDefinitionID();
            }

            CimProcessFlowDO mainPF = cimJpaRepository.queryOne("SELECT ID FROM OMPRF WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2 AND ACTIVE_FLAG = ?3", CimProcessFlowDO.class,hFRPFMAINPD_ID, BizConstant.SP_PD_FLOWLEVEL_MODULE, true);
            Validations.check(mainPF == null, new OmCode(retCodeConfig.getNotFoundModule(), hFRPFMAINPD_ID));
            log.info("### Process Flow ID = {}", mainPF.getId());
            //-------------------------------------------
            //  Make SQL parameter marker.
            //-------------------------------------------
            log.info("### Make SQL parameter marker(for POS)");
            hvBuffer = "select IDX_NO,PRSS_RKEY from OMPRF_PRSSSEQ where REFKEY = '%s'";
            if (CimBooleanUtils.isTrue(caseFlag)) {
                hvBuffer += " AND LINK_KEY = '%s' ORDER BY IDX_NO";
            } else {
                hvBuffer += " ORDER BY IDX_NO";
            }
            String queryPosList = null;
            if (caseFlag) {
                queryPosList = String.format(hvBuffer, mainPF.getId(), hFRPFMODULE_OPE_NUMBER);
            } else {
                queryPosList = String.format(hvBuffer, mainPF.getId());
            }
            List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query(queryPosList, CimPFPosListDO.class);
            Validations.check(CimArrayUtils.getSize(processFlowPosLists) == 0, new OmCode(retCodeConfig.getNotFoundOperation(), operationNumber));
            for (int j = 0; j < CimArrayUtils.getSize(processFlowPosLists); j++) {
                //-------------------------------------------
                // Get Module POS_OBJ
                //-------------------------------------------
                log.info("####### FETCH POS information FROM OMPRF_PRSSSEQ ");
                CimPFPosListDO processFlowPosList = processFlowPosLists.get(j);
                //-------------------------------------------
                // Get Module POS Info
                //-------------------------------------------
                log.info("####### Select POS information FROM OMPRSS");
                CimProcessOperationSpecificationDO processOperationSpecifications = cimJpaRepository.queryOne("SELECT OPE_NO,STEP_ID,STEP_RKEY,COMPULSORY_FLAG FROM OMPRSS WHERE ID = ?1", CimProcessOperationSpecificationDO.class, processFlowPosList.getProcessOperationSpecificationsObj());
                Validations.check(processOperationSpecifications == null, new OmCode(retCodeConfig.getNotFoundPos()));

                log.info("### OperationNumber = {}", processOperationSpecifications.getOperationNumber());
                log.info("### ProcessDefinitionID = {}", processOperationSpecifications.getProcessDefinitionID());
                log.info("### ProcessDefinitionObj = {}", processOperationSpecifications.getProcessDefinitionObj());
                log.info("### MandatoryFlag = {}", processOperationSpecifications.getMandatoryFlag());

                //-------------------------------------------
                // Get PD Type
                //-------------------------------------------
                CimProcessDefinitionDO cimProcessDefinitionDO = cimJpaRepository.queryOne("SELECT PRP_TYPE FROM OMPRP WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2", CimProcessDefinitionDO.class, processOperationSpecifications.getProcessDefinitionID(), BizConstant.SP_PD_FLOWLEVEL_OPERATION);
                Validations.check(cimProcessDefinitionDO == null, retCodeConfig.getNotFoundProcessDefinition());
                String processDefinitionType = cimProcessDefinitionDO.getProcessDefinitionType();
                log.info("### ProcessDefinitionType = {}", processDefinitionType);
                if (!CimStringUtils.isEmpty(strProcessOperationListForRouteIn.getPdType()) && !processDefinitionType.equals(strProcessOperationListForRouteIn.getPdType())) {
                    continue;
                }
                //Set QTimeReqFlag
                Infos.OperationNameAttributes strOperationNameAttributes = new Infos.OperationNameAttributes();
                strOperationNameAttributes.setQtimeFlag(false);
                //-------------------------------------------
                // Get Main POS_OBJ
                //-------------------------------------------
                log.info("####### Select Main POS information FROM OMPRSS");
                String hFRPOSOPE_NO = processOperationSpecifications.getOperationNumber();
                String opeNo = BaseStaticMethod.convertModuleOpeNoToOpeNo(cimPFDefinitionListDO.getModuleNO(), hFRPOSOPE_NO);
                if (!CimStringUtils.isEmpty(opeNo)) {
                    hFRPOSOPE_NO = opeNo;
                }
                CimProcessOperationSpecificationDO cimProcessOperationSpecificationDO = cimJpaRepository.queryOne("SELECT ID,PHOTO_LAYER FROM OMPRSS WHERE OPE_NO = ?1 AND PRF_RKEY = ?2", CimProcessOperationSpecificationDO.class, hFRPOSOPE_NO, hFRPFMAINPF_FOR_OPE);
                String posObj = null;
                String posPhotoLayer = "*";
                if (null != cimProcessOperationSpecificationDO) {
                    posObj = cimProcessOperationSpecificationDO.getId();
                    if (!CimObjectUtils.isEmpty(cimProcessOperationSpecificationDO.getPhotoLayer())) {
                        posPhotoLayer = cimProcessOperationSpecificationDO.getPhotoLayer();
                    }

                    log.info("### POS_OBJ = {}", posObj);
                    log.info("### POSPHOTO_LAYER = {}", posPhotoLayer);
                }
                //-------------------------------------------
                // Get Operation PD
                //-------------------------------------------
                log.info("####### Select Operation PD information FROM OMPRSS");
                CimProcessDefinitionDO cimProcessDefinitionDO1 = cimJpaRepository.queryOne("SELECT ID,OPE_NAME,DEPT,VERSION_ID,ACTIVE_VER_ID,ACTIVE_VER_RKEY,STD_CYCLE_TIME FROM OMPRP WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2", CimProcessDefinitionDO.class, processOperationSpecifications.getProcessDefinitionID(), BizConstant.SP_PD_FLOWLEVEL_OPERATION);
                Validations.check(cimProcessDefinitionDO1 == null, new OmCode(retCodeConfig.getNotFoundProcessDefinition(), processOperationSpecifications.getProcessDefinitionID()));

                //-------------------------------------------
                // Set Output data
                //-------------------------------------------
                strOperationNameAttributes.setSequenceNumber(0);
                strOperationNameAttributes.setRouteID(strProcessOperationListForRouteIn.getRouteID());
                strOperationNameAttributes.setOperationNumber(opeNo);

                Infos.ProcessRef processRef = new Infos.ProcessRef();
                processRef.setProcessFlow(hFRPFMAINPF_FOR_OPE);
                processRef.setProcessOperationSpecification(posObj);
                processRef.setModuleProcessFlow(hFRPFMAINPF_FOR_MOD);
                processRef.setModuleNumber(cimPFDefinitionListDO.getModuleNO());
                processRef.setModuleProcessFlow(mainPF.getId());
                processRef.setModulePOS(processFlowPosList.getProcessOperationSpecificationsObj());
                strOperationNameAttributes.setProcessRef(processRef);

                strOperationNameAttributes.setStageID(new ObjectIdentifier(cimPFDefinitionListDO.getStageID(), cimPFDefinitionListDO.getStageObj()));
                strOperationNameAttributes.setStageGroupID(new ObjectIdentifier(stage.getStageGroupID(), stage.getStageGroupObj()));

                strOperationNameAttributes.setMandatoryOperationFlag(processOperationSpecifications.getMandatoryFlag());
                strOperationNameAttributes.setMaskLevel(posPhotoLayer);
                if (!CimStringUtils.equals(BizConstant.SP_ACTIVE_VERSION, cimProcessDefinitionDO1.getVersionID())) {
                    strOperationNameAttributes.setOperationID(new ObjectIdentifier(processOperationSpecifications.getProcessDefinitionID(), processOperationSpecifications.getProcessDefinitionObj()));
                } else {
                    strOperationNameAttributes.setOperationID(new ObjectIdentifier(cimProcessDefinitionDO1.getActiveID(), cimProcessDefinitionDO1.getActiveObj()));
                }
                strOperationNameAttributes.setOperationName(cimProcessDefinitionDO1.getOperationID());
                strOperationNameAttributes.setInspectionType(cimProcessDefinitionDO1.getInspectionType());
                strOperationNameAttributes.setDepartmentNumber(cimProcessDefinitionDO1.getDepartment());
                strOperationNameAttributes.setStandardCycleTime(cimProcessDefinitionDO1.getStandardCycleTime());
                strOperationNameAttributes.setPdType(cimProcessDefinitionDO1.getProcessDefinitionType());
                //-------------------------------------------
                // Show all Output data
                //-------------------------------------------
                log.info("// Show all Output data");
                log.info("sequenceNumber   = {}", strOperationNameAttributes.getSequenceNumber());
                log.info("routeID.value = {}", strOperationNameAttributes.getRouteID().getValue());
                log.info("routeID.referenceKey  = {}", strOperationNameAttributes.getRouteID().getReferenceKey());
                log.info("operationNumber = {}", strOperationNameAttributes.getOperationNumber());
                log.info("processRef.processFlow = {}", strOperationNameAttributes.getProcessRef().getProcessFlow());
                log.info("processRef.processOperationSpecification = {}", strOperationNameAttributes.getProcessRef().getProcessOperationSpecification());
                log.info("processRef.mainProcessFlowForOpe  = {}", strOperationNameAttributes.getProcessRef().getMainProcessFlow());
                log.info("processRef.moduleNumber = {}", strOperationNameAttributes.getProcessRef().getModuleNumber());
                log.info("processRef.moduleProcessFlow = {}", strOperationNameAttributes.getProcessRef().getModuleProcessFlow());
                log.info("processRef.modulePOS = {}", strOperationNameAttributes.getProcessRef().getModulePOS());
                log.info("stageID.value = {}", strOperationNameAttributes.getStageID().getValue());
                log.info("stageID.referenceKey = {}", strOperationNameAttributes.getStageID().getReferenceKey());
                log.info("stageGroupID.value = {}", strOperationNameAttributes.getStageGroupID().getValue());
                log.info("stageGroupID.referenceKey  = {}", strOperationNameAttributes.getStageGroupID().getReferenceKey());
                log.info("mandatoryOperationFlag = {}", (strOperationNameAttributes.getMandatoryOperationFlag() ? "TRUE" : "FALSE"));
                log.info("maskLevel = {}", strOperationNameAttributes.getMaskLevel());
                log.info("operationID.value = {}", strOperationNameAttributes.getOperationID().getValue());
                log.info("operationID.referenceKey  = {}", strOperationNameAttributes.getOperationID().getReferenceKey());
                log.info("operationName = {}", strOperationNameAttributes.getOperationName());
                log.info("inspectionType = {}", strOperationNameAttributes.getInspectionType());
                log.info("departmentNumber = {}", strOperationNameAttributes.getDepartmentNumber());
                log.info("standardCycleTime = {} ", strOperationNameAttributes.getStandardCycleTime());
                log.info("PDType = {}", strOperationNameAttributes.getPdType());
                log.info("qtimeFlag = {}", (strOperationNameAttributes.getQtimeFlag() ? "TRUE" : "FALSE"));
                strOperationNameAttributesList.add(strOperationNameAttributes);
            }

        }
        log.info("【Method Exit】processOperationListForRoute()");
        return strOperationNameAttributesList;
    }
    @Override
    public Outputs.ObjProcessOperationDataConditionGetDrOut processOperationDataConditionGetDR(Infos.ObjCommon objCommon,
                                                                                               ObjectIdentifier lotID,
                                                                                               String category) {
        String hTHETABLEMARKER,hTHETABLEMARKER2;
        Outputs.ObjProcessOperationDataConditionGetDrOut data = new Outputs.ObjProcessOperationDataConditionGetDrOut();
        //Get lot object
        CimLot lot = baseCoreFactory.getBO(CimLot.class, lotID);
        CimProcessOperation po;
        // Get lot process operation
        //Current PO or Previous PO ?, lot_CheckConditionForPO
        Boolean checkConditionForPOOut = lotMethod.lotCheckConditionForPO(objCommon, lotID);

        if (CimBooleanUtils.isTrue(checkConditionForPOOut)) {
            //Get PO from Current Operation.
            po = lot.getProcessOperation();
        } else {
            //Get PO from Previous Operation.
            po = lot.getPreviousProcessOperation();
        }
        Validations.check(po == null,retCodeConfig.getNotFoundProcessOperation());

        AtomicLong count = new AtomicLong(0L);
        data.setCount(count.get());
        if (CimStringUtils.equals(BizConstant.SP_DATACONDITIONCATEGORY_DATAVALUE, category)) {
            count.set(cimJpaRepository.count("SELECT COUNT(REFKEY) FROM OMPROPE_EDC_ITEMS WHERE REFKEY = ? AND DATA_VAL IS NOT NULL ",po.getPrimaryKey()));
            data.setCount(count.get());
        }
        if (CimStringUtils.equals(BizConstant.SP_DATACONDITIONCATEGORY_SPECCHECKRESULT, category)) {
            count.set(cimJpaRepository.count("SELECT COUNT(REFKEY) FROM OMPROPE_EDC_ITEMS WHERE REFKEY = ? AND SPEC_CHECK_RESULT IS NOT NULL",po.getPrimaryKey()));
            data.setCount(count.get());
        }
        if (CimStringUtils.equals(BizConstant.SP_DATACONDITIONCATEGORY_BYPJDATAITEM, category)) {
            count.set(cimJpaRepository.count("SELECT COUNT(REFKEY) FROM OMPROPE_EDC_ITEMS WHERE REFKEY = ? AND MEAS_TYPE in (?,?,?)",
                    po.getPrimaryKey(),
                    BizConstant.SP_DCDEF_MEAS_PJWAFER,
                    BizConstant.SP_DCDEF_MEAS_PJWAFERSITE,
                    BizConstant.SP_DCDEF_MEAS_PJ));
            data.setCount(count.get());
        }
        if (CimStringUtils.equals(BizConstant.SP_DATACONDITIONCATEGORY_EXPANDDERIVEDDATA, category)) {
            boolean expandFlag = true;
            AtomicBoolean removeItem = new AtomicBoolean(false);
            boolean targetExistFlag = false;
            //First check if there is PJ level derived item defined
            Object[] waferPositionObj= cimJpaRepository.queryOne("select t.WAFER_POSITION from (SELECT WAFER_POSITION FROM  OMPROPE_EDC_ITEMS WHERE REFKEY = ? AND ITEM_TYPE in (?,?) AND MEAS_TYPE in (?,?,?)) t where rownum=1",
                    po.getPrimaryKey(),
                    BizConstant.SP_DCDEF_ITEM_DERIVED,
                    BizConstant.SP_DCDEF_ITEM_USERFUNCTION,
                    BizConstant.SP_DCDEF_MEAS_PJWAFER,
                    BizConstant.SP_DCDEF_MEAS_PJWAFERSITE,
                    BizConstant.SP_DCDEF_MEAS_PJ);
            String waferPosition = waferPositionObj == null ? null : CimObjectUtils.toString(waferPositionObj[0]);
            if (CimStringUtils.isEmpty(waferPosition)) {
                expandFlag = false;
            } else {
                targetExistFlag = true;
                if (CimStringUtils.equals(waferPosition, BizConstant.SP_ADCSETTING_ASTERISK)) {
                    removeItem.set(true);
                }
            }
            if (targetExistFlag && expandFlag) {
                if (!removeItem.get()) {
                    //check if there is need-to-be-expanded derived item (Proc wafer) from raw "Proc wafer" items
                    count.set(cimJpaRepository.count("SELECT COUNT(t1.REFKEY) FROM OMPROPE_EDC_ITEMS t1 WHERE " +
                                    "t1.REFKEY = ? AND t1.ITEM_TYPE in (?,?) AND t1.MEAS_TYPE " +
                                    "in (?,?) AND t1.WAFER_ID IN ( SELECT DISTINCT t2.WAFER_ID FROM OMPROPE_EDC_ITEMS t2 " +
                                    "WHERE t2.REFKEY = ? AND t2.SPEC_CHECK_RESULT = '' AND t2.TARGET_VAL != '' " +
                                    "AND t2.MEAS_TYPE in (?,?) AND t2.ITEM_TYPE = ? )",
                            po.getPrimaryKey(), BizConstant.SP_DCDEF_ITEM_DERIVED, BizConstant.SP_DCDEF_ITEM_USERFUNCTION,
                            BizConstant.SP_DCDEF_MEAS_PJWAFER, BizConstant.SP_DCDEF_MEAS_PJWAFERSITE, po.getPrimaryKey(),
                            BizConstant.SP_DCDEF_MEAS_PJWAFER, BizConstant.SP_DCDEF_MEAS_PJWAFERSITE, BizConstant.SP_DCDEF_ITEM_RAW));
                    if (count.get() > 0) {
                        // already expanded
                        // return empty structure
                        expandFlag = false;
                    } else {
                        //in case only "Process Job" type is defined with derived item
                        count.set(cimJpaRepository.count("SELECT COUNT(t1.REFKEY) FROM  OMPROPE_EDC_ITEMS t1 " +
                                        "WHERE t1.REFKEY = ? AND t1.ITEM_TYPE IN (?,?) " +
                                        "AND t1.MEAS_TYPE = ? AND t1.WAFER_POSITION IN ( SELECT DISTINCT t2.PJ_POSITION FROM OMPROPE_WAFERJOB " +
                                        "t2 WHERE t2.SAMPLE_WAFER_ID IN ( SELECT DISTINCT t3.WAFER_ID " +
                                        "FROM OMPROPE_EDC_ITEMS t3 WHERE t3.REFKEY = ? AND t3.SPEC_CHECK_RESULT = '' " +
                                        "AND t3.TARGET_VAL != '' AND t3.MEAS_TYPE IN (?,?) AND  " +
                                        " t3.ITEM_TYPE = ? ) AND t2.REFKEY = ?)",
                                po.getPrimaryKey(), BizConstant.SP_DCDEF_ITEM_DERIVED, BizConstant.SP_DCDEF_ITEM_USERFUNCTION,
                                BizConstant.SP_DCDEF_MEAS_PJ, po.getPrimaryKey(), BizConstant.SP_DCDEF_MEAS_PJWAFER, BizConstant.SP_DCDEF_MEAS_PJWAFERSITE,
                                BizConstant.SP_DCDEF_ITEM_RAW, po.getPrimaryKey()));
                        // already expanded
                        // return empty structure
                        expandFlag = count.get() <= 0;
                    }
                }
                if (expandFlag) {
                    int dcLen = 0;
                    AtomicBoolean waferLevelExistFlag = new AtomicBoolean(false);
                    AtomicBoolean pjLevelExistFlag = new AtomicBoolean(false);
                    // Get candidate items
                    String referenceKey=po.getPrimaryKey();
                    List<Object[]> dataList = cimJpaRepository.query("SELECT t.LINK_MARKER, t.EDC_PLAN_ID, t.DESCRIPTION, t.EDC_TYPE, t.CALC_FLG, t.SPCHK_FLG, t.EDC_SPEC_ID, t.EDC_SPEC_DESC, t.PREV_EDC_PLAN_ID, t.PREV_STEP_ID, t.PREV_OPE_NO FROM OMPROPE_EDC t WHERE t.REFKEY = ? ORDER BY t.IDX_NO",
                            referenceKey);
                    List<Infos.DataCollectionInfo> dcDefs = new ArrayList<>();
                    if (!CimArrayUtils.isEmpty(dataList)){
                        for (Object[] row : dataList){
                            Infos.DataCollectionInfo dcDef = new Infos.DataCollectionInfo();
                            dcDefs.add(dcDef);
                            String thetablemarker = row[0] == null ? "" : String.valueOf(row[0]);
                            String dcDefId = row[1] == null ? "" : String.valueOf(row[1]);
                            String description = row[2] == null ? "" : String.valueOf(row[2]);
                            String dcType = row[3] == null ? "" : String.valueOf(row[3]);
                            Boolean calcFlg = row[4] != null && CimBooleanUtils.getBoolean(String.valueOf(row[4]));
                            Boolean spChkFlg = row[5] != null && CimBooleanUtils.getBoolean(String.valueOf(row[5]));
                            String dcSpecId = row[6] == null ? "" : String.valueOf(row[6]);
                            String dcSpecDescription = row[7] == null ? "" : String.valueOf(row[7]);
                            String prvDcDefId = row[8] == null ? "" : String.valueOf(row[8]);
                            String prvOpeId = row[9] == null ? "" : String.valueOf(row[9]);
                            String prvOpeNo = row[10] == null ? "" : String.valueOf(row[10]);

                            dcDef.setDataCollectionDefinitionID(ObjectIdentifier.build(dcDefId, null));
                            dcDef.setDescription(description);
                            dcDef.setDataCollectionType(dcType);
                            dcDef.setCalculationRequiredFlag(calcFlg);
                            dcDef.setSpecCheckRequiredFlag(spChkFlg);
                            dcDef.setDataCollectionSpecificationID(ObjectIdentifier.build(dcSpecId, null));
                            dcDef.setDcSpecDescription(dcSpecDescription);
                            dcDef.setPreviousDataCollectionDefinitionID(ObjectIdentifier.build(prvDcDefId, null));
                            dcDef.setPreviousOperationID(ObjectIdentifier.build(prvOpeId, null));
                            dcDef.setPreviousOperationNumber(prvOpeNo);

                            hTHETABLEMARKER = String.format("%s%d", BizConstant.SP_PO_DC_ITEMS_TABLEMARKER, dcLen);
                            hTHETABLEMARKER2 = String.format("%d", dcLen);
                            //for dcItems
                            List<Infos.DataCollectionItemInfo> dcItemList = new ArrayList<>();
                            dcDef.setDcItems(dcItemList);

                            List<Object[]> dcItemDataList = cimJpaRepository.query("SELECT t.EDC_ITEM_NAME, t.EDC_MODE, t.EDC_UOM, t.DATA_TYPE, t.ITEM_TYPE, t.MEAS_TYPE, t.SITE_POSITION, t.STORE_FLAG, t.FUNC_TYPE, t.FUNC_EXPR, t.TARGET_VAL FROM OMPROPE_EDC_ITEMS t " +
                                            "WHERE t.REFKEY = ? AND (t.LINK_MARKER = ? OR t.LINK_MARKER = ?) " +
                                            "AND (t.MEAS_TYPE = 'Proc Wafer' OR t.MEAS_TYPE = 'Proc Site' OR t.MEAS_TYPE = 'Process Job') " +
                                            "AND (t.ITEM_TYPE = 'Derived' OR t.ITEM_TYPE = 'User Func') " +
                                            "GROUP BY t.EDC_ITEM_NAME, t.EDC_MODE, t.EDC_UOM, t.DATA_TYPE, t.ITEM_TYPE, t.MEAS_TYPE, t.SITE_POSITION, " +
                                            "t.STORE_FLAG, t.FUNC_TYPE, t.FUNC_EXPR, t.TARGET_VAL ORDER BY MIN(t.IDX_NO)",
                                    referenceKey, hTHETABLEMARKER, hTHETABLEMARKER2);
                            if (!CimArrayUtils.isEmpty(dcItemDataList)) {
                                dcItemDataList.forEach(item -> {
                                    Infos.DataCollectionItemInfo dcItem = new Infos.DataCollectionItemInfo();
                                    dcItemList.add(dcItem);
                                    String dcItemName = item[0] == null ? "" : String.valueOf(item[0]);
                                    String dcMode = item[1] == null ? "" : String.valueOf(item[1]);
                                    String dcUnit = item[2] == null ? "" : String.valueOf(item[2]);
                                    String dataType = item[3] == null ? "" : String.valueOf(item[3]);
                                    String itemType = item[4] == null ? "" : String.valueOf(item[4]);
                                    String measType = item[5] == null ? "" : String.valueOf(item[5]);
                                    String sitePosition = item[6] == null ? "" : String.valueOf(item[6]);
                                    Boolean historyFlg = item[7] != null && CimBooleanUtils.getBoolean(String.valueOf(item[7]));
                                    String calcType = item[8] == null ? "" : String.valueOf(item[8]);
                                    String calcExpression = item[9] == null ? "" : String.valueOf(item[9]);
                                    String targetVal = item[10] == null ? "" : String.valueOf(item[10]);

                                    dcItem.setDataCollectionItemName(dcItemName);
                                    dcItem.setDataCollectionMode(dcMode);
                                    dcItem.setDataCollectionUnit(dcUnit);
                                    dcItem.setDataType(dataType);
                                    dcItem.setItemType(itemType);
                                    dcItem.setMeasurementType(measType);
                                    dcItem.setWaferID(ObjectIdentifier.build("", null));
                                    dcItem.setWaferPosition("");
                                    dcItem.setSitePosition(sitePosition);
                                    dcItem.setHistoryRequiredFlag(historyFlg);
                                    dcItem.setCalculationType(calcType);
                                    dcItem.setCalculationExpression(calcExpression);
                                    dcItem.setDataValue("");
                                    dcItem.setTargetValue(targetVal);
                                    dcItem.setSpecCheckResult("");
                                    if (removeItem.get()){
                                        data.setCount(count.incrementAndGet());
                                    }
                                    if (CimStringUtils.equals(BizConstant.SP_DCDEF_MEAS_PJ, dcItem.getMeasurementType())){
                                        pjLevelExistFlag.set(true);
                                    } else {
                                        waferLevelExistFlag.set(true);
                                    }
                                });
                            }
                            dcLen++;
                        }
                    }
                    List<Infos.DataCollectionInfo> expandDerivedDCDefList = dcDefs;
                    List<String> waferIDStrList = new ArrayList<>();
                    List<String> waferPosStrList = new ArrayList<>();
                    List<String> processJobPosStrList = new ArrayList<>();

                    if (waferLevelExistFlag.get()) {
                        // Get waferList
                        List<Object[]> waferInfos = cimJpaRepository.query("SELECT DISTINCT t.WAFER_ID, t.WAFER_POSITION FROM OMPROPE_EDC_ITEMS t WHERE t.REFKEY = ? " +
                                        "AND t.SPEC_CHECK_RESULT IS NULL  AND t.TARGET_VAL IS NOT NULL AND t.WAFER_ID IS NOT NULL AND t.MEAS_TYPE in (?,?) AND t.ITEM_TYPE = ?",po.getPrimaryKey(),
                                BizConstant.SP_DCDEF_MEAS_PJWAFER, BizConstant.SP_DCDEF_MEAS_PJWAFERSITE, BizConstant.SP_DCDEF_ITEM_RAW);
                        if (!CimArrayUtils.isEmpty(waferInfos)) {
                            waferInfos.forEach(infoRow -> {
                                String waferIDStr = infoRow[0] == null ? BizConstant.EMPTY : infoRow[0].toString();
                                String waferPositionStr = infoRow[1] == null ? BizConstant.EMPTY : infoRow[1].toString();
                                waferIDStrList.add(waferIDStr);
                                waferPosStrList.add(waferPositionStr);
                            });
                        }
                    }
                    int waferCount = CimArrayUtils.getSize(waferIDStrList);
                    if (pjLevelExistFlag.get()) {
                        // Get PJ list
                        List<Object[]> processJobPosList = cimJpaRepository.query("SELECT DISTINCT t1.PJ_POSITION FROM OMPROPE_WAFERJOB t1 WHERE " +
                                        "t1.REFKEY = ? AND t1.SAMPLE_WAFER_ID IN ( SELECT DISTINCT t2.WAFER_ID " +
                                        "FROM OMPROPE_EDC_ITEMS t2 WHERE t2.REFKEY = ? AND t2.SPEC_CHECK_RESULT = '' " +
                                        "AND t2.TARGET_VAL != '' AND t2.MEAS_TYPE in (?,?) AND t2.ITEM_TYPE = ? )",
                                po.getPrimaryKey(), po.getPrimaryKey(),BizConstant.SP_DCDEF_MEAS_PJWAFER, BizConstant.SP_DCDEF_MEAS_PJWAFERSITE,
                                BizConstant.SP_DCDEF_ITEM_RAW);
                        if (!CimArrayUtils.isEmpty(processJobPosList)) {
                            processJobPosStrList.addAll(CimArrayUtils.convertStringList(processJobPosList));
                        }
                    }
                    int pjCount = CimArrayUtils.getSize(processJobPosStrList);
                    //set result
                    data.setExpandDerivedDCDefList(expandDerivedDCDefList);
                    for (Infos.DataCollectionInfo expandDerivedDCDef : expandDerivedDCDefList) {
                        List<Infos.DataCollectionItemInfo> expandDerivedDCItemList = expandDerivedDCDef.getDcItems();
                        int iItemCount = CimArrayUtils.getSize(expandDerivedDCItemList);
                        for (int iCnt2 = 0; iCnt2 < iItemCount; iCnt2++){
                            if (CimStringUtils.equals(expandDerivedDCItemList.get(iCnt2).getMeasurementType(), BizConstant.SP_DCDEF_MEAS_PJ)){
                                for (int iCnt3 = 0; iCnt3 < pjCount; iCnt3++){
                                    expandDerivedDCItemList.get(iCnt2).setWaferPosition(processJobPosStrList.get(iCnt3));
                                }
                            } else {
                                for (int iCnt3 = 0; iCnt3 < waferCount; iCnt3++){
                                    expandDerivedDCItemList.get(iCnt2).setWaferID(new ObjectIdentifier(waferIDStrList.get(iCnt3)));
                                    expandDerivedDCItemList.get(iCnt2).setWaferPosition(waferPosStrList.get(iCnt3));
                                }
                            }
                        }
                        List<Infos.DataCollectionItemInfo> strDCItemSeq = new ArrayList<>();
                        int resultItemCount = CimArrayUtils.getSize(expandDerivedDCItemList);
                        for (int resultItemNum = 0; resultItemNum < resultItemCount; resultItemNum++){
                            Infos.DataCollectionItemInfo dataCollectionItemInfo = expandDerivedDCItemList.get(resultItemNum);
                            if (CimStringUtils.isEmpty(dataCollectionItemInfo.getDataCollectionItemName())){
                                continue;
                            }
                            strDCItemSeq.add(dataCollectionItemInfo);
                            for (int nSubItemNum = (resultItemNum + 1); nSubItemNum < resultItemCount; nSubItemNum++){
                                Infos.DataCollectionItemInfo subDCItem = expandDerivedDCItemList.get(nSubItemNum);
                                if (CimStringUtils.isEmpty(subDCItem.getDataCollectionItemName())){
                                    continue;
                                }
                                if (CimStringUtils.equals(dataCollectionItemInfo.getDataCollectionItemName(), subDCItem.getDataCollectionItemName())
                                        && CimStringUtils.equals(dataCollectionItemInfo.getMeasurementType(), subDCItem.getMeasurementType())
                                        && CimStringUtils.equals(dataCollectionItemInfo.getSitePosition(), subDCItem.getSitePosition())){
                                    Infos.DataCollectionItemInfo subDCItem2 = new Infos.DataCollectionItemInfo();
                                    BeanUtils.copyProperties(subDCItem, subDCItem2);
                                    strDCItemSeq.add(subDCItem2);
                                    subDCItem.setDataCollectionItemName("");
                                }
                            }
                        }
                        expandDerivedDCDef.setDcItems(strDCItemSeq);
                    }
                }
            }
            if (!expandFlag) {
                data.setCount(0L);
                data.setExpandDerivedDCDefList(null);
            }
        }
        return data;
    }

    @Override
    public List<Infos.OperationNameAttributes> processOperationListForLot(
            Infos.ObjCommon objCommon, Inputs.ObjProcessOperationListForLotIn in) {
        Boolean searchDirection = in.getSearchDirectionFlag();
        Boolean posSearchFlag = in.getPosSearchFlag();
        Integer searchCount = in.getSearchCount();
        ObjectIdentifier searchRouteID = in.getSearchRouteID();
        String searchOperationNumber = in.getSearchOperationNumber();
        Boolean currentFlag = in.getCurrentFlag();
        ObjectIdentifier lotID = in.getLotID();

        String branchCheckModeVar = StandardProperties.OM_BRANCH_RETURN_ACTIVE_ROUTE.getValue();
        int branchCheckMode = CimObjectUtils.isEmpty(branchCheckModeVar)
                || Integer.valueOf(branchCheckModeVar) > 1 ? 0 : Integer.valueOf(branchCheckModeVar);
        Validations.check(searchCount <= 0,retCodeConfig.getInvalidInputParam());

        Boolean hvTrue = TRUE;
        int opeCount = 0, count, count2, count3;
        List<Infos.OperationNameAttributes> attributesList = new ArrayList<>();
        //-----------------------------------------------------------------------------
        // (1) Get current process information
        //-----------------------------------------------------------------------------
        CimLotDO example = new CimLotDO();
        example.setLotID(ObjectIdentifier.fetchValue(lotID));
        CimLotDO lot = cimJpaRepository.findOne(Example.of(example)).orElse(null);
        Validations.check(CimObjectUtils.isEmpty(lot),retCodeConfig.getNotFoundLot());

        String lotProcessFlowContextObj = lot.getProcessFlowContextObj();
        String lotProcessOperationObj = lot.getProcessOperationObj();
        String lotScheduleObj = lot.getLotScheduleObj();
        String lotProductSpecificationID = lot.getProductSpecificationID();
        String lotProductSpecificationObj = lot.getProductSpecificationObj();
        String currentPoObj = lotProcessOperationObj;
        ObjectIdentifier productID = new ObjectIdentifier(lotProductSpecificationID, lotProductSpecificationObj);
        CimProcessOperationDO processOperation = cimJpaRepository
                .queryOne("SELECT * FROM OMPROPE WHERE ID = ?1",
                        CimProcessOperationDO.class, lotProcessOperationObj);
        Validations.check(CimObjectUtils.isEmpty(processOperation),retCodeConfig.getNotFoundProcessOperation());
        String currentPosObj = processOperation.getProcessOperationSpecificationObj();
        String currentModulePosObj = processOperation.getModuleProcessOperationSpecificationsObj();
        String currentPfObj = processOperation.getProcessFlowObj();
        String currentMainPfObj = processOperation.getMainProcessFlowObj();
        String currentModulePfObj = processOperation.getModuleProcessFlowObj();
        String currentModuleNo = processOperation.getModuleNumber();
        String currentModuleOpeNo = processOperation.getModuleOperationNumber();
        String currentOpeNo = processOperation.getOperationNumber();

        //--- Get main PF information
        String sql = "SELECT A.PRP_ID, A.PRP_RKEY, A.ACTIVE_FLAG, B.PRP_TYPE FROM OMPRF A," +
                " OMPRP B WHERE A.ID = ? AND A.PRP_ID = B.PRP_ID AND B.PRP_LEVEL = ?";
        List<Object[]> list = cimJpaRepository.query(sql, currentMainPfObj, BizConstant.SP_PD_FLOWLEVEL_MAIN);
        Validations.check(CimObjectUtils.isEmpty(list),retCodeConfig.getNotFoundProcessFlow());

        Object[] field = list.get(0);
        Infos.PFAndPDField pfAndPDField = new Infos.PFAndPDField();
        pfAndPDField.setMainProcessDefinitionID(String.valueOf(field[0]));
        pfAndPDField.setMainProcessDefinitionObj(String.valueOf(field[1]));
        pfAndPDField.setState(Integer.valueOf(String.valueOf(field[2])) > 0);
        pfAndPDField.setProcessDefinitionType(String.valueOf(field[3]));
        String currentMainPdid = pfAndPDField.getMainProcessDefinitionID();
        String currentMainPdobj = pfAndPDField.getMainProcessDefinitionObj();
        String currentMainPdtype = pfAndPDField.getProcessDefinitionType();
        Boolean mainPFState = pfAndPDField.getState();

        //--- Get seq_no of current module from main PF
        CimPFDefinitionListDO processFlowDefinitionList = cimJpaRepository
                .queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",
                        CimPFDefinitionListDO.class, currentMainPfObj, currentModuleNo);
        Validations.check(CimObjectUtils.isEmpty(processFlowDefinitionList),retCodeConfig.getNotFoundProcessFlow());
        Integer currentMainPfPdlistSeqno = processFlowDefinitionList.getSequenceNumber();
        String currentStageId = processFlowDefinitionList.getStageID();
        String currentStageObj = processFlowDefinitionList.getStageObj();
        //--- Get module PF information
        CimProcessFlowDO processFlow = cimJpaRepository
                .queryOne("SELECT * FROM OMPRF WHERE ID = ?1", CimProcessFlowDO.class, currentModulePfObj);
        Validations.check(CimObjectUtils.isEmpty(processFlow),retCodeConfig.getNotFoundProcessFlow());
        String currentModulePdid = processFlow.getMainProcessDefinitionID();
        Boolean modulePFState = processFlow.getState();
        //--- Get seq_no of current process from module PF
        CimPFPosListDO processFlowPosList = cimJpaRepository
                .queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",
                        CimPFPosListDO.class, currentModulePfObj, currentModuleOpeNo);
        Validations.check(CimObjectUtils.isEmpty(processFlowPosList),retCodeConfig.getNotFoundProcessFlow());
        Integer currentModulePfPoslistSeqno = processFlowPosList.getSequenceNumber();

        //-----------------------------------------------------------------------------
        // (2) Set the current operation information
        //-----------------------------------------------------------------------------
        if (CimBooleanUtils.isTrue(currentFlag)) {
            Infos.OperationNameAttributes attributes = new Infos.OperationNameAttributes();
            attributes.setSequenceNumber(-1);
            attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
            attributes.setOperationNumber(currentOpeNo);
            attributes.setObjrefPO(currentPoObj);
            attributes.setStageID(new ObjectIdentifier(currentStageId, currentStageObj));
            Infos.ProcessRef processRef = new Infos.ProcessRef();
            processRef.setProcessFlow(currentPfObj);
            processRef.setProcessOperationSpecification(currentPosObj);
            processRef.setMainProcessFlow(currentMainPfObj);
            processRef.setModuleNumber(currentModuleNo);
            processRef.setModuleProcessFlow(currentModulePfObj);
            processRef.setModulePOS(currentModulePosObj);
            attributes.setProcessRef(processRef);
            opeCount = addOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID,
                    searchOperationNumber, opeCount, searchCount, lotScheduleObj, productID);
        }
        if (opeCount == searchCount) {
            return attributesList;
        }

        //-----------------------------------------------------------------------------
        //   Get next process info for backup processing lot.
        //-----------------------------------------------------------------------------
        Boolean backupProcessingFlag = false;
        if (CimBooleanUtils.isTrue(lot.getBackupProcessingFlag()) && CimBooleanUtils.isTrue(searchDirection)) {
            List<CimPOBackUpDataDO> backUpDatas = cimJpaRepository
                    .query("SELECT * FROM OMPROPE_INTFABDATA WHERE REFKEY = ?1",
                            CimPOBackUpDataDO.class, lotProcessOperationObj);
            //-----------------------------------------------------------------------------
            //   Get BackupInfo from FRPO_BKUPDATA
            //-----------------------------------------------------------------------------
            Boolean sourceFlag = false;
            Boolean entryFlag = false;
            if (!CimArrayUtils.isEmpty(backUpDatas)) {
                CimPOBackUpDataDO backUpData = backUpDatas.get(backUpDatas.size() - 1);
                sourceFlag = CimBooleanUtils.isTrue(backUpData.getSourceFlag());
                entryFlag = CimBooleanUtils.isTrue(backUpData.getEntryFlag());
            }
            if (CimBooleanUtils.isTrue(sourceFlag) && CimBooleanUtils.isTrue(entryFlag)) {
                //-----------------------------------------------------------------------------
                // Get return process information as next
                //-----------------------------------------------------------------------------
                backupProcessingFlag = true;
                CimProcessFlowContextReturnDO processFlowContextReturn = cimJpaRepository
                        .queryOne("SELECT * FROM OMPRFCX_RTNSEQ WHERE REFKEY = ?1 AND IDX_NO = ?2",
                                CimProcessFlowContextReturnDO.class, lotProcessFlowContextObj, 0);
                Validations.check(CimObjectUtils.isEmpty(processFlowContextReturn),retCodeConfig.getNotFoundReturnOpe());
                String nextOpeNo = processFlowContextReturn.getOperationNumber();
                String nextModuleNo = BaseStaticMethod.convertOpeNoToModuleNo(nextOpeNo);
                String nextModuleOpeNo = BaseStaticMethod.convertOpeNoToModuleOpeNo(nextOpeNo);
                String nextPfObj = processFlowContextReturn.getProcessFlowObj();
                String nextMainPfObj = processFlowContextReturn.getMainProcessFlowObj();
                String nextModulePfObj = processFlowContextReturn.getModuleProcessFlowObj();

                //-----------------------------------------------------------------------------
                // Get return process information from FRPF_POSLIST
                //-----------------------------------------------------------------------------
                CimPFPosListDO posList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ" +
                        " WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFPosListDO.class, nextPfObj, nextOpeNo);
                String nextPosObj = CimObjectUtils.isEmpty(posList) ? ""
                        : posList.getProcessOperationSpecificationsObj();

                //-----------------------------------------------------------------------------
                // Get return process information from FRPF
                //-----------------------------------------------------------------------------
                CimProcessFlowDO nextMainPF = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE ID = ?1",
                        CimProcessFlowDO.class, nextMainPfObj);
                Validations.check(CimObjectUtils.isEmpty(nextMainPF),retCodeConfig.getNotFoundProcessFlow());
                String nextMainPdid = nextMainPF.getMainProcessDefinitionID();
                String nextMainPdobj = nextMainPF.getMainProcessDefinitionObj();
                Boolean nextMainPfState = CimBooleanUtils.isTrue(nextMainPF.getState());

                //-----------------------------------------------------------------------------
                // Get return process information from FRPF_PDLIST
                //-----------------------------------------------------------------------------
                processFlowDefinitionList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_ROUTESEQ " +
                        "WHERE REFKEY = ?1 AND LINK_KEY = ?2",CimPFDefinitionListDO.class,nextMainPfObj, nextModuleNo);
                Validations.check(CimObjectUtils.isEmpty(processFlowDefinitionList),
                        retCodeConfig.getNotFoundProcessFlow());
                Integer nextMainPfPdlistSeqno = processFlowDefinitionList.getSequenceNumber();
                String nextStageId = processFlowDefinitionList.getStageID();
                String nextStageObj = processFlowDefinitionList.getStageObj();

                //-----------------------------------------------------------------------------
                // Get return process information from FRPF
                //-----------------------------------------------------------------------------
                processFlow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE ID = ?1",
                        CimProcessFlowDO.class, nextModulePfObj);
                Validations.check(CimObjectUtils.isEmpty(processFlow),retCodeConfig.getNotFoundProcessFlow());
                Boolean nextModulePfState = CimBooleanUtils.isTrue(processFlow.getState());

                //-----------------------------------------------------------------------------
                // Get return process information from FRPF_POSLIST
                //-----------------------------------------------------------------------------
                CimPFPosListDO flowPosList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ " +
                        "WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFPosListDO.class, nextModulePfObj, nextModuleOpeNo);
                Validations.check(CimObjectUtils.isEmpty(flowPosList),retCodeConfig.getNotFoundProcessFlow());
                Integer nextModulePfPoslistSeqno = flowPosList.getSequenceNumber();
                String nextModulePosObj = flowPosList.getProcessOperationSpecificationsObj();

                //-----------------------------------------------------------------------------
                // Set return process information by process_OperationListForLot_Helper()
                //-----------------------------------------------------------------------------
                Infos.OperationNameAttributes attributes = new Infos.OperationNameAttributes();
                attributes.setSequenceNumber(-1);
                attributes.setRouteID(new ObjectIdentifier(nextMainPdid, nextMainPdobj));
                attributes.setOperationNumber(nextOpeNo);
                attributes.setStageID(new ObjectIdentifier(nextStageId, nextStageObj));
                Infos.ProcessRef processRef = new Infos.ProcessRef();
                processRef.setProcessFlow(nextPfObj);
                processRef.setProcessOperationSpecification(nextPosObj);
                processRef.setMainProcessFlow(nextMainPfObj);
                processRef.setModuleNumber(nextModuleNo);
                processRef.setModuleProcessFlow(nextModulePfObj);
                processRef.setModulePOS(nextModulePosObj);
                attributes.setProcessRef(processRef);
                attributesList.add(attributes);
                opeCount = addOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID,
                        searchOperationNumber, opeCount, searchCount, lotScheduleObj, productID);

                currentMainPdid = nextMainPdid;
                currentMainPdobj = nextMainPdobj;
                currentPoObj = null;
                currentStageId = nextStageId;
                currentStageObj = nextStageObj;
                currentPfObj = nextPfObj;
                currentModuleNo = nextModuleNo;
                mainPFState = nextMainPfState;
                currentMainPfPdlistSeqno = nextMainPfPdlistSeqno;
                currentModulePfPoslistSeqno = nextModulePfPoslistSeqno;
                modulePFState = nextModulePfState;
                currentMainPfObj = nextMainPfObj;
                currentModulePfObj = nextModulePfObj;
            }
        }

        //-----------------------------------------------------------------------------
        // (3) Get forward process information
        //-----------------------------------------------------------------------------
        String modulePfObj = null, activeModulePfObj = null, nextModuleOpeNo = null, nextModulePosObj = null,
                previousModuleOpeNo, previousModulePosObj;
        int modulePfPoslistSeqno = 0;
        int i;
        Boolean findFlag;
        if (CimBooleanUtils.isTrue(searchDirection)) {
            //-----------------------------------------------------------------------------
            // (3-1) Get next POS from current/active module PF
            //-----------------------------------------------------------------------------
            // If module PF is active, set next POS's seq_no from current module PF
            if (CimBooleanUtils.isTrue(modulePFState)) {
                modulePfObj = currentModulePfObj;
                modulePfPoslistSeqno = currentModulePfPoslistSeqno + 1;
                findFlag = true;
            } else {
                findFlag = false;
                //--- Get active module PF information
                String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                activeModulePfObj = getActiveProcessFlowObj(currentModulePdid, processDefinitionLevel);
                i = 0;
                while (opeCount < searchCount) {
                    // Search the next operation by finding the current module openo on active module PF
                    if (i <= 0) {
                        CimPFPosListDO posList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ " +
                                "WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFPosListDO.class,
                                activeModulePfObj, currentModuleOpeNo);
                        if (!CimObjectUtils.isEmpty(posList)) {
                            modulePfObj = activeModulePfObj;
                            modulePfPoslistSeqno = posList.getSequenceNumber() + 1;
                            findFlag = true;
                            break;
                        }
                    } else {
                        currentModulePfPoslistSeqno++;
                        CimPFPosListDO posList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ " +
                                "WHERE REFKEY = ?1 AND IDX_NO = ?2", CimPFPosListDO.class,
                                currentModulePfObj, currentModulePfPoslistSeqno);
                        if (!CimObjectUtils.isEmpty(posList)) {
                            //--- Keep the next operation information on current module PF
                            nextModuleOpeNo = posList.getDKey();
                            nextModulePosObj = posList.getProcessOperationSpecificationsObj();
                            //--- Search the corresponding next module openo from active module PF
                            posList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ " +
                                    "WHERE REFKEY = ?1 AND LINK_KEY = ?2",
                                    CimPFPosListDO.class, activeModulePfObj, nextModuleOpeNo);
                            if (!CimObjectUtils.isEmpty(posList)) {
                                modulePfObj = activeModulePfObj;
                                modulePfPoslistSeqno = posList.getSequenceNumber();
                                findFlag = true;
                                break;
                            } else {
                                Infos.OperationNameAttributes attributes = new Infos.OperationNameAttributes();
                                attributes.setSequenceNumber(-1);
                                attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                                attributes.setOperationNumber(BaseStaticMethod
                                        .convertModuleOpeNoToOpeNo(currentModuleNo, nextModuleOpeNo));
                                attributes.setStageID(new ObjectIdentifier(currentStageId, currentStageObj));
                                Infos.ProcessRef processRef = new Infos.ProcessRef();
                                processRef.setProcessFlow(currentPfObj);
                                processRef.setMainProcessFlow(currentMainPfObj);
                                processRef.setModuleNumber(currentModuleNo);
                                processRef.setModuleProcessFlow(currentModulePfObj);
                                processRef.setModulePOS(nextModulePosObj);
                                attributes.setProcessRef(processRef);
                                opeCount = addOperationNameAttributes(objCommon, attributesList, attributes,
                                        searchRouteID, searchOperationNumber, opeCount, searchCount,
                                        lotScheduleObj, productID);
                            }
                        } else {
                            break;
                        }
                    }
                    i++;
                }
            }
            if (opeCount == searchCount) {
                return attributesList;
            }

            //-----------------------------------------------------------------------------
            // Set next POS from active current module PF
            //-----------------------------------------------------------------------------
            if (CimBooleanUtils.isTrue(findFlag)) {
                List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query("SELECT * FROM OMPRF_PRSSSEQ " +
                        "WHERE REFKEY = ?1 AND IDX_NO >= ?2 ORDER BY IDX_NO",
                        CimPFPosListDO.class, modulePfObj, modulePfPoslistSeqno);
                count = 0;
                while (opeCount < searchCount) {
                    if (CimObjectUtils.isEmpty(processFlowPosLists) || count >= processFlowPosLists.size()) {
                        break;
                    }
                    CimPFPosListDO posList = processFlowPosLists.get(count);
                    //--- Set next operation information on active current module PF
                    Infos.OperationNameAttributes attributes = new Infos.OperationNameAttributes();
                    attributes.setSequenceNumber(-1);
                    attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                    attributes.setStageID(new ObjectIdentifier(currentStageId, currentStageObj));
                    Infos.ProcessRef processRef = new Infos.ProcessRef();
                    processRef.setProcessFlow(currentPfObj);
                    processRef.setMainProcessFlow(currentMainPfObj);
                    processRef.setModuleNumber(currentModuleNo);
                    processRef.setModuleProcessFlow(modulePfObj);
                    attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(currentModuleNo, posList.getDKey()));
                    processRef.setModulePOS(posList.getProcessOperationSpecificationsObj());
                    attributes.setProcessRef(processRef);
                    opeCount = addOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID,
                            searchOperationNumber, opeCount, searchCount, lotScheduleObj, productID);
                    count++;
                }
            }
            if (opeCount == searchCount) {
                return attributesList;
            }

            //-----------------------------------------------------------------------------
            // (3-2) Get next module PD from current/active main PF
            //-----------------------------------------------------------------------------
            String mainPfObj = null, activeMainPfObj = null, nextModulePdid = null, nextModuleNo = null,
                    nextStageId = null, nextStageObj = null;
            int mainPfPdlistSeqno = 0;
            // If main PF is active, set next module PD's seq_no from current main PF
            if (CimBooleanUtils.isTrue(mainPFState)) {
                mainPfObj = currentMainPfObj;
                mainPfPdlistSeqno = currentMainPfPdlistSeqno + 1;
                findFlag = true;

            } else { // If main PF is NOT active, search next module PD's seq_no from active main PF
                findFlag = false;
                String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE;
                CimProcessFlowDO flow = cimJpaRepository
                        .queryOne("SELECT * FROM OMPRF WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2 " +
                                "AND ACTIVE_FLAG = ?3", CimProcessFlowDO.class,
                                currentMainPdid, processDefinitionLevel, hvTrue);
                Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                activeMainPfObj = flow.getId();
                i = 0;
                while (true) {
                    if (i == 0) {
                        CimPFDefinitionListDO definitionList = cimJpaRepository
                                .queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",
                                        CimPFDefinitionListDO.class, activeMainPfObj, currentModuleNo);
                        if (!CimObjectUtils.isEmpty(definitionList)) {
                            mainPfObj = activeMainPfObj;
                            mainPfPdlistSeqno = definitionList.getSequenceNumber() + 1;
                            findFlag = true;
                            break;
                        }
                    } else {
                        currentMainPfPdlistSeqno++;
                        CimPFDefinitionListDO definitionList = cimJpaRepository
                                .queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND IDX_NO = ?2",
                                        CimPFDefinitionListDO.class, currentMainPfObj, currentMainPfPdlistSeqno);
                        if (!CimObjectUtils.isEmpty(definitionList)) {
                            nextModulePdid = definitionList.getProcessDefinitionID();
                            nextModuleNo = definitionList.getModuleNO();
                            nextStageId = definitionList.getStageID();
                            nextStageObj = definitionList.getStageObj();

                            //--- Search the corresponding next module number from the active main PF

                            definitionList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_ROUTESEQ " +
                                    "WHERE REFKEY = ?1 AND LINK_KEY = ?2",CimPFDefinitionListDO.class,activeMainPfObj,
                                    nextModuleNo);
                            if (!CimObjectUtils.isEmpty(definitionList)) {
                                mainPfObj = activeMainPfObj;
                                mainPfPdlistSeqno = definitionList.getSequenceNumber();
                                findFlag = true;
                                break;
                            } else {
                                //---------------------------------------------------------------------------
                                // Set next POS from active next module PF and current(inactive) main PF
                                //---------------------------------------------------------------------------
                                processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                                String processFlowObj = getActiveProcessFlowObj(nextModulePdid, processDefinitionLevel);
                                //--- Set next operation information on active module PF
                                List<CimPFPosListDO> processFlowPosLists = cimJpaRepository
                                        .query("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 ORDER BY IDX_NO",
                                        CimPFPosListDO.class, processFlowObj);
                                count = 0;
                                while (opeCount < searchCount) {
                                    if (CimObjectUtils.isEmpty(processFlowPosLists)
                                            || count >= processFlowPosLists.size()) {
                                        break;
                                    }
                                    CimPFPosListDO posList = processFlowPosLists.get(count);
                                    Infos.OperationNameAttributes attributes = new Infos.OperationNameAttributes();
                                    attributes.setSequenceNumber(-1);
                                    attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                                    attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(
                                            nextModuleNo, posList.getDKey()));
                                    attributes.setStageID(new ObjectIdentifier(nextStageId, nextStageObj));
                                    Infos.ProcessRef processRef = new Infos.ProcessRef();
                                    processRef.setProcessFlow(currentPfObj);
                                    processRef.setMainProcessFlow(currentMainPfObj);
                                    processRef.setModuleNumber(nextModuleNo);
                                    processRef.setModuleProcessFlow(processFlowObj);
                                    processRef.setModulePOS(posList.getProcessOperationSpecificationsObj());
                                    attributes.setProcessRef(processRef);
                                    opeCount = addOperationNameAttributes(objCommon, attributesList, attributes,
                                            searchRouteID, searchOperationNumber, opeCount,
                                            searchCount, lotScheduleObj, productID);
                                    count++;
                                }
                            }
                        } else break;
                    }
                    i++;
                }
            }
            if (opeCount == searchCount) {
                return attributesList;
            }
            //-----------------------------------------------------------------------------
            // Set next POS from active next module PF and active main PF
            //-----------------------------------------------------------------------------
            if (CimBooleanUtils.isTrue(findFlag)) {
                List<CimPFDefinitionListDO> processFlowPDLists = cimJpaRepository
                        .query("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND IDX_NO >= ?2 ORDER BY IDX_NO",
                                CimPFDefinitionListDO.class, mainPfObj, mainPfPdlistSeqno);
                count = 0;
                while (opeCount < searchCount) {
                    if (CimObjectUtils.isEmpty(processFlowPDLists) || count >= processFlowPDLists.size())
                        break;
                    CimPFDefinitionListDO definitionList = processFlowPDLists.get(count);
                    //--- Get active module PF information
                    String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                    String processFlowObj = getActiveProcessFlowObj(definitionList.getProcessDefinitionID(),
                            processDefinitionLevel);
                    //--- Set next operation information on active module PF
                    List<CimPFPosListDO> processFlowPosLists = cimJpaRepository
                            .query("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 ORDER BY IDX_NO",
                                    CimPFPosListDO.class, processFlowObj);
                    count2 = 0;
                    while (opeCount < searchCount) {
                        if (CimObjectUtils.isEmpty(processFlowPosLists) || count2 >= processFlowPosLists.size()) {
                            break;
                        }
                        CimPFPosListDO posList = processFlowPosLists.get(count2);
                        //--- Set next operation information on active current module PF
                        Infos.OperationNameAttributes attributes = new Infos.OperationNameAttributes();
                        attributes.setSequenceNumber(-1);
                        attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                        attributes.setOperationNumber(BaseStaticMethod
                                .convertModuleOpeNoToOpeNo(definitionList.getModuleNO(), posList.getDKey()));
                        attributes.setStageID(new ObjectIdentifier(definitionList.getStageID(),
                                definitionList.getStageObj()));
                        Infos.ProcessRef processRef = new Infos.ProcessRef();
                        processRef.setProcessFlow(currentPfObj);
                        processRef.setMainProcessFlow(mainPfObj);
                        processRef.setModuleNumber(definitionList.getModuleNO());
                        processRef.setModuleProcessFlow(processFlowObj);
                        processRef.setModulePOS(posList.getProcessOperationSpecificationsObj());
                        attributes.setProcessRef(processRef);
                        opeCount = addOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID,
                                searchOperationNumber, opeCount, searchCount, lotScheduleObj, productID);
                        count2++;
                    }
                    count++;
                }
            }
            if (opeCount == searchCount) {
                return attributesList;
            }

            //---------------------------------------------------------------------------------------------------------------
            // (3-3) If the lot is on sub/rework route, set the return operaion and the following operations from return flow
            //---------------------------------------------------------------------------------------------------------------
            String beforeMainPdtype = null;
            //add by neyo
            String beforeMainPdObj = null;
            String beforeMainPdid = null;
            List<CimProcessFlowContextReturnDO> processFlowContextReturns = cimJpaRepository
                    .query("SELECT * FROM OMPRFCX_RTNSEQ WHERE REFKEY = ?1 ORDER BY IDX_NO",
                            CimProcessFlowContextReturnDO.class, lotProcessFlowContextObj);
            count = 0;
            while (opeCount < searchCount) {
                if (CimObjectUtils.isEmpty(processFlowContextReturns) || count >= processFlowContextReturns.size())
                    break;
                CimProcessFlowContextReturnDO processFlowContextReturn = processFlowContextReturns.get(count);
                if (backupProcessingFlag) {
                    backupProcessingFlag = false;
                    continue;
                }
                Integer returnSeqNo = processFlowContextReturn.getSequenceNumber();
                String returnOpeNo = processFlowContextReturn.getOperationNumber();
                String returnModuleNo = BaseStaticMethod.convertOpeNoToModuleNo(returnOpeNo);
                String returnModuleOpeNo = BaseStaticMethod.convertOpeNoToModuleOpeNo(returnOpeNo);
                String returnPfObj = processFlowContextReturn.getProcessFlowObj();
                String returnMainPfObj = processFlowContextReturn.getMainProcessFlowObj();
                String returnModulePfObj = processFlowContextReturn.getModuleProcessFlowObj();

                String mainPDTYPE = count == 0 ? currentMainPdtype : beforeMainPdtype;
                String sql1 = "SELECT A.PRP_ID, A.PRP_RKEY, A.ACTIVE_FLAG, B.PRP_TYPE FROM OMPRF A," +
                        " OMPRP B WHERE A.ID = ? AND A.PRP_ID = B.PRP_ID AND B.PRP_LEVEL = ?";
                List<Object[]> list1 = cimJpaRepository.query(sql1, returnMainPfObj, BizConstant.SP_PD_FLOWLEVEL_MAIN);
                Validations.check(CimObjectUtils.isEmpty(list1),retCodeConfig.getNotFoundProcessFlow());

                Object[] field1 = list1.get(0);
                Infos.PFAndPDField pfAndPDField1 = new Infos.PFAndPDField();
                pfAndPDField1.setMainProcessDefinitionID(String.valueOf(field1[0]));
                pfAndPDField1.setMainProcessDefinitionObj(String.valueOf(field1[1]));
                pfAndPDField1.setState(Integer.valueOf(String.valueOf(field1[2])) > 0);
                pfAndPDField1.setProcessDefinitionType(String.valueOf(field1[3]));
                pfAndPDField = pfAndPDField1;

                beforeMainPdtype = pfAndPDField.getProcessDefinitionType();
                beforeMainPdid = pfAndPDField.getMainProcessDefinitionID();
                beforeMainPdObj = pfAndPDField.getMainProcessDefinitionObj();
                String originalReturnMainPfObj = returnMainPfObj;
                String originalReturnModulePfObj = returnModulePfObj;
                Boolean bSameModuleFlag = true;
                if (branchCheckMode == 1) {
                    CimProcessFlowContextBackPODO processFlowContextBackProcessOperation = cimJpaRepository
                            .queryOne("SELECT * FROM OMPRFCX_BCKPROPESEQ WHERE REFKEY = ?1 AND IDX_NO = ?2",
                                    CimProcessFlowContextBackPODO.class, lotProcessFlowContextObj, returnSeqNo);
                    Validations.check(CimObjectUtils.isEmpty(processFlowContextBackProcessOperation),
                            retCodeConfig.getNotFoundProcessFlow());
                    String reworkOutKey = processFlowContextBackProcessOperation.getReworkOutKey();
                    lotProcessOperationObj = processFlowContextBackProcessOperation.getProcessOperationObj();
                    CimProcessOperationDO po = cimJpaRepository.queryOne("SELECT * FROM OMPROPE WHERE ID = ?1",
                            CimProcessOperationDO.class, lotProcessOperationObj);
                    Validations.check(CimObjectUtils.isEmpty(po),retCodeConfig.getNotFoundProcessFlow());
                    String backupModuleNo = po.getModuleNumber();
                    if (CimStringUtils.equals(BizConstant.SP_MAINPDTYPE_REWORK, mainPDTYPE)) {
                        if (!CimObjectUtils.isEmpty(reworkOutKey)) {
                            backupModuleNo = BaseStaticMethod.convertOpeNoToModuleNo(reworkOutKey);
                            Validations.check(CimObjectUtils.isEmpty(backupModuleNo),retCodeConfig.getInvalidRouteId());
                        } else {
                            // get backup PO object
                            CimProcessOperation aBackupPO = baseCoreFactory.getBO(CimProcessOperation.class,
                                    lotProcessOperationObj);
                            Validations.check(CimObjectUtils.isEmpty(aBackupPO),retCodeConfig.getNotFoundOperation());

                            // get MainPF from backup PO
                            CimProcessFlow aMainPF = aBackupPO.getMainProcessFlow();
                            Validations.check(CimObjectUtils.isEmpty(aMainPF),retCodeConfig.getNotFoundProcessFlow());

                            // get Module number from backup PO
                            String aModuleNo = aBackupPO.getModuleNumber();
                            // get ModulePF from backup PO
                            CimProcessFlow aModulePF = aBackupPO.getModuleProcessFlow();
                            Validations.check(CimObjectUtils.isEmpty(aModulePF),retCodeConfig.getNotFoundProcessFlow());

                            // get ModulePOS from backup PO
                            CimProcessOperationSpecification aModulePOS = aBackupPO
                                    .getModuleProcessOperationSpecification();
                            Validations.check(CimObjectUtils.isEmpty(aModulePOS),retCodeConfig.getNotFoundPos());

                            // get previous ModulePOS
                            AtomicReference<CimProcessFlow> outMainProcessFlow = new AtomicReference<>();
                            AtomicReference<String> outModuleNumber = new AtomicReference<>();
                            AtomicReference<CimProcessFlow> outModuleProcessFlow = new AtomicReference<>();
                            CimProcessOperationSpecification aPrevPOS = aMainPF
                                    .getPreviousProcessOperationSpecificationFor(aModuleNo,
                                    aModulePF, aModulePOS, outMainProcessFlow, outModuleNumber, outModuleProcessFlow);

                            Validations.check(CimObjectUtils.isEmpty(aPrevPOS),retCodeConfig.getNotFoundPos());
                            backupModuleNo = outModuleNumber.get();
                        }
                    }
                    // Compare ModuleNumber
                    if (!CimStringUtils.equals(returnModuleNo, backupModuleNo)) {
                        bSameModuleFlag = false;
                    }
                }

                //--- Get return main PF information
                processFlow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE ID = ?1",
                        CimProcessFlowDO.class, returnMainPfObj);
                Validations.check(CimObjectUtils.isEmpty(processFlow),retCodeConfig.getNotFoundProcessFlow());
                String returnMainPdid = processFlow.getMainProcessDefinitionID();
                String returnMainPdobj = processFlow.getMainProcessDefinitionObj();
                Boolean returnMainPfState = processFlow.getState();

                String returnStageId;
                String returnStageObj;
                int returnMainPfPdlistSeqno = 0;
                int returnModulePfPoslistSeqno = 0;
                String returnModulePosObj = null;
                String returnModulePdid;
                Boolean returnModulePfState = false;

                if (CimBooleanUtils.isTrue(bSameModuleFlag)) {
                    //=========================================================================
                    //
                    // In this case,
                    //    Out-ModuleNumber and In-ModuleNumber is the same.
                    //    (Mod-A:10)
                    // ---10.10--10.20--10.30--10.40--(Main route)
                    //      |             ^
                    //      |             |
                    //      +-------------+ (Sub route)
                    //
                    //=========================================================================
                    //--- Get seq_no of return module from main PF
                    CimPFDefinitionListDO definitionList = cimJpaRepository
                            .queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",
                                    CimPFDefinitionListDO.class, returnMainPfObj, returnModuleNo);
                    Validations.check(CimObjectUtils.isEmpty(definitionList),retCodeConfig.getNotFoundProcessFlow());
                    returnMainPfPdlistSeqno = definitionList.getSequenceNumber();
                    returnStageId = definitionList.getStageID();
                    returnStageObj = definitionList.getStageObj();
                    CimProcessFlowDO flow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE ID = ?1",
                            CimProcessFlowDO.class, returnModulePfObj);
                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    returnModulePdid = flow.getMainProcessDefinitionID();
                    returnModulePfState = flow.getState();
                    //--- Get seq_no of return process from module PF
                    CimPFPosListDO posList = cimJpaRepository
                            .queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",
                                    CimPFPosListDO.class, returnModulePfObj, returnModuleOpeNo);
                    Validations.check(CimObjectUtils.isEmpty(posList),retCodeConfig.getNotFoundProcessFlow());
                    returnModulePfPoslistSeqno = posList.getSequenceNumber();
                    returnModulePosObj = posList.getProcessOperationSpecificationsObj();
                } else {
                    Boolean bFindFlag = true;
                    //=========================================================================
                    //
                    // In this case,
                    //   Out-ModuleNumber and In-ModuleNumber is different.
                    //   (Mod-A:10)           (Mod-B:20)
                    // ---10.10--10.20- -20.10--20.20---(Main route)
                    //             |              ^
                    //             |              |
                    //             +--------------+ (Sub route)
                    //
                    //=========================================================================

                    //=================================================================
                    // Step1
                    //  Check STATE of MAIN_PF_OBJ(MainPF-A) in FRPXF_RETNLIST
                    //=================================================================
                    if (CimBooleanUtils.isFalse(returnMainPfState)) {
                        //=================================================================
                        // Step2
                        //  When STATE of MAIN_PF_OBJ is 0,
                        //   Get the latest MAIN_PF_OBJ(MainPF-B) from MainPD
                        //=================================================================
                        String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE;
                        CimProcessFlowDO flow = cimJpaRepository
                                .queryOne("SELECT * FROM OMPRF WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2" +
                                        " AND ACTIVE_FLAG = ?3", CimProcessFlowDO.class, returnMainPdid,
                                        processDefinitionLevel, hvTrue);
                        Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                        returnMainPfObj = flow.getId();
                        //=================================================================
                        // Step2-1
                        //   Get mdpd with return ModuleNo from the latest MAIN_PF_OBJ(MainPF-B)
                        //=================================================================
                        CimPFDefinitionListDO definitionList = cimJpaRepository
                                .queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",
                                        CimPFDefinitionListDO.class, returnMainPfObj, returnModuleNo);
                        if (CimObjectUtils.isEmpty(definitionList)) {
                            returnMainPfObj = originalReturnMainPfObj;
                            bFindFlag = false;
                        }
                        if (CimBooleanUtils.isTrue(bFindFlag)) {
                            returnModulePdid = definitionList.getProcessDefinitionID();
                            //=================================================================
                            // Step2-2
                            //   Get MOUDLE_PF_OBJ(mdpd-B) from mdpd
                            //=================================================================
                            processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                            returnModulePfObj = getActiveProcessFlowObj(returnModulePdid, processDefinitionLevel);
                            //=================================================================
                            // Step2-3
                            //   Get ModulePOS with return ModuleOpeNo from MOUDLE_PF_OBJ(mdpd-B)
                            //=================================================================
                            CimPFPosListDO posList = cimJpaRepository
                                    .queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1" +
                                            " AND LINK_KEY = ?2", CimPFPosListDO.class,
                                            returnModulePfObj, returnModuleOpeNo);
                            if (!CimObjectUtils.isEmpty(posList)) {
                                returnModulePfPoslistSeqno = posList.getSequenceNumber();
                                returnModulePosObj = posList.getProcessOperationSpecificationsObj();
                            } else {
                                returnMainPfObj = originalReturnMainPfObj;
                                returnModulePfObj = originalReturnModulePfObj;
                                bFindFlag = false;
                            }
                        }
                    } //if( returnMainPfState == 0 )

                    if (CimBooleanUtils.isTrue(returnMainPfState) || CimBooleanUtils.isFalse(bFindFlag)) {
                        //=================================================================
                        // Step3
                        //  When STATE of MAIN_PF_OBJ is 1 or ModulePOS does not found,
                        //=================================================================
                        //=================================================================
                        // Step3-1
                        //   Get mdpd with return ModuleNo from MAINP_PF_OBJ(MainPF-A)
                        //    if mdpd does not found, Go to Step4.
                        //=================================================================
                        String processDefinitionID = null;
                        bFindFlag = true;
                        CimPFDefinitionListDO definitionList = cimJpaRepository
                                .queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",
                                        CimPFDefinitionListDO.class, returnMainPfObj, returnModuleNo);
                        if (CimObjectUtils.isEmpty(definitionList)) {
                            bFindFlag = false;
                        } else {
                            processDefinitionID = definitionList.getProcessDefinitionID();
                        }
                        if (CimBooleanUtils.isTrue(bFindFlag)) {
                            returnModulePdid = processDefinitionID;
                            //=================================================================
                            // Step3-2
                            //   Get the latest ModulePF(ModulePF-C) from mdpd
                            //=================================================================
                            String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                            //--- If module PDID's version is "##", convert it to real PDID
                            returnModulePfObj = getActiveProcessFlowObj(returnModulePdid, processDefinitionLevel);
                            //=================================================================
                            // Step3-3
                            //   Get ModulePOS from the latest ModulePF(ModulePF-C)
                            //=================================================================
                            Integer sequenceNumber = 0;
                            String processOperationSpecificationsObj = null;
                            CimPFPosListDO posList = cimJpaRepository
                                    .queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",
                                            CimPFPosListDO.class, returnModulePfObj, returnModuleOpeNo);
                            if (CimObjectUtils.isEmpty(posList)) {
                                returnModulePfObj = originalReturnModulePfObj;
                                bFindFlag = false;
                            } else {
                                sequenceNumber = posList.getSequenceNumber();
                                processOperationSpecificationsObj = posList.getProcessOperationSpecificationsObj();
                            }
                            if (CimBooleanUtils.isTrue(bFindFlag)) {
                                returnModulePfPoslistSeqno = sequenceNumber;
                                returnModulePosObj = processOperationSpecificationsObj;
                            }
                        }
                    } //if( returnMainPfState == 1 || bFindFlag == FALSE )

                    //=================================================================
                    // Step4
                    //  Check STATE of MODULE_PF_OBJ(ModlePF-A) in FRPXF_RETNLIST
                    //=================================================================
                    if (CimBooleanUtils.isFalse(bFindFlag)) {
                        //=================================================================
                        // Get STATE of MODULE_PF_OBJ(ModlePF-A)
                        //=================================================================
                        CimProcessFlowDO flow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE ID = ?1",
                                CimProcessFlowDO.class, returnModulePfObj);
                        Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                        returnModulePfState = flow.getState();
                        if (CimBooleanUtils.isFalse(returnModulePfState)) {
                            //=================================================================
                            // Step5
                            //  When STATE of MODULE_PF_OBJ is 0,
                            //   Get mdpd from MODULE_PF_OBJ(ModlePF-A)
                            //=================================================================
                            flow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE ID = ?1",
                                    CimProcessFlowDO.class,returnModulePfObj);
                            Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                            returnModulePdid = flow.getMainProcessDefinitionID();
                            //=================================================================
                            // Get new MODULE_PF_OBJ(ModlePF-D) from mdpd
                            //=================================================================
                            String processFlowObj = null;
                            String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                            flow = cimJpaRepository
                                    .queryOne("SELECT * FROM OMPRF WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2" +
                                                    " AND ACTIVE_FLAG = ?3",
                                    CimProcessFlowDO.class,returnModulePdid, processDefinitionLevel, hvTrue);
                            bFindFlag = true;
                            if (CimObjectUtils.isEmpty(flow)) {
                                bFindFlag = false;
                            } else {
                                processFlowObj = flow.getId();
                            }

                            //=================================================================
                            // Step5-1
                            // Get ModulePOS with return ModuleOpeNo from new MODULE_PF_OBJ(ModlePF-D)
                            //  if ModulePOS is not found, Go to Step6.
                            //=================================================================
                            if (CimBooleanUtils.isTrue(bFindFlag)) {
                                returnModulePfObj = processFlowObj;
                                //--- Get seq_no of return process from module PF
                                Integer sequenceNumber = 0;
                                String processOperationSpecificationsObj = null;
                                CimPFPosListDO posList = cimJpaRepository
                                        .queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",
                                        CimPFPosListDO.class, returnModulePfObj, returnModuleOpeNo);
                                if (CimObjectUtils.isEmpty(posList)) {
                                    returnModulePfObj = originalReturnModulePfObj;
                                    bFindFlag = false;
                                } else {
                                    sequenceNumber = posList.getSequenceNumber();
                                    processOperationSpecificationsObj = posList.getProcessOperationSpecificationsObj();
                                }
                                if (CimBooleanUtils.isTrue(bFindFlag)) {
                                    returnModulePfPoslistSeqno = sequenceNumber;
                                    returnModulePosObj = processOperationSpecificationsObj;
                                }
                            }
                        } //if( returnModulePfState == 0 )

                        if (CimBooleanUtils.isTrue(returnModulePfState) || CimBooleanUtils.isFalse(bFindFlag)) {
                            //=================================================================
                            // Step6
                            //  When STATE of MODULE_PF_OBJ is 1 or ModulePOS does not found,
                            //   Get ModulePOS with return ModuleOpeNo from new MODULE_PF_OBJ(ModlePF-A)
                            //=================================================================
                            CimPFPosListDO posList = cimJpaRepository
                                    .queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",
                                    CimPFPosListDO.class, returnModulePfObj, returnModuleOpeNo);
                            Validations.check(CimObjectUtils.isEmpty(posList),retCodeConfig.getNotFoundProcessFlow());
                            returnModulePfPoslistSeqno = posList.getSequenceNumber();
                            returnModulePosObj = posList.getProcessOperationSpecificationsObj();
                        } //if( returnModulePfState == 1 || bFindFlag == FALSE )
                    } //if( bFindFlag == FALSE )

                    //--- Get seq_no of return module from main PF
                    CimPFDefinitionListDO definitionList = cimJpaRepository
                            .queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",
                            CimPFDefinitionListDO.class, returnMainPfObj, returnModuleNo);
                    Validations.check(CimObjectUtils.isEmpty(definitionList),retCodeConfig.getNotFoundProcessFlow());
                    returnMainPfPdlistSeqno = definitionList.getSequenceNumber();
                    returnStageId = definitionList.getStageID();
                    returnStageObj = definitionList.getStageObj();
                    //--- Get return module PF information
                    CimProcessFlowDO flow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE ID = ?1",
                            CimProcessFlowDO.class, returnModulePfObj);
                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    returnModulePdid = flow.getMainProcessDefinitionID();
                    returnModulePfState = flow.getState();
                }
                //-----------------------------------------------------------------------------
                // (3-3-1) Get next POS from return/active module PF
                //-----------------------------------------------------------------------------
                if (CimBooleanUtils.isTrue(returnModulePfState)) {
                    // Module PF is active, set return POS's seq_no from return module PF
                    modulePfObj = returnModulePfObj;
                    modulePfPoslistSeqno = returnModulePfPoslistSeqno;
                    findFlag = true;
                } else {
                    // Module PF is NOT active, search return POS's seq_no from active module PF
                    findFlag = false;

                    //--- Get active module PF information
                    String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                    CimProcessFlowDO flow = cimJpaRepository
                            .queryOne("SELECT * FROM OMPRF WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2" +
                                    " AND ACTIVE_FLAG = ?3", CimProcessFlowDO.class, returnModulePdid,
                                    processDefinitionLevel, hvTrue);
                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    activeModulePfObj = flow.getId();
                    i = 0;
                    while (opeCount < searchCount) {
                        // Search the return operation by finding the return module openo on active module PF
                        if (i <= 0) {
                            CimPFPosListDO posList = cimJpaRepository
                                    .queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",
                                            CimPFPosListDO.class, activeModulePfObj, returnModuleOpeNo);
                            if (!CimObjectUtils.isEmpty(posList)) {
                                modulePfObj = activeModulePfObj;
                                modulePfPoslistSeqno = posList.getSequenceNumber();
                                findFlag = true;
                                break;
                            } else {
                                Infos.OperationNameAttributes attributes = new Infos.OperationNameAttributes();
                                attributes.setSequenceNumber(returnSeqNo);
                                attributes.setRouteID(new ObjectIdentifier(returnMainPdid, returnMainPdobj));
                                attributes.setOperationNumber(returnOpeNo);
                                attributes.setStageID(new ObjectIdentifier(returnStageId, returnStageObj));
                                Infos.ProcessRef processRef = new Infos.ProcessRef();
                                processRef.setProcessFlow(returnPfObj);
                                processRef.setMainProcessFlow(returnMainPfObj);
                                processRef.setModuleNumber(returnModuleNo);
                                processRef.setModuleProcessFlow(returnModulePfObj);
                                processRef.setModulePOS(returnModulePosObj);
                                attributes.setProcessRef(processRef);
                                opeCount = addOperationNameAttributes(objCommon, attributesList, attributes,
                                        searchRouteID, searchOperationNumber, opeCount,
                                        searchCount, lotScheduleObj, productID);
                            }
                        } else {
                            // Search the next operation by finding the next module openo on active module PF
                            //--- Get the next operation seq_no on return module PF
                            returnModulePfPoslistSeqno++;
                            CimPFPosListDO posList = cimJpaRepository
                                    .queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND IDX_NO = ?2",
                                            CimPFPosListDO.class, returnModulePfObj, returnModulePfPoslistSeqno);
                            if (!CimObjectUtils.isEmpty(posList)) {
                                nextModuleOpeNo = posList.getDKey();
                                nextModulePosObj = posList.getProcessOperationSpecificationsObj();
                                posList = cimJpaRepository
                                        .queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1" +
                                                " AND LINK_KEY = ?2",CimPFPosListDO.class,
                                                activeModulePfObj, nextModuleOpeNo);
                                if (!CimObjectUtils.isEmpty(posList)) {
                                    modulePfObj = activeModulePfObj;
                                    modulePfPoslistSeqno = posList.getSequenceNumber();
                                    findFlag = true;
                                    break;
                                } else {
                                    Infos.OperationNameAttributes attributes = new Infos.OperationNameAttributes();
                                    attributes.setSequenceNumber(returnSeqNo);
                                    attributes.setRouteID(new ObjectIdentifier(returnMainPdid, returnMainPdobj));
                                    attributes.setOperationNumber(BaseStaticMethod
                                            .convertModuleOpeNoToOpeNo(returnModuleNo, nextModuleOpeNo));
                                    attributes.setStageID(new ObjectIdentifier(returnStageId, returnStageObj));
                                    Infos.ProcessRef processRef = new Infos.ProcessRef();
                                    processRef.setProcessFlow(returnPfObj);
                                    processRef.setMainProcessFlow(returnMainPfObj);
                                    processRef.setModuleNumber(returnModuleNo);
                                    processRef.setModuleProcessFlow(returnModulePfObj);
                                    processRef.setModulePOS(nextModulePosObj);
                                    attributes.setProcessRef(processRef);
                                    opeCount = addOperationNameAttributes(objCommon, attributesList, attributes,
                                            searchRouteID, searchOperationNumber, opeCount, searchCount, lotScheduleObj, productID);
                                }
                            } else break;
                        }// end of else if( i == 0 )
                        i++;
                    }// end of while
                }
                if (opeCount == searchCount) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // Set next POS from active return module PF
                //-----------------------------------------------------------------------------
                if (CimBooleanUtils.isTrue(findFlag)) {
                    List<CimPFPosListDO> processFlowPosLists = cimJpaRepository
                            .query("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1" +
                                    " AND IDX_NO >= ?2 ORDER BY IDX_NO", CimPFPosListDO.class, modulePfObj,
                                    modulePfPoslistSeqno);
                    count2 = 0;
                    while (opeCount < searchCount) {
                        if (CimObjectUtils.isEmpty(processFlowPosLists)
                                || count2 >= CimArrayUtils.getSize(processFlowPosLists))
                            break;
                        CimPFPosListDO posList = processFlowPosLists.get(count2);
                        Infos.OperationNameAttributes attributes = new Infos.OperationNameAttributes();
                        attributes.setSequenceNumber(returnSeqNo);
                        attributes.setRouteID(new ObjectIdentifier(returnMainPdid, returnMainPdobj));
                        attributes.setStageID(new ObjectIdentifier(returnStageId, returnStageObj));
                        Infos.ProcessRef processRef = new Infos.ProcessRef();
                        processRef.setProcessFlow(returnPfObj);
                        processRef.setMainProcessFlow(returnMainPfObj);
                        processRef.setModuleNumber(returnModuleNo);
                        processRef.setModuleProcessFlow(returnModulePfObj);
                        attributes.setOperationNumber(BaseStaticMethod
                                .convertModuleOpeNoToOpeNo(returnModuleNo, posList.getDKey()));
                        //add by Neyo
                        processRef.setModulePOS(posList.getProcessOperationSpecificationsObj());
                        processRef.setProcessOperationSpecification("");
                        attributes.setProcessRef(processRef);
                        opeCount = addOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID,
                                searchOperationNumber, opeCount, searchCount, lotScheduleObj, productID);
                        count2++;
                    }
                }
                if (opeCount == searchCount) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // (3-3-2) Get next module PD from return/active main PF
                //-----------------------------------------------------------------------------
                // If main PF is active, set next module PD's seq_no from return main PF
                if (CimBooleanUtils.isTrue(returnMainPfState)) {
                    mainPfObj = returnMainPfObj;
                    mainPfPdlistSeqno = returnMainPfPdlistSeqno + 1;
                    findFlag = true;
                }
                // If main PF is NOT active, search next module PD's seq_no from active main PF
                else {
                    findFlag = false;
                    //--- Get active main PF information
                    String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE;
                    CimProcessFlowDO exampleFlowDO = new CimProcessFlowDO();
                    exampleFlowDO.setMainProcessDefinitionID(returnMainPdid);
                    exampleFlowDO.setProcessDefinitionLevel(processDefinitionLevel);
                    exampleFlowDO.setState(hvTrue);
                    CimProcessFlowDO flow = cimJpaRepository.findOne(Example.of(exampleFlowDO)).orElse(null);

                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    activeMainPfObj = flow.getId();
                    i = 0;
                    while (opeCount < searchCount) {
                        // Search the next module PD by finding the return module number on active main PF
                        if (i == 0) {
                            CimPFPosListDO posList = cimJpaRepository
                                    .queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",
                                            CimPFPosListDO.class, activeMainPfObj, returnModuleNo);
                            if (!CimObjectUtils.isEmpty(posList)) {
                                mainPfObj = activeMainPfObj;
                                mainPfPdlistSeqno = posList.getSequenceNumber() + 1;
                                findFlag = true;
                                break;
                            }

                        }
                        // Search the next module PD by finding the next module number on active main PF
                        else {
                            returnMainPfPdlistSeqno++;
                            CimPFDefinitionListDO definitionList = cimJpaRepository
                                    .queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND IDX_NO = ?2",
                                    CimPFDefinitionListDO.class, returnMainPfObj, returnMainPfPdlistSeqno);
                            if (!CimObjectUtils.isEmpty(definitionList)) {
                                nextModulePdid = definitionList.getProcessDefinitionID();
                                nextModuleNo = definitionList.getModuleNO();
                                nextStageId = definitionList.getStageID();
                                nextStageObj = definitionList.getStageObj();

                                //--- Search the corresponding next module number from the active main PF
                                definitionList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_ROUTESEQ" +
                                                " WHERE REFKEY = ?1 AND LINK_KEY = ?2",
                                        CimPFDefinitionListDO.class, activeMainPfObj, nextModuleNo);
                                if (!CimObjectUtils.isEmpty(definitionList)) {
                                    mainPfObj = activeMainPfObj;
                                    mainPfPdlistSeqno = definitionList.getSequenceNumber();
                                    findFlag = true;
                                    break;
                                } else {
                                    //---------------------------------------------------------------------------
                                    // Set next POS from active next module PF and return(inactive) main PF
                                    //---------------------------------------------------------------------------
                                    //--- Get active module PF information
                                    //--- If module PDID's version is "##", convert it to real PDID
                                    processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                                    String processFlowObj = getActiveProcessFlowObj(nextModulePdid, processDefinitionLevel);
                                    //--- Set next operation information on active module PF
                                    List<CimPFPosListDO> pfPosLists = cimJpaRepository
                                            .query("SELECT * FROM OMPRF_PRSSSEQ" +
                                                    " WHERE REFKEY = ?1 ORDER BY IDX_NO",
                                                    CimPFPosListDO.class, processFlowObj);
                                    count2 = 0;
                                    while (opeCount < searchCount) {
                                        if (CimObjectUtils.isEmpty(pfPosLists) || count2 >= pfPosLists.size())
                                            break;
                                        CimPFPosListDO posList = pfPosLists.get(count2);
                                        Infos.OperationNameAttributes attributes = new Infos.OperationNameAttributes();
                                        attributes.setSequenceNumber(returnSeqNo);
                                        attributes.setRouteID(new ObjectIdentifier(returnMainPdid, returnMainPdobj));
                                        attributes.setStageID(new ObjectIdentifier(nextStageId, nextStageObj));
                                        Infos.ProcessRef processRef = new Infos.ProcessRef();
                                        processRef.setProcessFlow(returnPfObj);
                                        processRef.setMainProcessFlow(returnMainPfObj);
                                        processRef.setModuleNumber(nextModuleNo);
                                        processRef.setModuleProcessFlow(processFlowObj);
                                        attributes.setProcessRef(processRef);
                                        attributes.setOperationNumber(BaseStaticMethod
                                                .convertModuleOpeNoToOpeNo(nextModuleNo, posList.getDKey()));
                                        processRef.setModulePOS(posList.getProcessOperationSpecificationsObj());
                                        attributes.setProcessRef(processRef);
                                        opeCount = addOperationNameAttributes(objCommon, attributesList, attributes,
                                                searchRouteID, searchOperationNumber, opeCount, searchCount,
                                                lotScheduleObj, productID);
                                        count2++;
                                    }
                                }
                            } else break;
                        }// end of else if( i == 0 )
                        i++;
                    }// end of while
                }// end of else if( mainPFState == TRUE )
                if (opeCount == searchCount) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // Set next POS from active next module PF and active main PF
                //-----------------------------------------------------------------------------
                if (CimBooleanUtils.isTrue(findFlag)) {
                    //--- Get next module pdid, module_no from active main PF
                    List<CimPFDefinitionListDO> pfPdLists = cimJpaRepository
                            .query("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1" +
                                            " AND IDX_NO >= ?2 ORDER BY IDX_NO",
                            CimPFDefinitionListDO.class, mainPfObj, mainPfPdlistSeqno);
                    count2 = 0;
                    while (true) {
                        if (CimObjectUtils.isEmpty(pfPdLists) || count2 >= pfPdLists.size()) break;
                        CimPFDefinitionListDO definitionList = pfPdLists.get(count2);
                        String moduleNO = definitionList.getModuleNO();
                        //--- Get active module PF information
                        String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                        //--- If module PDID's version is "##", convert it to real PDID
                        String processFlowObj = getActiveProcessFlowObj(definitionList.getProcessDefinitionID(),
                                processDefinitionLevel);
                        List<CimPFPosListDO> pfPosLists = cimJpaRepository
                                .query("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 ORDER BY IDX_NO",
                                CimPFPosListDO.class, processFlowObj);
                        count3 = 0;
                        while (opeCount < searchCount) {
                            if (CimObjectUtils.isEmpty(pfPosLists) || count3 >= pfPosLists.size())
                                break;
                            CimPFPosListDO posList = pfPosLists.get(count3);
                            Infos.OperationNameAttributes attributes = new Infos.OperationNameAttributes();
                            attributes.setSequenceNumber(returnSeqNo);
                            attributes.setRouteID(new ObjectIdentifier(returnMainPdid, returnMainPdobj));
                            attributes.setStageID(new ObjectIdentifier(definitionList.getStageID(),
                                    definitionList.getStageObj()));
                            Infos.ProcessRef processRef = new Infos.ProcessRef();
                            processRef.setModuleProcessFlow(processFlowObj);
                            processRef.setModuleNumber(moduleNO);
                            processRef.setProcessFlow(returnPfObj);
                            processRef.setMainProcessFlow(mainPfObj);
                            attributes.setOperationNumber(BaseStaticMethod
                                    .convertModuleOpeNoToOpeNo(moduleNO, posList.getDKey()));
                            processRef.setModulePOS(posList.getProcessOperationSpecificationsObj());
                            attributes.setProcessRef(processRef);
                            opeCount = addOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID,
                                    searchOperationNumber, opeCount, searchCount, lotScheduleObj, productID);
                            count3++;
                        }
                        count2++;
                    }
                }// end of if( findFlag == TRUE )
                count++;
                if (opeCount == searchCount) {
                    return attributesList;
                }
            }
        }
        //-----------------------------------------------------------------------------
        // (4) Get backward process information         if( searchDirection == FALSE )
        //-----------------------------------------------------------------------------
        else {
            //-----------------------------------------------------------------------------
            // (4-1) Get backward process from FRPO, if( posSearchFlag == FALSE )
            //-----------------------------------------------------------------------------
            if (CimBooleanUtils.isFalse(posSearchFlag)) {
                //Get a sequence number of current operation in FRPFX_POLIST
                CimProcessFlowContextPODO pfxPoList = cimJpaRepository
                        .queryOne("SELECT * FROM OMPRFCX_PROPESEQ WHERE REFKEY = ?1 AND PROPE_RKEY = ?2",
                                CimProcessFlowContextPODO.class, lotProcessFlowContextObj, currentPoObj);
                Validations.check(CimObjectUtils.isEmpty(pfxPoList),retCodeConfig.getNotFoundPfx());
                Integer sequenceNumber = pfxPoList.getSequenceNumber();
                List<CimProcessFlowContextPODO> pfxPoLists = cimJpaRepository
                        .query("SELECT * FROM OMPRFCX_PROPESEQ WHERE REFKEY = ?1 AND IDX_NO < ?2",
                                CimProcessFlowContextPODO.class, lotProcessFlowContextObj, sequenceNumber);
                count = 0;
                while (opeCount < searchCount) {
                    if (CimArrayUtils.isEmpty(pfxPoLists) || count >= pfxPoLists.size()) break;
                    CimProcessFlowContextPODO pfxPoLessThanList = pfxPoLists.get(count);
                    CimProcessOperationDO po = cimJpaRepository.queryOne("SELECT * FROM OMPROPE WHERE ID = ?1",
                            CimProcessOperationDO.class, pfxPoLessThanList.getProcessOperationObj());
                    Validations.check(CimObjectUtils.isEmpty(po),retCodeConfig.getNotFoundProcessOperation());
                    processFlowDefinitionList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_ROUTESEQ" +
                            "  WHERE REFKEY = ?1 AND LINK_KEY = ?2",CimPFDefinitionListDO.class,
                            po.getMainProcessFlowObj(), po.getModuleNumber());
                    Infos.OperationNameAttributes attributes = new Infos.OperationNameAttributes();
                    attributes.setSequenceNumber(-1);
                    attributes.setRouteID(new ObjectIdentifier(po.getMainProcessDefinitionID(),
                            po.getMainProcessDefinitionObj()));
                    attributes.setOperationNumber(po.getOperationNumber());
                    if (!CimObjectUtils.isEmpty(processFlowDefinitionList)) {
                        attributes.setStageID(new ObjectIdentifier(processFlowDefinitionList.getStageID(),
                                processFlowDefinitionList.getStageObj()));
                    }
                    Infos.ProcessRef processRef = new Infos.ProcessRef();
                    processRef.setProcessFlow(po.getProcessFlowObj());
                    processRef.setProcessOperationSpecification(po.getProcessOperationSpecificationObj());
                    processRef.setMainProcessFlow(po.getMainProcessFlowObj());
                    processRef.setModuleNumber(po.getModuleNumber());
                    processRef.setModuleProcessFlow(po.getModuleProcessFlowObj());
                    processRef.setModulePOS(po.getModuleProcessOperationSpecificationsObj());
                    attributes.setProcessRef(processRef);
                    opeCount = addOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID,
                            searchOperationNumber, opeCount, searchCount, lotScheduleObj, productID);
                    count++;
                }
            }
            //-----------------------------------------------------------------------------
            // (4-2) Get backward process from FRPOS, if( posSearchFlag == TRUE )
            //-----------------------------------------------------------------------------
            else {
                //-----------------------------------------------------------------------------
                // (4-2-1) Get previous POS from current/active module PF
                //-----------------------------------------------------------------------------
                // If module PF is active, set previous POS's seq_no from current module PF
                if (CimBooleanUtils.isTrue(modulePFState)) {
                    modulePfObj = currentModulePfObj;
                    modulePfPoslistSeqno = currentModulePfPoslistSeqno - 1;
                    findFlag = true;
                } else {
                    findFlag = false;
                    //--- Get active module PF information
                    String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                    activeModulePfObj = getActiveProcessFlowObj(currentModulePdid, processDefinitionLevel);

                    i = 0;
                    while (opeCount < searchCount) {
                        // Search the previous operation by finding the current module openo on active module PF
                        if (i <= 0) {
                            CimPFPosListDO pfPosList = cimJpaRepository
                                    .queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",
                                            CimPFPosListDO.class, activeModulePfObj, currentModuleOpeNo);
                            if (!CimObjectUtils.isEmpty(pfPosList)) {
                                //--- Set the previous operation seq_no on active module PF
                                modulePfObj = activeModulePfObj;
                                modulePfPoslistSeqno = pfPosList.getSequenceNumber() - 1;
                                findFlag = true;
                                break;
                            }
                        }
                        // Search the previous operation by finding the previous module openo on active module PF
                        else {
                            //--- Get the previous operation seq_no on current module PF
                            currentModulePfPoslistSeqno--;
                            CimPFPosListDO pfPosList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ" +
                                    " WHERE REFKEY = ?1 AND IDX_NO = ?2", CimPFPosListDO.class, currentModulePfObj,
                                    currentModulePfPoslistSeqno);
                            if (!CimObjectUtils.isEmpty(pfPosList)) {
                                //--- Keep the previous operation information on current module PF
                                previousModuleOpeNo = pfPosList.getDKey();
                                previousModulePosObj = pfPosList.getProcessOperationSpecificationsObj();

                                //--- Search the corresponding previous module openo from active module PF
                                pfPosList = cimJpaRepository
                                        .queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1" +
                                                " AND LINK_KEY = ?2",CimPFPosListDO.class,activeModulePfObj,
                                                previousModuleOpeNo);
                                if (!CimObjectUtils.isEmpty(pfPosList)) {
                                    modulePfObj = activeModulePfObj;
                                    modulePfPoslistSeqno = pfPosList.getSequenceNumber();
                                    findFlag = true;
                                    break;
                                } else {
                                    //---------------------------------------------------------------------------
                                    // Set previous POS from inactive current module PF
                                    //---------------------------------------------------------------------------
                                    Infos.OperationNameAttributes attributes = new Infos.OperationNameAttributes();
                                    attributes.setSequenceNumber(-1);
                                    attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                                    attributes.setOperationNumber(BaseStaticMethod
                                            .convertModuleOpeNoToOpeNo(currentModuleNo, previousModuleOpeNo));
                                    attributes.setStageID(new ObjectIdentifier(currentStageId, currentStageObj));
                                    Infos.ProcessRef processRef = new Infos.ProcessRef();
                                    processRef.setProcessFlow(currentPfObj);
                                    processRef.setMainProcessFlow(currentMainPfObj);
                                    processRef.setModuleNumber(currentModuleNo);
                                    processRef.setModuleProcessFlow(currentModulePfObj);
                                    processRef.setModulePOS(previousModulePosObj);
                                    attributes.setProcessRef(processRef);
                                    opeCount = addOperationNameAttributes(objCommon, attributesList, attributes,
                                            searchRouteID, searchOperationNumber, opeCount, searchCount,
                                            lotScheduleObj, productID);
                                }
                            } else break;
                        }// end of else if( i == 0 )
                        i++;
                    }// end of while
                }// end of else if( modulePFState == TRUE )
                if (opeCount == searchCount) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // Set previous POS from active current module PF
                //-----------------------------------------------------------------------------
                if (CimBooleanUtils.isTrue(findFlag)) {
                    List<CimPFPosListDO> pfPosLists = cimJpaRepository
                            .query("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND IDX_NO <= ?2" +
                                    " ORDER BY IDX_NO DESC", CimPFPosListDO.class, modulePfObj, modulePfPoslistSeqno);
                    count = 0;
                    while (opeCount < searchCount) {
                        if (CimObjectUtils.isEmpty(pfPosLists) || count >= pfPosLists.size()) {
                            break;
                        }
                        CimPFPosListDO pfPosList = pfPosLists.get(count);
                        //--- Set previous operation information on active current module PF
                        Infos.OperationNameAttributes attributes = new Infos.OperationNameAttributes();
                        attributes.setSequenceNumber(-1);
                        attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                        attributes.setStageID(new ObjectIdentifier(currentStageId, currentStageObj));
                        Infos.ProcessRef processRef = new Infos.ProcessRef();
                        processRef.setProcessFlow(currentPfObj);
                        processRef.setMainProcessFlow(currentMainPfObj);
                        processRef.setModuleNumber(currentModuleNo);
                        processRef.setModuleProcessFlow(modulePfObj);
                        attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(currentModuleNo,
                                pfPosList.getDKey()));
                        processRef.setModulePOS(pfPosList.getProcessOperationSpecificationsObj());
                        attributes.setProcessRef(processRef);
                        opeCount = addOperationNameAttributes(objCommon, attributesList, attributes,
                                searchRouteID, searchOperationNumber, opeCount, searchCount, lotScheduleObj, productID);
                        count++;
                    }
                }
                if (opeCount == searchCount) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // (4-2-2) Get previous module PD from current/active main PF
                //-----------------------------------------------------------------------------
                String mainPfObj = null, activeMainPfObj = null;
                String previousModulePdid = null, previousModuleNo = null, previousStageId = null,
                        previousStageObj = null;
                Integer mainPfPdlistSeqno = 0;

                // If main PF is active, set previous module PD's seq_no from current main PF
                if (CimBooleanUtils.isTrue(mainPFState)) {
                    mainPfObj = currentMainPfObj;
                    mainPfPdlistSeqno = currentMainPfPdlistSeqno - 1;
                    findFlag = true;
                }
                // If main PF is NOT active, search previous module PD's seq_no from active main PF
                else {
                    findFlag = false;

                    //--- Get active main PF information
                    String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE;
                    CimProcessFlowDO flow = cimJpaRepository
                            .queryOne("SELECT * FROM OMPRF WHERE PRP_ID = ?1" +
                                    " AND PRP_LEVEL = ?2 AND ACTIVE_FLAG = ?3", CimProcessFlowDO.class, currentMainPdid,
                                    processDefinitionLevel, hvTrue);
                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    activeMainPfObj = flow.getId();
                    i = 0;
                    while (true) {
                        // Search the previous module PD by finding the current module number on active main PF
                        if (i == 0) {
                            CimPFDefinitionListDO pfPdList = cimJpaRepository
                                    .queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1" +
                                            " AND LINK_KEY = ?2", CimPFDefinitionListDO.class, activeMainPfObj, currentModuleNo);
                            if (!CimObjectUtils.isEmpty(pfPdList)) {
                                //--- Set the previous module PD's seq_no on active module PF
                                mainPfObj = activeMainPfObj;
                                mainPfPdlistSeqno = pfPdList.getSequenceNumber() - 1;
                                findFlag = true;
                                break;
                            }
                        }
                        // Search the previous PD by finding the previous module number on active main PF
                        else {
                            //--- Get the previous module PD's seq_no on current main PF
                            currentMainPfPdlistSeqno--;
                            CimPFDefinitionListDO definitionList = cimJpaRepository
                                    .queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND IDX_NO = ?2",
                                            CimPFDefinitionListDO.class, currentMainPfObj, currentMainPfPdlistSeqno);
                            if (!CimObjectUtils.isEmpty(definitionList)) {
                                //--- Keep the previous module information on current main PF
                                previousModulePdid = definitionList.getProcessDefinitionID();
                                previousModuleNo = definitionList.getModuleNO();
                                previousStageId = definitionList.getStageID();
                                previousStageObj = definitionList.getStageObj();
                                //--- Search the corresponding previous module number from the active main PF
                                definitionList = cimJpaRepository
                                        .queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1" +
                                                " AND LINK_KEY = ?2",CimPFDefinitionListDO.class,activeMainPfObj,
                                                previousModuleNo);
                                if (!CimObjectUtils.isEmpty(definitionList)) {
                                    mainPfObj = activeMainPfObj;
                                    mainPfPdlistSeqno = definitionList.getSequenceNumber();
                                    findFlag = true;
                                    break;
                                } else {
                                    //---------------------------------------------------------------------------
                                    // Set previous POS from active previous module PF and current(inactive) main PF
                                    //---------------------------------------------------------------------------
                                    //--- Get active module PF information
                                    //--- If module PDID's version is "##", convert it to real PDID
                                    processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                                    String previousModulePfObj = getActiveProcessFlowObj(previousModulePdid,
                                            processDefinitionLevel);
                                    //--- Set previous operation information on active module PF
                                    List<CimPFPosListDO> processFlowPosLists = cimJpaRepository
                                            .query("SELECT * FROM OMPRF_PRSSSEQ" +
                                                    " WHERE REFKEY = ?1 ORDER BY IDX_NO", CimPFPosListDO.class,
                                                    previousModulePfObj);
                                    count = 0;
                                    while (opeCount < searchCount) {
                                        if (CimArrayUtils.isEmpty(processFlowPosLists)
                                                || count >= processFlowPosLists.size())
                                            break;
                                        CimPFPosListDO posList = processFlowPosLists.get(count);
                                        //--- Set previous operation information on active module PF
                                        Infos.OperationNameAttributes attributes = new Infos.OperationNameAttributes();
                                        attributes.setSequenceNumber(-1);
                                        attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                                        attributes.setStageID(new ObjectIdentifier(previousStageId, previousStageObj));
                                        Infos.ProcessRef processRef = new Infos.ProcessRef();
                                        processRef.setProcessFlow(currentPfObj);
                                        processRef.setMainProcessFlow(currentMainPfObj);
                                        processRef.setModuleNumber(previousModuleNo);
                                        processRef.setModuleProcessFlow(previousModulePfObj);
                                        attributes.setOperationNumber(BaseStaticMethod
                                                .convertModuleOpeNoToOpeNo(previousModuleNo, posList.getDKey()));
                                        processRef.setModulePOS(posList.getProcessOperationSpecificationsObj());
                                        attributes.setProcessRef(processRef);
                                        opeCount = addOperationNameAttributes(objCommon, attributesList, attributes,
                                                searchRouteID, searchOperationNumber, opeCount, searchCount,
                                                lotScheduleObj, productID);
                                        count++;
                                    }
                                }
                            } else break;
                        }// end of else if( i == 0 )
                        i++;
                    }// end of while
                }// end of else if( mainPFState == TRUE )
                if (opeCount == searchCount) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // Set previous POS from active previous module PF and active main PF
                //-----------------------------------------------------------------------------
                if (CimBooleanUtils.isTrue(findFlag)) {
                    //--- Get previous module pdid, module_no from active main PF
                    List<CimPFDefinitionListDO> processFlowDefinitionLists = cimJpaRepository
                            .query("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1" +
                                    " AND IDX_NO <= ?2 ORDER BY ROUTE_NO DESC", CimPFDefinitionListDO.class, mainPfObj,
                                    mainPfPdlistSeqno);
                    count = 0;
                    while (true) {
                        if (CimArrayUtils.isEmpty(processFlowDefinitionLists)
                                || count >= processFlowDefinitionLists.size()) break;
                        CimPFDefinitionListDO definitionList = processFlowDefinitionLists.get(count);
                        if (CimObjectUtils.isEmpty(definitionList)) break;
                        //--- Get active module PF information
                        String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                        String processFlowObj = getActiveProcessFlowObj(definitionList.getProcessDefinitionID(),
                                processDefinitionLevel);
                        //--- Set previous operation information on active module PF
                        List<CimPFPosListDO> processFlowPosLists = cimJpaRepository
                                .query("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 ORDER BY IDX_NO",
                                        CimPFPosListDO.class, processFlowObj);
                        //bug -1482 ORDER BY D_SEQNO DESC ,so the order is desc
                        processFlowPosLists = processFlowPosLists.stream()
                                .sorted(Comparator.comparing(CimPFPosListDO::getSequenceNumber)
                                        .reversed())
                                .collect(Collectors.toList());
                        count2 = 0;
                        while (opeCount < searchCount) {
                            if (CimArrayUtils.isEmpty(processFlowPosLists)
                                    || count2 >= processFlowPosLists.size()) break;
                            CimPFPosListDO posList = processFlowPosLists.get(count2);
                            Infos.OperationNameAttributes attributes = new Infos.OperationNameAttributes();
                            attributes.setSequenceNumber(-1);
                            attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                            attributes.setStageID(new ObjectIdentifier(definitionList.getStageID(),
                                    definitionList.getStageObj()));
                            Infos.ProcessRef processRef = new Infos.ProcessRef();
                            processRef.setModuleProcessFlow(processFlowObj);
                            processRef.setModuleNumber(definitionList.getModuleNO());
                            processRef.setProcessFlow(currentPfObj);
                            processRef.setMainProcessFlow(mainPfObj);
                            attributes.setOperationNumber(BaseStaticMethod
                                    .convertModuleOpeNoToOpeNo(definitionList.getModuleNO(),
                                    posList.getDKey()));
                            processRef.setModulePOS(posList.getProcessOperationSpecificationsObj());
                            attributes.setProcessRef(processRef);
                            opeCount = addOperationNameAttributes(objCommon, attributesList, attributes,
                                    searchRouteID, searchOperationNumber,
                                    opeCount, searchCount,
                                    lotScheduleObj, productID);
                            count2++;
                        }
                        count++;
                    }
                }
                if (opeCount == searchCount) {
                    return attributesList;
                }

                //---------------------------------------------------------------------------------------------------------------
                // (4-2-3) If the lot is on sub/rework route, set the backup operaion and the following operations from backup flow
                //---------------------------------------------------------------------------------------------------------------
                List<CimProcessFlowContextBackPODO> pfxBackPoLists = cimJpaRepository
                        .query("SELECT * FROM OMPRFCX_BCKPROPESEQ WHERE REFKEY = ?1",
                                CimProcessFlowContextBackPODO.class, lotProcessFlowContextObj);
                count = 0;
                while (opeCount < searchCount) {
                    if (CimArrayUtils.isEmpty(pfxBackPoLists) || count >= pfxBackPoLists.size()) break;
                    CimProcessFlowContextBackPODO pfxBackPoList = pfxBackPoLists.get(count);
                    //--- Keep backup operation information
                    Integer backupSeqNo = pfxBackPoList.getSequenceNumber();
                    // Get process information from FRPO
                    CimProcessOperationDO po = cimJpaRepository.queryOne("SELECT * FROM OMPROPE WHERE ID = ?1",
                            CimProcessOperationDO.class, pfxBackPoList.getProcessOperationObj());
                    Validations.check(CimObjectUtils.isEmpty(po),retCodeConfig.getNotFoundProcessOperation());
                    //--- Keep backup operation information
                    String backupOpeNo = po.getOperationNumber();
                    String backupModuleNo = po.getModuleNumber();
                    String backupModuleOpeNo = po.getModuleOperationNumber();
                    String backupPfObj = po.getProcessFlowObj();
                    String backupPosObj = po.getProcessOperationSpecificationObj();
                    String backupMainPfObj = po.getMainProcessFlowObj();
                    String backupModulePfObj = po.getModuleProcessFlowObj();
                    String backupModulePosObj = po.getModuleProcessOperationSpecificationsObj();

                    //--- Get backup main PF information
                    CimProcessFlowDO flow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE ID = ?1",
                            CimProcessFlowDO.class, backupMainPfObj);
                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    String backupMainPdid = flow.getMainProcessDefinitionID();
                    String backupMainPdobj = flow.getMainProcessDefinitionObj();
                    Boolean backupMainPfState = flow.getState();

                    //--- Get seq_no of backup module from main PF
                    CimPFDefinitionListDO definitionList = cimJpaRepository
                            .queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",
                                    CimPFDefinitionListDO.class, backupMainPfObj, backupModuleNo);
                    Validations.check(CimObjectUtils.isEmpty(definitionList),retCodeConfig.getNotFoundProcessFlow());
                    Integer backupMainPfPdlistSeqno = definitionList.getSequenceNumber();
                    String backupStageId = definitionList.getStageID();
                    String backupStageObj = definitionList.getStageObj();

                    //--- Get backup module PF information
                    flow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE ID = ?1",
                            CimProcessFlowDO.class,backupModulePfObj);
                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    String backupModulePdid = flow.getMainProcessDefinitionID();
                    Boolean backupModulePfState = flow.getState();
                    //--- Get seq_no of backup process from module PF
                    CimPFPosListDO pfPosList = cimJpaRepository
                            .queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",
                                    CimPFPosListDO.class, backupModulePfObj, backupModuleOpeNo);
                    Validations.check(CimObjectUtils.isEmpty(pfPosList),retCodeConfig.getNotFoundProcessFlow());
                    Integer backupModulePfPoslistSeqno = pfPosList.getSequenceNumber();

                    //-----------------------------------------------------------------------------
                    // (4-2-3-1) Get previous POS from backup/active module PF
                    //-----------------------------------------------------------------------------
                    if (CimBooleanUtils.isTrue(backupModulePfState)) {
                        // Module PF is active, set backup POS's seq_no from backup module PF
                        modulePfObj = backupModulePfObj;
                        modulePfPoslistSeqno = backupModulePfPoslistSeqno;
                        findFlag = true;
                    } else {
                        // Module PF is NOT active, search backup POS's seq_no from active module PF
                        findFlag = false;

                        //--- Get active module PF information
                        String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                        flow = cimJpaRepository
                                .queryOne("SELECT * FROM OMPRF WHERE PRP_ID = ?1" +
                                                " AND PRP_LEVEL = ?2 AND ACTIVE_FLAG = ?3",
                                CimProcessFlowDO.class, backupModulePdid, processDefinitionLevel, hvTrue);
                        Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                        activeModulePfObj = flow.getId();
                        i = 0;
                        while (opeCount < searchCount) {
                            // Search the backup operation by finding the backup module openo on active module PF
                            if (i <= 0) {
                                pfPosList = cimJpaRepository
                                        .queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1" +
                                                        " AND LINK_KEY = ?2",
                                        CimPFPosListDO.class,activeModulePfObj, backupModuleOpeNo);
                                if (!CimObjectUtils.isEmpty(pfPosList)) {
                                    //--- Set the backup operation seq_no on active module PF
                                    modulePfObj = activeModulePfObj;
                                    modulePfPoslistSeqno = pfPosList.getSequenceNumber();
                                    findFlag = true;
                                    break;
                                } else {
                                    //---------------------------------------------------------------------------
                                    // Set backup POS from inactive backup module PF
                                    //---------------------------------------------------------------------------
                                    Infos.OperationNameAttributes attributes = new Infos.OperationNameAttributes();
                                    attributes.setSequenceNumber(backupSeqNo);
                                    attributes.setRouteID(new ObjectIdentifier(backupMainPdid, backupMainPdobj));
                                    attributes.setOperationNumber(backupOpeNo);
                                    attributes.setStageID(new ObjectIdentifier(backupStageId, backupStageObj));
                                    Infos.ProcessRef processRef = new Infos.ProcessRef();
                                    processRef.setProcessFlow(backupPfObj);
                                    processRef.setProcessOperationSpecification(backupPosObj);
                                    processRef.setMainProcessFlow(backupMainPfObj);
                                    processRef.setModuleNumber(backupModuleNo);
                                    processRef.setModuleProcessFlow(backupModulePfObj);
                                    processRef.setModulePOS(backupModulePosObj);
                                    attributes.setProcessRef(processRef);
                                    opeCount = addOperationNameAttributes(objCommon, attributesList, attributes,
                                            searchRouteID, searchOperationNumber, opeCount, searchCount,
                                            lotScheduleObj, productID);
                                }
                            } else {
                                //--- Get the previous operation seq_no on backup module PF
                                backupModulePfPoslistSeqno--;
                                pfPosList = cimJpaRepository
                                        .queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1" +
                                                        " AND IDX_NO = ?2", CimPFPosListDO.class,backupModulePfObj,
                                                backupModulePfPoslistSeqno);
                                if (!CimObjectUtils.isEmpty(pfPosList)) {
                                    //--- Keep the previous operation information on backup module PF
                                    previousModuleOpeNo = pfPosList.getDKey();
                                    previousModulePosObj = pfPosList.getProcessOperationSpecificationsObj();

                                    //--- Search the corresponding previous module openo from active module PF
                                    pfPosList = cimJpaRepository
                                            .queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1" +
                                                            " AND LINK_KEY = ?2",
                                            CimPFPosListDO.class, activeModulePfObj, previousModuleOpeNo);
                                    if (!CimObjectUtils.isEmpty(pfPosList)) {
                                        modulePfObj = activeModulePfObj;
                                        modulePfPoslistSeqno = pfPosList.getSequenceNumber();
                                        findFlag = true;
                                        break;
                                    } else {
                                        //---------------------------------------------------------------------------
                                        // Set previous POS from inactive return module PF
                                        //---------------------------------------------------------------------------
                                        Infos.OperationNameAttributes attributes = new Infos.OperationNameAttributes();
                                        attributes.setSequenceNumber(backupSeqNo);
                                        attributes.setRouteID(new ObjectIdentifier(backupMainPdid, backupMainPdobj));
                                        attributes.setStageID(new ObjectIdentifier(backupStageId, backupStageObj));
                                        attributes.setOperationNumber(BaseStaticMethod
                                                .convertModuleOpeNoToOpeNo(backupModuleNo, previousModuleOpeNo));
                                        Infos.ProcessRef processRef = new Infos.ProcessRef();
                                        processRef.setProcessFlow(backupPfObj);
                                        processRef.setMainProcessFlow(backupMainPfObj);
                                        processRef.setModuleNumber(backupModuleNo);
                                        processRef.setModuleProcessFlow(backupModulePfObj);
                                        processRef.setModulePOS(previousModulePosObj);
                                        attributes.setProcessRef(processRef);
                                        opeCount = addOperationNameAttributes(objCommon, attributesList, attributes,
                                                searchRouteID, searchOperationNumber, opeCount,
                                                searchCount, lotScheduleObj, productID);
                                    }
                                } else break;
                            }// end of else if( i == 0 )
                            i++;
                        }// end of while
                    }//end of else if( backupModulePfState == TRUE )
                    if (opeCount == searchCount) {
                        return attributesList;
                    }
                    //-----------------------------------------------------------------------------
                    // Set previous POS from active backup module PF
                    //-----------------------------------------------------------------------------
                    if (CimBooleanUtils.isTrue(findFlag)) {
                        List<CimPFPosListDO> processFlowPosLists = cimJpaRepository
                                .query("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1" +
                                        " AND IDX_NO <= ?2 ORDER BY IDX_NO DESC", CimPFPosListDO.class, modulePfObj,
                                        modulePfPoslistSeqno);
                        count2 = 0;
                        while (opeCount < searchCount) {
                            if (CimArrayUtils.isEmpty(processFlowPosLists) || count2 >= processFlowPosLists.size()) break;
                            CimPFPosListDO posList = processFlowPosLists.get(count2);
                            //--- Set previous operation information on active backup module PF
                            Infos.OperationNameAttributes attributes = new Infos.OperationNameAttributes();
                            attributes.setSequenceNumber(backupSeqNo);
                            attributes.setRouteID(new ObjectIdentifier(backupMainPdid));
                            attributes.setStageID(new ObjectIdentifier(backupStageId, backupStageObj));
                            Infos.ProcessRef processRef = new Infos.ProcessRef();
                            processRef.setProcessFlow(backupPfObj);
                            processRef.setMainProcessFlow(backupMainPfObj);
                            processRef.setModuleNumber(backupModuleNo);
                            processRef.setModuleProcessFlow(modulePfObj);
                            attributes.setOperationNumber(BaseStaticMethod
                                    .convertModuleOpeNoToOpeNo(backupModuleNo, posList.getDKey()));
                            processRef.setModulePOS(posList.getProcessOperationSpecificationsObj());
                            attributes.setProcessRef(processRef);
                            opeCount = addOperationNameAttributes(objCommon, attributesList, attributes, searchRouteID,
                                    searchOperationNumber, opeCount, searchCount, lotScheduleObj, productID);
                            count2++;
                        }
                    }
                    if (opeCount == searchCount) {
                        return attributesList;
                    }

                    //-----------------------------------------------------------------------------
                    // (4-2-3-2) Get previous module PD from backup/active main PF
                    //-----------------------------------------------------------------------------
                    // If main PF is active, set previous module PD's seq_no from backup main PF
                    if (CimBooleanUtils.isTrue(backupMainPfState)) {
                        mainPfObj = backupMainPfObj;
                        mainPfPdlistSeqno = backupMainPfPdlistSeqno - 1;
                        findFlag = true;
                    }
                    // If main PF is NOT active, search previous module PD's seq_no from active main PF
                    else {
                        findFlag = false;
                        //--- Get active main PF information
                        String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE;
                        flow = cimJpaRepository
                                .queryOne("SELECT * FROM OMPRF WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2" +
                                        " AND ACTIVE_FLAG = ?3",CimProcessFlowDO.class,backupMainPdid,
                                        processDefinitionLevel, hvTrue);
                        Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                        activeMainPfObj = flow.getId();
                        i = 0;
                        while (opeCount < searchCount) {
                            // Search the previous module PD by finding the backup module number on active main PF
                            if (i == 0) {
                                definitionList = cimJpaRepository
                                        .queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1" +
                                                " AND LINK_KEY = ?2",CimPFDefinitionListDO.class,activeMainPfObj,
                                                backupModuleNo);
                                if (!CimObjectUtils.isEmpty(definitionList)) {
                                    //--- Set the next module PD's seq_no on active module PF
                                    mainPfObj = activeMainPfObj;
                                    mainPfPdlistSeqno = definitionList.getSequenceNumber() - 1;
                                    findFlag = true;
                                    break;
                                }
                            }
                            // Search the previous module PD by finding the previous module number on active main PF
                            else {
                                //--- Get the previous module PD's seq_no on backup main PF
                                backupMainPfPdlistSeqno--;
                                definitionList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_ROUTESEQ" +
                                        " WHERE REFKEY = ?1 AND IDX_NO = ?2",CimPFDefinitionListDO.class,backupMainPfObj,
                                        backupMainPfPdlistSeqno);
                                if (!CimObjectUtils.isEmpty(definitionList)) {
                                    //--- Keep the previous module information on backup main PF
                                    previousModulePdid = definitionList.getProcessDefinitionID();
                                    previousModuleNo = definitionList.getModuleNO();
                                    previousStageId = definitionList.getStageID();
                                    previousStageObj = definitionList.getStageObj();

                                    //--- Search the corresponding previous module number from the active main PF
                                    definitionList = cimJpaRepository
                                            .queryOne("SELECT * FROM OMPRF_ROUTESEQ" +
                                                    " WHERE REFKEY = ?1 AND LINK_KEY = ?2",CimPFDefinitionListDO.class,
                                                    activeMainPfObj, previousModuleNo);
                                    if (!CimObjectUtils.isEmpty(definitionList)) {
                                        mainPfObj = activeMainPfObj;
                                        mainPfPdlistSeqno = definitionList.getSequenceNumber();
                                        findFlag = true;
                                        break;
                                    } else {
                                        //---------------------------------------------------------------------------
                                        // Set previous POS from active previous module PF and backup(inactive) main PF
                                        //---------------------------------------------------------------------------
                                        //--- Get active module PF information
                                        processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                                        String previousModulePfObj = getActiveProcessFlowObj(previousModulePdid,
                                                processDefinitionLevel);

                                        //--- Set previous operation information on active module PF
                                        List<CimPFPosListDO> processFlowPosLists = cimJpaRepository
                                                .query("SELECT * FROM OMPRF_PRSSSEQ" +
                                                        " WHERE REFKEY = ?1 ORDER BY IDX_NO", CimPFPosListDO.class,
                                                        previousModulePfObj);
                                        count2 = 0;
                                        while (opeCount < searchCount) {
                                            if (CimArrayUtils.isEmpty(processFlowPosLists)
                                                    || count2 >= processFlowPosLists.size())
                                                break;
                                            CimPFPosListDO posList = processFlowPosLists.get(count2);
                                            //--- Set next operation information on active module PF
                                            Infos.OperationNameAttributes attributes = new Infos.OperationNameAttributes();
                                            attributes.setSequenceNumber(backupSeqNo);
                                            attributes.setRouteID(new ObjectIdentifier(backupMainPdid, backupMainPdobj));
                                            attributes.setStageID(new ObjectIdentifier(previousStageId, previousStageObj));
                                            Infos.ProcessRef processRef = new Infos.ProcessRef();
                                            processRef.setProcessFlow(backupPfObj);
                                            processRef.setMainProcessFlow(backupMainPfObj);
                                            processRef.setModuleNumber(previousModuleNo);
                                            processRef.setModuleProcessFlow(previousModulePfObj);
                                            processRef.setModuleProcessFlow(modulePfObj);
                                            attributes.setOperationNumber(BaseStaticMethod
                                                    .convertModuleOpeNoToOpeNo(previousModuleNo, posList.getDKey()));
                                            processRef.setModulePOS(posList.getProcessOperationSpecificationsObj());
                                            attributes.setProcessRef(processRef);
                                            opeCount = addOperationNameAttributes(objCommon, attributesList, attributes,
                                                    searchRouteID, searchOperationNumber, opeCount, searchCount,
                                                    lotScheduleObj, productID);
                                            count2++;
                                        }
                                    }
                                } else break;
                            }// end of else if( i == 0 )
                            i++;
                        }// end of while
                    }// end of else if( mainPFState == TRUE )
                    if (opeCount == searchCount) {
                        return attributesList;
                    }

                    //-----------------------------------------------------------------------------
                    // Set previous POS from active previous module PF and active main PF
                    //-----------------------------------------------------------------------------
                    if (CimBooleanUtils.isTrue(findFlag)) {
                        //--- Get previous module pdid, module_no from active main PF
                        List<CimPFDefinitionListDO> pfPdLists = cimJpaRepository
                                .query("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1" +
                                        " AND IDX_NO <= ?2 ORDER BY ROUTE_NO DESC", CimPFDefinitionListDO.class,
                                        mainPfObj, mainPfPdlistSeqno);
                        count2 = 0;
                        while (true) {
                            if (CimArrayUtils.isEmpty(pfPdLists) || count2 >= pfPdLists.size()) break;
                            CimPFDefinitionListDO flowDefinitionList = pfPdLists.get(count2);
                            if (CimObjectUtils.isEmpty(flowDefinitionList)) break;
                            //--- Get active module PF information
                            String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                            String processFlowObj = getActiveProcessFlowObj(flowDefinitionList.getProcessDefinitionID(),
                                    processDefinitionLevel);
                            //--- Set previous operation information on active module PF
                            List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query("SELECT * FROM" +
                                    " OMPRF_PRSSSEQ WHERE REFKEY = ?1 ORDER BY IDX_NO",
                                    CimPFPosListDO.class, processFlowObj);
                            count3 = 0;
                            while (opeCount < searchCount) {
                                if (CimArrayUtils.isEmpty(processFlowPosLists) || count3 >= processFlowPosLists.size())
                                    break;
                                CimPFPosListDO posList = processFlowPosLists.get(count3);
                                Infos.OperationNameAttributes attributes = new Infos.OperationNameAttributes();
                                attributes.setSequenceNumber(backupSeqNo);
                                attributes.setRouteID(new ObjectIdentifier(backupMainPdid, backupMainPdobj));
                                attributes.setStageID(new ObjectIdentifier(flowDefinitionList.getStageID(),
                                        flowDefinitionList.getStageObj()));
                                Infos.ProcessRef processRef = new Infos.ProcessRef();
                                processRef.setProcessFlow(backupPfObj);
                                processRef.setModuleProcessFlow(processFlowObj);
                                processRef.setModuleNumber(flowDefinitionList.getModuleNO());
                                processRef.setMainProcessFlow(mainPfObj);
                                attributes.setOperationNumber(BaseStaticMethod
                                        .convertModuleOpeNoToOpeNo(flowDefinitionList.getModuleNO(), posList.getDKey()));
                                processRef.setModulePOS(posList.getProcessOperationSpecificationsObj());
                                attributes.setProcessRef(processRef);
                                opeCount = addOperationNameAttributes(objCommon, attributesList, attributes,
                                        searchRouteID, searchOperationNumber, opeCount, searchCount, lotScheduleObj, productID);
                                count3++;
                            }
                            count2++;
                        }
                    }// end of if( findFlag == TRUE )
                    count++;
                }// end of while( CURSOR AF35_17 )
            }// end of (4-2)
        }
        return attributesList;
    }

    /**
     * description:
     * <p></p>
     * change history:
     * date             defect             person             comments
     * ---------------------------------------------------------------------------------------------------------------------
     *
     * @param strObjCommonIn
     * @param lotID
     * @return com.fa.cim.dto.RetCode<com.fa.cim.pojo.Infos.ProcessOriginalOperationGetOut>
     * @author Ho
     * @date 2018/12/5 14:06:47
     */
    @Override
    public Infos.ProcessOriginalOperationGetOut processOriginalOperationGet(Infos.ObjCommon strObjCommonIn, ObjectIdentifier lotID) {

        //Trace InParameters
        log.info("lot_id:{}",lotID.getValue());
        Infos.ProcessOriginalOperationGetOut strProcessOriginalOperationGetOut=new Infos.ProcessOriginalOperationGetOut();

        //Get Lot Object
        CimLot aLot = baseCoreFactory.getBO(CimLot.class, lotID);
        Validations.check(CimObjectUtils.isEmpty(aLot),retCodeConfig.getNotFoundLot());

        com.fa.cim.newcore.bo.pd.CimProcessFlowContext aPFX = aLot.getProcessFlowContext();

        Validations.check( aPFX==null ,retCodeConfig.getNotFoundPfx());

        List<ProcessDTO.BackupOperation> backupPOListPtr =  aPFX.allBackupOperations();


        int branchNestLevel = CimArrayUtils.getSize(backupPOListPtr);
        strProcessOriginalOperationGetOut.setBranchNestLevel(branchNestLevel*1L);

        if( branchNestLevel > 0 ) {
            log.info("branchNestLevel is {}",branchNestLevel);
            String tmpPDIDStr, tmpOpeNoStr;
            String tmpKey;
            int keyLen = 0;

            for( int level = 0; level < branchNestLevel; level++ ) {
                log.info("  Now collect info for level {}",level);
                ProcessDTO.BackupOperation backupPOPtr = backupPOListPtr.get(level);
                tmpPDIDStr = "";
                tmpOpeNoStr = "";
                keyLen = CimStringUtils.length( backupPOPtr.getReworkOutKey() );

                if ( keyLen > 0 ) {
                    log.info("This Lot is reworked on level {}",level);
                    tmpKey=backupPOPtr.getReworkOutKey();

                    int periodCnt = 0;
                    String refPos = null;

                    for ( int refPos_i = keyLen - 1; refPos_i >= 0 && periodCnt < 2; refPos_i-- ) {
                        log.info("    string from refPos {}",refPos_i);
                        refPos=tmpKey.substring(refPos_i);
                        if ( refPos.charAt(0) == '.' ) {
                            log.info("    Period found {}",periodCnt);
                            periodCnt++;
                        }
                    }

                    if ( periodCnt == 2 ) {
                        log.info("periodCnt == 2");
                        refPos=refPos.substring(1);

                        tmpPDIDStr  = tmpKey;
                        log.info("  string tmpKey = {}",tmpKey);
                        tmpOpeNoStr = refPos;
                        log.info("  string refPos = {}",refPos);
                    } else {
                        log.info("The original route and ope cannot be created from reworkOutKey.");
                        Validations.check(true,retCodeConfig.getNotFoundMainRoute());
                    }
                } else {
                    log.info("This Lot is branched on level {}",level);
                    com.fa.cim.newcore.bo.pd.CimProcessOperation aPO = baseCoreFactory.getBO(com.fa.cim.newcore.bo.pd.CimProcessOperation.class,backupPOPtr.getProcessOperation());
                    Validations.check( aPO==null ,retCodeConfig.getNotFoundProcessOperation());

                    com.fa.cim.newcore.bo.pd.CimProcessDefinition anOrigMainPD = aPO.getMainProcessDefinition();
                    Validations.check( anOrigMainPD==null ,retCodeConfig.getNotFoundMainRoute());

                    tmpPDIDStr = anOrigMainPD.getIdentifier();

                    tmpOpeNoStr = aPO.getOperationNumber();
                }

                if ( branchNestLevel - level == 1 ) {
                    log.info("branchNestLevel - level == 1");
                    strProcessOriginalOperationGetOut.setOriginalMainPDID(tmpPDIDStr);
                    strProcessOriginalOperationGetOut.setOriginalOpeNo(tmpOpeNoStr);
                } else if ( branchNestLevel - level == 2 ) {
                    log.info("branchNestLevel - level == 2");
                    strProcessOriginalOperationGetOut.setSubOrigMainPDID(tmpPDIDStr);
                    strProcessOriginalOperationGetOut.setSubOrigOpeNo(tmpOpeNoStr);
                } else if ( branchNestLevel - level == 3 ) {
                    log.info("branchNestLevel - level == 3");
                    strProcessOriginalOperationGetOut.setBranchMainPDID(tmpPDIDStr);
                }
            }
        }else {
            log.info("The lot is not branched/reworked.");
        }

        return strProcessOriginalOperationGetOut;
    }

    /**
     * description:
     * change history:
     * date             defect             person             comments
     * ---------------------------------------------------------------------------------------------------------------------
     * 2019/10/10       #####              Neko               Refactoring
     * @author Nyx
     * @since 2018/11/21 9:55
     * @param processDefinitionID
     * @param processDefinitionLevel -
     * @return java.lang.String
     */
    private String getActiveProcessFlowObj(String processDefinitionID, String processDefinitionLevel) {
        if(CimObjectUtils.isEmpty(processDefinitionID)){
            return BizConstant.EMPTY;
        }

        if (CimStringUtils.equals(BizConstant.SP_ACTIVE_VERSION, BaseStaticMethod.extractVersionFromID(processDefinitionID))) {
            List<Object> sqlResult = cimJpaRepository.queryOneColumn("SELECT ACTIVE_VER_ID FROM OMPRP WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2",  processDefinitionID, processDefinitionLevel);
            Validations.check(CimObjectUtils.isEmpty(sqlResult), retCodeConfig.getNotFoundProcessDefinition());
            processDefinitionID = CimObjectUtils.toString(sqlResult.get(0));
        }

        List<Object> sqlResult = cimJpaRepository.queryOneColumn("SELECT ID FROM OMPRF WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2 AND ACTIVE_FLAG = ?3", processDefinitionID, processDefinitionLevel, TRUE);
        Validations.check(CimObjectUtils.isEmpty(sqlResult), retCodeConfig.getNotFoundProcessFlow());
        return CimObjectUtils.toString(sqlResult.get(0));
    }

    /**
     * description:
     * change history:
     * date             defect             person             comments
     * ---------------------------------------------------------------------------------------------------------------------
     * @author Nyx
     * @date 2018/11/17 22:12
     * @param objCommon
     * @param attributesList
     * @param attributes
     * @param searchRouteID
     * @param searchOperationNumber
     * @param operationCount
     * @param searchCount
     * @param hFRLOTLOTSCHE_OBJ
     * @param productID -
     * @return int
     */
    private int addOperationNameAttributes(Infos.ObjCommon objCommon, List<Infos.OperationNameAttributes> attributesList, Infos.OperationNameAttributes attributes,
                                           ObjectIdentifier searchRouteID, String searchOperationNumber, int operationCount, int searchCount, String hFRLOTLOTSCHE_OBJ, ObjectIdentifier productID) {

        Infos.OperationNameAttributes out = processMethod.processOperationListForLotHelper(attributes, objCommon, hFRLOTLOTSCHE_OBJ, true, productID);
        attributesList.add(out);
        operationCount++;
        if (operationCount < searchCount && ObjectIdentifier.equalsWithValue(attributes.getRouteID(), searchRouteID) && attributes.getOperationNumber().equals(searchOperationNumber)) {
            operationCount = searchCount;
        }
        return operationCount;
    }

    @Override
    public ObjectIdentifier processActiveIDGet(Infos.ObjCommon objCommon, ObjectIdentifier pdID) {
        ObjectIdentifier activeID = null;
        String str_version_id = cimFrameWorkGlobals.extractVersionFromID(pdID.getValue());
        if (!CimStringUtils.equals(str_version_id, BizConstant.SP_ACTIVE_VERSION)){
            activeID = pdID;
        } else {
            /*--------------------*/
            /*   Get PD Object   */
            /*--------------------*/
            com.fa.cim.newcore.bo.pd.CimProcessDefinition aProcessDefinition = baseCoreFactory.getBO(com.fa.cim.newcore.bo.pd.CimProcessDefinition.class, pdID);
            Validations.check(aProcessDefinition == null, new OmCode(retCodeConfig.getNotFoundProcessDefinition(), pdID.getValue()));
            com.fa.cim.newcore.bo.pd.CimProcessDefinition anActiveObject = aProcessDefinition.getActiveObject();
            if (anActiveObject != null){
                activeID = new ObjectIdentifier(anActiveObject.getIdentifier(), anActiveObject.getPrimaryKey());
            } else {
                throw new ServiceException(new OmCode(retCodeConfig.getNotFoundProcessDefinition(), pdID.getValue()));
            }
        }
        return activeID;
    }

    @Override
    public void processOperationTempDataSet(Infos.ObjCommon objCommon, ObjectIdentifier controlJobID, List<Infos.StartCassette> startCassetteList) {
        //Store Temp Data into Control Job
        Validations.check(CimArrayUtils.isEmpty(startCassetteList),new ErrorCode("startCassetteList can not be empty!"));
        for (Infos.StartCassette startCassette : startCassetteList) {
            List<Infos.LotInCassette> lotInCassetteList = startCassette.getLotInCassetteList();
            if (CimArrayUtils.isEmpty(lotInCassetteList)) {
                continue;
            }
            for (Infos.LotInCassette lotInCassette : lotInCassetteList) {
                if (!CimBooleanUtils.isTrue(lotInCassette.getMoveInFlag())) {
                    continue;
                }
                //Get lot Object
                CimLot lot = baseCoreFactory.getBO(CimLot.class, lotInCassette.getLotID());
                //Get Process Operation Object
                //Current PO or Previous PO ?
                CimProcessOperation po;
                Boolean checkConditionForPOOut = lotMethod.lotCheckConditionForPO(objCommon, lotInCassette.getLotID());

                if (CimBooleanUtils.isTrue(checkConditionForPOOut)) {
                    //Get PO from Current Operation.
                    po = lot.getProcessOperation();
                } else {
                    po = lot.getPreviousProcessOperation();
                }
                Validations.check(po == null,retCodeConfig.getNotFoundProcessOperation());
                List<ProcessDTO.DataCollectionInfo> dcDataCollectionInfoList = null;
                boolean dataCollectionExistFlag = false;
                String correspondingOpeMode =  StandardProperties.OM_EDC_MULTI_CORRESPOND_FLAG.getValue();
                if (CimStringUtils.equals(correspondingOpeMode, BizConstant.VALUE_ONE)) {
                    ProcessDTO.ActualStartInformationForPO actualStartInfo = po.getActualStartInfo(true);
                    if (CimBooleanUtils.isTrue(actualStartInfo.getAssignedDataCollectionFlag())) {
                        dcDataCollectionInfoList = actualStartInfo.getAssignedDataCollections();
                        dataCollectionExistFlag = true;
                    }
                }
                List<Infos.DataCollectionInfo> dcDefList = lotInCassette.getStartRecipe().getDcDefList();
                if (CimArrayUtils.isEmpty(dcDefList)) {
                    continue;
                }
                List<ProcessDTO.DataCollectionInfo> dcDataList = new ArrayList<>();
                for (Infos.DataCollectionInfo dcDef : dcDefList) {
                    ProcessDTO.DataCollectionInfo dataCollectionInfo = new ProcessDTO.DataCollectionInfo();
                    dcDataList.add(dataCollectionInfo);
                    dataCollectionInfo.setDataCollectionDefinitionID(dcDef.getDataCollectionDefinitionID());
                    dataCollectionInfo.setDescription(dcDef.getDescription());
                    dataCollectionInfo.setDataCollectionType(dcDef.getDataCollectionType());
                    dataCollectionInfo.setCalculationRequiredFlag(dcDef.getCalculationRequiredFlag());
                    dataCollectionInfo.setSpecCheckRequiredFlag(dcDef.getSpecCheckRequiredFlag());
                    dataCollectionInfo.setDataCollectionSpecificationID(dcDef.getDataCollectionSpecificationID());
                    dataCollectionInfo.setDcSpecDescription(dcDef.getDcSpecDescription());
                    dataCollectionInfo.setPreviousDataCollectionDefinitionID(dcDef.getPreviousDataCollectionDefinitionID());
                    dataCollectionInfo.setPreviousOperationID(dcDef.getPreviousOperationID());
                    dataCollectionInfo.setPreviousOperationNumber(dcDef.getPreviousOperationNumber());

                    List<Infos.DataCollectionItemInfo> dcItemList = dcDef.getDcItems();
                    if (CimArrayUtils.isEmpty(dcItemList)) {
                        continue;
                    }
                    List<ProcessDTO.DataCollectionItemInfo> dcItemInfoList = new ArrayList<>();
                    dataCollectionInfo.setDcItems(dcItemInfoList);
                    for (Infos.DataCollectionItemInfo dcItem : dcItemList) {
                        ProcessDTO.DataCollectionItemInfo dataCollectionItemInfo = new ProcessDTO.DataCollectionItemInfo();
                        dcItemInfoList.add(dataCollectionItemInfo);
                        dataCollectionItemInfo.setDataCollectionItemName(dcItem.getDataCollectionItemName());
                        dataCollectionItemInfo.setDataCollectionMode(dcItem.getDataCollectionMode());
                        dataCollectionItemInfo.setDataCollectionUnit(dcItem.getDataCollectionUnit());
                        dataCollectionItemInfo.setDataType(dcItem.getDataType());
                        dataCollectionItemInfo.setItemType(dcItem.getItemType());
                        dataCollectionItemInfo.setMeasurementType(dcItem.getMeasurementType());
                        dataCollectionItemInfo.setWaferID(dcItem.getWaferID());
                        dataCollectionItemInfo.setWaferPosition(dcItem.getWaferPosition());
                        dataCollectionItemInfo.setSitePosition(dcItem.getSitePosition());
                        dataCollectionItemInfo.setHistoryRequiredFlag(dcItem.getHistoryRequiredFlag());
                        dataCollectionItemInfo.setCalculationType(dcItem.getCalculationType());
                        dataCollectionItemInfo.setCalculationExpression(dcItem.getCalculationExpression());
                        dataCollectionItemInfo.setDataValue(dcItem.getDataValue());
                        dataCollectionItemInfo.setTargetValue(dcItem.getTargetValue());
                        dataCollectionItemInfo.setSpecCheckResult(dcItem.getSpecCheckResult());

                        dataCollectionItemInfo.setActionCodes(dcItem.getActionCodes());
                    }
                    if (dataCollectionExistFlag) {
                        if (CimArrayUtils.isNotEmpty(dcDataCollectionInfoList)) {
                            dcDataCollectionInfoList
                                    .stream()
                                    .filter(dcInfo -> ObjectIdentifier.equalsWithValue(
                                            dataCollectionInfo.getDataCollectionSpecificationID(),
                                            dcInfo.getDataCollectionSpecificationID())
                                    )
                                    .forEach(dcInfo -> dataCollectionInfo.setDcSpecs(dcInfo.getDcSpecs()));
                        }
                    } else {
                        List<Infos.DataCollectionSpecInfo> dcSpecList = dcDef.getDcSpecs();
                        if (CimArrayUtils.isEmpty(dcSpecList)) {
                            continue;
                        }
                        List<ProcessDTO.DataCollectionSpecInfo> dcSpecInfoList = new ArrayList<>();
                        dataCollectionInfo.setDcSpecs(dcSpecInfoList);
                        dcSpecList.forEach(dcSpec -> {
                            ProcessDTO.DataCollectionSpecInfo dcSpecInfo = new ProcessDTO.DataCollectionSpecInfo();
                            dcSpecInfoList.add(dcSpecInfo);
                            dcSpecInfo.setDataItemName(dcSpec.getDataItemName());
                            dcSpecInfo.setScreenLimitUpperRequired(dcSpec.getScreenLimitUpperRequired());
                            dcSpecInfo.setScreenLimitUpper(dcSpec.getScreenLimitUpper());
                            dcSpecInfo.setActionCodesUscrn(dcSpec.getActionCodesUscrn());
                            dcSpecInfo.setScreenLimitLowerRequired(dcSpec.getScreenLimitLowerRequired());
                            dcSpecInfo.setScreenLimitLower(dcSpec.getScreenLimitLower());
                            dcSpecInfo.setActionCodesLscrn(dcSpec.getActionCodesLscrn());
                            dcSpecInfo.setSpecLimitUpperRequired(dcSpec.getSpecLimitUpperRequired());
                            dcSpecInfo.setSpecLimitUpper(dcSpec.getSpecLimitUpper());
                            dcSpecInfo.setActionCodesUsl(dcSpec.getActionCodesUsl());
                            dcSpecInfo.setSpecLimitLowerRequired(dcSpec.getSpecLimitLowerRequired());
                            dcSpecInfo.setSpecLimitLower(dcSpec.getSpecLimitLower());
                            dcSpecInfo.setActionCodesLsl(dcSpec.getActionCodesLsl());
                            dcSpecInfo.setControlLimitUpperRequired(dcSpec.getControlLimitUpperRequired());
                            dcSpecInfo.setControlLimitUpper(dcSpec.getControlLimitUpper());
                            dcSpecInfo.setActionCodesUcl(dcSpec.getActionCodesUcl());
                            dcSpecInfo.setControlLimitLowerRequired(dcSpec.getControlLimitLowerRequired());
                            dcSpecInfo.setControlLimitLower(dcSpec.getControlLimitLower());
                            dcSpecInfo.setActionCodesLcl(dcSpec.getActionCodesLcl());
                            dcSpecInfo.setTarget(dcSpec.getTarget());
                            dcSpecInfo.setTag(dcSpec.getTag());
                            dcSpecInfo.setDcSpecGroup(BizConstant.EMPTY);
                        });
                    }
                }
                po.setDataCollectionInfo(dcDataList);
            }
        }
    }

    @Override
    public void processOperationTempDataEDCItemsSet(Infos.ObjCommon objCommon,
                                                    ObjectIdentifier controlJobID,
                                                    List<Infos.StartCassette> startCassetteList) {
        //Store Temp Data into Control Job
        Validations.check(CimArrayUtils.isEmpty(startCassetteList), new ErrorCode("startCassetteList can not be empty!"));
        startCassetteList.stream()
                .flatMap(startCassette -> startCassette.getLotInCassetteList().stream())
                .filter(Infos.LotInCassette::getMoveInFlag)
                .forEach(lotInCassette -> {
                    //Get lot Object
                    CimLot lot = baseCoreFactory.getBO(CimLot.class, lotInCassette.getLotID());
                    //Get Process Operation Object
                    //Current PO or Previous PO ?
                    CimProcessOperation po;
                    Boolean checkConditionForPOOut = lotMethod.lotCheckConditionForPO(objCommon, lotInCassette.getLotID());
                    if (CimBooleanUtils.isTrue(checkConditionForPOOut)) {
                        //Get PO from Current Operation.
                        po = lot.getProcessOperation();
                    } else {
                        po = lot.getPreviousProcessOperation();
                    }
                    Validations.check(po == null, retCodeConfig.getNotFoundProcessOperation());
                    List<Infos.DataCollectionInfo> dcDefList = lotInCassette.getStartRecipe().getDcDefList();
                    if (CimArrayUtils.isNotEmpty(dcDefList)) {
                        List<ProcessDTO.DataCollectionInfo> dcDataList = new ArrayList<>();
                        for (Infos.DataCollectionInfo dcDef : dcDefList) {
                            ProcessDTO.DataCollectionInfo dataCollectionInfo = new ProcessDTO.DataCollectionInfo();
                            dcDataList.add(dataCollectionInfo);
                            dataCollectionInfo.setDataCollectionDefinitionID(dcDef.getDataCollectionDefinitionID());
                            dataCollectionInfo.setDescription(dcDef.getDescription());
                            dataCollectionInfo.setDataCollectionType(dcDef.getDataCollectionType());
                            dataCollectionInfo.setCalculationRequiredFlag(dcDef.getCalculationRequiredFlag());
                            dataCollectionInfo.setSpecCheckRequiredFlag(dcDef.getSpecCheckRequiredFlag());
                            dataCollectionInfo.setDataCollectionSpecificationID(dcDef.getDataCollectionSpecificationID());
                            dataCollectionInfo.setDcSpecDescription(dcDef.getDcSpecDescription());
                            dataCollectionInfo.setPreviousDataCollectionDefinitionID(dcDef.getPreviousDataCollectionDefinitionID());
                            dataCollectionInfo.setPreviousOperationID(dcDef.getPreviousOperationID());
                            dataCollectionInfo.setPreviousOperationNumber(dcDef.getPreviousOperationNumber());
                            dataCollectionInfo.setEdcSettingType(dcDef.getEdcSettingType());

                            // items
                            final List<ProcessDTO.DataCollectionItemInfo> itemInfoList = Optional.ofNullable(dcDef.getDcItems())
                                    .map(dcItemList -> dcItemList.parallelStream()
                                            .map(Infos.DataCollectionItemInfo::convert)
                                            .collect(Collectors.toList())
                                    )
                                    .orElseGet(Collections::emptyList);
                            dataCollectionInfo.setDcItems(itemInfoList);
                        }
                        po.setEDCItemsInfo(dcDataList);
                    }
                });
    }

    @Override
    public List<Infos.StartCassette> processDataCollectionSpecificationSet(Infos.ObjCommon objCommon,
                                                                           List<Infos.StartCassette> startCassetteList) {
        String fpcAdoptValue = StandardProperties.OM_DOC_ENABLE_FLAG.getValue();
        boolean fpcAdoptFlag = CimStringUtils.equals(fpcAdoptValue, BizConstant.VALUE_ONE);

        if (CimArrayUtils.isEmpty(startCassetteList)) {
            return startCassetteList;
        }
        for (Infos.StartCassette startCassette : startCassetteList) {
            List<Infos.LotInCassette> lotInCassetteList = startCassette.getLotInCassetteList();
            for (Infos.LotInCassette lotInCassette : lotInCassetteList) {
                // Omit Not-Started lot
                if (CimBooleanUtils.isFalse(lotInCassette.getMoveInFlag())) {
                    continue;
                }
                //Get lot Object
                CimLot lot = baseCoreFactory.getBO(CimLot.class, lotInCassette.getLotID());
                Validations.check(lot == null, new OmCode(retCodeConfig.getNotFoundLot(),
                        ObjectIdentifier.fetchValue(lotInCassette.getLotID())));

                Boolean checkConditionForPOOut = lotMethod.lotCheckConditionForPO(objCommon, lotInCassette.getLotID());
                //Get Process Operation Object
                //Current PO or Previous PO ?
                CimProcessOperation po = CimBooleanUtils.isTrue(checkConditionForPOOut) ?
                        lot.getProcessOperation() : lot.getPreviousProcessOperation();
                Validations.check(po == null, new OmCode(retCodeConfig.getNotFoundProcessOperation(), ""));

                ProcessDTO.ActualStartInformationForPO actualStartInfo = po.getActualStartInfo(true);
                if (CimBooleanUtils.isTrue(actualStartInfo.getAssignedDataCollectionFlag())) {
                    // Gets assigned EDC information
                    List<ProcessDTO.DataCollectionInfo> dcDataList = actualStartInfo.getAssignedDataCollections();

                    boolean fpcDCSpecAvailable = fpcAdoptFlag
                            && CimArrayUtils.isNotEmpty(dcDataList)
                            && CimArrayUtils.isNotEmpty(dcDataList.get(0).getDcSpecs());
                    List<Infos.DataCollectionInfo> dcDefListFormInput = lotInCassette.getStartRecipe().getDcDefList();
                    if (CimArrayUtils.isEmpty(dcDefListFormInput)) {
                        continue;
                    }

                    final int edcPlanSize = dcDefListFormInput.size();
                    for (int dcDEFindex = 0; dcDEFindex < edcPlanSize; dcDEFindex++) {
                        Infos.DataCollectionInfo dcDefFormInput = dcDefListFormInput.get(dcDEFindex);
                        ProcessDTO.DataCollectionInfo dcDefInfoFormDB = dcDataList.get(dcDEFindex);
                        if (dcDefInfoFormDB == null) {
                            continue;
                        }
                        if (CimArrayUtils.isEmpty(dcDefFormInput.getDcSpecs())) {
                            dcDefFormInput.setDcSpecs(new ArrayList<>());
                        }
                        List<Infos.DataCollectionSpecInfo> dcSpecListFormInput = dcDefFormInput.getDcSpecs();
                        if (dcDEFindex == 0 && fpcDCSpecAvailable) {
                            final int dcSpecSize = dcDefInfoFormDB.getDcSpecs().size();
                            for (int dcSpecIndex = 0; dcSpecIndex < dcSpecSize; dcSpecIndex++) {
                                Infos.DataCollectionSpecInfo dcSpec = new Infos.DataCollectionSpecInfo();
                                if (CimArrayUtils.getSize(dcSpecListFormInput) > dcSpecIndex) {
                                    dcSpec = dcSpecListFormInput.get(dcSpecIndex);
                                } else {
                                    dcSpecListFormInput.add(dcSpec);
                                }
                                ProcessDTO.DataCollectionSpecInfo dcSpecInfoFormDB = dcDefInfoFormDB.getDcSpecs().get(dcSpecIndex);
                                if (dcSpecInfoFormDB == null) {
                                    continue;
                                }
                                dcSpec.setDataItemName(dcSpecInfoFormDB.getDataItemName());
                                dcSpec.setScreenLimitUpperRequired(dcSpecInfoFormDB.getScreenLimitUpperRequired());
                                dcSpec.setScreenLimitUpper(dcSpecInfoFormDB.getScreenLimitUpper());
                                dcSpec.setActionCodesUscrn(dcSpecInfoFormDB.getActionCodesUscrn());
                                dcSpec.setScreenLimitLowerRequired(dcSpecInfoFormDB.getScreenLimitLowerRequired());
                                dcSpec.setScreenLimitLower(dcSpecInfoFormDB.getScreenLimitLower());
                                dcSpec.setActionCodesLscrn(dcSpecInfoFormDB.getActionCodesLscrn());
                                dcSpec.setSpecLimitUpperRequired(dcSpecInfoFormDB.getSpecLimitUpperRequired());
                                dcSpec.setSpecLimitUpper(dcSpecInfoFormDB.getSpecLimitUpper());
                                dcSpec.setActionCodesUsl(dcSpecInfoFormDB.getActionCodesUsl());
                                dcSpec.setSpecLimitLowerRequired(dcSpecInfoFormDB.getSpecLimitLowerRequired());
                                dcSpec.setSpecLimitLower(dcSpecInfoFormDB.getSpecLimitLower());
                                dcSpec.setActionCodesLsl(dcSpecInfoFormDB.getActionCodesLsl());
                                dcSpec.setControlLimitUpperRequired(dcSpecInfoFormDB.getControlLimitUpperRequired());
                                dcSpec.setControlLimitUpper(dcSpecInfoFormDB.getControlLimitUpper());
                                dcSpec.setActionCodesUcl(dcSpecInfoFormDB.getActionCodesUcl());
                                dcSpec.setControlLimitLowerRequired(dcSpecInfoFormDB.getControlLimitLowerRequired());
                                dcSpec.setControlLimitLower(dcSpecInfoFormDB.getControlLimitLower());
                                dcSpec.setActionCodesLcl(dcSpecInfoFormDB.getActionCodesLcl());
                                dcSpec.setTarget(dcSpecInfoFormDB.getTarget());
                                dcSpec.setTag(dcSpecInfoFormDB.getTag());
                            }
                            continue;
                        }
                        if (ObjectIdentifier.isNotEmptyWithValue(dcDefInfoFormDB.getDataCollectionSpecificationID())) {
                            //Get DCSpec Object
                            CimDataCollectionSpecification dcSpec = baseCoreFactory.getBO(CimDataCollectionSpecification.class,
                                    dcDefInfoFormDB.getDataCollectionSpecificationID());
                            Validations.check(dcSpec == null, retCodeConfig.getNotFoundDcspec());
                            List<EDCDTO.DCItemSpecification> dcItemSpecsFormConfigData = dcSpec.allDCSpecs();

                            //Set detailed information of DCSpec for PO
                            if (CimArrayUtils.isEmpty(dcDefInfoFormDB.getDcSpecs())) {
                                dcDefInfoFormDB.setDcSpecs(new ArrayList<>());
                            }

                            final int dcItemSpecSize = CimArrayUtils.getSize(dcItemSpecsFormConfigData);
                            for (int dcItemSpecIndex = 0; dcItemSpecIndex < dcItemSpecSize; dcItemSpecIndex++) {
                                EDCDTO.DCItemSpecification dcItemSpecFormConfig = dcItemSpecsFormConfigData.get(dcItemSpecIndex);
                                ProcessDTO.DataCollectionSpecInfo dcSpecInfo = new ProcessDTO.DataCollectionSpecInfo();
                                if (CimArrayUtils.getSize(dcDefInfoFormDB.getDcSpecs()) > dcItemSpecIndex) {
                                    dcSpecInfo = dcDefInfoFormDB.getDcSpecs().get(dcItemSpecIndex);
                                } else {
                                    dcDefInfoFormDB.getDcSpecs().add(dcSpecInfo);
                                }
                                dcSpecInfo.setDataItemName(dcItemSpecFormConfig.getDataItemName());
                                dcSpecInfo.setScreenLimitUpperRequired(dcItemSpecFormConfig.getScreenLimitUpperRequired());
                                dcSpecInfo.setScreenLimitUpper(dcItemSpecFormConfig.getScreenLimitUpper());
                                dcSpecInfo.setActionCodesUscrn(dcItemSpecFormConfig.getActionCodesUscrn());
                                dcSpecInfo.setScreenLimitLowerRequired(dcItemSpecFormConfig.getScreenLimitLowerRequired());
                                dcSpecInfo.setScreenLimitLower(dcItemSpecFormConfig.getScreenLimitLower());
                                dcSpecInfo.setActionCodesLscrn(dcItemSpecFormConfig.getActionCodesLscrn());
                                dcSpecInfo.setSpecLimitUpperRequired(dcItemSpecFormConfig.getSpecLimitUpperRequired());
                                dcSpecInfo.setSpecLimitUpper(dcItemSpecFormConfig.getSpecLimitUpper());
                                dcSpecInfo.setActionCodesUsl(dcItemSpecFormConfig.getActionCodesUsl());
                                dcSpecInfo.setSpecLimitLowerRequired(dcItemSpecFormConfig.getSpecLimitLowerRequired());
                                dcSpecInfo.setSpecLimitLower(dcItemSpecFormConfig.getSpecLimitLower());
                                dcSpecInfo.setActionCodesLsl(dcItemSpecFormConfig.getActionCodesLsl());
                                dcSpecInfo.setControlLimitUpperRequired(dcItemSpecFormConfig.getControlLimitUpperRequired());
                                dcSpecInfo.setControlLimitUpper(dcItemSpecFormConfig.getControlLimitUpper());
                                dcSpecInfo.setActionCodesUcl(dcItemSpecFormConfig.getActionCodesUcl());
                                dcSpecInfo.setControlLimitLowerRequired(dcItemSpecFormConfig.getControlLimitLowerRequired());
                                dcSpecInfo.setControlLimitLower(dcItemSpecFormConfig.getControlLimitLower());
                                dcSpecInfo.setActionCodesLcl(dcItemSpecFormConfig.getActionCodesLcl());
                                dcSpecInfo.setTarget(dcItemSpecFormConfig.getTarget());
                                dcSpecInfo.setTag(dcItemSpecFormConfig.getTag());
                                dcSpecInfo.setDcSpecGroup(dcItemSpecFormConfig.getDcSpecGroup());
                            }
                            int startPos = 0;
                            if (fpcDCSpecAvailable) {
                                startPos = 1;
                            }
                            for (int m = startPos; m < edcPlanSize; m++) {
                                Infos.DataCollectionInfo outDCDef = dcDefListFormInput.get(m);
                                if (ObjectIdentifier.equalsWithValue(outDCDef.getDataCollectionSpecificationID(),
                                        dcDefInfoFormDB.getDataCollectionSpecificationID())) {

                                    //Set detailed information of DCSpec for Output
                                    outDCDef.setDcSpecs(new ArrayList<>());
                                    final int dcSpecsSizeFomConfig = dcItemSpecsFormConfigData.size();
                                    for (int l = 0; l < dcSpecsSizeFomConfig; l++) {
                                        Infos.DataCollectionSpecInfo dcSpecForOut = new Infos.DataCollectionSpecInfo();

                                        if (CimArrayUtils.getSize(outDCDef.getDcSpecs()) > l) {
                                            dcSpecForOut = outDCDef.getDcSpecs().get(l);
                                        } else {
                                            outDCDef.getDcSpecs().add(dcSpecForOut);
                                        }
                                        EDCDTO.DCItemSpecification dcItemSpec = dcItemSpecsFormConfigData.get(l);
                                        dcSpecForOut.setDataItemName(dcItemSpec.getDataItemName());
                                        dcSpecForOut.setScreenLimitUpperRequired(dcItemSpec.getScreenLimitUpperRequired());
                                        dcSpecForOut.setScreenLimitUpper(dcItemSpec.getScreenLimitUpper());
                                        dcSpecForOut.setActionCodesUscrn(dcItemSpec.getActionCodesUscrn());
                                        dcSpecForOut.setScreenLimitLowerRequired(dcItemSpec.getScreenLimitLowerRequired());
                                        dcSpecForOut.setScreenLimitLower(dcItemSpec.getScreenLimitLower());
                                        dcSpecForOut.setActionCodesLscrn(dcItemSpec.getActionCodesLscrn());
                                        dcSpecForOut.setSpecLimitUpperRequired(dcItemSpec.getSpecLimitUpperRequired());
                                        dcSpecForOut.setSpecLimitUpper(dcItemSpec.getSpecLimitUpper());
                                        dcSpecForOut.setActionCodesUsl(dcItemSpec.getActionCodesUsl());
                                        dcSpecForOut.setSpecLimitLowerRequired(dcItemSpec.getSpecLimitLowerRequired());
                                        dcSpecForOut.setSpecLimitLower(dcItemSpec.getSpecLimitLower());
                                        dcSpecForOut.setActionCodesLsl(dcItemSpec.getActionCodesLsl());
                                        dcSpecForOut.setControlLimitUpperRequired(dcItemSpec.getControlLimitUpperRequired());
                                        dcSpecForOut.setControlLimitUpper(dcItemSpec.getControlLimitUpper());
                                        dcSpecForOut.setActionCodesUcl(dcItemSpec.getActionCodesUcl());
                                        dcSpecForOut.setControlLimitLowerRequired(dcItemSpec.getControlLimitLowerRequired());
                                        dcSpecForOut.setControlLimitLower(dcItemSpec.getControlLimitLower());
                                        dcSpecForOut.setActionCodesLcl(dcItemSpec.getActionCodesLcl());
                                        dcSpecForOut.setTarget(dcItemSpec.getTarget());
                                        dcSpecForOut.setTag(dcItemSpec.getTag());
                                    }
                                }
                            }
                        }
                    }
                    /*po.setDataCollectionInfo(dcDataList);*/
                    // zqi: just only save EDC specification data to OMPROPE_EDC_SPECS.
                    po.setEDCSpecsInfo(dcDataList);
                }
            }
        }
        return startCassetteList;
    }

    @Override
    public Outputs.ObjProcessCheckForDynamicRouteOut processCheckForDynamicRoute(Infos.ObjCommon objCommon, ObjectIdentifier subRouteID) {
        Outputs.ObjProcessCheckForDynamicRouteOut out = new Outputs.ObjProcessCheckForDynamicRouteOut();

        //【step1】get process definition object
        log.debug("【step1】get process definition object");
        com.fa.cim.newcore.bo.pd.CimProcessDefinition mainProcessDefinition = baseCoreFactory.getBO(com.fa.cim.newcore.bo.pd.CimProcessDefinition.class, subRouteID);
        if (null == mainProcessDefinition) {
            log.error("not found (main) process definition, the subRouteID:%s", subRouteID);
            Validations.check(true,retCodeConfig.getNotFoundProcessDefinition());
        }
        //【bear】yes. it's alway be setted 'false' in source-code.
        out.setActiveVersionFlag(false);

        out.setDynamicRouteFlag(mainProcessDefinition.isDynamicRouteFlagOn());
        out.setProcessDefinitionType(mainProcessDefinition.getProcessDefinitionType());
        return out;
    }

    @Override
    public Outputs.ObjProcessGetReturnOperationOut processGetReturnOperation(Infos.ObjCommon objCommon, ObjectIdentifier lotID, ObjectIdentifier subRouteID) {
        Outputs.ObjProcessGetReturnOperationOut out = new Outputs.ObjProcessGetReturnOperationOut();

        com.fa.cim.newcore.bo.product.CimLot lot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotID);
        if (null == lot) {
            log.error("not found lot, the lotID:{}", lotID);
            Validations.check(true,retCodeConfig.getNotFoundLot());
        }

        //【step1】get sub route information
        log.debug("【step1】get sub route information");
        com.fa.cim.newcore.bo.pd.CimProcessDefinition processDefinition = baseCoreFactory.getBO(com.fa.cim.newcore.bo.pd.CimProcessDefinition.class, subRouteID);
        if (null == processDefinition) {
            log.error("not found process definition,the subRouteID:{}", subRouteID);
            Validations.check(true,retCodeConfig.getNotFoundProcessDefinition());
        }

        //【step2】get current process definition
        log.debug("【step2】get current process definition");
        com.fa.cim.newcore.bo.pd.CimProcessOperation processOperation = lot.getProcessOperation();
        if (null == processOperation) {
            log.error("not found operation for lot, the lotID:{}", lotID);
            Validations.check(true,retCodeConfig.getNotFoundOperation());
        }

        //【step3】find sub route information from previous process if sub route is rework route
        log.debug("【step3】find sub route information from previous process if sub route is rework route");
        String routeType = processDefinition.getProcessDefinitionType();
        out.setProcessDefinitionType(routeType);
        if (CimStringUtils.equals(BizConstant.SP_MAINPDTYPE_REWORK, routeType)) {
            log.debug("SP_MAINPDTYPE_REWORK == routeType, subRouteID = {}", subRouteID.getValue());
            com.fa.cim.newcore.bo.pd.CimProcessFlow processFlow = processOperation.getProcessFlow();
            if (null == processFlow) {
                log.error("not found process flow for process operation. the process operation:{}", processOperation);
                Validations.check(true,retCodeConfig.getNotFoundProcessFlow());
            }
            //posProcessFlowConnection* flowConnection = aProcessOperation->findReworkProcessFlowConnectionOld(subRouteID.identifier);
            ProcessDTO.ProcessFlowConnection processFlowConnection = processOperation.findReworkProcessFlowConnection(subRouteID.getValue());
            Validations.check(null == processFlowConnection || CimStringUtils.isEmpty(processFlowConnection.getReturnOperationNumber()),
                    out, retCodeConfig.getNotFoundSubRoute(), subRouteID, lotID);
            out.setOperationNumber(processFlowConnection.getReturnOperationNumber());
        } else {
            //【step4】find sub route information from current process if sub route is branch route
            log.debug("【step4】find sub route information from current process if sub route is branch route");
            ProcessDTO.ProcessFlowConnection processFlowConnection = processOperation.findProcessFlowConnection(subRouteID.getValue());
            Validations.check(null == processFlowConnection || CimStringUtils.isEmpty(processFlowConnection.getReturnOperationNumber()),
                    out, retCodeConfig.getNotFoundSubRoute(), subRouteID, lotID);
            out.setOperationNumber(processFlowConnection.getReturnOperationNumber());
        }
        return out;
    }

    @Override
    public void processCheckMerge(Infos.ObjCommon objCommon, ObjectIdentifier parentLotID, ObjectIdentifier childLotID) {

        com.fa.cim.newcore.bo.product.CimLot childLot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, childLotID);
        com.fa.cim.newcore.bo.product.CimLot parentLot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, parentLotID);

        //---------------------------
        // Get productID by ParentLot
        //---------------------------
        Outputs.ObjLotProductIDGetOut lotProductIDResult = lotMethod.lotProductIDGet(objCommon, parentLotID);
        String parentProductID = ObjectIdentifier.fetchValue(lotProductIDResult.getProductID());
        //--------------------------
        // Get productID by ChildLot
        //--------------------------
        Outputs.ObjLotProductIDGetOut lotProductIDResult1 = lotMethod.lotProductIDGet(objCommon, childLotID);
        String childProductID = ObjectIdentifier.fetchValue(lotProductIDResult1.getProductID());
        Validations.check(!CimStringUtils.equals(parentProductID, childProductID),retCodeConfig.getCannotMergeDifferentProduct()
                ,parentProductID, ObjectIdentifier.fetchValue(parentLotID),childProductID, ObjectIdentifier.fetchValue(childLotID));

        //--- Get current process operation
        com.fa.cim.newcore.bo.pd.CimProcessOperation aParentPO = parentLot.getProcessOperation();
        com.fa.cim.newcore.bo.pd.CimProcessOperation aChildPO = childLot.getProcessOperation();
        Validations.check(null == aParentPO || null == aChildPO,retCodeConfig.getNotFoundProcessOperation());

        Boolean aEquivalenFlag = aChildPO.isEquivalentTo(aParentPO);

        com.fa.cim.newcore.bo.pd.CimProcessFlowContext aParentPFX = null;
        com.fa.cim.newcore.bo.pd.CimProcessFlowContext aChildPFX = null;
        if (CimBooleanUtils.isFalse(aEquivalenFlag)) {
            aParentPFX = parentLot.getProcessFlowContext();
            aChildPFX = childLot.getProcessFlowContext();
            Validations.check(null == aParentPFX || null == aChildPFX,retCodeConfig.getNotFoundPfx());

            com.fa.cim.newcore.bo.pd.CimProcessOperation aParentPrePO = aParentPFX.getPreviousProcessOperation();
            com.fa.cim.newcore.bo.pd.CimProcessOperation aChildPrePO = aChildPFX.getPreviousProcessOperation();
            Boolean isEqualBool = false;
            if (null == aParentPrePO && null == aChildPrePO) {
                isEqualBool = true;
            } else if (null == aParentPrePO || null == aChildPrePO) {
                isEqualBool = false;
            } else {
                isEqualBool = aParentPrePO.getPrimaryKey().equals(aChildPrePO.getPrimaryKey());
            }

            //--- Check previous process operation
            if (CimBooleanUtils.isTrue(isEqualBool)){
                Validations.check(isEqualBool,retCodeConfig.getSamePreOperation());
            } else {
                Validations.check(retCodeConfig.getNotSameOperation());
            }
        }
    }

    @Override
    public List<Infos.ProcessDefinitionIndexList> processDefinitionIDList(Infos.ObjCommon objCommon, Params.RouteListInqParams params) {
        List<Infos.ProcessDefinitionIndexList> processDefinitionIndexListList = new ArrayList<>();
        String pdID = params.getPdID();
        String pdType = params.getPdType();
        String pdLevel = params.getPdLevel();
        List<Object> paramsList = new ArrayList<>();
        String sql = "SELECT PRP_ID, ID, DESCRIPTION, MFG_LAYER, OWNER_ID, " +
                "START_BANK_ID, START_BANK_RKEY, END_BANK_ID, END_BANK_RKEY FROM OMPRP " +
                " WHERE PRP_ID LIKE ? ";
        paramsList.add(pdID + "%");
        if (!CimStringUtils.isEmpty(pdType)){
            sql = sql + " AND PRP_TYPE = ? ";
            paramsList.add(pdType);
        }
        if (!CimStringUtils.isEmpty(pdLevel)){
            sql = sql + " AND PRP_LEVEL = ?";
            paramsList.add(pdLevel);
        } else {
            sql = sql + " AND PRP_LEVEL = ?";
            paramsList.add(BizConstant.SP_PD_FLOWLEVEL_MODULE);
        }
        sql = sql + " AND VERSION_ID <>?";
        paramsList.add(BizConstant.SP_ACTIVE_VERSION);
        List<CimProcessDefinitionDO> cimProcessDefinitionDOList = cimJpaRepository.query(sql, CimProcessDefinitionDO.class, paramsList.toArray());
        if (CimArrayUtils.isEmpty(cimProcessDefinitionDOList)){
            for (CimProcessDefinitionDO cimProcessDefinitionDO : cimProcessDefinitionDOList){
                Infos.ProcessDefinitionIndexList processDefinitionIndexList = new Infos.ProcessDefinitionIndexList();
                processDefinitionIndexListList.add(processDefinitionIndexList);
                processDefinitionIndexList.setProcessDefinitionID(new ObjectIdentifier(cimProcessDefinitionDO.getProcessDefinitionID(), cimProcessDefinitionDO.getId()));
                processDefinitionIndexList.setDescription(cimProcessDefinitionDO.getDescription());
                processDefinitionIndexList.setManufacturingLayerID(new ObjectIdentifier(cimProcessDefinitionDO.getManufacturingLayer()));
                processDefinitionIndexList.setOwner(cimProcessDefinitionDO.getOwnerID());
                processDefinitionIndexList.setStartBankID(new ObjectIdentifier(cimProcessDefinitionDO.getStartBankID(), cimProcessDefinitionDO.getStartBankObj()));
                processDefinitionIndexList.setEndBankID(new ObjectIdentifier(cimProcessDefinitionDO.getEndBankID(), cimProcessDefinitionDO.getEndBankObj()));
            }
        }
        return processDefinitionIndexListList;
    }

    @Override
    public List<ObjectIdentifier> processDefinitionProcessDefinitionIDGetDR(Infos.ObjCommon objCommon) {
        List<CimProcessDefinitionDO> processDefinitions = cimJpaRepository.query("SELECT PRP_ID, ID FROM OMPRP WHERE PRP_LEVEL = 'Operation' AND VERSION_ID != ?1 ORDER BY PRP_ID", CimProcessDefinitionDO.class, BizConstant.SP_ACTIVE_VERSION);
        if (!CimObjectUtils.isEmpty(processDefinitions)) {
            return processDefinitions.stream().map(x -> new ObjectIdentifier(x.getProcessDefinitionID(), x.getId())).collect(Collectors.toList());
        }
        return Collections.emptyList();
    }

    @Override
    public List<Infos.RouteIndexInformation> processRouteList(Infos.ObjCommon objCommon, Params.MainProcessFlowListInqParams params) {
        String procDefType = params.getProcDefType();
        String routeType = params.getRouteType();
        Boolean activeShowFlag = params.getActiveShowFlag();
        String bankID = params.getBankID();
        List<Infos.RouteIndexInformation> routeIndexInformationList = new ArrayList<>();
        List<Object> paramsList = new ArrayList<>();
        String sql = "SELECT PRP_ID, ID, DESCRIPTION, MFG_LAYER," +
                " OWNER_ID, START_BANK_ID, START_BANK_RKEY, " +
                "END_BANK_ID, END_BANK_RKEY FROM OMPRP WHERE ";
        if (!CimStringUtils.isEmpty(routeType) && !CimStringUtils.isEmpty(procDefType)){
            sql = sql + " PRF_TYPE = ? AND PRP_TYPE = ? AND PRP_LEVEL = ? ";
            paramsList.add(routeType);
            paramsList.add(procDefType);
            paramsList.add(BizConstant.SP_PD_FLOWLEVEL_MAIN);
            if (!activeShowFlag){
                sql = sql + " AND VERSION_ID <> ?";
                paramsList.add(BizConstant.SP_ACTIVE_VERSION);
            }
        } else if (!CimStringUtils.isEmpty(routeType) && CimStringUtils.isEmpty(procDefType)){
            sql = sql + " PRF_TYPE = ? AND PRP_LEVEL = ? ";
            paramsList.add(routeType);
            paramsList.add(BizConstant.SP_PD_FLOWLEVEL_MAIN);
            if (!activeShowFlag){
                sql = sql + " AND VERSION_ID <> ? ";
                paramsList.add(BizConstant.SP_ACTIVE_VERSION);
            }
        } else if (CimStringUtils.isEmpty(routeType) && !CimStringUtils.isEmpty(procDefType)){
            sql = sql + " PRP_TYPE = ?  AND PRP_LEVEL = ? ";
            paramsList.add(procDefType);
            paramsList.add(BizConstant.SP_PD_FLOWLEVEL_MAIN);
            if (!activeShowFlag){
                sql = sql + " AND VERSION_ID <> ?";
                paramsList.add(BizConstant.SP_ACTIVE_VERSION);
            }
        } else if (CimStringUtils.isEmpty(routeType) && CimStringUtils.isEmpty(procDefType)){
            sql = sql + " PRP_LEVEL = ?";
            paramsList.add(BizConstant.SP_PD_FLOWLEVEL_MAIN);
            if (!activeShowFlag){
                sql = sql + " AND VERSION_ID <> ? ";
                paramsList.add(BizConstant.SP_ACTIVE_VERSION);
            }
        }
        if (!CimStringUtils.isEmpty(bankID)){
            sql = sql + " AND START_BANK_ID = ? ";
            paramsList.add(bankID);
        }
        List<CimProcessDefinitionDO> cimProcessDefinitionDOList = cimJpaRepository.query(sql, CimProcessDefinitionDO.class, paramsList.toArray());
        if (!CimArrayUtils.isEmpty(cimProcessDefinitionDOList)){
            for (CimProcessDefinitionDO cimProcessDefinitionDO :  cimProcessDefinitionDOList){
                Infos.RouteIndexInformation routeIndexInformation = new Infos.RouteIndexInformation();
                routeIndexInformationList.add(routeIndexInformation);
                routeIndexInformation.setRouteID(new ObjectIdentifier(cimProcessDefinitionDO.getProcessDefinitionID(), cimProcessDefinitionDO.getId()));
                routeIndexInformation.setRouteDescription(cimProcessDefinitionDO.getDescription());
                routeIndexInformation.setManufacturingLayerID(new ObjectIdentifier(cimProcessDefinitionDO.getManufacturingLayer()));
                routeIndexInformation.setRouteOwner(cimProcessDefinitionDO.getOwnerID());
                routeIndexInformation.setStartBankID(new ObjectIdentifier(cimProcessDefinitionDO.getStartBankID(), cimProcessDefinitionDO.getStartBankObj()));
                routeIndexInformation.setEndBankID(new ObjectIdentifier(cimProcessDefinitionDO.getEndBankID(), cimProcessDefinitionDO.getEndBankObj()));
            }
        }
        return routeIndexInformationList;
    }

    @Override
    public Results.StageListInqResult processStageIDGetDR(Infos.ObjCommon objCommon, Params.StageListInqParams params) {
        log.info("【Method Entry】processStageIDGetDR()");
        Results.StageListInqResult resultObj = new Results.StageListInqResult();

        String sql = "SELECT STAGE_ID, ID, STAGE_NO, DESCRIPTION, STAGE_GRP_ID, STAGE_GRP_RKEY FROM OMSTAGE";
        sql += String.format(" WHERE STAGE_ID LIKE '%s%%'", params.getStageID().getValue());

        List<CimStageDO> stageList = cimJpaRepository.query(sql, CimStageDO.class);

        // Get Data ;
        log.info("processStageIDGetDR() : Get Data");
        int count = CimArrayUtils.getSize(stageList);
        if (count > 0) {
            List<Infos.StageInformation> stageInformationList = new ArrayList<>();
            for (int i = 0; i < count; i++) {
                CimStageDO stage = stageList.get(i);

                Infos.StageInformation stageInformation = new Infos.StageInformation();

                stageInformation.setStageID(new ObjectIdentifier(stage.getStageID(), stage.getId()));
                stageInformation.setStageName(stage.getStageID());
                stageInformation.setStageNo(stage.getStageNumber());
                stageInformation.setDescription(stage.getDescription());
                stageInformation.setStageGroupID(new ObjectIdentifier(stage.getStageGroupID(), stage.getStageGroupObj()));

                stageInformationList.add(stageInformation);
            }
            resultObj.setStageInformationList(stageInformationList);
        }

        log.info("【Method Exit】processStageIDGetDR()");
        return resultObj;
    }

    @Override
    public void processReworkCountCheck(Infos.ObjCommon objCommon, ObjectIdentifier lotID) {
        com.fa.cim.newcore.bo.product.CimLot lot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotID);

        CimProductSpecification productSpecification = lot.getProductSpecification();
        Validations.check(null == productSpecification,retCodeConfig.getNotFoundProductSpec());

        com.fa.cim.newcore.bo.pd.CimProcessFlowContext processFlowContext = lot.getProcessFlowContext();
        Validations.check(null == processFlowContext,retCodeConfig.getNotFoundPfx());

        Boolean overMaxReworkCheckFlag = lot.isOverMaxReworkCount();
        AtomicReference<Long> maxOverType = new AtomicReference<>(0l);
        Boolean overMaxProcessCheckFlag = lot.isOverMaxPassCount(maxOverType);

        if (CimBooleanUtils.isTrue(overMaxProcessCheckFlag) || CimBooleanUtils.isTrue(overMaxReworkCheckFlag)) {
            com.fa.cim.newcore.bo.pd.CimProcessOperation processOperation = lot.getProcessOperation();
            if (null == processOperation) {
                log.error("not found process operation, the lotID:%s", lot.getLotID());
                Validations.check(true,retCodeConfig.getNotFoundProcessOperation());
            }

            if (CimBooleanUtils.isTrue(overMaxReworkCheckFlag)) {
                //【bear】the soruce code don't check the maxReworkCount, and return RC_REACH_MAX_REWORK directly. line:270 - 284
                Long maxReworkCount = processOperation.findMaxReworkCountForProduct(productSpecification);
                Validations.check(new OmCode(retCodeConfig.getReachMaxRework(), CimObjectUtils.toString(maxReworkCount)));
            }

            if (CimBooleanUtils.isTrue(overMaxProcessCheckFlag)) {
                //【bear】yes, it get some max process count list, but all of them don't check, and return RC_REACH_MAX_REWORK directly.
                // so we skip this source code. line:288 - 384
                List<ProcessDTO.MaxProcessCount> maxProcessCountSeq = processOperation.findMaxProcessCountForProduct(productSpecification);
                //【neyo】source code maxOverType == 1 ,but the EnvironmentValue is 0 when lot level; the EnvironmentValue is 1 or 2 when wafer level
                // so we change the order
                if (maxOverType.get() == 1) {
                    String msg = "The lot is over the max process count %s at the responsible operation %s.";
                    Validations.check(new OmCode(1901,String.format(msg,maxProcessCountSeq.get(0).getCount(),maxProcessCountSeq.get(0).getOperationNumber())));
                } else {
                    String msg = "The wafer is over the max process count %s at the responsible operation %s.";
                    Validations.check(new OmCode(1901,String.format(msg,maxProcessCountSeq.get(0).getCount(),maxProcessCountSeq.get(0).getOperationNumber())));
                }
            }
        }
    }

    @Override
    public void processReworkCountIncrement(Infos.ObjCommon objCommon, ObjectIdentifier lotID) {
        com.fa.cim.newcore.bo.product.CimLot lot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotID);
        Validations.check(null == lot, retCodeConfig.getNotFoundLot());
        lot.increaseReworkCount();
    }



    @Override
    public void processCheckBranchCancel(Infos.ObjCommon objCommon, ObjectIdentifier lotID) {
        com.fa.cim.newcore.bo.product.CimLot lot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotID);
        Validations.check(null == lot,retCodeConfig.getNotFoundLot());
        //--------------------------------------------------------------------------------------------------
        // Check if lot's current route is sub route
        //--------------------------------------------------------------------------------------------------
        com.fa.cim.newcore.bo.pd.CimProcessDefinition aProcessDefinition = lot.getMainProcessDefinition();
        Validations.check(null == aProcessDefinition,retCodeConfig.getNotFoundMainRoute());
        String processFlowType = aProcessDefinition.getProcessFlowType();
        Validations.check(!CimStringUtils.equals(BizConstant.SP_FLOWTYPE_SUB, processFlowType),retCodeConfig.getNotInSubroute());
        //--------------------------------------------------------------------------------------------------
        // Check if lot's current operation is the first operation of the sub route
        //--------------------------------------------------------------------------------------------------
        com.fa.cim.newcore.bo.pd.CimProcessFlowContext aFlowContext = lot.getProcessFlowContext();
        Validations.check(null == aFlowContext,retCodeConfig.getNotFoundPfx());
        Boolean firstOperationFlag = aFlowContext.isFirstOperationForProcessFlowOnCurrentRoute();
        Validations.check(CimBooleanUtils.isFalse(firstOperationFlag),retCodeConfig.getAllAlreadyProcessed());
    }

    @Override
    public Inputs.OldCurrentPOData processCancelBranchRoute(Infos.ObjCommon objCommon, ObjectIdentifier lotID) {
        Inputs.OldCurrentPOData oldCurrentPOData = new Inputs.OldCurrentPOData();
        //--------------------------------------------------------------------------------------------------
        // (1) Preperation & Set out parameter
        //--------------------------------------------------------------------------------------------------
        CimLot aLot = baseCoreFactory.getBO(CimLot.class, lotID);
        Validations.check(aLot == null, new OmCode(retCodeConfig.getNotFoundLot(), lotID.getValue()));
        CimProcessOperation aPosProcessOperation = aLot.getProcessOperation();
        Validations.check(aPosProcessOperation == null, new OmCode(retCodeConfig.getNotFoundOperation(), ""));
        ProcessDTO.PosProcessOperationEventData oldPOEventData = aPosProcessOperation.getEventData();
        BeanUtils.copyProperties(oldPOEventData, oldCurrentPOData);
        //--------------------------------------------------------------------------------------------------
        // (1.5) If branch route's pd type is "Rework", set rework out operation to output parameter.
        //--------------------------------------------------------------------------------------------------
        CimProcessDefinition aProcessDefinition = aLot.getMainProcessDefinition();
        Validations.check(aProcessDefinition == null, retCodeConfig.getSystemError());
        //===== Get and check branch route's pd type =====//
        String processDefinitionType = aProcessDefinition.getProcessDefinitionType();
        if (CimStringUtils.equals(processDefinitionType, BizConstant.SP_MAINPDTYPE_REWORK)){
            //===== Get and set rework out operation from backup operation =====//
            CimProcessFlowContext aPFX = aLot.getProcessFlowContext();
            Validations.check(aPFX == null, new OmCode(retCodeConfig.getNotFoundPfx(), ""));
            ProcessDTO.BackupOperation backupOperation = aPFX.getBackupOperation();
            oldCurrentPOData.setReworkOutOperation(backupOperation.getReworkOutKey());
        }
        //--------------------------------------------------------------------------------------------------
        // (2) Remove aLot from current dispatching queue
        //--------------------------------------------------------------------------------------------------
        dispatchingManager.removeFromQueue(aLot);
        //--------------------------------------------------------------------------------------------------
        // (3) Branch Route
        //--------------------------------------------------------------------------------------------------
        aLot.cancelBranch();
        //--------------------------------------------------------------------------------------------------
        // (4) Add aLot into new current dispatching queue
        //--------------------------------------------------------------------------------------------------
        dispatchingManager.addToQueue(aLot);
        //--------------------------------------------------------------------------------------------------
        // (5) Change lot production state.
        //--------------------------------------------------------------------------------------------------
        CimPerson aPerson = baseCoreFactory.getBO(CimPerson.class, objCommon.getUser().getUserID());
        Validations.check(aPerson == null, new OmCode(retCodeConfig.getNotFoundPerson(), objCommon.getUser().getUserID().getValue()));
        aLot.changeProductionStateBy(CimDateUtils.getTimestampAsString(objCommon.getTimeStamp().getReportTimeStamp()), aPerson);
        //--------------------------------------------------------------------------------------------------
        // (6) Set Last Claim Time and Last Claim Person
        //--------------------------------------------------------------------------------------------------
        aLot.setLastClaimedTimeStamp(objCommon.getTimeStamp().getReportTimeStamp());
        aLot.setLastClaimedPerson(aPerson);
        return oldCurrentPOData;
    }

    @Override
    public List<Infos.DataCollectionItemInfo> processOperationDCItemsGet(Infos.ObjCommon objCommon,
                                                                         ObjectIdentifier lotID,
                                                                         ObjectIdentifier dataCollectionDefinitionID) {
        List<Infos.DataCollectionItemInfo> dcItems = new ArrayList<>();
        // Get lot object
        CimLot lot = baseCoreFactory.getBO(CimLot.class, lotID);
        Validations.check(lot == null, retCodeConfig.getNotFoundLot());
        // Get lot process operation
        CimProcessOperation po = lot.getProcessOperation();
        Validations.check(po == null, new OmCode(retCodeConfig.getNotFoundProcessOperation(), ""));

        List<ProcessDTO.DataCollectionItemInfo> dataCollectionItemInfoList = po.getAssignedDataCollectionItemInfo();
        if (CimArrayUtils.isEmpty(dataCollectionItemInfoList)) {
            return dcItems;
        }
        //Set strDataCollectionItemInfoSeq to strDCItemSeq
        List<Infos.DataCollectionItemInfo> dcItemList = dataCollectionItemInfoList
                .parallelStream()
                .map(dataCollectionItemInfo -> {
                    Infos.DataCollectionItemInfo dcItem = new Infos.DataCollectionItemInfo();
                    dcItem.setDataCollectionItemName(dataCollectionItemInfo.getDataCollectionItemName());
                    dcItem.setDataCollectionMode(dataCollectionItemInfo.getDataCollectionMode());
                    dcItem.setDataCollectionUnit(dataCollectionItemInfo.getDataCollectionUnit());
                    dcItem.setDataType(dataCollectionItemInfo.getDataType());
                    dcItem.setItemType(dataCollectionItemInfo.getItemType());
                    dcItem.setMeasurementType(dataCollectionItemInfo.getMeasurementType());
                    dcItem.setWaferID(dataCollectionItemInfo.getWaferID());
                    dcItem.setSitePosition(dataCollectionItemInfo.getSitePosition());
                    dcItem.setHistoryRequiredFlag(dataCollectionItemInfo.getHistoryRequiredFlag());
                    dcItem.setCalculationType(dataCollectionItemInfo.getCalculationType());
                    dcItem.setCalculationExpression(dataCollectionItemInfo.getCalculationExpression());
                    dcItem.setDataValue(dataCollectionItemInfo.getDataValue());
                    dcItem.setTargetValue(dataCollectionItemInfo.getTargetValue());
                    dcItem.setSpecCheckResult(dataCollectionItemInfo.getSpecCheckResult());
                    //Set actionCodes
                    String actionCodes = dataCollectionItemInfo.getActionCodes();
                    dcItem.setActionCodes(actionCodes);
                    dcItem.setSeqNo(dataCollectionItemInfo.getSeqNo());
                    dcItem.setWaferCount(dataCollectionItemInfo.getWaferCount());
                    dcItem.setSiteCount(dataCollectionItemInfo.getSiteCount());

                    return dcItem;
                })
                .collect(Collectors.toList());

        dcItems.addAll(dcItemList);
        return dcItems;
    }

    @Override
    public Inputs.OldCurrentPOData processBranchRoute(Infos.ObjCommon objCommon, ObjectIdentifier lotID, ObjectIdentifier subRouteID, String returnOperationNumber) {
        Inputs.OldCurrentPOData oldCurrentPOData = new Inputs.OldCurrentPOData();

        //【step1】get branch process flow(rework route or sub route)
        //【step1-1】get lot object
        log.debug("【step1】get branch process flow(rework route or sub route)");
        log.debug("【step1-1】get lot object");
        com.fa.cim.newcore.bo.product.CimLot lot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotID);
        if (null == lot) {
            log.error("not found the lot by lotID:%s", lotID);
            Validations.check(true,retCodeConfig.getNotFoundLot());
        }

        //【step1-2】get process definition
        log.debug("【step1-2】get process definition");
        com.fa.cim.newcore.bo.pd.CimProcessDefinition processDefinition = baseCoreFactory.getBO(com.fa.cim.newcore.bo.pd.CimProcessDefinition.class, subRouteID);
        if (null == processDefinition) {
            log.error("not found the process definition by process definition ID:%s", subRouteID);
            Validations.check(true,retCodeConfig.getNotFoundProcessDefinition());
        }

        //【step1-3】get process operation
        log.debug("【step1-3】get process operation");
        com.fa.cim.newcore.bo.pd.CimProcessOperation processOperation = lot.getProcessOperation();
        if (null == processOperation) {
            log.error("not found process operation by lot object", lot);
            Validations.check(true,retCodeConfig.getNotFoundProcessOperation());
        }

        log.debug("【TODO-NOTIMPL】【step1-4】get event data for process operation.");
        ProcessDTO.PosProcessOperationEventData oldPOEventData = processOperation.getEventData();
        oldCurrentPOData.setRouteID(oldPOEventData.getRouteID());
        oldCurrentPOData.setOperationNumber(oldPOEventData.getOperationNumber());
        oldCurrentPOData.setOperationID(oldPOEventData.getOperationID());
        oldCurrentPOData.setOperationPassCount(oldPOEventData.getOperationPassCount());
        oldCurrentPOData.setObjrefPOS(oldPOEventData.getObjrefPOS());
        oldCurrentPOData.setObjrefMainPF(oldPOEventData.getObjrefMainPF());
        oldCurrentPOData.setObjrefModulePOS(oldPOEventData.getObjrefModulePOS());

        log.debug("【TODO】【step2】remove lot from current dispatching queue");
        dispatchingManager.removeFromQueue(lot);

        //【step3】branch route
        log.debug("【step3】branch route");
        lot.branchTo(processDefinition,returnOperationNumber);

        log.debug("【step4】add aLot into new current dispatching queue");
        dispatchingManager.addToQueue(lot);

        //【step5】change lot production state.
        log.debug("【step5】change lot production state.");
        com.fa.cim.newcore.bo.person.CimPerson person = baseCoreFactory.getBO(com.fa.cim.newcore.bo.person.CimPerson.class, objCommon.getUser().getUserID());
        if (null == person) {
            log.error("not found person by userID:%s", objCommon.getUser().getUserID());
            Validations.check(true,new OmCode(retCodeConfig.getNotFoundPerson(), objCommon.getUser().getUserID().getValue()));
        }
        lot.changeProductionStateBy(CimDateUtils.convertToSpecString(objCommon.getTimeStamp().getReportTimeStamp()),person);
        //【step6】set Last Claim Time and Last Claim person
        lot.setLastClaimedTimeStamp(objCommon.getTimeStamp().getReportTimeStamp());
        lot.setLastClaimedPerson(person);

        //【step7】If branch route's pd type is "Rework", set rework out operation to output parameter
        String processDefinitionType = processDefinition.getProcessDefinitionType();
        if (CimStringUtils.equals(BizConstant.SP_MAINPDTYPE_REWORK, processDefinitionType)) {
            com.fa.cim.newcore.bo.pd.CimProcessFlowContext pfx = lot.getProcessFlowContext();
            if (null == pfx) {
                log.error("not found process flow context");
                Validations.check(true,retCodeConfig.getNotFoundPfx());
            }

            //【note】line 292 - 300
            //  backupOperation = aPFX->getBackupOperationOld();
            //  strProcess_BranchRoute_out.oldCurrentPOData.reworkOutOperation = backupOperation->reworkOutKey;
            ProcessDTO.BackupOperation backupOperation = pfx.getBackupOperation();
            oldCurrentPOData.setReworkOutOperation(backupOperation.getReworkOutKey());
        }

        return oldCurrentPOData;
    }

    @Override
    public void processReworkCountDecrement(Infos.ObjCommon objCommon, ObjectIdentifier lotID) {
        log.info("【Method Entry】processReworkCountDecrement()");

        com.fa.cim.newcore.bo.product.CimLot aLot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotID);
        if (aLot == null) {
            log.info("Not found lot by {}", aLot);
            Validations.check(true,retCodeConfig.getNotFoundLot());
        }

        try {
            aLot.decreaseReworkCount();
        } catch (ServiceException e) {
            if ((OmCode.ERROR_CODE == e.getCode()) && CimStringUtils.equals(e.getMessage(),"CimWaferBO::decreaseReworkCount -> ReworkCountNotFoundSignal.")){
                //ok
                return;
            }
        }
        log.info("【Method Exit】processReworkCountDecrement()");
    }

    @Override
    public Page<Infos.DynamicRouteList> processDynamicRouteListDR(Infos.ObjCommon objCommon, Params.DynamicPathListInqParams params) {
        List<Infos.DynamicRouteList> dynamicRouteListList = new ArrayList<>();
        String routeIDkey = params.getRouteIDKey();
        Boolean activeVersionFlag = params.getActiveVersionFlag();
        String pdType = params.getProcessDefinitionType();
        SearchCondition searchCondition = params.getSearchCondition();
        //--------------------------------------//
        //   Make SQL                           //
        //--------------------------------------//
        String sql = "SELECT PRP_ID, ID, DESCRIPTION, VERSION_ID FROM OMPRP WHERE DYNAMIC_FLOW_FLAG = 1";
        List<Object> paramsList = new ArrayList<>();
        if (!CimStringUtils.isEmpty(routeIDkey)){
            sql = sql + " AND PRP_ID LIKE ? ";
            paramsList.add(routeIDkey);
        }
        if (activeVersionFlag){
            sql = sql + " AND VERSION_ID = ? ";
            paramsList.add(BizConstant.SP_ACTIVE_VERSION);
        }
        if (!CimStringUtils.isEmpty(pdType)){
            sql = sql + "  AND PRP_TYPE = ?";
            paramsList.add(pdType);
        }

        List<CimProcessDefinitionDO> cimProcessDefinitionDOList = cimJpaRepository.query(sql, CimProcessDefinitionDO.class, paramsList.toArray());
        //Page<CimProcessDefinitionDO> page = cimJpaRepository.query(sql, CimProcessDefinitionDO.class, searchCondition, paramsList.toArray());
        if (!CimArrayUtils.isEmpty(cimProcessDefinitionDOList)){
            for(CimProcessDefinitionDO cimProcessDefinitionDO : cimProcessDefinitionDOList){
                Infos.DynamicRouteList dynamicRouteList = new Infos.DynamicRouteList();
                dynamicRouteListList.add(dynamicRouteList);
                dynamicRouteList.setRouteID(new ObjectIdentifier(cimProcessDefinitionDO.getProcessDefinitionID(), cimProcessDefinitionDO.getId()));
                dynamicRouteList.setRouteDescription(cimProcessDefinitionDO.getDescription());
                dynamicRouteList.setActiveVersionFlag(CimStringUtils.equals(cimProcessDefinitionDO.getVersionID(), BizConstant.SP_ACTIVE_VERSION));
            }
        }
        return CimPageUtils.convertListToPage(dynamicRouteListList, params.getSearchCondition().getPage(), params.getSearchCondition().getSize());
    }

    @Override
    public void processDataCollectionInformationUpdate(Infos.ObjCommon objCommon, List<Infos.StartCassette> startCassetteList, List<Results.DCActionLotResult> dcActionLotResultList) {
        if (CimArrayUtils.isEmpty(startCassetteList)) {
            return;
        }
        for (Infos.StartCassette startCassette : startCassetteList) {
            List<Infos.LotInCassette> lotInCassetteList = startCassette.getLotInCassetteList();
            if (CimArrayUtils.isEmpty(lotInCassetteList)) {
                continue;
            }
            for (Infos.LotInCassette lotInCassette : lotInCassetteList) {
                //Omit Not-Started lot
                if (!CimBooleanUtils.isTrue(lotInCassette.getMoveInFlag())) {
                    continue;
                }
                //Get lot Object
                CimLot lot = baseCoreFactory.getBO(CimLot.class, lotInCassette.getLotID());
                Validations.check(lot == null, new OmCode(retCodeConfig.getNotFoundLot(), lotInCassette.getLotID().getValue()));
                //Get Process Operation Object
                CimProcessOperation po;
                //Current PO or Previous PO ?
                //lot_CheckConditionForPO
                Boolean lotCheckConditionForPOOut = lotMethod.lotCheckConditionForPO(objCommon, lotInCassette.getLotID());

                if (CimBooleanUtils.isTrue(lotCheckConditionForPOOut)) {
                    //Get PO from Current Operation.
                    po = lot.getProcessOperation();
                } else {
                    //Get PO from Previous Operation.
                    po = lot.getPreviousProcessOperation();
                }
                Validations.check(po == null, new OmCode(retCodeConfig.getNotFoundProcessOperation(), "", lotInCassette.getLotID().getValue()));
                ProcessDTO.ActualStartInformationForPO actualStartInfo = po.getActualStartInfo(true);
                if (CimBooleanUtils.isTrue(actualStartInfo.getAssignedDataCollectionFlag())) {
                    //--- Set Data Collection Information ---//
                    List<ProcessDTO.DataCollectionInfo> dcDataSeq = actualStartInfo.getAssignedDataCollections();
                    if (!CimArrayUtils.isEmpty(dcDataSeq)) {
                        for (ProcessDTO.DataCollectionInfo dataCollectionInfo : dcDataSeq) {
                            List<ProcessDTO.DataCollectionItemInfo> dcItems = dataCollectionInfo.getDcItems();
                            if (CimArrayUtils.isEmpty(dcItems)) {
                                continue;
                            }
                            for (ProcessDTO.DataCollectionItemInfo dcItem : dcItems) {
                                //--- Change dataValue from empty to * ---//
                                if (CimStringUtils.equals(dcItem.getDataValue(), BizConstant.EMPTY)) {
                                    dcItem.setDataValue(BizConstant.SP_ADCSETTING_ASTERISK);
                                }
                                //--- Change specCheckResult to empty when targetValue is empty ---//
                                if (CimStringUtils.equals(dcItem.getTargetValue(), BizConstant.EMPTY)) {
                                    dcItem.setSpecCheckResult(BizConstant.EMPTY);
                                }
                            }
                        }

                        //--- Omit '*' dataValue when OM_EDC_ASTERISK_VALUE_SAVE is not TRUE ---//
                        String asteriskSaveFlag = StandardProperties.OM_EDC_ASTERISK_VALUE_SAVE.getValue();
                        if (!CimStringUtils.equals(asteriskSaveFlag, BizConstant.VALUE_ONE)) {
                            List<ProcessDTO.DataCollectionInfo> dcDataSeqOmitAsterisk = new ArrayList<>();
                            for (ProcessDTO.DataCollectionInfo dataCollectionInfo : dcDataSeq) {
                                List<ProcessDTO.DataCollectionItemInfo> dcItems = dataCollectionInfo.getDcItems();
                                //reset dcItems
                                List<ProcessDTO.DataCollectionItemInfo> newDCItems = new ArrayList<>();
                                dataCollectionInfo.setDcItems(newDCItems);
                                dcDataSeqOmitAsterisk.add(dataCollectionInfo);
                                if (CimArrayUtils.isEmpty(dcItems)) {
                                    continue;
                                }
                                for (ProcessDTO.DataCollectionItemInfo dcItem : dcItems) {
                                    if (!CimStringUtils.equals(dcItem.getDataValue(), BizConstant.SP_ADCSETTING_ASTERISK)) {
                                        newDCItems.add(dcItem);
                                    }
                                }
                            }
                            po.setDataCollectionInfo(dcDataSeqOmitAsterisk);
                        } else {
                            po.setDataCollectionInfo(dcDataSeq);
                        }
                        List<ProcessDTO.ActionResultInfo> dcActionResultInfoSeq = po.getActionResultInfo();

                        if (CimArrayUtils.isEmpty(dcActionResultInfoSeq)){
                            dcActionResultInfoSeq=new ArrayList<>();
                        }

                        if (!CimArrayUtils.isEmpty(dcActionLotResultList)) {
                            for (Results.DCActionLotResult dcActionLotResult : dcActionLotResultList) {
                                if (ObjectIdentifier.equalsWithValue(lotInCassette.getLotID(), dcActionLotResult.getMeasurementLotID())) {
                                    List<Infos.DCActionResultInfo> dcActionResultInfoList = dcActionLotResult.getDcActionResultInfo();
                                    if (CimArrayUtils.isEmpty(dcActionResultInfoList)) {
                                        continue;
                                    }
                                    for (Infos.DCActionResultInfo dcActionResultInfo : dcActionResultInfoList) {
                                        ProcessDTO.ActionResultInfo actionResultInfo = new ProcessDTO.ActionResultInfo();
                                        dcActionResultInfoSeq.add(actionResultInfo);
                                        actionResultInfo.setLotID(dcActionResultInfo.getLotID());
                                        actionResultInfo.setMonitorLotFlag(dcActionResultInfo.getMonitorLotFlag());
                                        actionResultInfo.setDataCollectionDefinitionID(dcActionResultInfo.getDcDefID());
                                        actionResultInfo.setDataCollectionSpecificationID(dcActionResultInfo.getDcSpecID());
                                        actionResultInfo.setCheckType(dcActionResultInfo.getCheckType());
                                        actionResultInfo.setReasonCode(dcActionResultInfo.getReasonCode());
                                        actionResultInfo.setActionCode(dcActionResultInfo.getActionCode());
                                        actionResultInfo.setCorrespondingObjRefPO(dcActionResultInfo.getCorrespondingObjRefPO());
                                        actionResultInfo.setBankID(dcActionResultInfo.getBankID());
                                        actionResultInfo.setReworkRouteID(dcActionResultInfo.getReworkRouteID());

                                        List<ProcessDTO.ActionEntityInfo> entities = new ArrayList<>();
                                        actionResultInfo.setEntities(entities);

                                        List<Infos.EntityIdentifier> dcEntities = dcActionResultInfo.getEntities();
                                        if (CimArrayUtils.isEmpty(dcEntities)) {
                                            continue;
                                        }
                                        for (Infos.EntityIdentifier dcEntity : dcEntities) {
                                            ProcessDTO.ActionEntityInfo actionEntityInfo = new ProcessDTO.ActionEntityInfo();
                                            entities.add(actionEntityInfo);
                                            actionEntityInfo.setAttribution(dcEntity.getAttribution());
                                            actionEntityInfo.setObjectID(dcEntity.getObjectID());
                                            actionEntityInfo.setClassName(dcEntity.getClassName());
                                        }
                                    }
                                    break;
                                }
                            }
                        }
                        po.setActionResultInfo(dcActionResultInfoSeq);
                    }
                }
            }
        }
    }

    @Override
    public Outputs.ObjProcessLagTimeGetOut processProcessLagTimeGet(Infos.ObjCommon objCommon, ObjectIdentifier lotID) {
        Outputs.ObjProcessLagTimeGetOut objProcessLagTimeGetOut = new Outputs.ObjProcessLagTimeGetOut();
        //---------------------------------
        //   Get Lot Object
        //---------------------------------
        com.fa.cim.newcore.bo.product.CimLot aLot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotID);
        Validations.check(aLot == null, new OmCode(retCodeConfig.getNotFoundLot(), lotID.getValue()));
        //---------------------------------
        //   Get Previous PO Object
        //---------------------------------
        // 当EDC check 失败后，会被Hold在当前站点，不会做 process move 操作，因此需要判断，这个添加这个 Flag 的逻辑判断
        CimProcessOperation aPrevPO;
        final boolean checkConditionForPO = lotMethod.lotCheckConditionForPO(objCommon, lotID);
        if (checkConditionForPO) {
            aPrevPO = aLot.getProcessOperation();
        } else {
            aPrevPO = aLot.getPreviousProcessOperation();
        }

        Validations.check(aPrevPO == null, new OmCode(retCodeConfig.getNotFoundProcessOperation(), "*****", lotID.getValue()));
        //---------------------------------
        //   Get ProductSpec Object
        //---------------------------------
        CimProductSpecification aProdSpec = aLot.getProductSpecification();
        Validations.check(aProdSpec == null, retCodeConfig.getNotFoundProductSpec());
        String prodSpecID = aProdSpec.getIdentifier();
        //------------------------------------
        //   Get ProcessLagTime Information
        //------------------------------------
        ProcessDTO.ProcessLagTimeData procLagTimeData = aPrevPO.findProcessLagTimeDataFor(prodSpecID);
        //---------------------------------------------
        //   Set ProcessLagTime to Return Structure
        //---------------------------------------------
        objProcessLagTimeGetOut.setExpriedTimeDuration(procLagTimeData.getExpiredTimeDuration());
        if (procLagTimeData.getExpiredTimeDuration() == 0){
            objProcessLagTimeGetOut.setProcessLagTimeStamp(CimDateUtils.convertToOrInitialTime(BizConstant.SP_TIMESTAMP_NIL_OBJECT_STRING));
        } else {
            long times = System.currentTimeMillis() + objProcessLagTimeGetOut.getExpriedTimeDuration().longValue();
            objProcessLagTimeGetOut.setProcessLagTimeStamp(new Timestamp(times));
        }
        return objProcessLagTimeGetOut;
    }

    @Override
    public Infos.ProcessOperationInfo processOperationInfoGetDr(Infos.ObjCommon objCommon, Inputs.ObjProcessOperationInfoGetDrIn param) {
        //Get Process Operation information
        String sql = "SELECT * FROM OMPROPE WHERE ID = ?";
        CimProcessOperationDO cimProcessOperationDO = cimJpaRepository.queryOne(sql, CimProcessOperationDO.class, param.getPoObj());
        Validations.check(cimProcessOperationDO == null, retCodeConfig.getNotFoundOperation());
        // Set data
        Infos.ProcessOperationInfo strProcessOperationInfo = new Infos.ProcessOperationInfo();
        strProcessOperationInfo.setPoName(cimProcessOperationDO.getProcessOperationName());
        strProcessOperationInfo.setPoObjRef(cimProcessOperationDO.getId());
        strProcessOperationInfo.setModPOSObjRef(cimProcessOperationDO.getModuleProcessOperationSpecificationsObj());
        strProcessOperationInfo.setMainPDID(new ObjectIdentifier(cimProcessOperationDO.getMainProcessDefinitionID(), cimProcessOperationDO.getMainProcessDefinitionObj()));
        strProcessOperationInfo.setModulePDID(new ObjectIdentifier(cimProcessOperationDO.getModuleProcessDefinitionID(), cimProcessOperationDO.getModuleProcessDefinitionObj()));
        strProcessOperationInfo.setPdID(new ObjectIdentifier(cimProcessOperationDO.getProcessDefinitionID(), cimProcessOperationDO.getProcessDefinitionObj()));
        strProcessOperationInfo.setOpeName(cimProcessOperationDO.getOperationName());
        strProcessOperationInfo.setModuleNo(cimProcessOperationDO.getModuleNumber());
        strProcessOperationInfo.setOpeNo(cimProcessOperationDO.getOperationNumber());
        strProcessOperationInfo.setPassCount(String.valueOf(cimProcessOperationDO.getPassCount()));
        strProcessOperationInfo.setActualStartTime(CimDateUtils.getTimestampAsString(cimProcessOperationDO.getActualStartTime()));
        strProcessOperationInfo.setActualEndTime(CimDateUtils.getTimestampAsString(cimProcessOperationDO.getActualEndTime()));
        strProcessOperationInfo.setAsgnEqpID(new ObjectIdentifier(cimProcessOperationDO.getAssignEquipmentID(), cimProcessOperationDO.getAssignEquipmentObj()));
        strProcessOperationInfo.setAsgnPortGrp(cimProcessOperationDO.getAssignPortGroup());
        strProcessOperationInfo.setAsgnLcrecipeID(new ObjectIdentifier(cimProcessOperationDO.getAssignLogicalRecipeID(), cimProcessOperationDO.getAssignLogicalRecipeObj()));
        strProcessOperationInfo.setAsgnRecipeID(new ObjectIdentifier(cimProcessOperationDO.getAssignRecipeID(), cimProcessOperationDO.getAssignRecipeObj()));
        strProcessOperationInfo.setAsgnRparmChgType(cimProcessOperationDO.getAssignRecipeParamChangeType());
        strProcessOperationInfo.setAsgnDcFlag(cimProcessOperationDO.getAssignDataCollectionFlag());
        strProcessOperationInfo.setPfObjRef(cimProcessOperationDO.getProcessFlowObj());
        strProcessOperationInfo.setMainPFObjRef(cimProcessOperationDO.getMainProcessFlowObj());
        strProcessOperationInfo.setModPFObjRef(cimProcessOperationDO.getModuleProcessFlowObj());
        strProcessOperationInfo.setPlanEqpID(new ObjectIdentifier(cimProcessOperationDO.getPlanEuipmentID(), cimProcessOperationDO.getPlanEuipmentObj()));
        strProcessOperationInfo.setRefCnt(cimProcessOperationDO.getReferenceCount() == null ? null : cimProcessOperationDO.getReferenceCount().longValue());
        strProcessOperationInfo.setCtrlJobID(new ObjectIdentifier(cimProcessOperationDO.getControlJobID(), cimProcessOperationDO.getControlJobObj()));
        strProcessOperationInfo.setYldchkResult(cimProcessOperationDO.getYldchkResult());
        strProcessOperationInfo.setFabID(cimProcessOperationDO.getFabID());
        return strProcessOperationInfo;
    }

    @Override
    public Infos.DurableOperationNameAttributes processOperationListForDurableHelperDR(Infos.ObjCommon objCommon, Infos.DurableOperationNameAttributes operationNameAttributes) {
        //-----------------------------------------------------------------------------
        //  Check input parameter's.
        //-----------------------------------------------------------------------------
        operationNameAttributes.setMandatoryOperationFlag(false);
        operationNameAttributes.setStandardCycleTime(0.0);
        operationNameAttributes.setTestType(null);
        Infos.ProcessRef processRef = operationNameAttributes.getProcessRef();
        //-----------------------------------------------------------------------------
        //  Get information from MainPOS.
        //-----------------------------------------------------------------------------
        String processOperationSpecificationsObj = null;
        String sql = null;
        if (CimStringUtils.isEmpty(processRef.getProcessOperationSpecification())) {
            String processFlowID = processRef.getProcessFlow();
            if (!CimStringUtils.isEmpty(processFlowID)) {
                sql = "SELECT PRSS_RKEY\n" +
                        "                           FROM OMPRF_PRSSSEQ\n" +
                        "                          WHERE REFKEY = ?\n" +
                        "                            AND LINK_KEY  = ?";
                CimPFPosListDO processFlowPosList = cimJpaRepository.queryOne(sql, CimPFPosListDO.class, processFlowID, operationNameAttributes.getOperationNumber());
                if (null != processFlowPosList) {
                    processOperationSpecificationsObj = processFlowPosList.getProcessOperationSpecificationsObj();
                    processRef.setProcessOperationSpecification(processOperationSpecificationsObj);
                } else {
                    processRef.setProcessOperationSpecification("*");
                }
            } else {
                processRef.setProcessOperationSpecification("*");
            }
        } else {
            processOperationSpecificationsObj = processRef.getProcessOperationSpecification();
        }

        if (!TransactionIDEnum.equals(TransactionIDEnum.LOT_FUTURE_ACTION_LIST_INQ, objCommon.getTransactionID())) {
            if (CimStringUtils.isEmpty(processOperationSpecificationsObj)) {
                sql = "SELECT PHOTO_LAYER\n" +
                        "                           FROM OMPRSS\n" +
                        "                          WHERE ID = ?";
                CimProcessOperationSpecificationDO processOperationSpecifications = cimJpaRepository.queryOne(sql, CimProcessOperationSpecificationDO.class, processOperationSpecificationsObj);
                if (null != processOperationSpecifications) {
                    operationNameAttributes.setMaskLevel(processOperationSpecifications.getPhotoLayer());
                }
            }
        }

        //-----------------------------------------------------------------------------
        //  Get process information from module POS
        //-----------------------------------------------------------------------------
        String processDefinitionID = null;
        String processDefinitionObj = null;
        Boolean mandatoryFlag = false;
        processOperationSpecificationsObj = processRef.getModulePOS();
        if (!CimStringUtils.isEmpty(processOperationSpecificationsObj)) {
            sql = "SELECT STEP_ID, STEP_RKEY, COMPULSORY_FLAG\n" +
                    "                       FROM OMPRSS\n" +
                    "                      WHERE ID = ?";
            CimProcessOperationSpecificationDO processOperationSpecifications = cimJpaRepository.queryOne(sql, CimProcessOperationSpecificationDO.class, processOperationSpecificationsObj);
            if (null != processOperationSpecifications) {
                processDefinitionID = processOperationSpecifications.getProcessDefinitionID();
                processDefinitionObj = processOperationSpecifications.getProcessDefinitionObj();
                mandatoryFlag = processOperationSpecifications.getMandatoryFlag();
                operationNameAttributes.setMandatoryOperationFlag(mandatoryFlag);
            } else {
                operationNameAttributes.setMandatoryOperationFlag(mandatoryFlag);
            }
        } else {
            operationNameAttributes.setMandatoryOperationFlag(mandatoryFlag);
            sql = "SELECT STEP_ID, STEP_RKEY\n" +
                    "                           FROM OMDRBLPROPE\n" +
                    "                          WHERE ID = ?";
            CimDurableProcessOperationDO durableProcessOperation = cimJpaRepository.queryOne(sql, CimDurableProcessOperationDO.class, operationNameAttributes.getObjrefPO());
            Validations.check(null == durableProcessOperation,retCodeConfig.getSomeopelistDataError());
        }

        //-----------------------------------------------------------------------------
        //  Get stage group
        //-----------------------------------------------------------------------------
        if (!TransactionIDEnum.equals(TransactionIDEnum.LOT_FUTURE_ACTION_LIST_INQ, objCommon.getTransactionID())) {
            ObjectIdentifier stageID = operationNameAttributes.getStageID();
            if (!ObjectIdentifier.isEmpty(stageID)) {
                sql = "SELECT STAGE_GRP_ID, STAGE_GRP_RKEY\n" +
                        "                           FROM OMSTAGE\n" +
                        "                          WHERE STAGE_ID = ?";
                CimStageDO stage = cimJpaRepository.queryOne(sql, CimStageDO.class, stageID.getValue());
                if (null != stage) {
                    operationNameAttributes.setStageGroupID(new ObjectIdentifier(stage.getStageGroupID(), stage.getStageGroupObj()));
                } else {
                    operationNameAttributes.setStageGroupID(new ObjectIdentifier("*", "*"));
                }
            } else {
                operationNameAttributes.setStageGroupID(new ObjectIdentifier("*", "*"));
            }
        }

        //-----------------------------------------------------------------------------
        //  Get process information from Process Definition
        //-----------------------------------------------------------------------------
        if (CimStringUtils.isEmpty(processDefinitionID)) {
            sql = "SELECT ID, \n" +
                    "                            OPE_NAME, \n" +
                    "                            PRP_ID, \n" +   // PRP_ID 代替
                    "                            DEPT, \n" +
                    "                            STD_CYCLE_TIME,\n" +
                    "                            VERSION_ID, \n" +
                    "                            ACTIVE_VER_ID, \n" +
                    "                            ACTIVE_VER_RKEY\n" +
                    "                       FROM OMPRP\n" +
                    "                      WHERE PRP_ID    = ?\n" +
                    "                        AND PRP_LEVEL = ?";
            CimProcessDefinitionDO processDefinition = cimJpaRepository.queryOne(sql, CimProcessDefinitionDO.class, processDefinitionID, BizConstant.SP_PD_FLOWLEVEL_OPERATION);
            if (null != processDefinition) {
                if (!CimStringUtils.equals(BizConstant.SP_ACTIVE_VERSION, processDefinition.getVersionID())) {
                    operationNameAttributes.setOperationID(new ObjectIdentifier(processDefinitionID, processDefinitionObj));
                } else {
                    operationNameAttributes.setOperationID(new ObjectIdentifier(processDefinition.getActiveID(), processDefinition.getActiveObj()));
                }
                operationNameAttributes.setOperationName(processDefinition.getOperationID());
                operationNameAttributes.setInspectionType(processDefinition.getInspectionType());
                operationNameAttributes.setDepartmentNumber(processDefinition.getDepartment());
                operationNameAttributes.setStandardCycleTime(processDefinition.getStandardCycleTime());
            } else {
                operationNameAttributes.setOperationID(new ObjectIdentifier(processDefinitionID, processDefinitionObj));
                operationNameAttributes.setOperationName("*");
                operationNameAttributes.setInspectionType("*");
                operationNameAttributes.setDepartmentNumber("*");
            }
        } else {
            operationNameAttributes.setOperationID(new ObjectIdentifier("*", "*"));
            operationNameAttributes.setOperationName("*");
            operationNameAttributes.setInspectionType("*");
            operationNameAttributes.setDepartmentNumber("*");
        }

        Validations.check(TransactionIDEnum.equals(TransactionIDEnum.LOT_FUTURE_ACTION_LIST_INQ, objCommon.getTransactionID()),retCodeConfig.getSucc());

        //-----------------------------------------------------------------------------
        //  Get equipmentID
        //-----------------------------------------------------------------------------
        String eqpListFlag = StandardProperties.OM_STEP_EQP_LIST_INQ.getValue();
        if (!CimStringUtils.equals(eqpListFlag, "0")) {
            if (!operationNameAttributes.getOperationID().getValue().equals("*")) {
                List<ObjectIdentifier> eqpOut = this.processDispatchEquipmentsForDurableGetDR(objCommon, operationNameAttributes.getOperationID());

                operationNameAttributes.setMachines(eqpOut);
            }
        }

        //-----------------------------------------------------------------------------
        //  Set Schedule Information
        //-----------------------------------------------------------------------------
        if (!CimStringUtils.isEmpty(operationNameAttributes.getObjrefPO())) {
            sql = "SELECT PASS_COUNT, \n" +
                    "                            ACTUAL_MOVIN_TIME, \n" +
                    "                            ACTUAL_MOVOUT_TIME, \n" +
                    "                            ALLOC_EQP_ID, \n" +
                    "                            ALLOC_EQP_RKEY\n" +
                    "                       FROM OMDRBLPROPE\n" +
                    "                     WHERE  ID = ?";
            CimDurableProcessOperationDO durableProcessOperation = cimJpaRepository.queryOne(sql, CimDurableProcessOperationDO.class, operationNameAttributes.getObjrefPO());
            Validations.check(null == durableProcessOperation,retCodeConfig.getNotFoundPoForDurable(),"","");
            Integer passCount = durableProcessOperation.getPassCount();
            Timestamp actualStartTime = durableProcessOperation.getActualStartTime();
            Timestamp actualEndTime = durableProcessOperation.getActualEndTime();
            String assignEquipmentID = durableProcessOperation.getAssignEquipmentID();
            String assignEquipmentObj = durableProcessOperation.getAssignEquipmentObj();
            operationNameAttributes.setOperationPass(CimObjectUtils.isEmpty(passCount) ? "" : String.valueOf(passCount));
            operationNameAttributes.setPlannedStartTime("");
            operationNameAttributes.setPlannedEndTime("");
            operationNameAttributes.setPlannedMachine(new ObjectIdentifier());
            operationNameAttributes.setActualStartTime(CimObjectUtils.isEmpty(actualStartTime) ? null : actualStartTime.toString());
            operationNameAttributes.setActualCompTime(CimObjectUtils.isEmpty(actualEndTime) ? null : actualEndTime.toString());
            operationNameAttributes.setAssignedMachine(new ObjectIdentifier(assignEquipmentID, assignEquipmentObj));
        }
        operationNameAttributes.setObjrefPO("");
        operationNameAttributes.setOperationPass("");
        operationNameAttributes.setActualStartTime("");
        operationNameAttributes.setActualCompTime("");
        operationNameAttributes.setAssignedMachine(null);
        operationNameAttributes.setPlannedStartTime("");
        operationNameAttributes.setPlannedEndTime("");
        operationNameAttributes.setPlannedMachine(null);
        return operationNameAttributes;
    }

    @Override
    public List<ObjectIdentifier> processDispatchEquipmentsForDurableGetDR(Infos.ObjCommon objCommon, ObjectIdentifier operationID) {
        List<ObjectIdentifier> equipmentIDSeq = new ArrayList<>();
        String sql = "SELECT ID\n" +
                "     FROM OMPRP\n" +
                "     WHERE PRP_ID=?1 \n" +
                "     AND PRP_LEVEL=?2 ";
        Object ciProcessFlowDO = cimJpaRepository.queryOneColumnAndUnique(sql, operationID.getValue(), BizConstant.SP_PD_FLOWLEVEL_OPERATION);
        Validations.check (CimObjectUtils.isEmpty(ciProcessFlowDO), retCodeConfig.getNotFoundProcessDefinition());
        String PDID = String.valueOf(ciProcessFlowDO);
        //----------------------------------------------
        //  Get Eqp specified by processDefinition
        //----------------------------------------------
        List<ObjectIdentifier> pd_EqpSeq = new ArrayList<>();
        sql = "SELECT EQP_ID,\n" +
              "       EQP_RKEY\n" +
              " FROM OMPRP_RESTRICTEQP\n" +
              "WHERE REFKEY = ?1 ORDER BY IDX_NO";
        List<Object[]> cimPDEqpDOList = cimJpaRepository.query(sql, PDID);
        if (!CimArrayUtils.isEmpty(cimPDEqpDOList)){
            for (Object[] Object : cimPDEqpDOList){
                pd_EqpSeq.add(new ObjectIdentifier(String.valueOf(Object[0]), String.valueOf(Object[1])));
            }
        }
        //-----------------------------------
        //  Get logical recipe
        //-----------------------------------
        ObjectIdentifier logicalRecipe = this.processDefaultLogicalRecipeGetDR(objCommon, operationID);
        //-----------------------------------------------------
        //  Get Eqp from logicalRecipe(MachineRecipe's EQP)
        //-----------------------------------------------------
        sql = "SELECT ID\n" +
                " FROM OMLRCP\n" +
                "WHERE LRCP_ID = ?1";
        Object FRLRCP = cimJpaRepository.queryOneColumnAndUnique(sql, logicalRecipe.getValue());
        Validations.check(CimObjectUtils.isEmpty(FRLRCP) , retCodeConfig.getNotFoundLogicalRecipe());
        String FRLRCPID = String.valueOf(FRLRCP);
        List<ObjectIdentifier> recipe_EqpSeq = new ArrayList<>();
        sql = " SELECT RECIPE_RKEY\n" +
                "              FROM OMLRCP_DFLT\n" +
                "             WHERE REFKEY = ?1 \n" +
                "          GROUP BY RECIPE_RKEY ORDER BY MIN(IDX_NO)";
        List<Object> cimLogicalRecipeDSetDOList = cimJpaRepository.queryOneColumn(sql,FRLRCPID);
        if (!CimArrayUtils.isEmpty(cimLogicalRecipeDSetDOList)){
            for (Object cimLogicalRecipeDSetDO : cimLogicalRecipeDSetDOList){
                sql = "SELECT DISTINCT(EQP_ID) EQP_ID, EQP_RKEY\n" +
                        "                  FROM OMRCP_EQP\n" +
                        "                 WHERE REFKEY = ?1 ";
                List<Object[]> cimMachineRecipeEqpDOList = cimJpaRepository.query(sql, String.valueOf(cimLogicalRecipeDSetDO));
                if (!CimArrayUtils.isEmpty(cimMachineRecipeEqpDOList)){
                    for (Object[] cimMachineRecipeEqpDO : cimMachineRecipeEqpDOList){
                        recipe_EqpSeq.add(new ObjectIdentifier(String.valueOf(cimMachineRecipeEqpDO[0]), String.valueOf(cimMachineRecipeEqpDO[1])));
                    }
                }

            }
        }
        //-----------------------------------
        //  Compare two list of machines
        //-----------------------------------
        int recipe_EqpLen = CimArrayUtils.getSize(recipe_EqpSeq);
        int pd_EqpLen = CimArrayUtils.getSize(pd_EqpSeq);
        int count = 0;
        if (pd_EqpLen > 0){
            count = 0;
            for (int i = 0; i < pd_EqpLen; i++){
                for (int j = 0; j < recipe_EqpLen; j++){
                    if (ObjectIdentifier.equalsWithValue(pd_EqpSeq.get(i), recipe_EqpSeq.get(j))){
                        boolean redundantFlag = false;
                        for (int k = 0; k < equipmentIDSeq.size(); k++){
                            if (ObjectIdentifier.equalsWithValue(equipmentIDSeq.get(k), pd_EqpSeq.get(i))){
                                redundantFlag = true;
                                break;
                            }
                        }
                        if (!redundantFlag){
                            equipmentIDSeq.add(pd_EqpSeq.get(i));
                            count++;
                            break;
                        }
                    }
                }
            }
        } else {
            count = 0;
            for (int i = 0; i < recipe_EqpLen; i++){
                boolean redundantFlag = false;
                for (int j = 0; j < equipmentIDSeq.size(); j++){
                    if (ObjectIdentifier.equalsWithValue(equipmentIDSeq.get(j), recipe_EqpSeq.get(i))){
                        redundantFlag = true;
                        break;
                    }
                }
                if(!redundantFlag){
                    equipmentIDSeq.add(recipe_EqpSeq.get(i));
                    count++;
                }
            }
        }
        return equipmentIDSeq;
    }

    @Override
    public Infos.OperationNameAttributes processOperationListForLotHelper(Infos.OperationNameAttributes attributes, Infos.ObjCommon objCommon, String lotScheduleObj, Boolean backupInfoFlag, ObjectIdentifier productID) {

        //-----------------------------------------------------------------------------
        //  Check input parameter's.
        //-----------------------------------------------------------------------------
        attributes.setMandatoryOperationFlag(false);
        attributes.setStandardCycleTime(0.0);
        attributes.setQtimeFlag(false);
        attributes.setTestType("");

        //-----------------------------------------------------------------------------
        //  Get information from MainPOS.
        //-----------------------------------------------------------------------------
        Infos.ProcessRef processRef = attributes.getProcessRef();
        String processOperationSpecificationID = null;
        if (CimObjectUtils.isEmpty(processRef.getProcessOperationSpecification())) {
            String processFlowID = processRef.getProcessFlow();
            if (!CimObjectUtils.isEmpty(processFlowID)) {
                CimPFPosListDO processFlowPosList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFPosListDO.class, processFlowID, attributes.getOperationNumber());
                if (!CimObjectUtils.isEmpty(processFlowPosList)) {
                    processOperationSpecificationID = processFlowPosList.getProcessOperationSpecificationsObj();
                    processRef.setProcessOperationSpecification(processFlowPosList.getProcessOperationSpecificationsObj());
                } else {
                    processRef.setProcessOperationSpecification("*");
                }
            } else {
                processRef.setProcessOperationSpecification("*");
                //out.setReturnCode(retCodeConfig.getSomeopelistDataError());
            }
        } else {
            processOperationSpecificationID = processRef.getProcessOperationSpecification();
        }
        if (!TransactionIDEnum.equals(TransactionIDEnum.LOT_FUTURE_ACTION_LIST_INQ, objCommon.getTransactionID())) {
            if (!CimObjectUtils.isEmpty(processOperationSpecificationID)) {
                CimProcessOperationSpecificationDO processOperationSpecifications = cimJpaRepository.queryOne("SELECT * FROM OMPRSS WHERE ID = ?1", CimProcessOperationSpecificationDO.class, processOperationSpecificationID);
                if (!CimObjectUtils.isEmpty(processOperationSpecifications)) {
                    attributes.setMaskLevel(processOperationSpecifications.getPhotoLayer());
                } else {
                    attributes.setMaskLevel("*");
                    //out.setReturnCode(retCodeConfig.getSomeopelistDataError());
                }
            } else {
                attributes.setMaskLevel("*");
                //out.setReturnCode(retCodeConfig.getSomeopelistDataError());
            }
        }
        //-----------------------------------------------------------------------------
        //  Get process information from module POS
        //-----------------------------------------------------------------------------
        String processDefinitionID = null, processDefinitionObj = null;
        Boolean mandatoryFlag = false;
        processOperationSpecificationID = processRef.getModulePOS();
        String objrefPO = attributes.getObjrefPO();
        if (!CimObjectUtils.isEmpty(processOperationSpecificationID)) {
            CimProcessOperationSpecificationDO processOperationSpecifications = cimJpaRepository.queryOne("SELECT * FROM OMPRSS WHERE ID = ?1", CimProcessOperationSpecificationDO.class, processOperationSpecificationID);
            processDefinitionID = processOperationSpecifications.getProcessDefinitionID();
            processDefinitionObj = processOperationSpecifications.getProcessDefinitionObj();
            mandatoryFlag = processOperationSpecifications.getMandatoryFlag();
            attributes.setMandatoryOperationFlag(mandatoryFlag);
//            if (!ObjectUtils.isEmpty(processOperationSpecifications)) {
//                attributes.setMandatoryOperationFlag(mandatoryFlag);
//            } else {
//                attributes.setMandatoryOperationFlag(mandatoryFlag);
//                //out.setReturnCode(retCodeConfig.getSomeopelistDataError());
//            }
            if (!CimObjectUtils.isEmpty(objrefPO)) {
                CimProcessOperationDO processOperation = cimJpaRepository.queryOne("SELECT * FROM OMPROPE WHERE ID = ?1", CimProcessOperationDO.class, objrefPO);
                if (!CimObjectUtils.isEmpty(processOperation)) {
                    processDefinitionID = processOperation.getProcessDefinitionID();
                    processDefinitionObj = processOperation.getProcessDefinitionObj();
                } else {
                    //out.setReturnCode(retCodeConfig.getSomeopelistDataError());
                }
            }
        } else {
            attributes.setMandatoryOperationFlag(mandatoryFlag);
            if (!CimObjectUtils.isEmpty(objrefPO)) {
                CimProcessOperationDO processOperation = cimJpaRepository.queryOne("SELECT * FROM OMPROPE WHERE ID = ?1", CimProcessOperationDO.class, objrefPO);
                if (!CimObjectUtils.isEmpty(processOperation)) {
                    processDefinitionID = processOperation.getProcessDefinitionID();
                    processDefinitionObj = processOperation.getProcessDefinitionObj();
                } else {
                    //out.setReturnCode(retCodeConfig.getSomeopelistDataError());
                }
            }
        }

        //-----------------------------------------------------------------------------
        //  Get stage group
        //-----------------------------------------------------------------------------
        if (!TransactionIDEnum.equals(TransactionIDEnum.LOT_FUTURE_ACTION_LIST_INQ, objCommon.getTransactionID())) {
            ObjectIdentifier stageID = attributes.getStageID();
            String stageGroupID = null, stageGroupObj = null;
            if (!ObjectIdentifier.isEmpty(stageID)) {
                CimStageDO stage = cimJpaRepository.queryOne("SELECT * FROM OMSTAGE WHERE STAGE_ID = ?1", CimStageDO.class, stageID.getValue());
                if (!CimObjectUtils.isEmpty(stage)) {
                    stageGroupID = stage.getStageGroupID();
                    stageGroupObj = stage.getStageGroupObj();
                    attributes.setStageGroupID(new ObjectIdentifier(stageGroupID, stageGroupObj));
                } else {
                    attributes.setStageGroupID(new ObjectIdentifier("*", "*"));
                    //out.setReturnCode(retCodeConfig.getSomeopelistDataError());
                }
            } else {
                attributes.setStageGroupID(new ObjectIdentifier("*", "*"));
                //out.setReturnCode(retCodeConfig.getSomeopelistDataError());
            }
        }

        //-----------------------------------------------------------------------------
        //  Get process information from Process Definition
        //-----------------------------------------------------------------------------
        String hFRPFPD_LEVEL = BizConstant.SP_PD_FLOWLEVEL_OPERATION;
        if (!CimObjectUtils.isEmpty(processDefinitionID)) {
            CimProcessDefinitionDO processDefinition = cimJpaRepository.queryOne("SELECT * FROM OMPRP WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2", CimProcessDefinitionDO.class, processDefinitionID, hFRPFPD_LEVEL);
            if (!CimObjectUtils.isEmpty(processDefinition)) {
                if (!CimStringUtils.equals(BizConstant.SP_ACTIVE_VERSION, processDefinition.getVersionID())) {
                    attributes.setOperationID(new ObjectIdentifier(processDefinitionID, processDefinitionObj));
                } else {
                    attributes.setOperationID(new ObjectIdentifier(processDefinition.getActiveID(), processDefinition.getActiveObj()));
                }
                attributes.setOperationName(processDefinition.getOperationID());
                attributes.setInspectionType(processDefinition.getInspectionType());
                attributes.setDepartmentNumber(processDefinition.getDepartment());
                attributes.setStandardCycleTime(processDefinition.getStandardCycleTime());
                attributes.setPdType(processDefinition.getProcessDefinitionType());
            } else {
                attributes.setOperationID(new ObjectIdentifier(processDefinitionID, processDefinitionObj));
                attributes.setOperationName("*");
                attributes.setInspectionType("*");
                attributes.setDepartmentNumber("*");
                //out.setReturnCode(retCodeConfig.getSomeopelistDataError());
            }
        } else {
            attributes.setOperationID(new ObjectIdentifier("*", "*"));
            attributes.setOperationName("*");
            attributes.setInspectionType("*");
            attributes.setDepartmentNumber("*");
            //out.setReturnCode(retCodeConfig.getSomeopelistDataError());
        }
        if (TransactionIDEnum.equals(TransactionIDEnum.LOT_FUTURE_ACTION_LIST_INQ, objCommon.getTransactionID())) {
            attributes.setProcessRef(processRef);
            return attributes;
        }

        //-----------------------------------------------------------------------------
        //  Get equipmentID
        //-----------------------------------------------------------------------------
        String eqpListFlag = StandardProperties.OM_STEP_EQP_LIST_INQ.getValue();
        if (CimStringUtils.equals(BizConstant.ENV_ENABLE, eqpListFlag)) {
            if (!ObjectIdentifier.isEmpty(productID) && !ObjectIdentifier.equalsWithValue(attributes.getOperationID(), "*")) {
                List<ObjectIdentifier> equipmentIDsOut = null;
                try {
                    equipmentIDsOut = processMethod.processDispatchEquipmentsGetDR(objCommon, productID, attributes.getOperationID());
                }catch (ServiceException e){
                    //out.setReturnCode(retCodeConfig.getSomeopelistDataError());
                }
                attributes.setMachineList(equipmentIDsOut);
            } else {
                //out.setReturnCode(retCodeConfig.getSomeopelistDataError());
            }
        }

        //-----------------------------------------------------------------------------
        //  Set Schedule Information
        //-----------------------------------------------------------------------------
        if (!CimObjectUtils.isEmpty(objrefPO)) {
            CimProcessOperationDO processOperation = cimJpaRepository.queryOne("SELECT * FROM OMPROPE WHERE ID = ?1", CimProcessOperationDO.class, objrefPO);
            Validations.check(CimObjectUtils.isEmpty(processOperation),retCodeConfig.getNotFoundProcessOperation());
            attributes.setOperationPass(processOperation.getPassCount().toString());
            attributes.setPlannedStartTime(processOperation.getPlanStartTime());
            attributes.setPlannedEndTime(processOperation.getPlanEndTime());
            attributes.setPlannedMachine(new ObjectIdentifier(processOperation.getPlanEuipmentID(), processOperation.getPlanEuipmentObj()));
            attributes.setActualStartTime(processOperation.getActualStartTime());
            attributes.setActualCompTime(processOperation.getActualEndTime());
            attributes.setAssignedMachine(new ObjectIdentifier(processOperation.getAssignEquipmentID(), processOperation.getAssignEquipmentObj()));

            List<Infos.ProcessBackupData> processBackupDataList = new ArrayList<>();
            if (CimBooleanUtils.isTrue(backupInfoFlag)) {
                if (null == processOperation || CimStringUtils.isEmpty(processOperation.getId())) {
                    processBackupDataList = null;
                }

                List<CimPOBackUpDataDO> cimPOBackUpDataDOList = cimJpaRepository.query("select * from OMPROPE_INTFABDATA where refkey = ?1", CimPOBackUpDataDO.class, processOperation.getId());
                if(CimArrayUtils.isNotEmpty(cimPOBackUpDataDOList)){
                    for (CimPOBackUpDataDO cimPOBackUpDataDO : cimPOBackUpDataDOList) {
                        Infos.ProcessBackupData processBackupData = new Infos.ProcessBackupData();
                        processBackupData.setEntryFlag(cimPOBackUpDataDO.getEntryFlag());
                        processBackupData.setHostName(cimPOBackUpDataDO.getHostName());
                        processBackupData.setLotID(new ObjectIdentifier(cimPOBackUpDataDO.getLotID(), cimPOBackUpDataDO.getLotObj()));
                        processBackupData.setServerName(cimPOBackUpDataDO.getServerName());
                        processBackupData.setSourceFlag(cimPOBackUpDataDO.getSourceFlag());
                        processBackupData.setObjrefPO(cimPOBackUpDataDO.getProcessOperationID());
                        processBackupData.setItDaemonPort(cimPOBackUpDataDO.getDaemonPortNumber());
                        if (processBackupDataList != null) {
                            processBackupDataList.add(processBackupData);
                        }
                    }
                }
                attributes.setProcessBackupDataList(processBackupDataList);
            }
        } else {
            attributes.setObjrefPO(null);
            attributes.setOperationPass(null);
            attributes.setActualStartTime(null);
            attributes.setActualCompTime(null);
            attributes.setAssignedMachine(null);
            attributes.setProcessBackupDataList(null);
            CimLotOperationScheduleDO lotOperationSchedule = cimJpaRepository.queryOne("SELECT * FROM OMLOTOPEPLAN WHERE ENTITY_MGR = ?1 AND PRP_ID = ?2 AND OPE_NO = ?3", CimLotOperationScheduleDO.class, lotScheduleObj, attributes.getRouteID().getValue(), attributes.getOperationNumber());
            if (!CimObjectUtils.isEmpty(lotOperationSchedule)) {
                attributes.setPlannedStartTime(lotOperationSchedule.getPlanStartTime());
                attributes.setPlannedEndTime(lotOperationSchedule.getEndStartTime());
                attributes.setPlannedMachine(new ObjectIdentifier(lotOperationSchedule.getEquipmentID(), lotOperationSchedule.getEquipmentOBJ()));
            } else {
                attributes.setPlannedStartTime(null);
                attributes.setPlannedEndTime(null);
                attributes.setPlannedMachine(null);
            }
        }
        attributes.setProcessRef(processRef);
        return attributes;
    }

    @Override
    public Outputs.ObjProcessGetFlowBatchDefinitionOut processGetFlowBatchDefinition(Infos.ObjCommon objCommon, ObjectIdentifier lotID) {
        Outputs.ObjProcessGetFlowBatchDefinitionOut objProcessGetFlowBatchDefinitionOut = new Outputs.ObjProcessGetFlowBatchDefinitionOut();
        //--------------------------------------------------------------------------------------------------
        //   Preperation & Set out parameter
        //--------------------------------------------------------------------------------------------------
        //===== Get Lot Object =====
        com.fa.cim.newcore.bo.product.CimLot aLot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotID);
        Validations.check(aLot == null, new OmCode(retCodeConfig.getNotFoundLot(), lotID.getValue()));
        //--------------------------------------------------------------------------------------------------
        //   Get Flow Batch Definition InformationRemove and Set to out parm
        //--------------------------------------------------------------------------------------------------
        //===== Get PO Object =====
        com.fa.cim.newcore.bo.pd.CimProcessOperation aProcessOperation = aLot.getProcessOperation();
        Validations.check(aProcessOperation == null,new OmCode(retCodeConfig.getNotFoundProcessOperation(), ""));

        //===== Get FlowBatch Info =====
        ProcessDTO.PosFlowBatchControl strFlowBatchControl = aProcessOperation.getFlowBatchControl();

        //===== Set FlowBatch Info =====
        objProcessGetFlowBatchDefinitionOut.setName(strFlowBatchControl.getName());
        objProcessGetFlowBatchDefinitionOut.setSize(strFlowBatchControl.getSize());
        objProcessGetFlowBatchDefinitionOut.setMinimumSize(strFlowBatchControl.getMinimumSize());
        objProcessGetFlowBatchDefinitionOut.setMinWaferCount(strFlowBatchControl.getMinWaferCount());
        objProcessGetFlowBatchDefinitionOut.setTargetOperation(strFlowBatchControl.isTargetOperation());

        return objProcessGetFlowBatchDefinitionOut;
    }

    @Override
    public List<Infos.OperationNumberListAttributes> processOperationNumberListForLot(Infos.ObjCommon objCommon, Inputs.ObjProcessOperationProcessRefListForLotIn params) {
        Boolean searchDirection = params.isSearchDirection();
        Boolean posSearchFlag = params.isPosSearchFlag();
        Integer searchCount = params.getSearchCount();
        ObjectIdentifier searchRouteID = params.getSearchRouteID();
        String searchOperationNumber = params.getSearchOperationNumber();
        Boolean currentFlag = params.isCurrentFlag();
        ObjectIdentifier lotID = params.getLotID();

        String branchCheckModeVar = StandardProperties.OM_BRANCH_RETURN_ACTIVE_ROUTE.getValue();
        int branchCheckMode = CimObjectUtils.isEmpty(branchCheckModeVar) || Integer.valueOf(branchCheckModeVar) > 1 ? 0 : Integer.valueOf(branchCheckModeVar);
        Validations.check(searchCount <= 0,retCodeConfig.getInvalidInputParam());

        Boolean hvTrue = TRUE;
        int opeCount = 0, count, count2, count3;
        List<Infos.OperationNumberListAttributes> attributesList = new ArrayList<>();
        //-----------------------------------------------------------------------------
        // (1) Get current process information
        //-----------------------------------------------------------------------------
        CimLotDO example = new CimLotDO();
        example.setLotID(ObjectIdentifier.fetchValue(lotID));
        CimLotDO lot = cimJpaRepository.findOne(Example.of(example)).orElse(null);
        Validations.check(CimObjectUtils.isEmpty(lot),retCodeConfig.getNotFoundLot());
        String lotProcessFlowContextObj = lot.getProcessFlowContextObj();
        String lotProcessOperationObj = lot.getProcessOperationObj();

        String currentPoObj = lotProcessOperationObj;
        CimProcessOperationDO processOperation = cimJpaRepository.queryOne("SELECT * FROM OMPROPE WHERE ID = ?", CimProcessOperationDO.class, lotProcessOperationObj);
        Validations.check(CimObjectUtils.isEmpty(processOperation),retCodeConfig.getNotFoundProcessOperation());

        String currentPosObj = processOperation.getProcessOperationSpecificationObj();
        String currentModulePosObj = processOperation.getModuleProcessOperationSpecificationsObj();
        String currentPfObj = processOperation.getProcessFlowObj();
        String currentMainPfObj = processOperation.getMainProcessFlowObj();
        String currentModulePfObj = processOperation.getModuleProcessFlowObj();
        String currentModuleNo = processOperation.getModuleNumber();
        String currentModuleOpeNo = processOperation.getModuleOperationNumber();
        String currentOpeNo = processOperation.getOperationNumber();

        //--- Get main PF information
        String sqlPf = "SELECT A.PRP_ID, A.PRP_RKEY, A.ACTIVE_FLAG, B.PRP_TYPE FROM OMPRF A, OMPRP B WHERE A.ID = ?1 AND A.PRP_ID = B.PRP_ID AND B.PRP_LEVEL = ?2";
        List<Object[]> query = cimJpaRepository.query(sqlPf, currentMainPfObj, BizConstant.SP_PD_FLOWLEVEL_MAIN);
        Validations.check(CimObjectUtils.isEmpty(query),retCodeConfig.getNotFoundProcessFlow());
        Object[] field = query.get(0);
        Infos.PFAndPDField pfAndPDField = new Infos.PFAndPDField();
        pfAndPDField.setMainProcessDefinitionID(String.valueOf(field[0]));
        pfAndPDField.setMainProcessDefinitionObj(String.valueOf(field[1]));
        pfAndPDField.setState(Integer.valueOf(String.valueOf(field[2])) > 0);
        pfAndPDField.setProcessDefinitionType(String.valueOf(field[3]));

        String currentMainPdid = pfAndPDField.getMainProcessDefinitionID();
        String currentMainPdobj = pfAndPDField.getMainProcessDefinitionObj();
        String currentMainPdtype = pfAndPDField.getProcessDefinitionType();
        Boolean mainPFState = pfAndPDField.getState();

        //--- Get seq_no of current module from main PF
        CimPFDefinitionListDO processFlowDefinitionList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFDefinitionListDO.class, currentMainPfObj, currentModuleNo);
        Validations.check(CimObjectUtils.isEmpty(processFlowDefinitionList),retCodeConfig.getNotFoundProcessFlow());
        Integer currentMainPfPdlistSeqno = processFlowDefinitionList.getSequenceNumber();
        //--- Get module PF information
        CimProcessFlowDO processFlow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE ID = ?", CimProcessFlowDO.class, currentModulePfObj);
        Validations.check(CimObjectUtils.isEmpty(processFlow),retCodeConfig.getNotFoundProcessFlow());
        String currentModulePdid = processFlow.getMainProcessDefinitionID();
        Boolean modulePFState = processFlow.getState();
        //--- Get seq_no of current process from module PF
        CimPFPosListDO processFlowPosList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFPosListDO.class, currentModulePfObj, currentModuleOpeNo);
        Validations.check(CimObjectUtils.isEmpty(processFlowPosList),retCodeConfig.getNotFoundProcessFlow());
        Integer currentModulePfPoslistSeqno = processFlowPosList.getSequenceNumber();

        //-----------------------------------------------------------------------------
        // (2) Set the current operation information
        //-----------------------------------------------------------------------------
        if (CimBooleanUtils.isTrue(currentFlag)) {
            Infos.OperationNumberListAttributes attributes = new Infos.OperationNumberListAttributes();
            attributes.setSeqno(-1);
            attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
            attributes.setOperationNumber(currentOpeNo);
            opeCount = addOperationNumberListAttributes(attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
        }
        if (opeCount == searchCount) {
            return attributesList;
        }

        //-----------------------------------------------------------------------------
        //   Get next process info for backup processing lot.
        //-----------------------------------------------------------------------------
        Boolean backupProcessingFlag = false;
        if (CimBooleanUtils.isTrue(lot.getBackupProcessingFlag()) && CimBooleanUtils.isTrue(searchDirection)) {
            List<CimPOBackUpDataDO> backUpDatas = new ArrayList<>();
            if (CimObjectUtils.isEmpty(lotProcessOperationObj)){
                backUpDatas = null;
            }
            backUpDatas = cimJpaRepository.query("SELECT * FROM OMPROPE_INTFABDATA WHERE REFKEY = ?", CimPOBackUpDataDO.class, lotProcessOperationObj);
            //-----------------------------------------------------------------------------
            //   Get BackupInfo from FRPO_BKUPDATA
            //-----------------------------------------------------------------------------
            boolean sourceFlag = false;
            boolean entryFlag = false;
            if (!CimArrayUtils.isEmpty(backUpDatas)) {
                CimPOBackUpDataDO backUpData = backUpDatas.get(backUpDatas.size() - 1);
                sourceFlag = CimBooleanUtils.isTrue(backUpData.getSourceFlag());
                entryFlag = CimBooleanUtils.isTrue(backUpData.getEntryFlag());
            }
            if (CimBooleanUtils.isTrue(sourceFlag) && CimBooleanUtils.isTrue(entryFlag)) {
                //-----------------------------------------------------------------------------
                // Get return process information as next
                //-----------------------------------------------------------------------------
                backupProcessingFlag = true;
                CimProcessFlowContextReturnDO processFlowContextReturn = cimJpaRepository.queryOne("SELECT * FROM OMPRFCX_RTNSEQ WHERE REFKEY = ?1 AND IDX_NO = ?2", CimProcessFlowContextReturnDO.class, lotProcessFlowContextObj, 0);
                Validations.check(CimObjectUtils.isEmpty(processFlowContextReturn),retCodeConfig.getNotFoundReturnOpe());
                String nextOpeNo = processFlowContextReturn.getOperationNumber();
                String nextModuleNo = BaseStaticMethod.convertOpeNoToModuleNo(nextOpeNo);
                String nextModuleOpeNo = BaseStaticMethod.convertOpeNoToModuleOpeNo(nextOpeNo);
                String nextPfObj = processFlowContextReturn.getProcessFlowObj();
                String nextMainPfObj = processFlowContextReturn.getMainProcessFlowObj();
                String nextModulePfObj = processFlowContextReturn.getModuleProcessFlowObj();

                //-----------------------------------------------------------------------------
                // Get return process information from FRPF_POSLIST
                //-----------------------------------------------------------------------------
                CimPFPosListDO posList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFPosListDO.class, nextPfObj, nextOpeNo);
                String nextPosObj = CimObjectUtils.isEmpty(posList) ? "" : posList.getProcessOperationSpecificationsObj();

                //-----------------------------------------------------------------------------
                // Get return process information from FRPF
                //-----------------------------------------------------------------------------
                CimProcessFlowDO nextMainPF = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE ID = ?", CimProcessFlowDO.class, nextMainPfObj);
                Validations.check(CimObjectUtils.isEmpty(nextMainPF),retCodeConfig.getNotFoundProcessFlow());
                String nextMainPdid = nextMainPF.getMainProcessDefinitionID();
                String nextMainPdobj = nextMainPF.getMainProcessDefinitionObj();
                Boolean nextMainPfState = CimBooleanUtils.isTrue(nextMainPF.getState());

                //-----------------------------------------------------------------------------
                // Get return process information from FRPF_PDLIST
                //-----------------------------------------------------------------------------
                processFlowDefinitionList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFDefinitionListDO.class, nextMainPfObj, nextModuleNo);
                Validations.check(CimObjectUtils.isEmpty(processFlowDefinitionList),retCodeConfig.getNotFoundProcessFlow());
                Integer nextMainPfPdlistSeqno = processFlowDefinitionList.getSequenceNumber();
                //-----------------------------------------------------------------------------
                // Get return process information from FRPF
                //-----------------------------------------------------------------------------
                processFlow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE ID = ?", CimProcessFlowDO.class, nextModulePfObj);
                Validations.check(CimObjectUtils.isEmpty(processFlow),retCodeConfig.getNotFoundProcessFlow());
                Boolean nextModulePfState = CimBooleanUtils.isTrue(processFlow.getState());

                //-----------------------------------------------------------------------------
                // Get return process information from FRPF_POSLIST
                //-----------------------------------------------------------------------------
                CimPFPosListDO flowPosList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFPosListDO.class, nextModulePfObj, nextModuleOpeNo);
                Validations.check(CimObjectUtils.isEmpty(flowPosList),retCodeConfig.getNotFoundProcessFlow());
                Integer nextModulePfPoslistSeqno = flowPosList.getSequenceNumber();
                String nextModulePosObj = flowPosList.getProcessOperationSpecificationsObj();

                //-----------------------------------------------------------------------------
                // Set return process information by process_OperationListForLot_Helper()
                //-----------------------------------------------------------------------------
                Infos.OperationNumberListAttributes attributes = new Infos.OperationNumberListAttributes();
                attributes.setSeqno(-1);
                attributes.setRouteID(new ObjectIdentifier(nextMainPdid, nextMainPdobj));
                attributes.setOperationNumber(nextOpeNo);
                opeCount = addOperationNumberListAttributes(attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);

                currentMainPdid = nextMainPdid;
                currentMainPdobj = nextMainPdobj;
                currentPoObj = null;
                currentPfObj = nextPfObj;
                currentModuleNo = nextModuleNo;
                mainPFState = nextMainPfState;
                currentMainPfPdlistSeqno = nextMainPfPdlistSeqno;
                currentModulePfPoslistSeqno = nextModulePfPoslistSeqno;
                modulePFState = nextModulePfState;
                currentMainPfObj = nextMainPfObj;
                currentModulePfObj = nextModulePfObj;
            }
        }

        //-----------------------------------------------------------------------------
        // (3) Get forward process information
        //-----------------------------------------------------------------------------
        String modulePfObj = null, activeModulePfObj = null, nextModuleOpeNo = null, nextModulePosObj = null, previousModuleOpeNo, previousModulePosObj;
        int modulePfPoslistSeqno = 0;
        int i;
        Boolean findFlag;
        if (CimBooleanUtils.isTrue(searchDirection)) {
            //-----------------------------------------------------------------------------
            // (3-1) Get next POS from current/active module PF
            //-----------------------------------------------------------------------------
            // If module PF is active, set next POS's seq_no from current module PF
            if (CimBooleanUtils.isTrue(modulePFState)) {
                modulePfObj = currentModulePfObj;
                modulePfPoslistSeqno = currentModulePfPoslistSeqno + 1;
                findFlag = true;
            } else {
                findFlag = false;
                //--- Get active module PF information
                String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                activeModulePfObj = getActiveProcessFlowObj(currentModulePdid, processDefinitionLevel);
                i = 0;
                while (opeCount < searchCount) {
                    // Search the next operation by finding the current module openo on active module PF
                    if (i <= 0) {
                        CimPFPosListDO posList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFPosListDO.class, activeModulePfObj, currentModuleOpeNo);
                        if (!CimObjectUtils.isEmpty(posList)) {
                            modulePfObj = activeModulePfObj;
                            modulePfPoslistSeqno = posList.getSequenceNumber() + 1;
                            findFlag = true;
                            break;
                        }
                    } else {
                        currentModulePfPoslistSeqno++;
                        CimPFPosListDO posList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND IDX_NO = ?2", CimPFPosListDO.class, currentModulePfObj, currentModulePfPoslistSeqno);
                        if (!CimObjectUtils.isEmpty(posList)) {
                            //--- Keep the next operation information on current module PF
                            nextModuleOpeNo = posList.getDKey();
                            nextModulePosObj = posList.getProcessOperationSpecificationsObj();
                            //--- Search the corresponding next module openo from active module PF
                            posList = cimJpaRepository.queryOne("select * from OMPRF_PRSSSEQ where refkey = ?1 and link_key = ?2", CimPFPosListDO.class, activeModulePfObj, nextModuleOpeNo);
                            if (!CimObjectUtils.isEmpty(posList)) {
                                modulePfObj = activeModulePfObj;
                                modulePfPoslistSeqno = posList.getSequenceNumber();
                                findFlag = true;
                                break;
                            } else {
                                Infos.OperationNumberListAttributes attributes = new Infos.OperationNumberListAttributes();
                                attributes.setSeqno(-1);
                                attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                                attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(currentModuleNo, nextModuleOpeNo));
                                opeCount = addOperationNumberListAttributes(attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                            }
                        } else {
                            break;
                        }
                    }
                    i++;
                }
            }
            if (opeCount == searchCount) {
                return attributesList;
            }

            //-----------------------------------------------------------------------------
            // Set next POS from active current module PF
            //-----------------------------------------------------------------------------
            if (CimBooleanUtils.isTrue(findFlag)) {
                List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND IDX_NO >= ?2  ORDER BY IDX_NO", CimPFPosListDO.class, modulePfObj, modulePfPoslistSeqno);
                count = 0;
                while (opeCount < searchCount) {
                    if (CimObjectUtils.isEmpty(processFlowPosLists) || count >= CimArrayUtils.getSize(processFlowPosLists)) {
                        break;
                    }
                    CimPFPosListDO posList = processFlowPosLists.get(count);
                    //--- Set next operation information on active current module PF
                    Infos.OperationNumberListAttributes attributes = new Infos.OperationNumberListAttributes();
                    attributes.setSeqno(-1);
                    attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                    attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(currentModuleNo, posList.getDKey()));
                    opeCount = addOperationNumberListAttributes(attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                    count++;
                }
            }
            if (opeCount == searchCount) {
                return attributesList;
            }

            //-----------------------------------------------------------------------------
            // (3-2) Get next module PD from current/active main PF
            //-----------------------------------------------------------------------------
            String mainPfObj = null, activeMainPfObj = null, nextModulePdid = null, nextModuleNo = null;
            int mainPfPdlistSeqno = 0;
            // If main PF is active, set next module PD's seq_no from current main PF
            if (CimBooleanUtils.isTrue(mainPFState)) {
                mainPfObj = currentMainPfObj;
                mainPfPdlistSeqno = currentMainPfPdlistSeqno + 1;
                findFlag = true;

            } else { // If main PF is NOT active, search next module PD's seq_no from active main PF
                findFlag = false;
                String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE;
                CimProcessFlowDO flow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2 AND ACTIVE_FLAG = ?3", CimProcessFlowDO.class, currentMainPdid, processDefinitionLevel, hvTrue);
                Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                activeMainPfObj = flow.getId();
                i = 0;
                while (true) {
                    if (i == 0) {
                        CimPFDefinitionListDO definitionList = cimJpaRepository.queryOne("select * from OMPRF_ROUTESEQ where refkey = ?1 and LINK_key = ?2", CimPFDefinitionListDO.class, activeMainPfObj, currentModuleNo);
                        if (!CimObjectUtils.isEmpty(definitionList)) {
                            mainPfObj = activeMainPfObj;
                            mainPfPdlistSeqno = definitionList.getSequenceNumber() + 1;
                            findFlag = true;
                            break;
                        }
                    } else {
                        currentMainPfPdlistSeqno++;
                        CimPFDefinitionListDO definitionList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND IDX_NO = ?2", CimPFDefinitionListDO.class, currentMainPfObj, currentMainPfPdlistSeqno);
                        if (!CimObjectUtils.isEmpty(definitionList)) {
                            nextModulePdid = definitionList.getProcessDefinitionID();
                            nextModuleNo = definitionList.getModuleNO();

                            //--- Search the corresponding next module number from the active main PF
                            definitionList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY =?1 AND LINK_KEY = ?2", CimPFDefinitionListDO.class, activeMainPfObj, nextModuleNo);
                            if (!CimObjectUtils.isEmpty(definitionList)) {
                                mainPfObj = activeMainPfObj;
                                mainPfPdlistSeqno = definitionList.getSequenceNumber();
                                findFlag = true;
                                break;
                            } else {
                                //---------------------------------------------------------------------------
                                // Set next POS from active next module PF and current(inactive) main PF
                                //---------------------------------------------------------------------------
                                processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                                String processFlowObj = getActiveProcessFlowObj(nextModulePdid, processDefinitionLevel);
                                //--- Set next operation information on active module PF
                                List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 ORDER BY IDX_NO", CimPFPosListDO.class, processFlowObj);
                                count = 0;
                                while (opeCount < searchCount) {
                                    if (CimObjectUtils.isEmpty(processFlowPosLists) || count >= processFlowPosLists.size()) {
                                        break;
                                    }
                                    CimPFPosListDO posList = processFlowPosLists.get(count);
                                    Infos.OperationNumberListAttributes attributes = new Infos.OperationNumberListAttributes();
                                    attributes.setSeqno(-1);
                                    attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                                    attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(nextModuleNo, posList.getDKey()));
                                    opeCount = addOperationNumberListAttributes(attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                                    count++;
                                }
                            }
                        } else break;
                    }
                    i++;
                }
            }
            if (opeCount == searchCount) {
                return attributesList;
            }
            //-----------------------------------------------------------------------------
            // Set next POS from active next module PF and active main PF
            //-----------------------------------------------------------------------------
            if (CimBooleanUtils.isTrue(findFlag)) {
                List<CimPFDefinitionListDO> processFlowPDLists = cimJpaRepository.query("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND IDX_NO >= ?2 ORDER BY IDX_NO", CimPFDefinitionListDO.class, mainPfObj, mainPfPdlistSeqno);
                count = 0;
                while (opeCount < searchCount) {
                    if (CimObjectUtils.isEmpty(processFlowPDLists) || count >= processFlowPDLists.size())
                        break;
                    CimPFDefinitionListDO definitionList = processFlowPDLists.get(count);
                    //--- Get active module PF information
                    String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                    String processFlowObj = getActiveProcessFlowObj(definitionList.getProcessDefinitionID(), processDefinitionLevel);
                    //--- Set next operation information on active module PF
                    List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 ORDER BY IDX_NO", CimPFPosListDO.class, processFlowObj);
                    count2 = 0;
                    while (opeCount < searchCount) {
                        if (CimObjectUtils.isEmpty(processFlowPosLists) || count2 >= processFlowPosLists.size()) {
                            break;
                        }
                        CimPFPosListDO posList = processFlowPosLists.get(count2);
                        //--- Set next operation information on active current module PF
                        Infos.OperationNumberListAttributes attributes = new Infos.OperationNumberListAttributes();
                        attributes.setSeqno(-1);
                        attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                        attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(definitionList.getModuleNO(), posList.getDKey()));
                        opeCount = addOperationNumberListAttributes(attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                        count2++;
                    }
                    count++;
                }
            }
            if (opeCount == searchCount) {
                return attributesList;
            }

            //---------------------------------------------------------------------------------------------------------------
            // (3-3) If the lot is on sub/rework route, set the return operaion and the following operations from return flow
            //---------------------------------------------------------------------------------------------------------------
            String beforeMainPdtype = null;
            List<CimProcessFlowContextReturnDO> processFlowContextReturns = cimJpaRepository.query("SELECT * FROM OMPRFCX_RTNSEQ WHERE REFKEY = ?1 ORDER BY IDX_NO", CimProcessFlowContextReturnDO.class, lotProcessFlowContextObj);
            count = 0;
            while (opeCount < searchCount) {
                if (CimObjectUtils.isEmpty(processFlowContextReturns) || count >= processFlowContextReturns.size())
                    break;
                CimProcessFlowContextReturnDO processFlowContextReturn = processFlowContextReturns.get(count);
                if (backupProcessingFlag) {
                    backupProcessingFlag = false;
                    continue;
                }
                Integer returnSeqNo = processFlowContextReturn.getSequenceNumber();
                String returnOpeNo = processFlowContextReturn.getOperationNumber();
                String returnModuleNo = BaseStaticMethod.convertOpeNoToModuleNo(returnOpeNo);
                String returnModuleOpeNo = BaseStaticMethod.convertOpeNoToModuleOpeNo(returnOpeNo);
                String returnPfObj = processFlowContextReturn.getProcessFlowObj();
                String returnMainPfObj = processFlowContextReturn.getMainProcessFlowObj();
                String returnModulePfObj = processFlowContextReturn.getModuleProcessFlowObj();

                String mainPDTYPE = count == 0 ? currentMainPdtype : beforeMainPdtype;

                String sql = "SELECT A.PRP_ID, A.PRP_RKEY, A.ACTIVE_FLAG, B.PRP_TYPE FROM OMPRF A, OMPRP B WHERE A.ID = ?1 AND A.PRP_ID = B.PRP_ID AND B.PRP_LEVEL = ?2";
                List<Object[]> list1 = cimJpaRepository.query(sql,returnMainPfObj, BizConstant.SP_PD_FLOWLEVEL_MAIN);
                Validations.check(CimObjectUtils.isEmpty(list1),retCodeConfig.getNotFoundProcessFlow());

                Object[] field1 = list1.get(0);
                Infos.PFAndPDField pfAndPDField1 = new Infos.PFAndPDField();
                pfAndPDField1.setMainProcessDefinitionID(String.valueOf(field1[0]));
                pfAndPDField1.setMainProcessDefinitionObj(String.valueOf(field1[1]));
                pfAndPDField1.setState(Integer.valueOf(String.valueOf(field1[2])) > 0);
                pfAndPDField1.setProcessDefinitionType(String.valueOf(field1[3]));

                beforeMainPdtype = pfAndPDField1.getProcessDefinitionType();
                String originalReturnMainPfObj = returnMainPfObj;
                String originalReturnModulePfObj = returnModulePfObj;
                Boolean bSameModuleFlag = true;
                if (branchCheckMode == 1) {
                    CimProcessFlowContextBackPODO processFlowContextBackProcessOperation = cimJpaRepository.queryOne("SELECT * FROM OMPRFCX_BCKPROPESEQ WHERE REFKEY = ?1 AND IDX_NO = ?2", CimProcessFlowContextBackPODO.class, lotProcessFlowContextObj, returnSeqNo);
                    Validations.check(CimObjectUtils.isEmpty(processFlowContextBackProcessOperation),retCodeConfig.getNotFoundProcessFlow());
                    String reworkOutKey = processFlowContextBackProcessOperation.getReworkOutKey();
                    lotProcessOperationObj = processFlowContextBackProcessOperation.getProcessOperationObj();
                    CimProcessOperationDO po = cimJpaRepository.queryOne("SELECT * FROM OMPROPE WHERE ID = ?1", CimProcessOperationDO.class, lotProcessOperationObj);
                    Validations.check(CimObjectUtils.isEmpty(po),retCodeConfig.getNotFoundProcessFlow());
                    String backupModuleNo = po.getModuleNumber();
                    if (CimStringUtils.equals(BizConstant.SP_MAINPDTYPE_REWORK, mainPDTYPE)) {
                        if (!CimObjectUtils.isEmpty(reworkOutKey)) {
                            backupModuleNo = BaseStaticMethod.convertOpeNoToModuleNo(reworkOutKey);
                            Validations.check(CimObjectUtils.isEmpty(backupModuleNo),retCodeConfig.getInvalidRouteId());
                        } else {
                            // get backup PO object
                            com.fa.cim.newcore.bo.pd.CimProcessOperation aBackupPO = baseCoreFactory.getBO(com.fa.cim.newcore.bo.pd.CimProcessOperation.class, lotProcessOperationObj);
                            Validations.check(CimObjectUtils.isEmpty(aBackupPO),retCodeConfig.getNotFoundOperation());

                            // get MainPF from backup PO
                            com.fa.cim.newcore.bo.pd.CimProcessFlow aMainPF = aBackupPO.getMainProcessFlow();
                            Validations.check(CimObjectUtils.isEmpty(aMainPF),retCodeConfig.getNotFoundProcessFlow());

                            // get Module number from backup PO
                            String aModuleNo = aBackupPO.getModuleNumber();
                            // get ModulePF from backup PO
                            com.fa.cim.newcore.bo.pd.CimProcessFlow aModulePF = aBackupPO.getModuleProcessFlow();
                            Validations.check(CimObjectUtils.isEmpty(aModulePF),retCodeConfig.getNotFoundProcessFlow());

                            // get ModulePOS from backup PO
                            com.fa.cim.newcore.bo.pd.CimProcessOperationSpecification aModulePOS = aBackupPO.getModuleProcessOperationSpecification();
                            Validations.check(CimObjectUtils.isEmpty(aModulePOS),retCodeConfig.getNotFoundPos());

                            // get previous ModulePOS
                            com.fa.cim.newcore.bo.pd.CimProcessOperationSpecification  aPrevPOS = null;

                            AtomicReference<com.fa.cim.newcore.bo.pd.CimProcessFlow> outMainProcessFlow = new AtomicReference<>();
                            AtomicReference<String> outModuleNumber = new AtomicReference<>();
                            AtomicReference<com.fa.cim.newcore.bo.pd.CimProcessFlow> outModuleProcessFlow = new AtomicReference<>();

                            aPrevPOS = aMainPF.getPreviousProcessOperationSpecificationFor(aModuleNo,aModulePF,aModulePOS,outMainProcessFlow,outModuleNumber,outModuleProcessFlow);
                            Validations.check(CimObjectUtils.isEmpty(aPrevPOS),retCodeConfig.getNotFoundPos());
                            backupModuleNo = outModuleNumber.get();
                        }
                    }
                    // Compare ModuleNumber
                    if (!CimStringUtils.equals(returnModuleNo, backupModuleNo)) {
                        bSameModuleFlag = false;
                    }
                }

                //--- Get return main PF information
                processFlow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE ID = ?1", CimProcessFlowDO.class, returnMainPfObj);
                Validations.check(CimObjectUtils.isEmpty(processFlow),retCodeConfig.getNotFoundProcessFlow());
                String returnMainPdid = processFlow.getMainProcessDefinitionID();
                String returnMainPdobj = processFlow.getMainProcessDefinitionObj();
                Boolean returnMainPfState = processFlow.getState();

                int returnMainPfPdlistSeqno = 0;
                int returnModulePfPoslistSeqno = 0;
                String returnModulePosObj = null;
                String returnModulePdid;
                Boolean returnModulePfState;

                if (CimBooleanUtils.isTrue(bSameModuleFlag)) {
                    //=========================================================================
                    //
                    // In this case,
                    //    Out-ModuleNumber and In-ModuleNumber is the same.
                    //    (Mod-A:10)
                    // ---10.10--10.20--10.30--10.40--(Main route)
                    //      |             ^
                    //      |             |
                    //      +-------------+ (Sub route)
                    //
                    //=========================================================================
                    //--- Get seq_no of return module from main PF
                    CimPFDefinitionListDO definitionList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFDefinitionListDO.class, returnMainPfObj, returnModuleNo);
                    Validations.check(CimObjectUtils.isEmpty(definitionList),retCodeConfig.getNotFoundProcessFlow());
                    returnMainPfPdlistSeqno = definitionList.getSequenceNumber();
                    CimProcessFlowDO flow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE ID = ?1", CimProcessFlowDO.class, returnModulePfObj);
                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    returnModulePdid = flow.getMainProcessDefinitionID();
                    returnModulePfState = flow.getState();
                    //--- Get seq_no of return process from module PF
                    CimPFPosListDO posList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFPosListDO.class, returnModulePfObj, returnModuleOpeNo);
                    Validations.check(CimObjectUtils.isEmpty(posList),retCodeConfig.getNotFoundProcessFlow());
                    returnModulePfPoslistSeqno = posList.getSequenceNumber();
                    returnModulePosObj = posList.getProcessOperationSpecificationsObj();
                } else {
                    Boolean bFindFlag = true;
                    //=========================================================================
                    //
                    // In this case,
                    //   Out-ModuleNumber and In-ModuleNumber is different.
                    //   (Mod-A:10)           (Mod-B:20)
                    // ---10.10--10.20- -20.10--20.20---(Main route)
                    //             |              ^
                    //             |              |
                    //             +--------------+ (Sub route)
                    //
                    //=========================================================================

                    //=================================================================
                    // Step1
                    //  Check STATE of MAIN_PF_OBJ(MainPF-A) in FRPXF_RETNLIST
                    //=================================================================
                    if (CimBooleanUtils.isFalse(returnMainPfState)) {
                        //=================================================================
                        // Step2
                        //  When STATE of MAIN_PF_OBJ is 0,
                        //   Get the latest MAIN_PF_OBJ(MainPF-B) from MainPD
                        //=================================================================
                        String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE;
                        CimProcessFlowDO flow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2 AND ACTIVE_FLAG = ?3", CimProcessFlowDO.class, returnMainPdid, processDefinitionLevel, hvTrue);
                        Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                        returnMainPfObj = flow.getId();
                        //=================================================================
                        // Step2-1
                        //   Get mdpd with return ModuleNo from the latest MAIN_PF_OBJ(MainPF-B)
                        //=================================================================
                        CimPFDefinitionListDO definitionList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFDefinitionListDO.class, returnMainPfObj, returnModuleNo);
                        if (CimObjectUtils.isEmpty(definitionList)) {
                            returnMainPfObj = originalReturnMainPfObj;
                            bFindFlag = false;
                        }
                        if (CimBooleanUtils.isTrue(bFindFlag)) {
                            returnModulePdid = definitionList.getProcessDefinitionID();
                            //=================================================================
                            // Step2-2
                            //   Get MOUDLE_PF_OBJ(mdpd-B) from mdpd
                            //=================================================================
                            processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                            returnModulePfObj = getActiveProcessFlowObj(returnModulePdid, processDefinitionLevel);
                            //=================================================================
                            // Step2-3
                            //   Get ModulePOS with return ModuleOpeNo from MOUDLE_PF_OBJ(mdpd-B)
                            //=================================================================
                            CimPFPosListDO posList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFPosListDO.class, returnModulePfObj, returnModuleOpeNo);
                            if (!CimObjectUtils.isEmpty(posList)) {
                                returnModulePfPoslistSeqno = posList.getSequenceNumber();
                                returnModulePosObj = posList.getProcessOperationSpecificationsObj();
                            } else {
                                returnMainPfObj = originalReturnMainPfObj;
                                returnModulePfObj = originalReturnModulePfObj;
                                bFindFlag = false;
                            }
                        }
                    } //if( returnMainPfState == 0 )

                    if (CimBooleanUtils.isTrue(returnMainPfState) || CimBooleanUtils.isFalse(bFindFlag)) {
                        //=================================================================
                        // Step3
                        //  When STATE of MAIN_PF_OBJ is 1 or ModulePOS does not found,
                        //=================================================================
                        //=================================================================
                        // Step3-1
                        //   Get mdpd with return ModuleNo from MAINP_PF_OBJ(MainPF-A)
                        //    if mdpd does not found, Go to Step4.
                        //=================================================================
                        String processDefinitionID = null;
                        bFindFlag = true;
                        CimPFDefinitionListDO definitionList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFDefinitionListDO.class, returnMainPfObj, returnModuleNo);
                        if (CimObjectUtils.isEmpty(definitionList)) {
                            bFindFlag = false;
                        } else {
                            processDefinitionID = definitionList.getProcessDefinitionID();
                        }
                        if (bFindFlag) {
                            returnModulePdid = processDefinitionID;
                            //=================================================================
                            // Step3-2
                            //   Get the latest ModulePF(ModulePF-C) from mdpd
                            //=================================================================
                            String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                            //--- If module PDID's version is "##", convert it to real PDID
                            returnModulePfObj = getActiveProcessFlowObj(returnModulePdid, processDefinitionLevel);
                            //=================================================================
                            // Step3-3
                            //   Get ModulePOS from the latest ModulePF(ModulePF-C)
                            //=================================================================
                            Integer sequenceNumber = 0;
                            String processOperationSpecificationsObj = null;
                            CimPFPosListDO posList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFPosListDO.class, returnModulePfObj, returnModuleOpeNo);
                            if (CimObjectUtils.isEmpty(posList)) {
                                returnModulePfObj = originalReturnModulePfObj;
                                bFindFlag = false;
                            } else {
                                sequenceNumber = posList.getSequenceNumber();
                                processOperationSpecificationsObj = posList.getProcessOperationSpecificationsObj();
                            }
                            if (CimBooleanUtils.isTrue(bFindFlag)) {
                                returnModulePfPoslistSeqno = sequenceNumber;
                                returnModulePosObj = processOperationSpecificationsObj;
                            }
                        }
                    } //if( returnMainPfState == 1 || bFindFlag == FALSE )

                    //=================================================================
                    // Step4
                    //  Check STATE of MODULE_PF_OBJ(ModlePF-A) in FRPXF_RETNLIST
                    //=================================================================
                    if (CimBooleanUtils.isFalse(bFindFlag)) {
                        //=================================================================
                        // Get STATE of MODULE_PF_OBJ(ModlePF-A)
                        //=================================================================
                        CimProcessFlowDO flow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE ID = ?1", CimProcessFlowDO.class, returnModulePfObj);
                        Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                        returnModulePfState = flow.getState();
                        if (CimBooleanUtils.isFalse(returnModulePfState)) {
                            //=================================================================
                            // Step5
                            //  When STATE of MODULE_PF_OBJ is 0,
                            //   Get mdpd from MODULE_PF_OBJ(ModlePF-A)
                            //=================================================================
                            flow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE ID = ?1",CimProcessFlowDO.class,returnModulePfObj);
                            Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                            returnModulePdid = flow.getMainProcessDefinitionID();
                            //=================================================================
                            // Get new MODULE_PF_OBJ(ModlePF-D) from mdpd
                            //=================================================================
                            String processFlowObj = null;
                            String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                            flow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2 AND ACTIVE_FLAG = ?3",CimProcessFlowDO.class,returnModulePdid, processDefinitionLevel, hvTrue);
                            bFindFlag = true;
                            if (CimObjectUtils.isEmpty(flow)) {
                                bFindFlag = false;
                            } else {
                                processFlowObj = flow.getId();
                            }

                            //=================================================================
                            // Step5-1
                            // Get ModulePOS with return ModuleOpeNo from new MODULE_PF_OBJ(ModlePF-D)
                            //  if ModulePOS is not found, Go to Step6.
                            //=================================================================
                            if (CimBooleanUtils.isTrue(bFindFlag)) {
                                returnModulePfObj = processFlowObj;
                                //--- Get seq_no of return process from module PF
                                Integer sequenceNumber = 0;
                                String processOperationSpecificationsObj = null;
                                CimPFPosListDO posList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFPosListDO.class, returnModulePfObj, returnModuleOpeNo);
                                if (CimObjectUtils.isEmpty(posList)) {
                                    returnModulePfObj = originalReturnModulePfObj;
                                    bFindFlag = false;
                                } else {
                                    sequenceNumber = posList.getSequenceNumber();
                                    processOperationSpecificationsObj = posList.getProcessOperationSpecificationsObj();
                                }
                                if (CimBooleanUtils.isTrue(bFindFlag)) {
                                    returnModulePfPoslistSeqno = sequenceNumber;
                                    returnModulePosObj = processOperationSpecificationsObj;
                                }
                            }
                        } //if( returnModulePfState == 0 )

                        if (CimBooleanUtils.isTrue(returnModulePfState) || CimBooleanUtils.isFalse(bFindFlag)) {
                            //=================================================================
                            // Step6
                            //  When STATE of MODULE_PF_OBJ is 1 or ModulePOS does not found,
                            //   Get ModulePOS with return ModuleOpeNo from new MODULE_PF_OBJ(ModlePF-A)
                            //=================================================================
                            CimPFPosListDO posList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFPosListDO.class, returnModulePfObj, returnModuleOpeNo);
                            Validations.check(CimObjectUtils.isEmpty(posList),retCodeConfig.getNotFoundProcessFlow());
                            returnModulePfPoslistSeqno = posList.getSequenceNumber();
                            returnModulePosObj = posList.getProcessOperationSpecificationsObj();
                        } //if( returnModulePfState == 1 || bFindFlag == FALSE )
                    } //if( bFindFlag == FALSE )

                    //--- Get seq_no of return module from main PF
                    CimPFDefinitionListDO definitionList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFDefinitionListDO.class, returnMainPfObj, returnModuleNo);
                    Validations.check(CimObjectUtils.isEmpty(definitionList),retCodeConfig.getNotFoundProcessFlow());
                    returnMainPfPdlistSeqno = definitionList.getSequenceNumber();
                    //--- Get return module PF information
                    CimProcessFlowDO flow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE ID = ?1", CimProcessFlowDO.class, returnModulePfObj);
                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    returnModulePdid = flow.getMainProcessDefinitionID();
                    returnModulePfState = flow.getState();
                }
                //-----------------------------------------------------------------------------
                // (3-3-1) Get next POS from return/active module PF
                //-----------------------------------------------------------------------------
                if (CimBooleanUtils.isTrue(returnModulePfState)) {
                    // Module PF is active, set return POS's seq_no from return module PF
                    modulePfObj = returnModulePfObj;
                    modulePfPoslistSeqno = returnModulePfPoslistSeqno;
                    findFlag = true;
                } else {
                    // Module PF is NOT active, search return POS's seq_no from active module PF
                    findFlag = false;

                    //--- Get active module PF information
                    String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                    CimProcessFlowDO flow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2 AND ACTIVE_FLAG = ?3", CimProcessFlowDO.class, returnModulePdid, processDefinitionLevel, hvTrue);
                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    activeModulePfObj = flow.getId();
                    i = 0;
                    while (opeCount < searchCount) {
                        // Search the return operation by finding the return module openo on active module PF
                        if (i <= 0) {
                            CimPFPosListDO posList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFPosListDO.class, activeModulePfObj, returnModuleOpeNo);
                            if (!CimObjectUtils.isEmpty(posList)) {
                                modulePfObj = activeModulePfObj;
                                modulePfPoslistSeqno = posList.getSequenceNumber();
                                findFlag = true;
                                break;
                            } else {
                                Infos.OperationNumberListAttributes attributes = new Infos.OperationNumberListAttributes();
                                attributes.setSeqno(returnSeqNo);
                                attributes.setRouteID(new ObjectIdentifier(returnMainPdid, returnMainPdobj));
                                attributes.setOperationNumber(returnOpeNo);
                                opeCount = addOperationNumberListAttributes(attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                            }
                        } else {
                            // Search the next operation by finding the next module openo on active module PF
                            //--- Get the next operation seq_no on return module PF
                            returnModulePfPoslistSeqno++;
                            CimPFPosListDO posList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND IDX_NO = ?2", CimPFPosListDO.class, returnModulePfObj, returnModulePfPoslistSeqno);
                            if (!CimObjectUtils.isEmpty(posList)) {
                                nextModuleOpeNo = posList.getDKey();
                                nextModulePosObj = posList.getProcessOperationSpecificationsObj();
                                posList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",CimPFPosListDO.class,activeModulePfObj, nextModuleOpeNo);
                                if (!CimObjectUtils.isEmpty(posList)) {
                                    modulePfObj = activeModulePfObj;
                                    modulePfPoslistSeqno = posList.getSequenceNumber();
                                    findFlag = true;
                                    break;
                                } else {
                                    Infos.OperationNumberListAttributes attributes = new Infos.OperationNumberListAttributes();
                                    attributes.setSeqno(returnSeqNo);
                                    attributes.setRouteID(new ObjectIdentifier(returnMainPdid, returnMainPdobj));
                                    attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(returnModuleNo, nextModuleOpeNo));
                                    opeCount = addOperationNumberListAttributes(attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                                }
                            } else break;
                        }// end of else if( i == 0 )
                        i++;
                    }// end of while
                }
                if (opeCount == searchCount) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // Set next POS from active return module PF
                //-----------------------------------------------------------------------------
                if (CimBooleanUtils.isTrue(findFlag)) {
                    List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND IDX_NO >= ?2 ORDER BY IDX_NO", CimPFPosListDO.class, modulePfObj, modulePfPoslistSeqno);
                    count2 = 0;
                    while (opeCount < searchCount) {
                        if (CimObjectUtils.isEmpty(processFlowPosLists) || count2 >= CimArrayUtils.getSize(processFlowPosLists))
                            break;
                        CimPFPosListDO posList = processFlowPosLists.get(count2);
                        Infos.OperationNumberListAttributes attributes = new Infos.OperationNumberListAttributes();
                        attributes.setSeqno(returnSeqNo);
                        attributes.setRouteID(new ObjectIdentifier(returnMainPdid, returnMainPdobj));
                        attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(returnModuleNo, posList.getDKey()));
                        opeCount = addOperationNumberListAttributes(attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                        count2++;
                    }
                }
                if (opeCount == searchCount) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // (3-3-2) Get next module PD from return/active main PF
                //-----------------------------------------------------------------------------
                // If main PF is active, set next module PD's seq_no from return main PF
                if (CimBooleanUtils.isTrue(returnMainPfState)) {
                    mainPfObj = returnMainPfObj;
                    mainPfPdlistSeqno = returnMainPfPdlistSeqno + 1;
                    findFlag = true;
                }
                // If main PF is NOT active, search next module PD's seq_no from active main PF
                else {
                    findFlag = false;
                    //--- Get active main PF information
                    String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                    CimProcessFlowDO flow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2 AND ACTIVE_FLAG = ?3", CimProcessFlowDO.class, returnMainPdid, processDefinitionLevel, hvTrue);
                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    activeMainPfObj = flow.getId();
                    i = 0;
                    while (opeCount < searchCount) {
                        // Search the next module PD by finding the return module number on active main PF
                        if (i == 0) {
                            CimPFPosListDO posList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFPosListDO.class, activeMainPfObj, returnModuleNo);
                            if (!CimObjectUtils.isEmpty(posList)) {
                                mainPfObj = activeMainPfObj;
                                mainPfPdlistSeqno = posList.getSequenceNumber() + 1;
                                findFlag = true;
                                break;
                            }

                        }
                        // Search the next module PD by finding the next module number on active main PF
                        else {
                            returnMainPfPdlistSeqno++;
                            CimPFDefinitionListDO definitionList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND IDX_NO = ?2", CimPFDefinitionListDO.class, returnMainPfObj, returnMainPfPdlistSeqno);
                            if (!CimObjectUtils.isEmpty(definitionList)) {
                                nextModulePdid = definitionList.getProcessDefinitionID();
                                nextModuleNo = definitionList.getModuleNO();

                                //--- Search the corresponding next module number from the active main PF
                                definitionList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",CimPFDefinitionListDO.class,activeMainPfObj, nextModuleNo);
                                if (!CimObjectUtils.isEmpty(definitionList)) {
                                    mainPfObj = activeMainPfObj;
                                    mainPfPdlistSeqno = definitionList.getSequenceNumber();
                                    findFlag = true;
                                    break;
                                } else {
                                    //---------------------------------------------------------------------------
                                    // Set next POS from active next module PF and return(inactive) main PF
                                    //---------------------------------------------------------------------------
                                    //--- Get active module PF information
                                    //--- If module PDID's version is "##", convert it to real PDID
                                    processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                                    String processFlowObj = getActiveProcessFlowObj(nextModulePdid, processDefinitionLevel);
                                    //--- Set next operation information on active module PF
                                    List<CimPFPosListDO> pfPosLists = cimJpaRepository.query("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 ORDER BY IDX_NO", CimPFPosListDO.class, processFlowObj);
                                    count2 = 0;
                                    while (opeCount < searchCount) {
                                        if (CimObjectUtils.isEmpty(pfPosLists) || count2 >= CimArrayUtils.getSize(pfPosLists))
                                            break;
                                        CimPFPosListDO posList = pfPosLists.get(count2);
                                        Infos.OperationNumberListAttributes attributes = new Infos.OperationNumberListAttributes();
                                        attributes.setSeqno(returnSeqNo);
                                        attributes.setRouteID(new ObjectIdentifier(returnMainPdid, returnMainPdobj));
                                        attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(nextModuleNo, posList.getDKey()));
                                        opeCount = addOperationNumberListAttributes(attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                                        count2++;
                                    }
                                }
                            } else break;
                        }// end of else if( i == 0 )
                        i++;
                    }// end of while
                }// end of else if( mainPFState == TRUE )
                if (opeCount == searchCount) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // Set next POS from active next module PF and active main PF
                //-----------------------------------------------------------------------------
                if (CimBooleanUtils.isTrue(findFlag)) {
                    //--- Get next module pdid, module_no from active main PF
                    List<CimPFDefinitionListDO> pfPdLists = cimJpaRepository.query("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND IDX_NO >= ?2 ORDER BY IDX_NO", CimPFDefinitionListDO.class, mainPfObj, mainPfPdlistSeqno);
                    count2 = 0;
                    while (true) {
                        if (CimObjectUtils.isEmpty(pfPdLists) || count2 >= pfPdLists.size()) break;
                        CimPFDefinitionListDO definitionList = pfPdLists.get(count2);
                        String moduleNO = definitionList.getModuleNO();
                        //--- Get active module PF information
                        String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                        //--- If module PDID's version is "##", convert it to real PDID
                        String processFlowObj = getActiveProcessFlowObj(definitionList.getProcessDefinitionID(), processDefinitionLevel);
                        List<CimPFPosListDO> pfPosLists = cimJpaRepository.query("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 ORDER BY IDX_NO", CimPFPosListDO.class, processFlowObj);
                        count3 = 0;
                        while (opeCount < searchCount) {
                            if (CimObjectUtils.isEmpty(pfPosLists) || count3 >= pfPosLists.size())
                                break;
                            CimPFPosListDO posList = pfPosLists.get(count3);
                            Infos.OperationNumberListAttributes attributes = new Infos.OperationNumberListAttributes();
                            attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(moduleNO, posList.getDKey()));
                            opeCount = addOperationNumberListAttributes(attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                            count3++;
                        }
                        count2++;
                    }
                }// end of if( findFlag == TRUE )
                count++;
                if (opeCount == searchCount) {
                    return attributesList;
                }
            }
        }
        //-----------------------------------------------------------------------------
        // (4) Get backward process information         if( searchDirection == FALSE )
        //-----------------------------------------------------------------------------
        else {
            //-----------------------------------------------------------------------------
            // (4-1) Get backward process from FRPO, if( posSearchFlag == FALSE )
            //-----------------------------------------------------------------------------
            if (CimBooleanUtils.isFalse(posSearchFlag)) {
                //Get a sequence number of current operation in FRPFX_POLIST
                CimProcessFlowContextPODO pfxPoList = cimJpaRepository.queryOne("SELECT * FROM OMPRFCX_PROPESEQ WHERE REFKEY = ?1 AND PROPE_RKEY = ?2", CimProcessFlowContextPODO.class, lotProcessFlowContextObj, currentPoObj);
                Validations.check(CimObjectUtils.isEmpty(pfxPoList),retCodeConfig.getNotFoundProcessFlow());
                Integer sequenceNumber = pfxPoList.getSequenceNumber();
                List<CimProcessFlowContextPODO> pfxPoLists = cimJpaRepository.query("select * from OMPRFCX_PROPESEQ where refkey = ?1 and IDX_NO < ?2", CimProcessFlowContextPODO.class, lotProcessFlowContextObj, sequenceNumber);
                count = 0;
                while (opeCount < searchCount) {
                    if (CimArrayUtils.isEmpty(pfxPoLists) || count >= pfxPoLists.size()) break;
                    CimProcessFlowContextPODO pfxPoLessThanList = pfxPoLists.get(count);
                    CimProcessOperationDO po = cimJpaRepository.queryOne("SELECT * FROM OMPROPE WHERE ID = ?1", CimProcessOperationDO.class, pfxPoLessThanList.getProcessOperationObj());
                    Validations.check(CimObjectUtils.isEmpty(po),retCodeConfig.getNotFoundProcessOperation());
                    Infos.OperationNumberListAttributes attributes = new Infos.OperationNumberListAttributes();
                    attributes.setSeqno(-1);
                    attributes.setRouteID(new ObjectIdentifier(po.getMainProcessDefinitionID(), po.getMainProcessDefinitionObj()));
                    attributes.setOperationNumber(po.getOperationNumber());
                    opeCount = addOperationNumberListAttributes(attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                    count++;
                }
            }
            //-----------------------------------------------------------------------------
            // (4-2) Get backward process from FRPOS, if( posSearchFlag == TRUE )
            //-----------------------------------------------------------------------------
            else {
                //-----------------------------------------------------------------------------
                // (4-2-1) Get previous POS from current/active module PF
                //-----------------------------------------------------------------------------
                // If module PF is active, set previous POS's seq_no from current module PF
                if (CimBooleanUtils.isTrue(modulePFState)) {
                    modulePfObj = currentModulePfObj;
                    modulePfPoslistSeqno = currentModulePfPoslistSeqno - 1;
                    findFlag = true;
                } else {
                    findFlag = false;
                    //--- Get active module PF information
                    String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                    activeModulePfObj = getActiveProcessFlowObj(currentModulePdid, processDefinitionLevel);

                    i = 0;
                    while (opeCount < searchCount) {
                        // Search the previous operation by finding the current module openo on active module PF
                        if (i <= 0) {
                            CimPFPosListDO pfPosList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFPosListDO.class, activeModulePfObj, currentModuleOpeNo);
                            if (!CimObjectUtils.isEmpty(pfPosList)) {
                                //--- Set the previous operation seq_no on active module PF
                                modulePfObj = activeModulePfObj;
                                modulePfPoslistSeqno = pfPosList.getSequenceNumber() - 1;
                                findFlag = true;
                                break;
                            }
                        }
                        // Search the previous operation by finding the previous module openo on active module PF
                        else {
                            //--- Get the previous operation seq_no on current module PF
                            currentModulePfPoslistSeqno--;
                            CimPFPosListDO pfPosList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND IDX_NO = ?2", CimPFPosListDO.class, currentModulePfObj, currentModulePfPoslistSeqno);
                            if (!CimObjectUtils.isEmpty(pfPosList)) {
                                //--- Keep the previous operation information on current module PF
                                previousModuleOpeNo = pfPosList.getDKey();
                                previousModulePosObj = pfPosList.getProcessOperationSpecificationsObj();

                                //--- Search the corresponding previous module openo from active module PF
                                pfPosList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFPosListDO.class, activeModulePfObj, previousModuleOpeNo);
                                if (!CimObjectUtils.isEmpty(pfPosList)) {
                                    modulePfObj = activeModulePfObj;
                                    modulePfPoslistSeqno = pfPosList.getSequenceNumber();
                                    findFlag = true;
                                    break;
                                } else {
                                    //---------------------------------------------------------------------------
                                    // Set previous POS from inactive current module PF
                                    //---------------------------------------------------------------------------
                                    Infos.OperationNumberListAttributes attributes = new Infos.OperationNumberListAttributes();
                                    attributes.setSeqno(-1);
                                    attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                                    attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(currentModuleNo, previousModuleOpeNo));
                                    opeCount = addOperationNumberListAttributes(attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                                }
                            } else break;
                        }// end of else if( i == 0 )
                        i++;
                    }// end of while
                }// end of else if( modulePFState == TRUE )
                if (opeCount == searchCount) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // Set previous POS from active current module PF
                //-----------------------------------------------------------------------------
                if (CimBooleanUtils.isTrue(findFlag)) {
                    List<CimPFPosListDO> pfPosLists = cimJpaRepository.query("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND IDX_NO <= ?2 ORDER BY IDX_NO DESC", CimPFPosListDO.class, modulePfObj, modulePfPoslistSeqno);
                    count = 0;
                    while (opeCount < searchCount) {
                        if (CimObjectUtils.isEmpty(pfPosLists) || count >= pfPosLists.size()) {
                            break;
                        }
                        CimPFPosListDO pfPosList = pfPosLists.get(count);
                        //--- Set previous operation information on active current module PF
                        Infos.OperationNumberListAttributes attributes = new Infos.OperationNumberListAttributes();
                        attributes.setSeqno(-1);
                        attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                        attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(currentModuleNo, pfPosList.getDKey()));
                        opeCount = addOperationNumberListAttributes(attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                        count++;
                    }
                }
                if (opeCount == searchCount) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // (4-2-2) Get previous module PD from current/active main PF
                //-----------------------------------------------------------------------------
                String mainPfObj = null, activeMainPfObj = null;
                String previousModulePdid = null, previousModuleNo = null;
                Integer mainPfPdlistSeqno = 0;

                // If main PF is active, set previous module PD's seq_no from current main PF
                if (CimBooleanUtils.isTrue(mainPFState)) {
                    mainPfObj = currentMainPfObj;
                    mainPfPdlistSeqno = currentMainPfPdlistSeqno - 1;
                    findFlag = true;
                }
                // If main PF is NOT active, search previous module PD's seq_no from active main PF
                else {
                    findFlag = false;

                    //--- Get active main PF information
                    String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE;
                    CimProcessFlowDO flow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2 AND ACTIVE_FLAG = ?3", CimProcessFlowDO.class, currentMainPdid, processDefinitionLevel, hvTrue);
                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    activeMainPfObj = flow.getId();
                    i = 0;
                    while (true) {
                        // Search the previous module PD by finding the current module number on active main PF
                        if (i == 0) {
                            CimPFDefinitionListDO pfPdList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFDefinitionListDO.class, activeMainPfObj, currentModuleNo);
                            if (!CimObjectUtils.isEmpty(pfPdList)) {
                                //--- Set the previous module PD's seq_no on active module PF
                                mainPfObj = activeMainPfObj;
                                mainPfPdlistSeqno = pfPdList.getSequenceNumber() - 1;
                                findFlag = true;
                                break;
                            }
                        }
                        // Search the previous PD by finding the previous module number on active main PF
                        else {
                            //--- Get the previous module PD's seq_no on current main PF
                            currentMainPfPdlistSeqno--;
                            CimPFDefinitionListDO definitionList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND IDX_NO = ?2", CimPFDefinitionListDO.class, currentMainPfObj, currentMainPfPdlistSeqno);
                            if (!CimObjectUtils.isEmpty(definitionList)) {
                                //--- Keep the previous module information on current main PF
                                previousModulePdid = definitionList.getProcessDefinitionID();
                                previousModuleNo = definitionList.getModuleNO();
                                //--- Search the corresponding previous module number from the active main PF
                                definitionList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",CimPFDefinitionListDO.class,activeMainPfObj, previousModuleNo);
                                if (!CimObjectUtils.isEmpty(definitionList)) {
                                    mainPfObj = activeMainPfObj;
                                    mainPfPdlistSeqno = definitionList.getSequenceNumber();
                                    findFlag = true;
                                    break;
                                } else {
                                    //---------------------------------------------------------------------------
                                    // Set previous POS from active previous module PF and current(inactive) main PF
                                    //---------------------------------------------------------------------------
                                    //--- Get active module PF information
                                    //--- If module PDID's version is "##", convert it to real PDID
                                    processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                                    String previousModulePfObj = getActiveProcessFlowObj(previousModulePdid, processDefinitionLevel);
                                    //--- Set previous operation information on active module PF
                                    List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 ORDER BY IDX_NO", CimPFPosListDO.class, previousModulePfObj);
                                    count = 0;
                                    while (opeCount < searchCount) {
                                        if (CimArrayUtils.isEmpty(processFlowPosLists) || count >= processFlowPosLists.size())
                                            break;
                                        CimPFPosListDO posList = processFlowPosLists.get(count);
                                        //--- Set previous operation information on active module PF
                                        Infos.OperationNumberListAttributes attributes = new Infos.OperationNumberListAttributes();
                                        attributes.setSeqno(-1);
                                        attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                                        attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(previousModuleNo, posList.getDKey()));
                                        opeCount = addOperationNumberListAttributes(attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                                        count++;
                                    }
                                }
                            } else break;
                        }// end of else if( i == 0 )
                        i++;
                    }// end of while
                }// end of else if( mainPFState == TRUE )
                if (opeCount == searchCount) {
                    return attributesList;
                }

                //-----------------------------------------------------------------------------
                // Set previous POS from active previous module PF and active main PF
                //-----------------------------------------------------------------------------
                if (CimBooleanUtils.isTrue(findFlag)) {
                    //--- Get previous module pdid, module_no from active main PF
                    List<CimPFDefinitionListDO> processFlowDefinitionLists = cimJpaRepository.query("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND IDX_NO <= ?2 ORDER BY ROUTE_NO DESC", CimPFDefinitionListDO.class, mainPfObj, mainPfPdlistSeqno);
                    count = 0;
                    while (true) {
                        if (CimArrayUtils.isEmpty(processFlowDefinitionLists) || count >= processFlowDefinitionLists.size()) break;
                        CimPFDefinitionListDO definitionList = processFlowDefinitionLists.get(count);
                        if (CimObjectUtils.isEmpty(definitionList)) break;
                        //--- Get active module PF information
                        String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                        String processFlowObj = getActiveProcessFlowObj(definitionList.getProcessDefinitionID(), processDefinitionLevel);
                        //--- Set previous operation information on active module PF
                        List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 ORDER BY IDX_NO", CimPFPosListDO.class, processFlowObj);
                        count2 = 0;
                        while (opeCount < searchCount) {
                            if (CimArrayUtils.isEmpty(processFlowPosLists) || count2 >= processFlowPosLists.size()) break;
                            CimPFPosListDO posList = processFlowPosLists.get(count2);
                            Infos.OperationNumberListAttributes attributes = new Infos.OperationNumberListAttributes();
                            attributes.setSeqno(-1);
                            attributes.setRouteID(new ObjectIdentifier(currentMainPdid, currentMainPdobj));
                            attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(definitionList.getModuleNO(), posList.getDKey()));
                            opeCount = addOperationNumberListAttributes(attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                            count2++;
                        }
                        count++;
                    }
                }
                if (opeCount == searchCount) {
                    return attributesList;
                }

                //---------------------------------------------------------------------------------------------------------------
                // (4-2-3) If the lot is on sub/rework route, set the backup operaion and the following operations from backup flow
                //---------------------------------------------------------------------------------------------------------------
                List<CimProcessFlowContextBackPODO> pfxBackPoLists = cimJpaRepository.query("SELECT * FROM OMPRFCX_BCKPROPESEQ WHERE REFKEY = ?1", CimProcessFlowContextBackPODO.class, lotProcessFlowContextObj);
                count = 0;
                while (opeCount < searchCount) {
                    if (CimArrayUtils.isEmpty(pfxBackPoLists) || count >= pfxBackPoLists.size()) break;
                    CimProcessFlowContextBackPODO pfxBackPoList = pfxBackPoLists.get(count);
                    //--- Keep backup operation information
                    Integer backupSeqNo = pfxBackPoList.getSequenceNumber();
                    // Get process information from FRPO
                    CimProcessOperationDO po = cimJpaRepository.queryOne("SELECT * FROM OMPROPE WHERE ID = ?1", CimProcessOperationDO.class, pfxBackPoList.getProcessOperationObj());
                    Validations.check(CimObjectUtils.isEmpty(po),retCodeConfig.getNotFoundProcessOperation());
                    //--- Keep backup operation information
                    String backupOpeNo = po.getOperationNumber();
                    String backupModuleNo = po.getModuleNumber();
                    String backupModuleOpeNo = po.getModuleOperationNumber();
                    String backupPfObj = po.getProcessFlowObj();
                    String backupPosObj = po.getProcessOperationSpecificationObj();
                    String backupMainPfObj = po.getMainProcessFlowObj();
                    String backupModulePfObj = po.getModuleProcessFlowObj();
                    String backupModulePosObj = po.getModuleProcessOperationSpecificationsObj();

                    //--- Get backup main PF information
                    CimProcessFlowDO flow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE ID = ?1", CimProcessFlowDO.class, backupMainPfObj);
                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    String backupMainPdid = flow.getMainProcessDefinitionID();
                    String backupMainPdobj = flow.getMainProcessDefinitionObj();
                    Boolean backupMainPfState = flow.getState();

                    //--- Get seq_no of backup module from main PF
                    CimPFDefinitionListDO definitionList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFDefinitionListDO.class, backupMainPfObj, backupModuleNo);
                    Validations.check(CimObjectUtils.isEmpty(definitionList),retCodeConfig.getNotFoundProcessFlow());
                    Integer backupMainPfPdlistSeqno = definitionList.getSequenceNumber();

                    //--- Get backup module PF information
                    flow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE ID = ?1",CimProcessFlowDO.class,backupModulePfObj);
                    Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                    String backupModulePdid = flow.getMainProcessDefinitionID();
                    Boolean backupModulePfState = flow.getState();
                    //--- Get seq_no of backup process from module PF
                    CimPFPosListDO pfPosList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFPosListDO.class, backupModulePfObj, backupModuleOpeNo);
                    Validations.check(CimObjectUtils.isEmpty(pfPosList),retCodeConfig.getNotFoundProcessFlow());
                    Integer backupModulePfPoslistSeqno = pfPosList.getSequenceNumber();

                    //-----------------------------------------------------------------------------
                    // (4-2-3-1) Get previous POS from backup/active module PF
                    //-----------------------------------------------------------------------------
                    if (CimBooleanUtils.isTrue(backupModulePfState)) {
                        // Module PF is active, set backup POS's seq_no from backup module PF
                        modulePfObj = backupModulePfObj;
                        modulePfPoslistSeqno = backupModulePfPoslistSeqno;
                        findFlag = true;
                    } else {
                        // Module PF is NOT active, search backup POS's seq_no from active module PF
                        findFlag = false;

                        //--- Get active module PF information
                        String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                        flow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2 AND ACTIVE_FLAG = ?3",CimProcessFlowDO.class,backupModulePdid, processDefinitionLevel, hvTrue);
                        Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                        activeModulePfObj = flow.getId();
                        i = 0;
                        while (opeCount < searchCount) {
                            // Search the backup operation by finding the backup module openo on active module PF
                            if (i <= 0) {
                                pfPosList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",CimPFPosListDO.class,activeModulePfObj, backupModuleOpeNo);
                                if (!CimObjectUtils.isEmpty(pfPosList)) {
                                    //--- Set the backup operation seq_no on active module PF
                                    modulePfObj = activeModulePfObj;
                                    modulePfPoslistSeqno = pfPosList.getSequenceNumber();
                                    findFlag = true;
                                    break;
                                } else {
                                    //---------------------------------------------------------------------------
                                    // Set backup POS from inactive backup module PF
                                    //---------------------------------------------------------------------------
                                    Infos.OperationNumberListAttributes attributes = new Infos.OperationNumberListAttributes();
                                    attributes.setSeqno(backupSeqNo);
                                    attributes.setRouteID(new ObjectIdentifier(backupMainPdid, backupMainPdobj));
                                    attributes.setOperationNumber(backupOpeNo);
                                    opeCount = addOperationNumberListAttributes(attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                                }
                            } else {
                                //--- Get the previous operation seq_no on backup module PF
                                backupModulePfPoslistSeqno--;
                                pfPosList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND IDX_NO = ?2",CimPFPosListDO.class,backupModulePfObj, backupModulePfPoslistSeqno);
                                if (!CimObjectUtils.isEmpty(pfPosList)) {
                                    //--- Keep the previous operation information on backup module PF
                                    previousModuleOpeNo = pfPosList.getDKey();
                                    previousModulePosObj = pfPosList.getProcessOperationSpecificationsObj();

                                    //--- Search the corresponding previous module openo from active module PF
                                    pfPosList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",CimPFPosListDO.class,activeModulePfObj, previousModuleOpeNo);
                                    if (!CimObjectUtils.isEmpty(pfPosList)) {
                                        modulePfObj = activeModulePfObj;
                                        modulePfPoslistSeqno = pfPosList.getSequenceNumber();
                                        findFlag = true;
                                        break;
                                    } else {
                                        //---------------------------------------------------------------------------
                                        // Set previous POS from inactive return module PF
                                        //---------------------------------------------------------------------------
                                        Infos.OperationNumberListAttributes attributes = new Infos.OperationNumberListAttributes();
                                        attributes.setSeqno(backupSeqNo);
                                        attributes.setRouteID(new ObjectIdentifier(backupMainPdid, backupMainPdobj));
                                        attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(backupModuleNo, previousModuleOpeNo));
                                        opeCount = addOperationNumberListAttributes(attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                                    }
                                } else break;
                            }// end of else if( i == 0 )
                            i++;
                        }// end of while
                    }//end of else if( backupModulePfState == TRUE )
                    if (opeCount == searchCount) {
                        return attributesList;
                    }
                    //-----------------------------------------------------------------------------
                    // Set previous POS from active backup module PF
                    //-----------------------------------------------------------------------------
                    if (CimBooleanUtils.isTrue(findFlag)) {
                        List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND IDX_NO <= ?2 ORDER BY IDX_NO DESC", CimPFPosListDO.class, modulePfObj, modulePfPoslistSeqno);
                        count2 = 0;
                        while (opeCount < searchCount) {
                            if (CimArrayUtils.isEmpty(processFlowPosLists) || count2 >= processFlowPosLists.size()) break;
                            CimPFPosListDO posList = processFlowPosLists.get(count2);
                            //--- Set previous operation information on active backup module PF
                            Infos.OperationNumberListAttributes attributes = new Infos.OperationNumberListAttributes();
                            attributes.setSeqno(backupSeqNo);
                            attributes.setRouteID(new ObjectIdentifier(backupMainPdid));
                            attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(backupModuleNo, posList.getDKey()));
                            opeCount = addOperationNumberListAttributes(attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                            count2++;
                        }
                    }
                    if (opeCount == searchCount) {
                        return attributesList;
                    }

                    //-----------------------------------------------------------------------------
                    // (4-2-3-2) Get previous module PD from backup/active main PF
                    //-----------------------------------------------------------------------------
                    // If main PF is active, set previous module PD's seq_no from backup main PF
                    if (CimBooleanUtils.isTrue(backupMainPfState)) {
                        mainPfObj = backupMainPfObj;
                        mainPfPdlistSeqno = backupMainPfPdlistSeqno - 1;
                        findFlag = true;
                    }
                    // If main PF is NOT active, search previous module PD's seq_no from active main PF
                    else {
                        findFlag = false;
                        //--- Get active main PF information
                        String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE;
                        flow = cimJpaRepository.queryOne("SELECT * FROM OMPRF WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2 AND ACTIVE_FLAG = ?3",CimProcessFlowDO.class,backupMainPdid, processDefinitionLevel, hvTrue);
                        Validations.check(CimObjectUtils.isEmpty(flow),retCodeConfig.getNotFoundProcessFlow());
                        activeMainPfObj = flow.getId();
                        i = 0;
                        while (opeCount < searchCount) {
                            // Search the previous module PD by finding the backup module number on active main PF
                            if (i == 0) {
                                definitionList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",CimPFDefinitionListDO.class,activeMainPfObj, backupModuleNo);
                                if (!CimObjectUtils.isEmpty(definitionList)) {
                                    //--- Set the next module PD's seq_no on active module PF
                                    mainPfObj = activeMainPfObj;
                                    mainPfPdlistSeqno = definitionList.getSequenceNumber() - 1;
                                    findFlag = true;
                                    break;
                                }
                            }
                            // Search the previous module PD by finding the previous module number on active main PF
                            else {
                                //--- Get the previous module PD's seq_no on backup main PF
                                backupMainPfPdlistSeqno--;
                                definitionList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND IDX_NO = ?2",CimPFDefinitionListDO.class,backupMainPfObj, backupMainPfPdlistSeqno);
                                if (!CimObjectUtils.isEmpty(definitionList)) {
                                    //--- Keep the previous module information on backup main PF
                                    previousModulePdid = definitionList.getProcessDefinitionID();
                                    previousModuleNo = definitionList.getModuleNO();

                                    //--- Search the corresponding previous module number from the active main PF
                                    definitionList = cimJpaRepository.queryOne("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2",CimPFDefinitionListDO.class,activeMainPfObj, previousModuleNo);
                                    if (!CimObjectUtils.isEmpty(definitionList)) {
                                        mainPfObj = activeMainPfObj;
                                        mainPfPdlistSeqno = definitionList.getSequenceNumber();
                                        findFlag = true;
                                        break;
                                    } else {
                                        //---------------------------------------------------------------------------
                                        // Set previous POS from active previous module PF and backup(inactive) main PF
                                        //---------------------------------------------------------------------------
                                        //--- Get active module PF information
                                        processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                                        String previousModulePfObj = getActiveProcessFlowObj(previousModulePdid, processDefinitionLevel);

                                        //--- Set previous operation information on active module PF
                                        List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 ORDER BY IDX_NO", CimPFPosListDO.class, previousModulePfObj);
                                        count2 = 0;
                                        while (opeCount < searchCount) {
                                            if (CimArrayUtils.isEmpty(processFlowPosLists) || count2 >= processFlowPosLists.size())
                                                break;
                                            CimPFPosListDO posList = processFlowPosLists.get(count2);
                                            //--- Set next operation information on active module PF
                                            Infos.OperationNumberListAttributes attributes = new Infos.OperationNumberListAttributes();
                                            attributes.setSeqno(backupSeqNo);
                                            attributes.setRouteID(new ObjectIdentifier(backupMainPdid, backupMainPdobj));
                                            attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(previousModuleNo, posList.getDKey()));
                                            opeCount = addOperationNumberListAttributes(attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                                            count2++;
                                        }
                                    }
                                } else break;
                            }// end of else if( i == 0 )
                            i++;
                        }// end of while
                    }// end of else if( mainPFState == TRUE )
                    if (opeCount == searchCount) {
                        return attributesList;
                    }

                    //-----------------------------------------------------------------------------
                    // Set previous POS from active previous module PF and active main PF
                    //-----------------------------------------------------------------------------
                    if (CimBooleanUtils.isTrue(findFlag)) {
                        //--- Get previous module pdid, module_no from active main PF
                        List<CimPFDefinitionListDO> pfPdLists = cimJpaRepository.query("SELECT * FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND IDX_NO <= ?2 ORDER BY ROUTE_NO DESC", CimPFDefinitionListDO.class, mainPfObj, mainPfPdlistSeqno);
                        count2 = 0;
                        while (true) {
                            if (CimArrayUtils.isEmpty(pfPdLists) || count2 >= pfPdLists.size()) break;
                            CimPFDefinitionListDO flowDefinitionList = pfPdLists.get(count2);
                            if (CimObjectUtils.isEmpty(flowDefinitionList)) break;
                            //--- Get active module PF information
                            String processDefinitionLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                            String processFlowObj = getActiveProcessFlowObj(flowDefinitionList.getProcessDefinitionID(), processDefinitionLevel);
                            //--- Set previous operation information on active module PF
                            List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query("SELECT * FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 ORDER BY IDX_NO", CimPFPosListDO.class, processFlowObj);
                            count3 = 0;
                            while (opeCount < searchCount) {
                                if (CimArrayUtils.isEmpty(processFlowPosLists) || count3 >= processFlowPosLists.size())
                                    break;
                                CimPFPosListDO posList = processFlowPosLists.get(count3);
                                Infos.OperationNumberListAttributes attributes = new Infos.OperationNumberListAttributes();
                                attributes.setSeqno(backupSeqNo);
                                attributes.setRouteID(new ObjectIdentifier(backupMainPdid, backupMainPdobj));
                                attributes.setOperationNumber(BaseStaticMethod.convertModuleOpeNoToOpeNo(flowDefinitionList.getModuleNO(), posList.getDKey()));
                                opeCount = addOperationNumberListAttributes(attributesList, attributes, searchRouteID, searchOperationNumber, opeCount, searchCount);
                                count3++;
                            }
                            count2++;
                        }
                    }// end of if( findFlag == TRUE )
                    count++;
                }// end of while( CURSOR AF35_17 )
            }// end of (4-2)
        }
        return attributesList;
    }

    /**
     * description:
     * change history:
     * date             defect             person             comments
     * ---------------------------------------------------------------------------------------------------------------------
     * @author Nyx
     * @date 2018/11/17 23:04
     * @param attributesList
     * @param attributes
     * @param searchRouteID
     * @param searchOperationNumber
     * @param operationCount
     * @param searchCount -
     * @return int
     */
    private int addOperationNumberListAttributes(List<Infos.OperationNumberListAttributes> attributesList, Infos.OperationNumberListAttributes attributes,
                                                 ObjectIdentifier searchRouteID, String searchOperationNumber, int operationCount, int searchCount) {
        attributesList.add(attributes);
        operationCount++;
        if (operationCount < searchCount && ObjectIdentifier.equalsWithValue(attributes.getRouteID(), searchRouteID) && attributes.getOperationNumber().equals(searchOperationNumber)) {
            operationCount = searchCount;
        }
        return operationCount;
    }

    @Override
    public String processExistenceCheck(Infos.ObjCommon objCommon, ObjectIdentifier processDefinitionID, String PDLevel) {
        String processDefinitionType = "";

        com.fa.cim.newcore.bo.pd.CimProcessDefinition aPD;
        /*---------------------------------------------------*/
        /*   Check processdefinition existence (for Main)    */
        /*---------------------------------------------------*/
        if (CimStringUtils.equals(BizConstant.SP_PD_FLOWLEVEL_MAIN, PDLevel)) {
            aPD = baseCoreFactory.getBO(com.fa.cim.newcore.bo.pd.CimProcessDefinition.class, processDefinitionID);
            if (aPD != null) {
                //Get processDefinitionType
                processDefinitionType = aPD.getProcessDefinitionType();
            } else {
                Validations.check(true,retCodeConfig.getNotFoundProcessDefinition());
            }
        }
        /*-----------------------------------------------------*/
        /*   Check processdefinition existence (for Module)    */
        /*-----------------------------------------------------*/
        else if (CimStringUtils.equals(BizConstant.SP_PD_FLOWLEVEL_MODULE, PDLevel)) {
            aPD = baseCoreFactory.getBO(com.fa.cim.newcore.bo.pd.CimProcessDefinition.class, processDefinitionID);
            Validations.check(aPD == null,retCodeConfig.getNotFoundProcessDefinition());
        }
        /*-----------------------------------------------------*/
        /*   Check processdefinition existence (for ope)       */
        /*-----------------------------------------------------*/
        else if (CimStringUtils.equals(BizConstant.SP_PD_FLOWLEVEL_OPERATION, PDLevel)) {
            aPD = baseCoreFactory.getBO(com.fa.cim.newcore.bo.pd.CimProcessDefinition.class, processDefinitionID);
            Validations.check(aPD == null,retCodeConfig.getNotFoundProcessDefinition());
        } else {
            Validations.check(retCodeConfig.getInvalidPDLevel());
        }

        return processDefinitionType;
    }

    @Override
    public Outputs.objProcessPreviousProcessReferenceOut processPreviousProcessReferenceGet(Infos.ObjCommon objCommon, Infos.ProcessRef processRef) {
        Outputs.objProcessPreviousProcessReferenceOut out = new Outputs.objProcessPreviousProcessReferenceOut();
        //---------------------------------------------------
        //  Get profess flow (Main_Ope)
        //---------------------------------------------------
        CimProcessFlow aPF = baseCoreFactory.getBO(CimProcessFlow.class, processRef.getProcessFlow());
        Validations.check(aPF == null, new OmCode(retCodeConfig.getNotFoundProcessFlow(), ""));
        //---------------------------------------------------
        //  Get main profess flow (Main_Mod)
        //---------------------------------------------------
        CimProcessFlow aMainPF = baseCoreFactory.getBO(CimProcessFlow.class, processRef.getMainProcessFlow());
        Validations.check(aMainPF == null, new OmCode(retCodeConfig.getNotFoundProcessFlow(), ""));
        //---------------------------------------------------
        // Get module profess flow (Module)
        //---------------------------------------------------
        CimProcessFlow aModulePF = baseCoreFactory.getBO(CimProcessFlow.class, processRef.getModuleProcessFlow());
        Validations.check(aModulePF == null, new OmCode(retCodeConfig.getNotFoundProcessFlow(), ""));
        //---------------------------------------------------
        // The operation's module number
        //---------------------------------------------------
        String moduleNo = processRef.getModuleNumber();
        //---------------------------------------------------
        // Get module POS
        //---------------------------------------------------
        CimProcessOperationSpecification aModulePOS = baseCoreFactory.getBO(CimProcessOperationSpecification.class, processRef.getModulePOS());
        Validations.check(aModulePOS == null, new OmCode(retCodeConfig.getNotFoundPos(), ""));
        //---------------------------------------------------
        // Get previous module POS
        //---------------------------------------------------
        AtomicReference<CimProcessFlow> outMainProcessFlow = new AtomicReference<>();
        AtomicReference<CimProcessFlow> outModuleProcessFlow = new AtomicReference<>();
        AtomicReference<String> chr_outModuleNumber = new AtomicReference<>();
        String outModuleNumber = null;
        CimProcessOperationSpecification aPrevModulePOS = aMainPF.getPreviousProcessOperationSpecificationFor(moduleNo, aModulePF, aModulePOS, outMainProcessFlow, chr_outModuleNumber, outModuleProcessFlow);
        outModuleNumber = chr_outModuleNumber.get();
        Validations.check(aPrevModulePOS == null, new OmCode(retCodeConfig.getNotFoundPos(), ""));
        //---------------------------------------------------
        // Get previous module operation number
        //---------------------------------------------------
        String aPrevModuleOpeNo = aPrevModulePOS.getOperationNumber();
        //---------------------------------------------------
        // Get previous operation number
        //---------------------------------------------------
        String aPrevOpeNo = BaseStaticMethod.convertModuleOpeNoToOpeNo(outModuleNumber, aPrevModuleOpeNo);
        //---------------------------------------------------
        // Get previous main POS
        //---------------------------------------------------
        CimProcessOperationSpecification aPrevMainPOS = aPF.findProcessOperationSpecificationOnDefault(aPrevOpeNo);
        /*----------------------*/
        /*   Return to Caller   */
        /*----------------------*/
        out.setPreviousOperationNumber(aPrevOpeNo);
        Infos.ProcessRef previousProcessRef = new Infos.ProcessRef();
        out.setPreviousProcessRef(previousProcessRef);
        previousProcessRef.setProcessFlow(processRef.getProcessFlow());
        previousProcessRef.setProcessOperationSpecification(aPrevMainPOS.getPrimaryKey());
        previousProcessRef.setMainProcessFlow(outMainProcessFlow.get().getPrimaryKey());
        previousProcessRef.setModuleNumber(outModuleNumber);
        previousProcessRef.setModuleProcessFlow(outModuleProcessFlow.get().getPrimaryKey());
        previousProcessRef.setModulePOS(aPrevModulePOS.getPrimaryKey());
        return out;
    }

    @Override
    public List<Infos.ConnectedRoute> processConnectedRouteGetDR(Infos.ObjCommon objCommon, String mainProcessFlowObjRef, String operationNumber,
                                                                 String moduleProcessOperationSpecificationObjRef, Boolean branchCheckFlag, Boolean reworkCheckFlag) {
        List<Infos.ConnectedRoute> out = new ArrayList<>();
        if( (branchCheckFlag ? 1 : 0) + (reworkCheckFlag ?1:0) < 1 ) {
            log.info( "Either of branchCheckFlag and reworkCheckFlag has to be set as TRUE.");
            Validations.check(true,retCodeConfig.getInvalidInputParam());
        }
        //----- Module No -------//
        String moduleNo = operationNumber.split("\\.")[0];
        String queryPfPosList = String.format("select PRSS_RKEY from OMPRF_PRSSSEQ where REFKEY = '%s' and LINK_KEY = '%s'",mainProcessFlowObjRef,operationNumber);

        // Get Main POS;
        List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query(queryPfPosList,CimPFPosListDO.class);
        CimPFPosListDO processFlowPosList = CimArrayUtils.getSize(processFlowPosLists)>0 ? processFlowPosLists.get(0) : (new CimPFPosListDO());

        //===== Initialize the counter and set the limit value to search the connected routes =======//
        int  counter = 0;
        int  limit   = 0;
        if(CimBooleanUtils.isTrue(branchCheckFlag) && CimBooleanUtils.isTrue(reworkCheckFlag)) {
            counter = 0;
            limit   = 2;
        }
        else if(CimBooleanUtils.isTrue(branchCheckFlag) && CimBooleanUtils.isFalse(reworkCheckFlag)) {
            counter = 0;
            limit = 1;
        }
        else if(CimBooleanUtils.isFalse(branchCheckFlag) && CimBooleanUtils.isTrue(reworkCheckFlag)) {
            counter = 1;
            limit   = 2;
        }

        List<String> sqlStmts = new ArrayList<>();
        sqlStmts.add("SELECT SUB_PROCESS_ID, SUB_PROCESS_RKEY, RTN_OPE_NO FROM OMPRSS_SUBPRF WHERE REFKEY = '%s' ");
        sqlStmts.add("SELECT SUB_PROCESS_ID, SUB_PROCESS_RKEY, RTN_OPE_NO FROM OMPRSS_REWORKPRF WHERE REFKEY = '%s' ");

        String  processDefinitionType = null;
        List<String> pdTypes = new ArrayList<>();
        pdTypes.add(BizConstant.SP_MAINPDTYPE_BRANCH);
        pdTypes.add(BizConstant.SP_MAINPDTYPE_REWORK);
        for( ; counter < limit; counter++ ) {
            int totalCount = 0;
            int mainCount  = 0;
            int modCount   = 0;
            if( counter == 0 ) {
                if( !CimStringUtils.isEmpty(processFlowPosList.getProcessOperationSpecificationsObj()) ) {
                    String queryPosSubPF = String.format("select COUNT(ID) from OMPRSS_SUBPRF where REFKEY = '%s'",processFlowPosList.getProcessOperationSpecificationsObj());
                    totalCount = (int) cimJpaRepository.count(queryPosSubPF);
                    mainCount = totalCount;
                    log.info( "mainCount = {}", mainCount );
                }

                String queryPosSubPF = String.format("select COUNT(ID) from OMPRSS_SUBPRF where REFKEY = '%s'",moduleProcessOperationSpecificationObjRef);
                totalCount = (int)cimJpaRepository.count(queryPosSubPF);
                modCount = totalCount;
                log.info( "modCount = {}", modCount );

                if((mainCount == 0) && (modCount == 0)) {
                    log.info( "( mainCount == 0 ) && ( modCount == 0 )" );
                    continue;
                }
            } else if( counter == 1 ) {
                if( !CimStringUtils.isEmpty(processFlowPosList.getProcessOperationSpecificationsObj())) {
                    String queryPosReworkPF = String.format("select COUNT(ID) from OMPRSS_REWORKPRF where REFKEY = '%s'",processFlowPosList.getProcessOperationSpecificationsObj());
                    totalCount = (int)cimJpaRepository.count(queryPosReworkPF);
                    mainCount = totalCount;
                    log.info( "mainCount = {}", mainCount );
                }
                String queryPosReworkPF = String.format("select COUNT(ID) from OMPRSS_REWORKPRF where REFKEY = '%s'",moduleProcessOperationSpecificationObjRef);
                totalCount = (int)cimJpaRepository.count(queryPosReworkPF);
                modCount = totalCount;
                log.info( "modCount = {}", modCount );
                if((mainCount == 0) && (modCount == 0)) {
                    log.info( "( mainCount == 0 ) && ( modCount == 0 )" );
                    continue;
                }
            }
            String sql = sqlStmts.get(counter);
            processDefinitionType = pdTypes.get(counter);

            log.info( "SQL statement to get the list of connected Route = {}", sql);
            if(!CimStringUtils.isEmpty(processFlowPosList.getProcessOperationSpecificationsObj())) {
                // Get connected Routes of Main POS;
                String formatSql = String.format(sql,processFlowPosList.getProcessOperationSpecificationsObj());
                List<CimPOSSubProcessFlowDO> posSubProcessFlowList = cimJpaRepository.query(formatSql, CimPOSSubProcessFlowDO.class);
                if(CimArrayUtils.getSize(posSubProcessFlowList) > 0) {
                    for(int i = 0; i< CimArrayUtils.getSize(posSubProcessFlowList); i++) {
                        Infos.ConnectedRoute connectedRoute = new Infos.ConnectedRoute();
                        String versionID = cimFrameWorkGlobals.extractVersionFromID(posSubProcessFlowList.get(i).getBranchMainProcessDefinitionID()) ;
                        if(CimStringUtils.equals(BizConstant.SP_ACTIVE_VERSION, versionID)) {
                            String queryPD = String.format("select ACTIVE_VER_ID, ACTIVE_VER_RKEY from OMPRP where PRP_ID = '%s' and PRP_LEVEL = '%s'",
                                    posSubProcessFlowList.get(i).getBranchMainProcessDefinitionID() ,BizConstant.SP_PD_FLOWLEVEL_MAIN);
                            CimProcessDefinitionDO cimProcessDefinitionDO = cimJpaRepository.queryOne(queryPD,CimProcessDefinitionDO.class);
                            Validations.check(cimProcessDefinitionDO == null, retCodeConfig.getNotFoundProcessDefinition());
                            connectedRoute.setRouteID(new ObjectIdentifier(cimProcessDefinitionDO.getActiveID(), cimProcessDefinitionDO.getActiveObj()));
                        } else {
                            connectedRoute.setRouteID(new ObjectIdentifier(posSubProcessFlowList.get(i).getBranchMainProcessDefinitionID()
                                    ,posSubProcessFlowList.get(i).getBranchMainProcessDefinitionObj() ));
                        }
                        connectedRoute.setProcessDefinitionType(processDefinitionType);
                        connectedRoute.setReturnOperationNumber(posSubProcessFlowList.get(i).getReturnOperationNumber());
                        out.add(connectedRoute);
                    }
                }
            }
            // Get connected Routes of Module POS
            if(!CimStringUtils.isEmpty(moduleProcessOperationSpecificationObjRef)) {
                // Get connected Routes of Module POS;
                String formatSql = String.format(sql,moduleProcessOperationSpecificationObjRef);
                List<CimPOSSubProcessFlowDO> posSubProcessFlowList = cimJpaRepository.query(formatSql, CimPOSSubProcessFlowDO.class);
                if(CimArrayUtils.getSize(posSubProcessFlowList) > 0) {
                    for(int i = 0; i< CimArrayUtils.getSize(posSubProcessFlowList); i++) {
                        Infos.ConnectedRoute connectedRoute = new Infos.ConnectedRoute();
                        String versionID = cimFrameWorkGlobals.extractVersionFromID(posSubProcessFlowList.get(i).getBranchMainProcessDefinitionID()) ;
                        if(CimStringUtils.equals(BizConstant.SP_ACTIVE_VERSION, versionID)) {
                            log.info("{} is active version.",versionID);
                            String queryProcessDefinition = String.format("select ACTIVE_VER_ID, ACTIVE_VER_RKEY from OMPRP where PRP_ID = '%s' and PRP_LEVEL = '%s'",
                                    posSubProcessFlowList.get(i).getBranchMainProcessDefinitionID(), BizConstant.SP_PD_FLOWLEVEL_MAIN);
                            CimProcessDefinitionDO cimProcessDefinitionDO = cimJpaRepository.queryOne(queryProcessDefinition,CimProcessDefinitionDO.class);
                            Validations.check(cimProcessDefinitionDO == null, retCodeConfig.getNotFoundProcessDefinition());
                            connectedRoute.setRouteID(new ObjectIdentifier(cimProcessDefinitionDO.getActiveID(), cimProcessDefinitionDO.getActiveObj()));
                        } else {
                            connectedRoute.setRouteID(new ObjectIdentifier(posSubProcessFlowList.get(i).getBranchMainProcessDefinitionID(),posSubProcessFlowList.get(i).getBranchMainProcessDefinitionObj() ));
                        }
                        String opeNo  = null;
                        opeNo = BaseStaticMethod.convertModuleOpeNoToOpeNo(moduleNo,posSubProcessFlowList.get(i).getReturnOperationNumber());
                        connectedRoute.setProcessDefinitionType(processDefinitionType);
                        connectedRoute.setReturnOperationNumber(opeNo);
                        out.add(connectedRoute);
                    }
                }
            }
        }
        return out;
    }

    @Override
    public List<CimEquipmentDO> getEquipmentsByprocessDefinitionAndEquipment(CimProcessDefinitionDO processDefinition, CimProductSpecificationDO productSpecification) {
        // check input params
        Validations.check(null == processDefinition || null == productSpecification,retCodeConfig.getInvalidParameter());
        List<CimEquipmentDO> equipments = new ArrayList<>();

        List<CimPDEqpDO> aPosSpecMach = cimJpaRepository.query("SELECT * FROM OMPRP_RESTRICTEQP WHERE REFKEY = ?", CimPDEqpDO.class, processDefinition.getId()); // processDefinitionCore.findAllByReferenceKey(processDefinition.getId());
        if (!CimArrayUtils.isEmpty(aPosSpecMach)) {
            if (1 == aPosSpecMach.size()) {
                CimEquipmentDO curEqp = cimJpaRepository.queryOne("SELECT * FROM OMEQP WHERE EQP_ID = ? ", CimEquipmentDO.class, aPosSpecMach.get(0).getEquipmentID()); //equipmentCore.findEquipmentByEquipmentID(aPosSpecMach.get(0).getEquipmentID())
                equipments.add(curEqp);
            } else if (1 < aPosSpecMach.size()) {
                List<CimPDSpecEqpDO>  processDefinitionSpecEqps = cimJpaRepository.query("SELECT * FROM OMPRP_EQPSETPRD WHERE REFKEY = ? AND PROD_ID = ?", CimPDSpecEqpDO.class, processDefinition.getId(), productSpecification.getProductSpecID());
                //processDefinitionCore.findProcessDefinitionSpecEqpsByReferenceKeyAndProductRequestSpecificationID(processDefinition.getId(), productSpecification.getProductSpecID());
                if (!CimArrayUtils.isEmpty(processDefinitionSpecEqps)) {
                    for (CimPDSpecEqpDO processDefinitionSpecEqp : processDefinitionSpecEqps) {
                        List<CimPDSpecEqpEqpDO> processDefinitionSpecEqpEqps = cimJpaRepository.query("SELECT * FROM OMPRP_EQPSETPRD_ASGN WHERE REFKEY = ? AND IDX_NO = ?", CimPDSpecEqpEqpDO.class,
                                processDefinition.getId(),
                                processDefinitionSpecEqp.getSequenceNumber().toString());
                        if (!CimArrayUtils.isEmpty(processDefinitionSpecEqpEqps)) {
                            for (CimPDSpecEqpEqpDO processDefinitionSpecEqpEqp : processDefinitionSpecEqpEqps) {
                                CimEquipmentDO equipment = cimJpaRepository.queryOne("SELECT * FROM OMEQP WHERE EQP_ID = ?", CimEquipmentDO.class,  processDefinitionSpecEqpEqp.getEquipmentID());
                                equipments.add(equipment);
                            }
                        }
                    }
                }
            }
            return equipments;
        }
        //Get specific mechines by product group.
        CimProductGroupDO productGroup = cimJpaRepository.queryOne("SELECT * FROM OMPRODFMLY WHERE PRODFMLY_ID = ?", CimProductGroupDO.class, productSpecification.getProductGroupID());

        if (null != productGroup) {
            String productGroupID = productGroup.getProductGroupID();
            List<CimPDSpecEqpPgrpDO> processDefinitionSpecEqpPgrps = cimJpaRepository.query("SELECT * FROM OMPRP_EQPSETPRODFMLY WHERE REFKEY = ? AND PRODFMLY_ID = ?", CimPDSpecEqpPgrpDO.class, processDefinition.getId(), productGroupID);

            if (!CimArrayUtils.isEmpty(processDefinitionSpecEqpPgrps)) {
                for (CimPDSpecEqpPgrpDO processDefinitionSpecEqpPgrp : processDefinitionSpecEqpPgrps) {
                    List<CimPDSpecEqpPgrpEqpDO> processDefinitionSpecEqpPgrpEqps = cimJpaRepository.query("SELECT * FROM OMPRP_EQPSETPRODFMLY_ASGN WHERE REFKEY = ? AND IDX_NO = ?", CimPDSpecEqpPgrpEqpDO.class, processDefinition.getId(), processDefinitionSpecEqpPgrp.getSequenceNumber().toString());

                    if (!CimArrayUtils.isEmpty(processDefinitionSpecEqpPgrpEqps)) {
                        for (CimPDSpecEqpPgrpEqpDO processDefinitionSpecEqpPgrpEqp : processDefinitionSpecEqpPgrpEqps) {
                            CimEquipmentDO equipment = cimJpaRepository.queryOne("SELECT * FROM OMEQP WHERE EQP_ID = ?", CimEquipmentDO.class,  processDefinitionSpecEqpPgrpEqp.getEquipmentID());
                            equipments.add(equipment);
                        }
                    }
                }
                return equipments;
            } else {
                CimTechnologyDO technology = cimJpaRepository.queryOne("SELECT * FROM OMTECH WHERE TECH_ID = ?", CimTechnologyDO.class,productGroup.getTechnologyID());

                if (null != technology) {
                    List<CimPDSpecEqpTechDO>  processDefinitionSpecEqpTeches =  cimJpaRepository.query("SELECT * FROM OMPRP_EQPSETTECH WHERE REFKEY = ? AND TECH_ID = ?", CimPDSpecEqpTechDO.class, processDefinition.getId(), technology.getTechnologyID());
                    if (!CimArrayUtils.isEmpty(processDefinitionSpecEqpTeches)) {
                        for (CimPDSpecEqpTechDO processDefinitionSpecEqpTech : processDefinitionSpecEqpTeches) {
                            List<CimPDSpecEqpTechEqpDO> processDefinitionSpecEqpTechEqps = cimJpaRepository.query("SELECT * FROM OMPRP_EQPSETTECH_ASGN WHERE REFKEY = ? AND IDX_NO = ?", CimPDSpecEqpTechEqpDO.class, processDefinition.getId(),  processDefinitionSpecEqpTech.getSequenceNumber());

                            Validations.check(CimArrayUtils.isEmpty(processDefinitionSpecEqpTechEqps), retCodeConfig.getError().getMessage());

                            for (CimPDSpecEqpTechEqpDO processDefinitionSpecEqpTechEqp : processDefinitionSpecEqpTechEqps) {
                                CimEquipmentDO equipment = cimJpaRepository.queryOne("SELECT * FROM OMEQP WHERE EQP_ID = ?", CimEquipmentDO.class,  processDefinitionSpecEqpTechEqp.getEquipmentID());
                                equipments.add(equipment);
                            }

                        }
                        return equipments;
                    }
                }
            }
        }
        return equipments;
    }


    @Override
    public List<CimEquipmentDO> getAllMachinesBySpecificRecipeSetting (CimLogicalRecipeDO logicalRecipe){
        List<CimEquipmentDO> equipments = new ArrayList<>();
        List<CimLogicalSpecificRecipeSetDO>  logicalSpecificRecipeSettings = cimJpaRepository.query("SELECT * FROM OMLRCP_EQSP WHERE REFKEY = ?1", CimLogicalSpecificRecipeSetDO.class, logicalRecipe.getId());
        for (CimLogicalSpecificRecipeSetDO logicalSpecificRecipeSetting : logicalSpecificRecipeSettings) {
            CimEquipmentDO equipment = cimJpaRepository.queryOne("SELECT * FROM OMEQP WHERE EQP_ID = ?1", CimEquipmentDO.class, logicalSpecificRecipeSetting.getEquipmentID());
            equipments.add(equipment);
        }

        return equipments;
    }

    @Override
    public List<CimMachineRecipeDO> getAllMachineRecipe(CimLogicalRecipeDO logicalRecipe){
        List<CimMachineRecipeDO> mRecipes = new ArrayList<>();
        List<CimLogicalRecipeDSetDO> logicalRecipeDefaultSettings = cimJpaRepository.query("SELECT RECIPE_ID FROM OMLRCP_DFLT WHERE REFKEY = ?1", CimLogicalRecipeDSetDO.class, logicalRecipe.getId());
        for (CimLogicalRecipeDSetDO logicalRecipeDefaultSetting : logicalRecipeDefaultSettings) {
            CimMachineRecipeDO mRecipe = cimJpaRepository.queryOne("SELECT * FROM OMRCP WHERE RECIPE_ID = ?1 ", CimMachineRecipeDO.class, logicalRecipeDefaultSetting.getRecipeID());
            if (null != mRecipe) {
                mRecipes.add(mRecipe);
            }
        }

        return mRecipes;
    }

    @Override
    public List<CimEquipmentDO> getAllMachines(CimMachineRecipeDO mRecipe){
        List<CimEquipmentDO> equipments = new ArrayList<>();
        List<CimMachineRecipeEqpDO> mRecipeEqps = cimJpaRepository.query("SELECT EQP_ID FROM OMRCP_EQP WHERE REFKEY = ?1", CimMachineRecipeEqpDO.class, mRecipe.getId());
        for (CimMachineRecipeEqpDO mRecipeEqp : mRecipeEqps) {
            CimEquipmentDO equipment = cimJpaRepository.queryOne("SELECT * FROM OMEQP WHERE EQP_ID = ?1", CimEquipmentDO.class,mRecipeEqp.getEquipmentID());
            equipments.add(equipment);
        }

        return equipments;
    }

    @Override
    public List<Infos.CollectedDataItem> processOperationRawDCItemsGetDR(Infos.ObjCommon objCommon,Inputs.ObjProcessOperationRawDCItemsGetDR inputParams){
        //Set result structure;
        List<Infos.CollectedDataItem> collectedDataItemList = new ArrayList<>();

        Boolean bPJIDFlag = false;
        if (!CimStringUtils.isEmpty(inputParams.getProcessJobID())) {
            bPJIDFlag = true;
        }

        List<Infos.ControlJobCassette> controlJobCassetteRetCode = controlJobMethod.controlJobContainedLotGet(objCommon, inputParams.getControlJobID());

        int count = 0;
        int nCastLen = CimArrayUtils.getSize(controlJobCassetteRetCode);
        for (int i = 0; i < nCastLen; i++) {
            Infos.ControlJobCassette controlJobCassette = controlJobCassetteRetCode.get(i);
            int nLotLen = CimArrayUtils.getSize(controlJobCassette.getControlJobLotList());
            for (int j = 0; j < nLotLen; j++) {
                Infos.ControlJobLot controlJobLot = controlJobCassette.getControlJobLotList().get(j);
                if (!controlJobLot.getOperationStartFlag()) {
                    continue;
                }

                ObjectIdentifier lotID = controlJobLot.getLotID();
                //Get lot object;
                com.fa.cim.newcore.bo.product.CimLot aPosLot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class,lotID);
                Validations.check(aPosLot == null,retCodeConfig.getNotFoundLot());

                //Get Process Operation from lot;
                com.fa.cim.newcore.bo.pd.CimProcessOperation aPosPO = aPosLot.getProcessOperation();
                Validations.check(aPosPO == null,new OmCode(retCodeConfig.getNotFoundLot(),"*****", lotID.getValue()));

                // Get Processed wafer List;
                List<ProcessDTO.PosProcessWafer> processWaferList = aPosPO.getProcessWafers();
                int nPWaferLen = CimArrayUtils.getSize(processWaferList);

                //Create wafer and ProcessJob list for return items;
                List<ProcessDTO.PosProcessWafer> processWaferListForWafer = new ArrayList<>();
                List<Infos.PosProcessWafer> processWaferListForProcessJob = new ArrayList<>();
                for (int k = 0; k < nPWaferLen; k++) {
                    ProcessDTO.PosProcessWafer processWafer = processWaferList.get(k);
                    if (bPJIDFlag && (!CimStringUtils.equals(inputParams.getProcessJobID(), processWafer.getPrcsJob()))) {
                        continue;
                    }

                    processWaferListForWafer.add(processWafer);
                    Boolean bPJExistFlag = false;
                    int ii = 0;
                    while (ii < CimArrayUtils.getSize(processWaferListForProcessJob)) {
                        Infos.PosProcessWafer tmpProcessWafer = processWaferListForProcessJob.get(ii);
                        if (CimStringUtils.equals(processWafer.getPrcsJob(), tmpProcessWafer.getPrcsJob())) {
                            bPJExistFlag = true;
                            break;
                        }

                        ii++;
                    }
                    if (!bPJExistFlag) {
                        Infos.PosProcessWafer tmpProcessWafer = new Infos.PosProcessWafer();
                        BeanUtils.copyProperties(processWafer, tmpProcessWafer);
                        tmpProcessWafer.setWaferID("");
                        processWaferListForProcessJob.add(tmpProcessWafer);
                    }
                }
                if (bPJIDFlag &&
                        0 == CimArrayUtils.getSize(processWaferListForWafer) &&
                        0 == CimArrayUtils.getSize(processWaferListForProcessJob)) {
                    continue;
                }

                //Get DCDef Info from FRPO_DC;
                List<CimPODataCollectionDO> poDataCollectionList = cimJpaRepository.query("SELECT  IDX_NO,\n" +
                        "                            EDC_PLAN_ID,\n" +
                        "                            EDC_PLAN_RKEY\n" +
                        "                    FROM    OMPROPE_EDC\n" +
                        "                    WHERE   REFKEY = ?\n" +
                        "                    ORDER BY IDX_NO",CimPODataCollectionDO.class,aPosPO.getPrimaryKey());
                int poDCLen = CimArrayUtils.getSize(poDataCollectionList);
                if (poDCLen > 0) {
                    int dcDefCount = 0;
                    while (dcDefCount < poDCLen) {
                        CimPODataCollectionDO poDC = poDataCollectionList.get(dcDefCount);
                        //   Set DCItemResult into DCDef;
                        String tableMaker = String.format("%s%d", BizConstant.SP_PO_DC_ITEMS_TABLEMARKER, dcDefCount);
                        String tableMaker2 = String.format("%d", dcDefCount);
                        String measProcessJob = BizConstant.SP_DCDEF_MEAS_PJ;
                        String measProcessJobWafer = BizConstant.SP_DCDEF_MEAS_PJWAFER;
                        String measProcessJobWaferSite = BizConstant.SP_DCDEF_MEAS_PJWAFERSITE;

                        String queryProcessOperationDataItems = "";
                        if (bPJIDFlag) {
                            String sql = "select * from OMPROPE_EDC_ITEMS" +
                                    " where REFKEY = '%s' and LINK_MARKER in ('%s','%s') " +
                                    " and MEAS_TYPE in ('%s','%s','%s') order by EDC_ITEM_NAME,MEAS_TYPE,SITE_POSITION";
                            queryProcessOperationDataItems = String.format(sql, aPosPO.getPrimaryKey(), tableMaker,
                                    tableMaker2, measProcessJob, measProcessJobWafer, measProcessJobWaferSite);
                        } else {
                            String sql = "select * from OMPROPE_EDC_ITEMS" +
                                    " where REFKEY = '%s' and LINK_MARKER in ('%s','%s') " +
                                    " order by EDC_ITEM_NAME,MEAS_TYPE,SITE_POSITION";
                            queryProcessOperationDataItems = String.format(sql, aPosPO.getPrimaryKey(), tableMaker, tableMaker2);
                        }
                        List<CimPODataCollectionItemsDO> dcItemList = cimJpaRepository.query(queryProcessOperationDataItems, CimPODataCollectionItemsDO.class);
                        int dcItemListLen = CimArrayUtils.getSize(dcItemList);
                        //   Get DC Items of corresponding DC Definition from FRPO_DC_ITEMS;
                        if (dcItemListLen > 0) {
                            String prvDataItemName = "";
                            String prvMeasurementType = "";
                            String prvSitePosition = "";
                            for (int jj = 0; jj < dcItemListLen; jj++) {
                                CimPODataCollectionItemsDO poDataItem = dcItemList.get(jj);
                                Boolean bPJITEMFlag = false;
                                if (CimStringUtils.equals(BizConstant.SP_DCDEF_MEAS_PJ, poDataItem.getMeasType()) ||
                                        CimStringUtils.equals(BizConstant.SP_DCDEF_MEAS_PJWAFER, poDataItem.getMeasType()) ||
                                        CimStringUtils.equals(BizConstant.SP_DCDEF_MEAS_PJWAFERSITE, poDataItem.getMeasType())) {
                                    bPJITEMFlag = true;
                                }
                                if (bPJITEMFlag && CimStringUtils.equals(prvDataItemName, poDataItem.getDataCollectionItemName()) &&
                                        CimStringUtils.equals(prvMeasurementType, poDataItem.getMeasType()) &&
                                        (!CimStringUtils.equals(BizConstant.SP_DCDEF_MEAS_PJWAFERSITE, poDataItem.getMeasType()) ||
                                                CimStringUtils.equals(prvSitePosition, poDataItem.getSitePosition()))) {
                                    if (!inputParams.getExpandFlag()) {
                                        continue;
                                    }
                                    if (CimStringUtils.equals("*", poDataItem.getWaferPosition())) {
                                        continue;
                                    }
                                    count = CimArrayUtils.getSize(collectedDataItemList);
                                    Infos.CollectedDataItem collectedDataItem = collectedDataItemList.get(count - 1);
                                    if (CimStringUtils.equals(BizConstant.SP_DCDEF_MEAS_PJWAFER, collectedDataItem.getMeasurementType()) ||
                                            CimStringUtils.equals(BizConstant.SP_DCDEF_MEAS_PJWAFERSITE, collectedDataItem.getMeasurementType())) {
                                        int seqLen = CimArrayUtils.getSize(collectedDataItem.getCollectedDataList());
                                        for (int seqNo = 0; seqNo < seqLen; seqNo++) {
                                            Infos.CollectedData collectedData = collectedDataItem.getCollectedDataList().get(seqNo);
                                            String waferID = (collectedData.getWaferID() == null) ? "" : collectedData.getWaferID().getValue();
                                            if (CimStringUtils.equals(poDataItem.getWaferID(), waferID)) {
                                                collectedData.setProcessJobPosition(poDataItem.getWaferPosition());
                                                collectedData.setDataValue(poDataItem.getDataVal());
                                                break;
                                            }
                                        }
                                    } else if (CimStringUtils.equals(BizConstant.SP_DCDEF_MEAS_PJ, collectedDataItem.getMeasurementType())) {
                                        int seqLen = CimArrayUtils.getSize(collectedDataItem.getCollectedDataList());
                                        for (int seqNo = 0; seqNo < seqLen; seqNo++) {
                                            Infos.CollectedData collectedData = collectedDataItem.getCollectedDataList().get(seqNo);
                                            if (CimStringUtils.equals(poDataItem.getWaferPosition(), collectedData.getProcessJobPosition())) {
                                                collectedData.setDataValue(poDataItem.getDataVal());
                                                break;
                                            }
                                        }
                                    }
                                } else {
                                    prvDataItemName = poDataItem.getDataCollectionItemName();
                                    prvMeasurementType = poDataItem.getMeasType();
                                    prvSitePosition = poDataItem.getSitePosition();

                                    Infos.CollectedDataItem newCollectedDataItem = new Infos.CollectedDataItem();
                                    newCollectedDataItem.setLotID(lotID);
                                    newCollectedDataItem.setDataCollectionDefinitionID(ObjectIdentifier.build(poDC.getDataCollectionDefID(), poDC.getDataCollectionDefObj()));
                                    newCollectedDataItem.setDataCollectionItemName(poDataItem.getDataCollectionItemName());
                                    newCollectedDataItem.setDataCollectionMode(poDataItem.getDataCollectionMode());
                                    newCollectedDataItem.setDataType(poDataItem.getDataType());
                                    newCollectedDataItem.setItemType(poDataItem.getItemType());
                                    newCollectedDataItem.setMeasurementType(poDataItem.getMeasType());
                                    newCollectedDataItem.setSitePosition(poDataItem.getSitePosition());
                                    newCollectedDataItem.setEdcSettingType(poDC.getDcSettingType());

                                    List<Infos.CollectedData> collectedDataList = new ArrayList<>();
                                    newCollectedDataItem.setCollectedDataList(collectedDataList);

                                    if (inputParams.getExpandFlag()) {
                                        if (CimStringUtils.equals(BizConstant.SP_DCDEF_MEAS_PJWAFER, newCollectedDataItem.getMeasurementType()) ||
                                                CimStringUtils.equals(BizConstant.SP_DCDEF_MEAS_PJWAFERSITE, newCollectedDataItem.getMeasurementType())) {
                                            int seqLen = CimArrayUtils.getSize(processWaferListForWafer);

                                            for (int seqNo = 0; seqNo < seqLen; seqNo++) {
                                                ProcessDTO.PosProcessWafer tmpProcessWafer = processWaferListForWafer.get(seqNo);

                                                Infos.CollectedData collectedData = new Infos.CollectedData();
                                                collectedData.setWaferID(new ObjectIdentifier(tmpProcessWafer.getWaferID(), ""));
                                                collectedData.setProcessJobID(tmpProcessWafer.getPrcsJob());
                                                collectedData.setProcessJobPosition(tmpProcessWafer.getPrcsJobPosition());
                                                if (!CimStringUtils.equals("*", poDataItem.getWaferPosition()) &&
                                                        CimStringUtils.equals(tmpProcessWafer.getWaferID(), poDataItem.getWaferID())) {
                                                    collectedData.setWaferPosition(poDataItem.getWaferPosition());
                                                    collectedData.setDataValue(poDataItem.getDataVal());
                                                } else {
                                                    collectedData.setWaferPosition("");
                                                    collectedData.setDataValue("");
                                                }
                                                collectedDataList.add(collectedData);
                                            }
                                        } else if (CimStringUtils.equals(BizConstant.SP_DCDEF_MEAS_PJ, newCollectedDataItem.getMeasurementType())) {
                                            int seqLen = CimArrayUtils.getSize(processWaferListForProcessJob);
                                            for (int seqNo = 0; seqNo < seqLen; seqNo++) {
                                                Infos.PosProcessWafer tmpProcessWafer = processWaferListForProcessJob.get(seqNo);

                                                Infos.CollectedData collectedData = new Infos.CollectedData();
                                                collectedData.setWaferID(ObjectIdentifier.build("", ""));
                                                collectedData.setWaferPosition("");
                                                collectedData.setProcessJobID(tmpProcessWafer.getPrcsJob());
                                                collectedData.setProcessJobPosition(tmpProcessWafer.getPrcsJobPosition());
                                                if (!CimStringUtils.equals("*", poDataItem.getWaferPosition()) &&
                                                        CimStringUtils.equals(tmpProcessWafer.getPrcsJobPosition(), poDataItem.getWaferPosition())) {
                                                    collectedData.setDataValue(poDataItem.getDataVal());
                                                } else {
                                                    collectedData.setDataValue("");
                                                }
                                                collectedDataList.add(collectedData);
                                            }
                                        } else {
                                            Infos.CollectedData collectedData = new Infos.CollectedData();
                                            collectedData.setWaferID(ObjectIdentifier.build(poDataItem.getWaferID(), poDataItem.getWaferObj()));
                                            collectedData.setWaferPosition(poDataItem.getWaferPosition());
                                            collectedData.setProcessJobID("");
                                            collectedData.setProcessJobPosition("");
                                            collectedData.setDataValue(poDataItem.getDataVal());

                                            collectedDataList.add(collectedData);
                                        }
                                    }

                                    collectedDataItemList.add(newCollectedDataItem);
                                }
                            }
                        }

                        dcDefCount++;
                    }
                }
            }
        }

        return collectedDataItemList;
    }

    @Override
    public List<Infos.ProcessJob> processOperationProcessWafersGet(Infos.ObjCommon objCommon, ObjectIdentifier controlJobID) {
        List<Infos.ProcessJob> processJobList = new ArrayList<>();
        //Get controljob Object ;
        com.fa.cim.newcore.bo.product.CimControlJob aControlJob = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimControlJob.class, controlJobID);
        Validations.check(aControlJob == null, new OmCode(retCodeConfig.getNotFoundControlJob(), ObjectIdentifier.fetchValue(controlJobID)));
        List<ProductDTO.LotProcessOperation> aProcessOpeSeq = aControlJob.getProcessOperation();
        int prcLen = CimArrayUtils.getSize(aProcessOpeSeq);
        for (int iCnt1 = 0; iCnt1 < prcLen; iCnt1++) {
            ProductDTO.LotProcessOperation lotProcessOperation = aProcessOpeSeq.get(iCnt1);
            // Get PO
            com.fa.cim.newcore.bo.pd.CimProcessOperation aProcessOperation = baseCoreFactory.getBO(com.fa.cim.newcore.bo.pd.CimProcessOperation.class, lotProcessOperation.getObjrefPO());
            // Get processed wafer list
            List<ProcessDTO.PosProcessWafer> processWaferList = aProcessOperation.getProcessWafers();
            ObjectIdentifier machineRecipeID = null;
            com.fa.cim.newcore.bo.recipe.CimMachineRecipe aRecipe = aProcessOperation.getAssignedMachineRecipe();
            if (aRecipe != null) {
                machineRecipeID = new ObjectIdentifier(aRecipe.getIdentifier(), aRecipe.getPrimaryKey());
            }
            String physicalRecipeID = aProcessOperation.getAssignedPhysicalRecipe();
            int prcWfrLen = CimArrayUtils.getSize(processWaferList);
            for (int iCnt2 = 0; iCnt2 < prcWfrLen; iCnt2++){
                ProcessDTO.PosProcessWafer processWafer = processWaferList.get(iCnt2);
                boolean processJobFoundFlag = false;
                for (int iCnt3 = 0; iCnt3 < processJobList.size(); iCnt3++){
                    Infos.ProcessJob processJob = processJobList.get(iCnt3);
                    if (CimStringUtils.equals(processWafer.getPrcsJob(), processJob.getProcessJobID())){
                        // found the process job
                        List<Infos.ProcessWafer> tmpProcessWaferList = processJob.getProcessWaferList();
                        Infos.ProcessWafer tmpProcessWafer = new Infos.ProcessWafer();
                        tmpProcessWaferList.add(tmpProcessWafer);
                        tmpProcessWafer.setSlotNumber(0);
                        tmpProcessWafer.setWaferID(new ObjectIdentifier(processWafer.getWaferID()));
                        tmpProcessWafer.setLotID(new ObjectIdentifier(lotProcessOperation.getLotID()));
                        tmpProcessWafer.setSamplingWaferFlag(processWafer.isSamplingWaferFlag());
                        processJobFoundFlag = true;
                        break;
                    }
                }
                if (!processJobFoundFlag){
                    Infos.ProcessJob processJob = new Infos.ProcessJob();
                    processJobList.add(processJob);
                    processJob.setProcessJobID(processWafer.getPrcsJob());
                    processJob.setProcessJobPosition(processWafer.getPrcsJobPosition());
                    processJob.setMachineRecipeID(machineRecipeID);
                    processJob.setPhysicalRecipeID(physicalRecipeID);
                    processJob.setProcessStartFlag(true);
                    List<Infos.ProcessWafer> tmpProcessWaferList = new ArrayList<>();
                    processJob.setProcessWaferList(tmpProcessWaferList);
                    Infos.ProcessWafer tmpProcessWafer = new Infos.ProcessWafer();
                    tmpProcessWaferList.add(tmpProcessWafer);
                    tmpProcessWafer.setSlotNumber(0);
                    tmpProcessWafer.setWaferID(new ObjectIdentifier(processWafer.getWaferID()));
                    tmpProcessWafer.setLotID(new ObjectIdentifier(lotProcessOperation.getLotID()));
                    tmpProcessWafer.setSamplingWaferFlag(processWafer.isSamplingWaferFlag());
                }
            }
        }
        return processJobList;
    }

    @Override
    public Outputs.ObjProcessFutureQrestTimeInfoGetDROut processFutureQrestTimeInfoGetDR(
            Infos.ObjCommon objCommon, Params.FutureActionDetailInfoInqParams futureActionDetailInfoInqParams) {
        //1 Get basic information from input parameters
        // 1.1 Find Product ID from lot ID
        CimLotDO example = new CimLotDO();
        example.setLotID(ObjectIdentifier.fetchValue(futureActionDetailInfoInqParams.getLotID()));
        CimLotDO lot = cimJpaRepository.findOne(Example.of(example)).orElse(null);
        Validations.check(lot == null, retCodeConfig.getNotFoundLot(), futureActionDetailInfoInqParams.getLotID());
        if (lot == null) {
            return new Outputs.ObjProcessFutureQrestTimeInfoGetDROut();
        }

        // 1.2 Get productgroup ID
        CimProductSpecificationDO productSpecification1 = cimJpaRepository
                .queryOne("SELECT PRODFMLY_ID FROM OMPRODINFO WHERE PROD_ID = ?1",
                        CimProductSpecificationDO.class, lot.getProductSpecificationID());

        // 1.3 Get Technology ID
        CimProductGroupDO productGroup = cimJpaRepository
                .queryOne("SELECT TECH_ID FROM OMPRODFMLY WHERE PRODFMLY_ID = ?1",
                        CimProductGroupDO.class, productSpecification1.getProductGroupID());

        String strMainPOS = futureActionDetailInfoInqParams.getOperationFutureActionAttributes().getMainPOS();
        String strModulePOS = futureActionDetailInfoInqParams.getOperationFutureActionAttributes().getModulePOS();
        String strOPNo = futureActionDetailInfoInqParams.getOperationFutureActionAttributes().getOperationNumber();
        String strModuleNo = null;
        //1.4 Get Module number
        String pDot = null;
        String tmpKey = strOPNo.split("\\" + BizConstant.SP_POSPROCESSDEFINITION_SEPARATOR_CHAR)[0];
        if(!CimStringUtils.isEmpty(tmpKey)){
            strModuleNo= tmpKey+BizConstant.SP_POSPROCESSDEFINITION_SEPARATOR_CHAR;
            tmpKey = null;
            pDot   = null;
        }
        //2.1 Get hFRPOSd_theSystemKey from MainPOS
        String strMainDSK=strMainPOS==null?null:strMainPOS.split("#")[0];
        /*tmpKey = BaseStaticMethod.strrchr( strMainPOS, "#");
        if (StringUtils.isEmpty(tmpKey)){
            // todo need check
            tmpKey += tmpKey;
            strMainDSK = tmpKey;
            tmpKey =null;
        }*/
        //2.2 Get hFRPOSd_theSystemKey from ModulePOS
        String strModuleDSK=strModulePOS==null?null:strModulePOS.split("#")[0];
        /*tmpKey = BaseStaticMethod.strrchr( strModulePOS, "#");
        if(StringUtils.isEmpty(tmpKey))
        {
            // todo need check
            tmpKey += tmpKey;
            strModuleDSK = tmpKey;
            tmpKey = null;
        }*/
        Boolean bFound = false;
        String strTOPNo = null;
        String strAOPNo = null;

        List<Infos.FutureQtimeInfo> futureQtimeInfoList = new ArrayList<>();
        boolean bSubRoute = false;
        // Get mainRouteID
        ObjectIdentifier mainRouteID = lotMethod.lotMainRouteIDGet(objCommon,new ObjectIdentifier(lot.getLotID()));

        if(!CimStringUtils.equals(lot.getRouteID(),mainRouteID.getValue())){
            bSubRoute = true;
        }
        // On sub route
        if(bSubRoute){
            //Get lot's ProductOperation
            CimProcessOperation processOperation = baseCoreFactory.getBO(CimProcessOperation.class,
                    lot.getProcessOperationObj());
            if(processOperation!=null){
                CimProductSpecification productSpecification = baseCoreFactory.getBO(CimProductSpecification.class,
                        productSpecification1.getId());
                //------------------------------------------
                // Get PFX object
                //------------------------------------------
                CimProcessFlowContext processFlowContext = baseCoreFactory.getBO(
                        CimProcessFlowContext.class, lot.getProcessFlowContextObj());
                Validations.check(processFlowContext == null,retCodeConfig.getNotFoundSystemObj());
                //------------------------------------------
                // Get branchInfo
                //------------------------------------------
                List<ProcessDTO.BranchInfo> branchInfoList = processFlowContext.allBranchInfos();
                //------------------------------------------
                // Get returnInfo
                //------------------------------------------
                List<ProcessDTO.ReturnInfo> returnInfoList = processFlowContext.allReturnInfos();
                //------------------------------------------
                // Get branch and return operation
                //------------------------------------------
                int branchInfoSize = branchInfoList.size();
                int returnInfoSize = returnInfoList.size();
                // all ways get most small length
                int routeMax = ( branchInfoSize <= returnInfoSize ) ? branchInfoSize : returnInfoSize;
                List<ProcessDTO.BranchInfo> branchInfos = new ArrayList<>();
                List<ProcessDTO.ReturnInfo> returnInfos = new ArrayList<>();
                if((futureActionDetailInfoInqParams.getOperationFutureActionAttributes().getRouteID().getValue())
                        .equals(lot.getRouteID())){
                    if(routeMax>0){
                        branchInfos.add(branchInfoList.get(routeMax-1));
                        returnInfos.add(returnInfoList.get(routeMax-1));
                    }
                }else{
                    for(int routeIdx=0;routeIdx<routeMax;routeIdx++){
                        if(branchInfoList.get(routeIdx).getRouteID().equals(futureActionDetailInfoInqParams
                                .getOperationFutureActionAttributes().getRouteID().getValue())){
                            if( routeIdx > 0 ){
                                branchInfos.add(branchInfoList.get(routeIdx-1));
                                returnInfos.add(returnInfoList.get(routeIdx-1));
                            }
                            break;
                        }
                    }
                }
                if (branchInfos.size() > 0 && returnInfos.size() > 0) {
                    List<ProcessDTO.ReplaceTimeRestrictionSpecification> replaceTimeRestricts = processOperation
                            .findReplaceTimeRestrictionsForReplaceTrigger(productSpecification,
                                    branchInfos, returnInfos,
                                    futureActionDetailInfoInqParams.getOperationFutureActionAttributes().getRouteID().getValue(),
                                    futureActionDetailInfoInqParams.getOperationFutureActionAttributes().getOperationNumber());
                    getReplaceTimeRestrictionsForReplaceTrigger(true, replaceTimeRestricts,
                            futureActionDetailInfoInqParams, branchInfos, futureQtimeInfoList);
                    replaceTimeRestricts = processOperation.findMinQTimeRestrictionsForReplaceTrigger(
                            productSpecification, branchInfos, returnInfos,
                            futureActionDetailInfoInqParams.getOperationFutureActionAttributes().getRouteID().getValue(),
                            futureActionDetailInfoInqParams.getOperationFutureActionAttributes().getOperationNumber());
                    getReplaceTimeRestrictionsForReplaceTrigger(false, replaceTimeRestricts,
                            futureActionDetailInfoInqParams, branchInfos, futureQtimeInfoList);
                }
            }
        }
//        StringBuilder prefixSql = new StringBuilder("SELECT A.TARGET_OPE_NO,A.QTIME_TYPE,B.EXPIRED_TIME,B.ACTION,B.REASON_CODE,B.OPE_NO,B.TIMING,B.MAINPD_ID,B.MSGDEF_ID,B.CUSTOM_FIELD  ");
//        String middleSql = new String("WHERE B.ACTION <> '%1$s' AND A.REFKEY = B.REFKEY AND A.D_KEY = B.D_THETABLEMARKER AND A.REFKEY = '%2$s' AND A.PRODSPEC_ID = '%3$s' " +
//                "UNION ALL SELECT TARGET_OPE_NO, QTIME_TYPE,EXPIRED_TIME,'DispatchPrecede','','','','','','' ");
//        StringBuilder suffixSql = new StringBuilder("WHERE REFKEY ='%2$s' AND PRODSPEC_ID = '%3$s' AND EXPIRED_TIME >0");
        //3. By Product Specification in Main's POS.
        if (CimStringUtils.isNotEmpty(strMainDSK)) {
            getFutureQTimeByProduct(true, strMainDSK, "MainDSK", lot, bFound, strTOPNo, strModuleNo,
                    strAOPNo, futureActionDetailInfoInqParams, futureQtimeInfoList);
            getFutureQTimeByProduct(false, strMainDSK, "MainDSK", lot, bFound, strTOPNo, strModuleNo,
                    strAOPNo, futureActionDetailInfoInqParams, futureQtimeInfoList);
        }
        //4. By Product Specification in Module's POS.
        if (CimStringUtils.isNotEmpty(strModuleDSK)) {
            getFutureQTimeByProduct(true, strModuleDSK, "ModuleDSK", lot, bFound, strTOPNo, strModuleNo,
                    strAOPNo, futureActionDetailInfoInqParams, futureQtimeInfoList);
            getFutureQTimeByProduct(false, strModuleDSK, "ModuleDSK", lot, bFound, strTOPNo, strModuleNo,
                    strAOPNo, futureActionDetailInfoInqParams, futureQtimeInfoList);
        }
        //5. By Product Group in Main's POS
        if (CimStringUtils.isNotEmpty(strMainDSK)) {
            getFutureQTimeByProductGroup(true, strMainDSK, "MainDSK", productSpecification1, bFound,
                    strTOPNo, strModuleNo, strAOPNo, futureActionDetailInfoInqParams, futureQtimeInfoList);
            getFutureQTimeByProductGroup(false, strMainDSK, "MainDSK", productSpecification1, bFound,
                    strTOPNo, strModuleNo, strAOPNo, futureActionDetailInfoInqParams, futureQtimeInfoList);
        }
        //6. By Product Group in Module's POS.
        if (CimStringUtils.isNotEmpty(strModuleDSK)) {
            getFutureQTimeByProductGroup(true, strModuleDSK, "ModuleDSK", productSpecification1,
                    bFound, strTOPNo, strModuleNo, strAOPNo, futureActionDetailInfoInqParams, futureQtimeInfoList);
            getFutureQTimeByProductGroup(false, strModuleDSK, "ModuleDSK", productSpecification1,
                    bFound, strTOPNo, strModuleNo, strAOPNo, futureActionDetailInfoInqParams, futureQtimeInfoList);
        }
        //7. By Technology in Main's POS
        if (CimStringUtils.isNotEmpty(strMainDSK)) {
            getFutureQTimeByTechnology(true, strMainDSK, "MainDSK", productGroup, bFound, strTOPNo,
                    strModuleNo, strAOPNo, futureActionDetailInfoInqParams, futureQtimeInfoList);
            getFutureQTimeByTechnology(false, strMainDSK, "MainDSK", productGroup, bFound, strTOPNo,
                    strModuleNo, strAOPNo, futureActionDetailInfoInqParams, futureQtimeInfoList);
        }
        //8. By Technology in Module's POS.
        if (CimStringUtils.isNotEmpty(strModuleDSK)) {
            getFutureQTimeByTechnology(true, strModuleDSK, "ModuleDSK", productGroup, bFound,
                    strTOPNo, strModuleNo, strAOPNo, futureActionDetailInfoInqParams, futureQtimeInfoList);
            getFutureQTimeByTechnology(false, strModuleDSK, "ModuleDSK", productGroup, bFound,
                    strTOPNo, strModuleNo, strAOPNo, futureActionDetailInfoInqParams, futureQtimeInfoList);
        }
        //9. By Default in Main's POS
        if (CimStringUtils.isNotEmpty(strMainDSK)) {
            getFutureQTimeByDefault(true, strMainDSK, "MainDSK", bFound, strTOPNo, strModuleNo,
                    strAOPNo, futureActionDetailInfoInqParams, futureQtimeInfoList);
            getFutureQTimeByDefault(false, strMainDSK, "MainDSK", bFound, strTOPNo, strModuleNo,
                    strAOPNo, futureActionDetailInfoInqParams, futureQtimeInfoList);
        }
        //10. By Default in Module's POS.
        if (CimStringUtils.isEmpty(strModuleDSK)) {
            getFutureQTimeByDefault(true, strModuleDSK, "ModuleDSK", bFound, strTOPNo, strModuleNo,
                    strAOPNo, futureActionDetailInfoInqParams, futureQtimeInfoList);
            getFutureQTimeByDefault(false, strModuleDSK, "ModuleDSK", bFound, strTOPNo, strModuleNo,
                    strAOPNo, futureActionDetailInfoInqParams, futureQtimeInfoList);
        }
        Outputs.ObjProcessFutureQrestTimeInfoGetDROut objProcessFutureQrestTimeInfoGetDROut = new Outputs.ObjProcessFutureQrestTimeInfoGetDROut();
        objProcessFutureQrestTimeInfoGetDROut.setFutureQtimeInfoList(futureQtimeInfoList);
        return objProcessFutureQrestTimeInfoGetDROut;
    }

    private void getReplaceTimeRestrictionsForReplaceTrigger(boolean isMaxQTime,
            List<ProcessDTO.ReplaceTimeRestrictionSpecification> restricts,
            Params.FutureActionDetailInfoInqParams futureActionDetailInfoInqParams,
            List<ProcessDTO.BranchInfo> branchInfos,
            List<Infos.FutureQtimeInfo> futureQtimeInfoList) {
        if (CimArrayUtils.isEmpty(restricts)) {
            return;
        }

        for (ProcessDTO.ReplaceTimeRestrictionSpecification restrict : restricts) {
            boolean dispatchPrecedeFlag = false;
            List<ProcessDTO.TimeRestrictionAction> actions = restrict.getActions();
            for (ProcessDTO.TimeRestrictionAction timeRestrictionAction : actions) {
                if (CimStringUtils.equals(BizConstant.SP_QTIMERESTRICTION_ACTION_DISPATCHPRECEDE,
                        timeRestrictionAction.getAction())) {
                    dispatchPrecedeFlag = true;
                    if (log.isDebugEnabled()) {
                        log.info("DispatchPrecede action");
                    }
                }
                Infos.FutureQtimeInfo futureQtimeInfo = new Infos.FutureQtimeInfo();
                futureQtimeInfo.setMinQTime(!isMaxQTime);
                futureQtimeInfo.setTriggerRouteID(futureActionDetailInfoInqParams
                        .getOperationFutureActionAttributes().getRouteID());
                futureQtimeInfo.setTriggerOperationNumber(futureActionDetailInfoInqParams
                        .getOperationFutureActionAttributes().getOperationNumber());
                futureQtimeInfo.setTargetRouteID(restrict.getTargetRouteID());
                futureQtimeInfo.setTargetOperationNumber(restrict.getTargetOperationNumber());
                futureQtimeInfo.setExpiredTimeDuration((long)(timeRestrictionAction.getExpiredTimeDuration() / 60000));
                futureQtimeInfo.setQrestrictionAction(timeRestrictionAction.getAction());
                futureQtimeInfo.setReasonCode(timeRestrictionAction.getReasonCode());
                if (Integer.parseInt(timeRestrictionAction.getActionRouteID().getValue()) > 0) {
                    futureQtimeInfo.setActionRouteID(timeRestrictionAction.getActionRouteID());
                } else if (CimStringUtils.equals(timeRestrictionAction.getOperationNumber(),"0")) {
                    futureQtimeInfo.setActionRouteID(ObjectIdentifier.build("", ""));
                } else {
                    futureQtimeInfo.setActionRouteID(branchInfos.get(0).getRouteID());
                }
                futureQtimeInfo.setActionOperationNumber(timeRestrictionAction.getOperationNumber());
                futureQtimeInfo.setReworkRouteID(timeRestrictionAction.getMainProcessDefinition());
                futureQtimeInfo.setFutureHoldTiming(timeRestrictionAction.getTiming());
                futureQtimeInfo.setMessageID(timeRestrictionAction.getMessageDefinition());
                futureQtimeInfo.setCustomField(timeRestrictionAction.getCustomField());
                futureQtimeInfo.setQTimeType(restrict.getQTimeType());
                futureQtimeInfoList.add(futureQtimeInfo);
            }
            if ( !dispatchPrecedeFlag
                    && !CimStringUtils.equals(BizConstant.SP_DISPATCH_PRECEDE_NOT_FOUND.toString(),
                    CimObjectUtils.toString(restrict.getExpiredTimeDuration()))){
                Infos.FutureQtimeInfo futureQtimeInfo = new Infos.FutureQtimeInfo();
                futureQtimeInfo.setMinQTime(!isMaxQTime);
                futureQtimeInfo.setTriggerRouteID(futureActionDetailInfoInqParams
                        .getOperationFutureActionAttributes().getRouteID());
                futureQtimeInfo.setTriggerOperationNumber(futureActionDetailInfoInqParams
                        .getOperationFutureActionAttributes().getOperationNumber());
                futureQtimeInfo.setTargetRouteID(restrict.getTargetRouteID());
                futureQtimeInfo.setTargetOperationNumber(restrict.getTargetOperationNumber());
                futureQtimeInfo.setExpiredTimeDuration((long)(restrict.getExpiredTimeDuration() / 60000));
                futureQtimeInfo.setQrestrictionAction(BizConstant.SP_QTIMERESTRICTION_ACTION_DISPATCHPRECEDE);
                futureQtimeInfo.setReasonCode(ObjectIdentifier.build("", null));
                futureQtimeInfo.setActionRouteID(ObjectIdentifier.build("", null));
                futureQtimeInfo.setActionOperationNumber("");
                futureQtimeInfo.setReworkRouteID(ObjectIdentifier.build("", null));
                futureQtimeInfo.setFutureHoldTiming("");
                futureQtimeInfo.setMessageID(ObjectIdentifier.build("", null));
                futureQtimeInfo.setCustomField("");
                futureQtimeInfo.setQTimeType(restrict.getQTimeType());
                futureQtimeInfoList.add(futureQtimeInfo);
            }
        }
    }

    private void getFutureQTimeByProduct(boolean isMaxQTime, String strDSK, String type, CimLotDO lot, boolean bFound,
                                         String strTOPNo, String strModuleNo, String strAOPNo,
                                         Params.FutureActionDetailInfoInqParams futureActionDetailInfoInqParams,
                                         List<Infos.FutureQtimeInfo> futureQTimeInfoList) {
        String queryResultSql;
        List<Object[]> queryResult;
        if (isMaxQTime) {
            queryResultSql = "SELECT A.TARGET_OPE_NO,\n" +
                    "                       A.QT_TYPE,  \n" +
                    "                       B.DURATION,\n" +
                    "                       B.ACTION,\n" +
                    "                       B.REASON_CODE,\n" +
                    "                       B.OPE_NO,\n" +
                    "                       B.FH_TIMING,\n" +
                    "                       B.PRP_ID,\n" +
                    "                       B.NOTIFY_ID\n" +
//                    "                       B.CUSTOM_FIELD\n" +
                    "                FROM OMPRSS_QTPROD A, OMPRSS_QTPROD_ACT B\n" +
                    "                WHERE B.ACTION <> ?1 AND A.REFKEY = B.REFKEY AND A.LINK_KEY = B.LINK_MARKER " +
                    "                       AND A.REFKEY = ?2 AND A.PROD_ID = ?3 \n" +
                    "            UNION ALL\n" +
                    "                SELECT TARGET_OPE_NO,\n" +
                    "                       QT_TYPE,  \n" +
                    "                       DURATION,\n" +
                    "                       'DispatchPrecede',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
                    "                       ''\n" +
//                    "                       ''\n" +
                    "                FROM OMPRSS_QTPROD\n" +
                    "                WHERE REFKEY = ?2 AND PROD_ID = ?3 AND DURATION > 0";
//            StringBuilder querySql = prefixSql.append("FROM FRPOS_TIMERESTRICT A, FRPOS_TIMERESTRICT_ACTION B ").append(middleSql).append("FROM FRPOS_TIMERESTRICT ").append(suffixSql);
//            String queryResultSql = String.format(querySql.toString(), BizConstant.SP_QTIMERESTRICTION_ACTION_DISPATCHPRECEDE, strMainDSK,lot.getProductSpecificationID());
            queryResult = cimJpaRepository.query(queryResultSql,
                    BizConstant.SP_QTIMERESTRICTION_ACTION_DISPATCHPRECEDE, strDSK, lot.getProductSpecificationID());
        } else {
            queryResultSql = "SELECT TARGET_OPE_NO,\n" +
                    "                       QT_TYPE,  \n" +
                    "                       DURATION,\n" +
                    "                       'DispatchPrecede',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
                    "                       ''\n" +
//                    "                       ''\n" +
                    "                FROM OMPRSS_QTPROD\n" +
                    "                WHERE REFKEY = ?1 AND PROD_ID = ?2 AND DURATION > 0";
            queryResult = cimJpaRepository.query(queryResultSql, strDSK, lot.getProductSpecificationID());
        }
        composeFutureQTime(queryResult, futureQTimeInfoList, isMaxQTime, type, bFound, strTOPNo, strModuleNo, strAOPNo,
                futureActionDetailInfoInqParams);
    }

    private void getFutureQTimeByProductGroup(boolean isMaxQTime, String strDSK, String type,
                                              CimProductSpecificationDO productSpecification,
                                              boolean bFound, String strTOPNo, String strModuleNo, String strAOPNo,
                                              Params.FutureActionDetailInfoInqParams futureActionDetailInfoInqParams,
                                              List<Infos.FutureQtimeInfo> futureQTimeInfoList) {
        String queryResultSql;
        List<Object[]> queryResult;
        if (isMaxQTime) {
            queryResultSql = "SELECT A.TARGET_OPE_NO,\n" +
                    "                       A.QT_TYPE, \n" +
                    "                       B.DURATION,\n" +
                    "                       B.ACTION,\n" +
                    "                       B.REASON_CODE,\n" +
                    "                       B.OPE_NO,\n" +
                    "                       B.FH_TIMING,\n" +
                    "                       B.PRP_ID,\n" +
                    "                       B.NOTIFY_ID\n" +
//                    "                       B.CUSTOM_FIELD\n" +
                    "                FROM OMPRSS_QTPRODFMLY A, OMPRSS_QTPRODFMLY_ACT B\n" +
                    "            WHERE B.ACTION <> ?1 AND A.REFKEY = B.REFKEY AND A.LINK_KEY = B.LINK_MARKER AND A.REFKEY = ?2 AND A.PRODFMLY_ID = ?3 \n" +
                    "            UNION ALL\n" +
                    "                SELECT TARGET_OPE_NO,\n" +
                    "                       QT_TYPE,  \n" +
                    "                       DURATION,\n" +
                    "                       'DispatchPrecede',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
//                    "                       '',\n" +
                    "                       ''\n" +
                    "                FROM OMPRSS_QTPRODFMLY\n" +
                    "                WHERE REFKEY = ?2 AND PRODFMLY_ID = ?3 AND DURATION > 0";
//            StringBuilder querySql = prefixSql.append("FROM FRPOS_QRESTPGRP A, FRPOS_QRESTPGRP_ACTION B ").append(middleSql).append("FROM FRPOS_QRESTPGRP ").append(suffixSql);
//            String queryResultSql = String.format(querySql.toString(), BizConstant.SP_QTIMERESTRICTION_ACTION_DISPATCHPRECEDE,strMainDSK,lot.getProductSpecificationObj(),strMainDSK,lot.getProductSpecificationID());
            queryResult = cimJpaRepository.query(queryResultSql, BizConstant.SP_QTIMERESTRICTION_ACTION_DISPATCHPRECEDE,
                    strDSK, productSpecification.getProductGroupID());
        } else {
            queryResultSql = "SELECT TARGET_OPE_NO,\n" +
                    "                       QT_TYPE,  \n" +
                    "                       DURATION,\n" +
                    "                       'DispatchPrecede',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
                    "                       ''\n" +
//                    "                       ''\n" +
                    "                FROM OMPRSS_MINQTPRODFMLY\n" +
                    "                WHERE REFKEY = ?1 AND PRODFMLY_ID = ?2 AND DURATION > 0";
            queryResult = cimJpaRepository.query(queryResultSql, strDSK, productSpecification.getProductGroupID());
        }
        composeFutureQTime(queryResult, futureQTimeInfoList, isMaxQTime, type, bFound, strTOPNo, strModuleNo, strAOPNo,
                futureActionDetailInfoInqParams);
    }

    private void getFutureQTimeByTechnology(boolean isMaxQTime, String strDSK, String type,
                                            CimProductGroupDO productGroup, boolean bFound, String strTOPNo,
                                            String strModuleNo, String strAOPNo,
                                            Params.FutureActionDetailInfoInqParams futureActionDetailInfoInqParams,
                                            List<Infos.FutureQtimeInfo> futureQTimeInfoList) {
        String queryResultSql;
        List<Object[]> queryResult;
        if (isMaxQTime) {
            queryResultSql = "SELECT A.TARGET_OPE_NO,\n" +
                    "                   A.QT_TYPE,  \n" +
                    "                   B.DURATION,\n" +
                    "                   B.ACTION,\n" +
                    "                   B.REASON_CODE,\n" +
                    "                   B.OPE_NO,\n" +
                    "                   B.FH_TIMING,\n" +
                    "                   B.PRP_ID,\n" +
                    "                   B.NOTIFY_ID\n" +
//                    "                   B.CUSTOM_FIELD\n" +
                    "            FROM OMPRSS_QTTECH A, OMPRSS_QTTECH_ACT B\n" +
                    "            WHERE B.ACTION <> ?1 AND A.REFKEY = B.REFKEY AND A.LINK_KEY = B.LINK_MARKER AND A.REFKEY = ?2 AND A.TECH_ID = ?3\n" +
                    "            UNION ALL\n" +
                    "                SELECT TARGET_OPE_NO,\n" +
                    "                       QT_TYPE,\n" +
                    "                       DURATION,\n" +
                    "                       'DispatchPrecede',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
//                    "                       '',\n" +
                    "                       ''\n" +
                    "                FROM OMPRSS_QTTECH\n" +
                    "                WHERE REFKEY = ?2 AND TECH_ID = ?3 AND DURATION > 0";
//            StringBuilder querySql = prefixSql.append("FROM FRPOS_QRESTTECH A, FRPOS_QRESTTECH_ACTION B ").append(middleSql).append("FROM FRPOS_QRESTTECH ").append(suffixSql);
//            String queryResultSql = String.format(querySql.toString(), BizConstant.SP_QTIMERESTRICTION_ACTION_DISPATCHPRECEDE,strMainDSK,lot.getProductSpecificationObj(),strMainDSK,lot.getProductSpecificationID());
            queryResult = cimJpaRepository.query(queryResultSql,BizConstant.SP_QTIMERESTRICTION_ACTION_DISPATCHPRECEDE,
                    strDSK, productGroup.getTechnologyID());
        } else {
            queryResultSql = "SELECT TARGET_OPE_NO,\n" +
                    "                       QT_TYPE,  \n" +
                    "                       DURATION,\n" +
                    "                       'DispatchPrecede',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
                    "                       ''\n" +
//                    "                       ''\n" +
                    "                FROM OMPRSS_MINQTTECH\n" +
                    "                WHERE REFKEY = ?1 AND TECH_ID = ?2 AND DURATION > 0";
            queryResult = cimJpaRepository.query(queryResultSql, strDSK, productGroup.getTechnologyID());
        }
        composeFutureQTime(queryResult, futureQTimeInfoList, isMaxQTime, type, bFound, strTOPNo, strModuleNo, strAOPNo,
                futureActionDetailInfoInqParams);
    }

    private void getFutureQTimeByDefault(boolean isMaxQTime, String strDSK, String type, boolean bFound,
                                         String strTOPNo, String strModuleNo, String strAOPNo,
                                         Params.FutureActionDetailInfoInqParams futureActionDetailInfoInqParams,
                                         List<Infos.FutureQtimeInfo> futureQTimeInfoList) {
        String queryResultSql;
        List<Object[]> queryResult;
        if (isMaxQTime) {
            queryResultSql = "SELECT A.TARGET_OPE_NO,\n" +
                    "                       A.QT_TYPE,  \n" +
                    "                       B.DURATION,\n" +
                    "                       B.ACTION,\n" +
                    "                       B.REASON_CODE,\n" +
                    "                       B.OPE_NO,\n" +
                    "                       B.FH_TIMING,\n" +
                    "                       B.PRP_ID,\n" +
                    "                       B.NOTIFY_ID\n" +
//                    "                       B.CUSTOM_FIELD\n" +
                    "                FROM OMPRSS_QT A, OMPRSS_QT_ACT B\n" +
                    "                WHERE B.ACTION <> ?1 AND A.REFKEY = B.REFKEY AND A.LINK_KEY = B.LINK_MARKER AND A.REFKEY = ?2 \n" +
                    "            UNION ALL\n" +
                    "                SELECT TARGET_OPE_NO,\n" +
                    "                       QT_TYPE, \n" +
                    "                       DURATION,\n" +
                    "                       'DispatchPrecede',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
//                    "                       '',\n" +
                    "                       ''\n" +
                    "                FROM OMPRSS_QT\n" +
                    "                WHERE REFKEY = ?2 AND DURATION > 0";
//            StringBuilder querySql = prefixSql.append("FROM FRPOS_QRESTDFLT A, FRPOS_QRESTDFLT_ACTION B ").append(middleSql).append("FROM FRPOS_QRESTDFLT ").append(suffixSql);
//            String queryResultSql = String.format(querySql.toString(), BizConstant.SP_QTIMERESTRICTION_ACTION_DISPATCHPRECEDE,strMainDSK,lot.getProductSpecificationObj(),strMainDSK,lot.getProductSpecificationID());
            queryResult = cimJpaRepository.query(queryResultSql, BizConstant.SP_QTIMERESTRICTION_ACTION_DISPATCHPRECEDE,
                    strDSK);
        } else {
            queryResultSql = "SELECT TARGET_OPE_NO,\n" +
                    "                       QT_TYPE,  \n" +
                    "                       DURATION,\n" +
                    "                       'DispatchPrecede',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
                    "                       '',\n" +
                    "                       ''\n" +
//                    "                       ''\n" +
                    "                FROM OMPRSS_MINQT\n" +
                    "                WHERE REFKEY = ?1 AND DURATION > 0";
            queryResult = cimJpaRepository.query(queryResultSql, strDSK);
        }
        composeFutureQTime(queryResult, futureQTimeInfoList, isMaxQTime, type, bFound, strTOPNo, strModuleNo, strAOPNo,
                futureActionDetailInfoInqParams);
    }

    private void composeFutureQTime(List<Object[]> queryResult, List<Infos.FutureQtimeInfo> futureQTimeInfoList,
                                    boolean isMaxQTime, String type, boolean bFound, String strTOPNo,
                                    String strModuleNo, String strAOPNo,
                                    Params.FutureActionDetailInfoInqParams futureActionDetailInfoInqParams) {
        if (CimArrayUtils.isEmpty(queryResult)) {
            return;
        }
        for (Object[] objects : queryResult) {
            Infos.FutureQtimeInfo fQTimeInfo = assemblyFutureQtimeInfo(isMaxQTime, type, objects, bFound, strTOPNo,
                    strModuleNo, strAOPNo, futureQTimeInfoList, futureActionDetailInfoInqParams);
            futureQTimeInfoList.add(fQTimeInfo);
        }
    }

    @Override
    public Outputs.ObjProcessGetTargetOperationOut processGetTargetOperation(Infos.ObjCommon objCommon, Inputs.ObjProcessGetTargetOperationIn objProcessGetTargetOperationIn) {
        Outputs.ObjProcessGetTargetOperationOut out = new Outputs.ObjProcessGetTargetOperationOut();
        CimLot lot = baseCoreFactory.getBO(CimLot.class, objProcessGetTargetOperationIn.getLotID());
        Validations.check(null == lot, new OmCode(retCodeConfig.getNotFoundLot(), objProcessGetTargetOperationIn.getLotID().getValue()));
        CimProcessFlowContext processFlowContext = lot.getProcessFlowContext();
        Validations.check(null == processFlowContext, retCodeConfig.getNotFoundPfx());
        CimProcessDefinition processDefinition = processDefinitionManager.findMainProcessDefinitionNamed(objProcessGetTargetOperationIn.getRouteID().getValue());
        Validations.check(null == processDefinition, retCodeConfig.getNotFoundRoute());
        //---------------------------------------------------------------------------------------
        //  Find the target ProcessOpeationSpecification using by routeID and operationNumber
        //---------------------------------------------------------------------------------------
        //procRef = aFlowContext->findProcessOperationSpecificationForOld(locateDirection, aProcessDefinition, operationNumber);
        ProcessDTO.ProcessRef procRef = processFlowContext.findProcessOperationSpecificationFor(objProcessGetTargetOperationIn.getLocateDirection(),
                processDefinition, objProcessGetTargetOperationIn.getOperationNumber());

        Validations.check(null == procRef, new OmCode(retCodeConfig.getNotFoundPos(), "*****", objProcessGetTargetOperationIn.getLotID().getValue()));
        if (!CimStringUtils.isEmpty(procRef.getModulePOS())) {
            Infos.ProcessRef processRef = new Infos.ProcessRef();
            processRef.setProcessFlow(procRef.getProcessFlow());
            processRef.setProcessOperationSpecification(procRef.getProcessOperationSpecification());
            processRef.setModuleNumber(procRef.getModuleNumber());
            processRef.setMainProcessFlow(procRef.getMainProcessFlow());
            processRef.setModuleProcessFlow(procRef.getModuleProcessFlow());
            processRef.setModulePOS(procRef.getModulePOS());
            out.setProcessRef(processRef);
        } else {
            throw new ServiceException(new OmCode(retCodeConfig.getNotFoundPos(), "*****", objProcessGetTargetOperationIn.getLotID().getValue()));
        }
        return out;
    }

    @Override
    public Outputs.ObjProcessGetOperationByProcessRefOut processGetOperationByProcessRef(Infos.ObjCommon objCommon, Infos.ProcessRef processRef) {
        Outputs.ObjProcessGetOperationByProcessRefOut result = new Outputs.ObjProcessGetOperationByProcessRefOut();
        CimProcessFlow aMainPF = baseCoreFactory.getBO(CimProcessFlow.class, processRef.getMainProcessFlow());
        Validations.check(aMainPF == null, new OmCode(retCodeConfig.getNotFoundProcessFlow(), ""));
        CimProcessDefinition aMainProcessDefinition = aMainPF.getRootProcessDefinition();
        Validations.check(aMainProcessDefinition == null, new OmCode(retCodeConfig.getNotFoundProcessDefinition(), ""));
        ObjectIdentifier targetRouteID = new ObjectIdentifier(aMainProcessDefinition.getIdentifier(), aMainProcessDefinition.getPrimaryKey());
        CimProcessOperationSpecification aModulePOS = baseCoreFactory.getBO(CimProcessOperationSpecification.class, processRef.getModulePOS());
        Validations.check(aModulePOS == null, new OmCode(retCodeConfig.getNotFoundPos(), "", ""));
        String moduleOpeNo = aModulePOS.getOperationNumber();
        String targetOpeNo = BaseStaticMethod.convertModuleOpeNoToOpeNo(processRef.getModuleNumber(), moduleOpeNo);
        result.setRouteID(targetRouteID);
        result.setOperationNumber(targetOpeNo);
        return result;
    }


    private  Infos.FutureQtimeInfo assemblyFutureQtimeInfo(
            boolean isMaxQTime, String type, Object[] objects, Boolean bFound, String strTOPNo, String strModuleNo,
            String strAOPNo, List<Infos.FutureQtimeInfo> futureQtimeInfoList,
            Params.FutureActionDetailInfoInqParams futureActionDetailInfoInqParams){
        Infos.FutureQtimeInfo futureQtimeInfo = new Infos.FutureQtimeInfo();
        futureQtimeInfo.setMinQTime(!isMaxQTime);
        String posTimereStrictTargetOpeNo = objects[0] == null ? "" : (String) objects[0];
        String posTimereStrictQtimeType = objects[1] == null ? ""  : (String) objects[1];
        long posTimereStrictActionExpiredTime = objects[2] == null ? 0l : CimLongUtils.longValue(objects[2]);
        String posTimereStrictActionAction = objects[3] == null ? ""  : (String) objects[3];
        String posTimereStrictActionReasonCode = objects[4] == null ? ""  : (String) objects[4];
        String posTimereStrictActionOpeNo = objects[5] == null ? ""  : (String) objects[5];
        String posTimereStrictActionTiming = objects[6] == null ? ""  : (String) objects[6];
        String posTimereStrictActionMainPdID = objects[7] == null ? ""  : (String) objects[7];
        String posTimereStrictActionMsgDefID = objects[8] == null ? ""  : (String) objects[8];
        boolean bFounds = false;
        if(!CimStringUtils.isEmpty(type) && type.equals("ModuleDSK")){
            strTOPNo = strModuleNo + posTimereStrictTargetOpeNo;
            if(!CimStringUtils.isEmpty(posTimereStrictActionOpeNo)){
                strAOPNo = strModuleNo + posTimereStrictActionOpeNo;
            }
            for(Infos.FutureQtimeInfo futureQtimeInfo1 : futureQtimeInfoList){
                if(CimStringUtils.equals(futureQtimeInfo1.getTargetOperationNumber(),strTOPNo)){
                    bFounds = true;
                    break;
                }
            }
        }
        if(!bFounds){
            futureQtimeInfo.setTriggerRouteID(futureActionDetailInfoInqParams.getOperationFutureActionAttributes().getRouteID());
            futureQtimeInfo.setTriggerOperationNumber(futureActionDetailInfoInqParams.getOperationFutureActionAttributes().getOperationNumber());
            futureQtimeInfo.setTargetRouteID(futureActionDetailInfoInqParams.getOperationFutureActionAttributes().getRouteID());
            if(!CimStringUtils.isEmpty(type) && type.equals("ModuleDSK")){
                futureQtimeInfo.setTargetOperationNumber(strTOPNo);
            }else {
                futureQtimeInfo.setTargetOperationNumber(posTimereStrictTargetOpeNo);
            }
            futureQtimeInfo.setExpiredTimeDuration(posTimereStrictActionExpiredTime/60000);
            futureQtimeInfo.setQrestrictionAction(posTimereStrictActionAction);
            futureQtimeInfo.setReasonCode(ObjectIdentifier.build(posTimereStrictActionReasonCode, ""));
            if(!CimStringUtils.isEmpty(type) && type.equals("ModuleDSK")){
                futureQtimeInfo.setActionOperationNumber(strAOPNo);
            }else{
                futureQtimeInfo.setActionOperationNumber(posTimereStrictActionOpeNo);
            }
            futureQtimeInfo.setQTimeType(posTimereStrictQtimeType);
            if(CimStringUtils.isEmpty(futureQtimeInfo.getActionOperationNumber())){
                futureQtimeInfo.setActionRouteID(ObjectIdentifier.build("", ""));
            }else{
                futureQtimeInfo.setActionRouteID(futureActionDetailInfoInqParams.getOperationFutureActionAttributes().getRouteID());
            }
            futureQtimeInfo.setReworkRouteID(ObjectIdentifier.build(posTimereStrictActionMainPdID, ""));
            futureQtimeInfo.setFutureHoldTiming(posTimereStrictActionTiming);
            futureQtimeInfo.setMessageID(ObjectIdentifier.build(posTimereStrictActionMsgDefID, ""));
        }
        return  futureQtimeInfo;
    }

    @Override
    public List<Infos.OperationNameAttributesFromHistory> processOperationListFromHistoryDR(Infos.ObjCommon objCommon, Long searchCount, ObjectIdentifier lotID,String fromTimeStamp, String toTimeStamp) {
        List<Infos.OperationNameAttributesFromHistory> strProcessOperationListFromHistoryDROut = new ArrayList<>();

        log.info("PPTManager_i::process_operationListFromHistoryDR__160");

        //-----------------------------------------------------------------------------
        // Initialize
        //-----------------------------------------------------------------------------

        log.info("in para lotID = {}", lotID.getValue());

        //-----------------------------------------------------------------------------
        // Check input parameter.
        //-----------------------------------------------------------------------------
        Validations.check(searchCount <= 0,retCodeConfig.getInvalidInputParam());

        //-----------------------------------------------------------------------------
        // OHLOTOPE Select
        //-----------------------------------------------------------------------------
        String hFHOPEHSLOT_ID="";
        hFHOPEHSLOT_ID = lotID.getValue();

        String sql = "SELECT PROCESS_ID, STEP_ID, STEP_TYPE, OPE_NO, OPE_PASS_COUNT, max(TRX_TIME) a, max(EVENT_CREATE_TIME) b, max(STORE_TIME) c\n" +
                "        FROM OHLOTOPE\n" +
                "        WHERE LOT_ID  = ? AND OPE_PASS_COUNT > 0\n" +
                "        AND MOVE_TYPE != 'BackwardOperation' \n" +
                "        AND MOVE_TYPE != 'BackwardStage'     \n";

        //add fromTimeStamp and toTimeStamp for history query
        String sqlTemp = "";
        if (CimStringUtils.isNotEmpty( fromTimeStamp )) {
            sqlTemp = String.format(" AND EVENT_CREATE_TIME >= TO_TIMESTAMP('%s', 'yyyy-mm-dd hh24:mi:ss.ff')", fromTimeStamp);
            sql += sqlTemp ;
        }
        if (CimStringUtils.isNotEmpty( toTimeStamp )) {
            sqlTemp = String.format(" AND EVENT_CREATE_TIME <= TO_TIMESTAMP('%s', 'yyyy-mm-dd hh24:mi:ss.ff')", toTimeStamp);
            sql += sqlTemp ;
        }

        sql += " GROUP BY PROCESS_ID, STEP_ID, STEP_TYPE, OPE_NO, OPE_PASS_COUNT ORDER BY a desc, b desc, c desc ";

        List<Object[]> aLFm1__160=cimJpaRepository.query(sql,hFHOPEHSLOT_ID);

        log.info("OPEN cursor aLFm1__160.");

        int t_len = 1000 ;
        int aRowIndex = 0 ;
        strProcessOperationListFromHistoryDROut=new ArrayList<>(t_len) ;

        for (Object[] aLFm1:aLFm1__160) {
            //-----------------------------------------------------------------------------
            // searchCount Over Check
            //-----------------------------------------------------------------------------
            if( aRowIndex == searchCount ) {
                log.info("if( aRowIndex == searchCount ) searchCount={}", searchCount );
                break ;
            }

            //-----------------------------------------------------------------------------
            // OHLOTOPE Fetch
            //-----------------------------------------------------------------------------
            String hFHOPEHSMAINPD_ID          ="";
            String hFHOPEHSPD_ID              ="";
            String hFHOPEHSPD_TYPE            ="";
            String hFHOPEHSOPE_NO             ="";
            Integer hFHOPEHSOPE_PASS_COUNT =0 ;
            String hFHOPEHSCLAIM_TIME         ="";
            String hFHOPEHSEVENT_CREATE_TIME  ="";
            String hFHOPEHSSTORE_TIME         ="";

            hFHOPEHSMAINPD_ID= CimObjectUtils.toString(aLFm1[0]);
            hFHOPEHSPD_ID= CimObjectUtils.toString(aLFm1[1]);
            hFHOPEHSPD_TYPE= CimObjectUtils.toString(aLFm1[2]);
            hFHOPEHSOPE_NO= CimObjectUtils.toString(aLFm1[3]);
            hFHOPEHSOPE_PASS_COUNT= CimNumberUtils.intValue(aLFm1[4]);
            hFHOPEHSCLAIM_TIME= CimObjectUtils.toString(aLFm1[5]);
            hFHOPEHSEVENT_CREATE_TIME= CimObjectUtils.toString(aLFm1[6]);
            hFHOPEHSSTORE_TIME = CimObjectUtils.toString(aLFm1[7]);

            if( aRowIndex >= t_len ) {
                t_len = t_len + 500 ;
            }

            log.info("******* aRowIndex *******={}", aRowIndex) ;
            log.info("FETCH lotID={}", hFHOPEHSLOT_ID) ;
            log.info("FETCH PROCESS_ID={}", hFHOPEHSMAINPD_ID) ;
            log.info("FETCH STEP_ID={}", hFHOPEHSPD_ID) ;
            log.info("FETCH OPE_NO={}", hFHOPEHSOPE_NO) ;
            log.info("FETCH OPE_PASS_COUNT={}", hFHOPEHSOPE_PASS_COUNT) ;
            log.info("FETCH TRX_TIME={}", hFHOPEHSCLAIM_TIME) ;
            log.info("FETCH EVENT_CREATE_TIME={}", hFHOPEHSEVENT_CREATE_TIME) ;
            log.info("FETCH STORE_TIME={}", hFHOPEHSSTORE_TIME) ;

            //-----------------------------------------------------------------------------
            // FRPD Select
            //-----------------------------------------------------------------------------
            String hFRPDOPE_NAME="";
            String hFRPDPD_LEVEL="";
            hFRPDPD_LEVEL = BizConstant.SP_PD_FLOWLEVEL_OPERATION;

            hFRPDOPE_NAME= CimObjectUtils.toString(cimJpaRepository.queryOne("SELECT OPE_NAME,PRP_ID\n" +
                            "            FROM OMPRP\n" +
                            "            WHERE PRP_ID = ?\n" +
                            "            AND   PRP_LEVEL = ?", hFHOPEHSPD_ID,
                    hFRPDPD_LEVEL)[0]);


            log.info("SELECT DATA OPE_NAME={}", hFRPDOPE_NAME);

            strProcessOperationListFromHistoryDROut.add(new Infos.OperationNameAttributesFromHistory());
            strProcessOperationListFromHistoryDROut.get(aRowIndex).setSeqno                  ( aRowIndex*1L );
            strProcessOperationListFromHistoryDROut.get(aRowIndex).setRouteID                ( ObjectIdentifier.build(hFHOPEHSMAINPD_ID,null) ) ;
            strProcessOperationListFromHistoryDROut.get(aRowIndex).setOperationID            ( ObjectIdentifier.build(hFHOPEHSPD_ID,null) ) ;
            strProcessOperationListFromHistoryDROut.get(aRowIndex).setOperationNumber        ( hFHOPEHSOPE_NO ) ;
            strProcessOperationListFromHistoryDROut.get(aRowIndex).setOperationName          ( hFRPDOPE_NAME ) ;
            strProcessOperationListFromHistoryDROut.get(aRowIndex).setOperationPass          (CimObjectUtils.toString(hFHOPEHSOPE_PASS_COUNT));
            strProcessOperationListFromHistoryDROut.get(aRowIndex).setPdType                 ( hFHOPEHSPD_TYPE );

            aRowIndex++ ;
        }
        log.info("count={}", aRowIndex);

        return strProcessOperationListFromHistoryDROut ;
    }

    @Override
    public List<Infos.ProcHoldListAttributes> processHoldHoldListGetDR(Infos.ObjCommon objCommon, Infos.ProcessHoldSearchKey processHoldSearchKey, ObjectIdentifier reasonCodeID, Long count, boolean countLimitter, boolean validAst) {
        Boolean first_condition = true;
        // set default //ROUTE_ID,OPE_NO,PROD_ID,USER_ID,HOLD_TYPE,EXEC_HOLD_FLAG,REASON_CODE,TRX_MEMO,TRX_TIME
        String HV_BUFFER = "SELECT MAIN_PROCESS_ID,OPE_NO,PROD_ID,USER_ID,HOLD_TYPE,WIP_HOLD_FLAG,HOLD_CODE,TRX_MEMO,TRX_TIME,DPT_NAME_PLATE FROM OMPRP_PRHOLD ";
        String HV_TMPBUFFER;
        // RouteID
        if (!ObjectIdentifier.isEmptyWithValue(processHoldSearchKey.getRouteID()) && !processHoldSearchKey.getRouteID().getValue().equals("%")) {
            if (validAst) {
                HV_TMPBUFFER = String.format(" WHERE MAIN_PROCESS_ID LIKE '%s'", "%"+processHoldSearchKey.getRouteID().getValue()+"%");
            } else {
                HV_TMPBUFFER = String.format(" WHERE MAIN_PROCESS_ID = '%s'", processHoldSearchKey.getRouteID().getValue());
            }
            HV_BUFFER += HV_TMPBUFFER;
            first_condition = false;
        }
        // operationNumber
        if (!CimStringUtils.isEmpty(processHoldSearchKey.getOperationNumber())) {
            if (first_condition) {
                first_condition = false;
                HV_BUFFER = HV_BUFFER + " WHERE";
            } else {
                HV_BUFFER = HV_BUFFER + " AND";
            }
            HV_BUFFER += String.format(" OPE_NO = '%s'", processHoldSearchKey.getOperationNumber());
        }
        // ProductID
        if (!ObjectIdentifier.isEmptyWithValue(processHoldSearchKey.getProductID()) && !"%".equals(processHoldSearchKey.getProductID().getValue())) {
            if (first_condition) {
                first_condition = false;
                HV_BUFFER = HV_BUFFER + " WHERE";
            } else {
                HV_BUFFER = HV_BUFFER + " AND";
            }
            if (validAst) {
                HV_TMPBUFFER = String.format(" PROD_ID LIKE '%s'", "%"+processHoldSearchKey.getProductID().getValue()+"%");
            } else {
                HV_TMPBUFFER = String.format(" PROD_ID = '%s'", processHoldSearchKey.getProductID().getValue());
            }
            HV_BUFFER += HV_TMPBUFFER;
        }

        // UserID
        if (!ObjectIdentifier.isEmptyWithValue(processHoldSearchKey.getUserID())) {
            if (first_condition) {
                first_condition = false;
                HV_BUFFER = HV_BUFFER + " WHERE";
            } else {
                HV_BUFFER = HV_BUFFER + " AND";
            }
            HV_BUFFER += String.format(" USER_ID = '%s'", processHoldSearchKey.getUserID().getValue());
        }

        //  ReasonCodeID
        if (!ObjectIdentifier.isEmptyWithValue(reasonCodeID)) {
            if (first_condition) {
                first_condition = false;
                HV_BUFFER = HV_BUFFER + " WHERE";
            } else {
                HV_BUFFER = HV_BUFFER + " AND";
            }
            HV_BUFFER += String.format(" HOLD_CODE = '%s'", reasonCodeID.getValue());
        }
        HV_BUFFER += " ORDER BY MAIN_PROCESS_ID,OPE_NO,TRX_TIME";
        //HV_BUFFER += " FOR READ ONLY ";
        //  Judge and Convert SQL with Escape Sequence
        List<CimPDProcessHoldDO> processDefinitionProcessHoldListAttributesList = cimJpaRepository.query(HV_BUFFER, CimPDProcessHoldDO.class);
        List<Infos.ProcHoldListAttributes> tmpProcHoldListAttributes = new ArrayList<>();
        if (CimArrayUtils.isNotEmpty(processDefinitionProcessHoldListAttributesList)) {
            for (CimPDProcessHoldDO processDefinitionProcessHold : processDefinitionProcessHoldListAttributesList) {
                Infos.ProcHoldListAttributes procHoldListAttribute = new Infos.ProcHoldListAttributes();
                procHoldListAttribute.setWithExecHoldFlag(processDefinitionProcessHold.getExecuteHoldFlag());
                procHoldListAttribute.setRouteID(ObjectIdentifier.build(processDefinitionProcessHold.getRouteID(), processDefinitionProcessHold.getRouteObj()));
                procHoldListAttribute.setOperationNumber(processDefinitionProcessHold.getOperationNumber());
                procHoldListAttribute.setProductID(ObjectIdentifier.build(processDefinitionProcessHold.getProductID(), processDefinitionProcessHold.getProductSpecificationObj()));
                procHoldListAttribute.setUserID(ObjectIdentifier.build(processDefinitionProcessHold.getUserID(), processDefinitionProcessHold.getUserObj()));
                procHoldListAttribute.setHoldType(processDefinitionProcessHold.getHoldType());
                procHoldListAttribute.setReasonCodeID(ObjectIdentifier.build(processDefinitionProcessHold.getReasonCodeID(), processDefinitionProcessHold.getReasonCodeObj()));
                procHoldListAttribute.setClaimMemo(processDefinitionProcessHold.getClaimMemo());
                procHoldListAttribute.setReportTimeStamp(processDefinitionProcessHold.getClaimTimeStamp());
                String departmentNamePlate = processDefinitionProcessHold.getDepartmentNamePlate();
                if (CimStringUtils.isNotEmpty(departmentNamePlate)) {
                    List<String> departmentAndSection = Arrays.stream(departmentNamePlate.split("\\.", 2)).collect(Collectors.toList());
                    if (CimNumberUtils.eq(departmentAndSection.size(), 2)) {
                        procHoldListAttribute.setDepartment(departmentAndSection.get(0));
                        procHoldListAttribute.setSection(departmentAndSection.get(1));
                    }
                }
                //----------------------------------------//
                //           Set OperationName            //
                //----------------------------------------//
                Inputs.ProcessOperationListForRoute forRoute = new Inputs.ProcessOperationListForRoute();
                forRoute.setRouteID(procHoldListAttribute.getRouteID());
                forRoute.setOperationNumber(procHoldListAttribute.getOperationNumber());
                forRoute.setSearchCount(1);
                try {
                    List<Infos.OperationNameAttributes> forRouteOut = this.processOperationListForRoute(objCommon, forRoute);
                    procHoldListAttribute.setOperationName(forRouteOut.get(0).getOperationName());
                } catch (ServiceException e) {
                    procHoldListAttribute.setOperationName(BizConstant.SP_DEFAULT_CHAR);
                }
                //-----------------------------------------//
                //        Set ReasonCodeDescription        //
                //-----------------------------------------//
                String sql = String.format("SELECT DESCRIPTION\n" +
                        "                from   OMCODE\n" +
                        "                WHERE  CODETYPE_ID = '%s' AND CODE_ID = '%s'", BizConstant.SP_REASONCAT_PROCESSHOLD, processDefinitionProcessHold.getReasonCodeID());
                CimCodeDO codeDO = cimJpaRepository.queryOne(sql, CimCodeDO.class);
                if (codeDO != null) {
                    procHoldListAttribute.setReasonCodeDescription(codeDO.getDescription());
                }
                //------------------------------------//
                //           Set UserName             //
                //------------------------------------//
                sql = String.format("SELECT USER_NAME\n" +
                        "                FROM   OMUSER\n" +
                        "                where  USER_ID = '%s'", processDefinitionProcessHold.getUserID());
                CimPersonDO cimPersonDO = cimJpaRepository.queryOne(sql, CimPersonDO.class);
                if (cimPersonDO != null){
                    procHoldListAttribute.setUserName(cimPersonDO.getUserFullID());
                }
                tmpProcHoldListAttributes.add(procHoldListAttribute);
            }
        }
        return tmpProcHoldListAttributes;
    }

    @Override
    public Infos.RouteInfo processOperationNestListGetDR(Infos.ObjCommon objCommon, Inputs.ObjProcessOperationNestListGetDRIn objProcessOperationNestListGetDRIn) {
        Infos.RouteInfo routeInfo = new Infos.RouteInfo();
        String hFRPFMODNUMBER = "";
        String hFRPFMODOPENUMBER = "";

        // Set input parameters into local variable
        ObjectIdentifier routeID = objProcessOperationNestListGetDRIn.getRouteID();
        String fromOperationNumber = objProcessOperationNestListGetDRIn.getFromOperationNumber();
        Long nestLevel = objProcessOperationNestListGetDRIn.getNestLevel();
        String routeRequirePattern = objProcessOperationNestListGetDRIn.getRouteRequirePattern();

        //  Process Existence Check
        //step1 - process_existence_Check
        String processExistenceCheck = processMethod.processExistenceCheck(objCommon, routeID, BizConstant.SP_PD_FLOWLEVEL_MAIN);

        // Check route id is active version if exist cover it
        routeID = processMethod.processActiveIDGet(objCommon, routeID);

        routeInfo.setRouteID(routeID);
        routeInfo.setRoutePDType(processExistenceCheck);

        //Set Route ID
        boolean opeNoFlag = false;
        if(!CimStringUtils.isEmpty(fromOperationNumber)){
            opeNoFlag = true;
            Map<String, String> map = BaseStaticMethod.convertOpeNoToModuleNoForHostvariable(fromOperationNumber);
            hFRPFMODNUMBER = map.get("modNumber");
            hFRPFMODOPENUMBER = map.get("modOpeNumber");
        }
        boolean reworkCheckFlag = false;
        String mainOpePF = "";
        String sql = null;
        if(CimStringUtils.isNotEmpty(routeRequirePattern)){
            // Get Main Process Flow for Operation
            sql = String.format("SELECT ID\n" +
                    "                FROM   OMPRF\n" +
                    "                WHERE  PRP_ID = '%s'\n" +
                    "                AND    PRP_LEVEL  = '%s'", routeID.getValue(), BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_OPERATION);
            CimProcessFlowDO processFlow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class);
            Validations.check(processFlow == null, retCodeConfig.getNotFoundProcessFlowForProcessDefinition(), ObjectIdentifier.fetchValue(routeID), BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_OPERATION);
            mainOpePF = processFlow.getId();
            if (CimStringUtils.equals(routeRequirePattern, BizConstant.SP_MAINPDTYPE_REWORK)) {
                reworkCheckFlag = true;
            }
        }
        // Get Main Process Flow for Module
        sql = String.format("SELECT ID\n" +
                "            FROM   OMPRF\n" +
                "            WHERE  PRP_ID = '%s'\n" +
                "            AND    PRP_LEVEL  = '%s'\n" +
                "            AND    ACTIVE_FLAG     = %d", routeID.getValue(), BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE, 1);
        CimProcessFlowDO processFlow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class);
        Validations.check(processFlow == null, retCodeConfig.getNotFoundProcessFlowForProcessDefinition(), ObjectIdentifier.fetchValue(routeID), BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE);

        //---------------------------------------------
        // Get Module POSs of Main PF
        //---------------------------------------------
        List<Object> params = new ArrayList<>();
        sql = "SELECT ROUTE_NO, ROUTE_ID FROM OMPRF_ROUTESEQ WHERE REFKEY = ? ";
        params.add(processFlow.getId());
        if (opeNoFlag){
            sql = sql + " AND IDX_NO >= (SELECT IDX_NO FROM OMPRF_ROUTESEQ WHERE REFKEY = ? AND LINK_KEY = ?) ORDER BY IDX_NO ";
            params.add(processFlow.getId());
            params.add(hFRPFMODNUMBER);
        } else {
            sql = sql + " ORDER BY IDX_NO";
        }
        List<CimPFDefinitionListDO> processFlowDefinitionLists = cimJpaRepository.query(sql, CimPFDefinitionListDO.class, params.toArray());
        List<Infos.OperationInformation> strOperationInformationList = new ArrayList<>();
        int opeCnt = 0;
        if (CimArrayUtils.isNotEmpty(processFlowDefinitionLists)) {
            for (CimPFDefinitionListDO processFlowDefinitionList : processFlowDefinitionLists) {
                String pdListPDID = processFlowDefinitionList.getProcessDefinitionID();
                //Get Active Module PD
                String versionID = cimFrameWorkGlobals.extractVersionFromID(pdListPDID);
                CimProcessDefinitionDO processDefinition;
                if (CimStringUtils.equals(BizConstant.SP_ACTIVE_VERSION, versionID)) {
                    sql = String.format("SELECT ACTIVE_VER_ID\n" +
                            "                    FROM   OMPRP\n" +
                            "                    WHERE  PRP_ID    = '%s'\n" +
                            "                    AND    PRP_LEVEL = '%s'", pdListPDID, BizConstant.SP_PD_FLOWLEVEL_MODULE);
                    processDefinition = cimJpaRepository.queryOne(sql, CimProcessDefinitionDO.class);
                    Validations.check(null == processDefinition, new OmCode(retCodeConfig.getNotFoundProcessDefinition(), pdListPDID));
                    pdListPDID = processDefinition.getActiveID();
                }
                //===== Get Module PF =======//
                sql = String.format("SELECT ID\n" +
                        "                FROM   OMPRF\n" +
                        "                WHERE  PRP_ID = '%s'\n" +
                        "                AND    PRP_LEVEL  = '%s'\n" +
                        "                AND    ACTIVE_FLAG     = %d", pdListPDID, BizConstant.SP_PD_FLOWLEVEL_MODULE, 1);
                processFlow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class);
                Validations.check(processFlow == null, retCodeConfig.getNotFoundProcessFlowForProcessDefinition());
                //===== Get POSs of Module PF =======//
                sql = "SELECT PRSS_RKEY FROM OMPRF_PRSSSEQ WHERE REFKEY = ? ";
                params = new ArrayList<>();
                params.add(processFlow.getId());
                if (opeNoFlag){
                    sql = sql + " AND IDX_NO >= (SELECT IDX_NO FROM OMPRF_PRSSSEQ WHERE REFKEY = ? AND LINK_KEY = ?) ORDER BY IDX_NO";
                    params.add(processFlow.getId());
                    params.add(hFRPFMODOPENUMBER);
                } else {
                    sql = sql + " ORDER BY IDX_NO";
                }
                List<CimPFPosListDO> processFlowPosLists = cimJpaRepository.query(sql, CimPFPosListDO.class, params.toArray());
                //Get POSs of Module PF
                if (CimArrayUtils.isNotEmpty(processFlowPosLists)) {
                    for (CimPFPosListDO processFlowPosList : processFlowPosLists) {
                        String posListPosObj = processFlowPosList.getProcessOperationSpecificationsObj();
                        String tmpStr = posListPosObj;
                        sql = String.format("SELECT OPE_NO, STEP_ID, STEP_RKEY, COMPULSORY_FLAG\n" +
                                "                    FROM   OMPRSS\n" +
                                "                    WHERE  ID = '%s'", tmpStr);
                        CimProcessOperationSpecificationDO processOperationSpecification = cimJpaRepository.queryOne(sql, CimProcessOperationSpecificationDO.class);
                        Validations.check(processOperationSpecification == null, retCodeConfig.getNotFoundPosForPd());
                        String modPOS = tmpStr;
                        Infos.OperationInformation operationInfo = new Infos.OperationInformation();
                        strOperationInformationList.add(operationInfo);
                        String opeNo = BaseStaticMethod.convertModuleOpeNoToOpeNo(processFlowDefinitionList.getModuleNO(), processOperationSpecification.getOperationNumber());
                        operationInfo.setOperationNumber(opeNo);
                        operationInfo.setOperationID(new ObjectIdentifier(processOperationSpecification.getProcessDefinitionID(), processOperationSpecification.getProcessDefinitionObj()));
                        operationInfo.setMandatoryFlag(processOperationSpecification.getMandatoryFlag());
                        sql = String.format("SELECT PRP_TYPE,TEMP_MODE_FLAG,DOC_CATEGORY\n" +
                                "                         FROM OMPRP\n" +
                                "                         WHERE ID = '%s'", processOperationSpecification.getProcessDefinitionObj());
                        processDefinition = cimJpaRepository.queryOne(sql, CimProcessDefinitionDO.class);
                        Validations.check(processDefinition == null, retCodeConfig.getNotFoundProcessDefinition());
                        operationInfo.setOperationPDType(processDefinition.getProcessDefinitionType());
                        operationInfo.setWhiteDefFlag(processDefinition.getWhiteFlag());
                        operationInfo.setFPCCategory(processDefinition.getProcessCategory());
                        if (CimStringUtils.isNotEmpty(mainOpePF)) {
                            //step2 - process_connectedRoute_GetDR
                            List<Infos.ConnectedRoute> connectedRouteList = processMethod.processConnectedRouteGetDR(objCommon, mainOpePF, opeNo, modPOS, true, reworkCheckFlag);
                            List<Infos.NestedRouteInfo> strNestedRouteInfoList = new ArrayList<>();
                            if (CimArrayUtils.isNotEmpty(connectedRouteList)) {
                                for (Infos.ConnectedRoute connectedRoute : connectedRouteList) {
                                    Infos.NestedRouteInfo nestedRouteInfo = new Infos.NestedRouteInfo();
                                    nestedRouteInfo.setRouteID(connectedRoute.getRouteID());
                                    nestedRouteInfo.setReturnOperationNumber(connectedRoute.getReturnOperationNumber());
                                    nestedRouteInfo.setRoutePDType(connectedRoute.getProcessDefinitionType());

                                    strNestedRouteInfoList.add(nestedRouteInfo);
                                    operationInfo.setStrNestedRouteInfoList(strNestedRouteInfoList);
                                }
                            }
                        }
                        opeCnt++;
                    }
                }
                if (CimBooleanUtils.isTrue(opeNoFlag)) {
                    if (opeCnt == 0) {
                        break;
                    } else {
                        opeNoFlag = false;
                    }
                }
            }
        }

        // Expand Route Information for Nest Level 1
        if(nestLevel >= 1){
            if (CimArrayUtils.isNotEmpty(strOperationInformationList)) {
                for (Infos.OperationInformation operationInfo : strOperationInformationList) {
                    List<Infos.NestedRouteInfo> nestedRouteInfoList = operationInfo.getStrNestedRouteInfoList();
                    if (CimArrayUtils.isNotEmpty(nestedRouteInfoList)) {
                        for (Infos.NestedRouteInfo nestedRouteInfo : nestedRouteInfoList) {
                            if (!CimArrayUtils.isEmpty(nestedRouteInfo.getStrNestedOperationInformationList())) {
                                continue;
                            }
                            // Get Main Process Flow for Operation
                            sql = String.format("SELECT ID\n" +
                                    "                            FROM   OMPRF\n" +
                                    "                            WHERE  PRP_ID = '%s'\n" +
                                    "                            AND    PRP_LEVEL  = '%s'", nestedRouteInfo.getRouteID().getValue(), BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_OPERATION);
                            processFlow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class);
                            Validations.check(processFlow == null, retCodeConfig.getNotFoundProcessFlowForProcessDefinition());
                            mainOpePF = processFlow.getId();
                            //Get Main Process Flow for Module
                            sql = String.format("SELECT ID\n" +
                                    "                            FROM   OMPRF\n" +
                                    "                            WHERE  PRP_ID = '%s'\n" +
                                    "                            AND    PRP_LEVEL  = '%s'\n" +
                                    "                            AND    ACTIVE_FLAG     = %d", nestedRouteInfo.getRouteID().getValue(), BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE, 1);
                            processFlow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class);
                            Validations.check(processFlow == null, retCodeConfig.getNotFoundProcessFlowForProcessDefinition());

                            //---------------------------------------------
                            // Get Module POSs of Main PF
                            //---------------------------------------------
                            //===== Get Module PDs =======//
                            sql = "SELECT ROUTE_NO, ROUTE_ID FROM OMPRF_ROUTESEQ WHERE REFKEY = ? ORDER BY IDX_NO";
                            processFlowDefinitionLists = cimJpaRepository.query(sql, CimPFDefinitionListDO.class, processFlow.getId());
                            List<Infos.NestedOperationInfo> strNestedOperationInformationList = new ArrayList<>();
                            if (CimArrayUtils.isNotEmpty(processFlowDefinitionLists)) {
                                for (CimPFDefinitionListDO processFlowDefinitionList : processFlowDefinitionLists) {
                                    //Get Active Module PD
                                    String pfProcessDefinitionID = processFlowDefinitionList.getProcessDefinitionID();
                                    String versionID = cimFrameWorkGlobals.extractVersionFromID(pfProcessDefinitionID);
                                    if (CimStringUtils.equals(versionID, BizConstant.SP_ACTIVE_VERSION)) {
                                        sql = String.format("SELECT ACTIVE_VER_ID\n" +
                                                "                                    FROM   OMPRP\n" +
                                                "                                    WHERE  PRP_ID    = '%s'\n" +
                                                "                                    AND    PRP_LEVEL = '%s'",
                                                pfProcessDefinitionID, BizConstant.SP_PD_FLOWLEVEL_MODULE);
                                        CimProcessDefinitionDO processDefinition = cimJpaRepository.queryOne(sql, CimProcessDefinitionDO.class);
                                        Validations.check(processDefinition == null, new OmCode(retCodeConfig.getNotFoundProcessDefinition(), pfProcessDefinitionID));
                                        pfProcessDefinitionID = processDefinition.getActiveID();
                                    }
                                    //Get Module PF
                                    sql = String.format("SELECT ID\n" +
                                            "                                FROM   OMPRF\n" +
                                            "                                WHERE  PRP_ID = '%s'\n" +
                                            "                                AND    PRP_LEVEL  = '%s'\n" +
                                            "                                AND    ACTIVE_FLAG     = %d",
                                            pfProcessDefinitionID, BizConstant.SP_PD_FLOWLEVEL_MODULE, 1);
                                    processFlow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class);
                                    Validations.check(processFlow == null, retCodeConfig.getNotFoundProcessFlowForProcessDefinition());
                                    //Get POSs of Module PF
                                    sql = "SELECT PRSS_RKEY FROM OMPRF_PRSSSEQ WHERE REFKEY = ? ORDER BY IDX_NO";
                                    List<CimPFPosListDO> processFlowPosListList = cimJpaRepository.query(sql, CimPFPosListDO.class, processFlow.getId());
                                    if (CimArrayUtils.isNotEmpty(processFlowPosListList)) {
                                        for (CimPFPosListDO processFlowPosList : processFlowPosListList) {
                                            String posIdMod = processFlowPosList.getProcessOperationSpecificationsObj();
                                            sql = String.format("SELECT OPE_NO, STEP_ID, STEP_RKEY, COMPULSORY_FLAG\n" +
                                                    "                                    FROM   OMPRSS\n" +
                                                    "                                    WHERE  ID = '%s'", posIdMod);
                                            CimProcessOperationSpecificationDO processOperationSpecifications = cimJpaRepository.queryOne(sql, CimProcessOperationSpecificationDO.class);
                                            Validations.check(processOperationSpecifications == null, new OmCode(retCodeConfig.getNotFoundPosForPd()));
                                            String modPOS = posIdMod;
                                            String opeNo = BaseStaticMethod.convertModuleOpeNoToOpeNo(processFlowDefinitionList.getModuleNO(), processOperationSpecifications.getOperationNumber());

                                            Infos.NestedOperationInfo nestedOperationInfo = new Infos.NestedOperationInfo();
                                            strNestedOperationInformationList.add(nestedOperationInfo);
                                            nestedOperationInfo.setOperationID((new ObjectIdentifier(processOperationSpecifications.getProcessDefinitionID(), processOperationSpecifications.getProcessDefinitionObj())));
                                            nestedOperationInfo.setOperationNumber(opeNo);
                                            nestedOperationInfo.setMandatoryFlag(processOperationSpecifications.getMandatoryFlag());

                                            sql = String.format("SELECT PRP_TYPE,TEMP_MODE_FLAG,DOC_CATEGORY\n" +
                                                    "                                         FROM OMPRP\n" +
                                                    "                                         WHERE ID = '%s'", processOperationSpecifications.getProcessDefinitionObj());
                                            CimProcessDefinitionDO processDefinition = cimJpaRepository.queryOne(sql, CimProcessDefinitionDO.class);
                                            Validations.check(processDefinition == null, retCodeConfig.getNotFoundProcessDefinition());
                                            nestedOperationInfo.setOperationPDType(processDefinition.getProcessDefinitionType());
                                            nestedOperationInfo.setWhiteDefFlag(processDefinition.getWhiteFlag());
                                            nestedOperationInfo.setFPCCategory(processDefinition.getProcessCategory());
                                            if (!CimStringUtils.isEmpty(mainOpePF)) {
                                                //step3 - process_connectedRoute_GetDR
                                                List<Infos.ConnectedRoute> connectedRouteList = processMethod.processConnectedRouteGetDR(objCommon, mainOpePF, opeNo, modPOS, true, false);
                                                List<Infos.Nested2RouteInfo> strNested2RouteInfoList = new ArrayList<>();
                                                nestedOperationInfo.setStrNested2RouteInfoList(strNested2RouteInfoList);
                                                if (CimArrayUtils.isNotEmpty(connectedRouteList)) {
                                                    for (Infos.ConnectedRoute connectedRoute : connectedRouteList) {
                                                        Infos.Nested2RouteInfo nested2RouteInfo = new Infos.Nested2RouteInfo();
                                                        nested2RouteInfo.setRouteID(connectedRoute.getRouteID());
                                                        nested2RouteInfo.setReturnOperationNumber(connectedRoute.getReturnOperationNumber());
                                                        nested2RouteInfo.setRoutePDType(connectedRoute.getProcessDefinitionType());
                                                        strNested2RouteInfoList.add(nested2RouteInfo);
                                                    }
                                                }
                                            }
                                        }// end for
                                    }

                                }// end for
                            }
                            if(CimArrayUtils.isNotEmpty(strOperationInformationList)){
                                // Expand Same NestLevel and Route Information
                                for (Infos.OperationInformation operationInfos : strOperationInformationList) {
                                    List<Infos.NestedRouteInfo> strNestedRouteInfoList = operationInfos.getStrNestedRouteInfoList();
                                    if(CimArrayUtils.isNotEmpty(strNestedRouteInfoList)){
                                        for (Infos.NestedRouteInfo nestedRouteInfos : strNestedRouteInfoList) {
                                            if (CimStringUtils.equals(nestedRouteInfos.getRouteID().getValue(), nestedRouteInfo.getRouteID().getValue())) {
                                                nestedRouteInfo.setStrNestedOperationInformationList(strNestedOperationInformationList);
                                            }
                                        }
                                    }
                                }
                            }
                        }// end for
                    }
                }//end for
            }
        }
        // Expand Route Information for Nest Level 2
        if(nestLevel >= 2){
            if (CimArrayUtils.isNotEmpty(strOperationInformationList)) {
                for (Infos.OperationInformation operationInfo : strOperationInformationList) {
                    List<Infos.NestedRouteInfo> nestedRouteInfoList = operationInfo.getStrNestedRouteInfoList();
                    if (CimArrayUtils.isNotEmpty(nestedRouteInfoList)) {
                        for (Infos.NestedRouteInfo nestedRouteInfo : nestedRouteInfoList) {
                            List<Infos.NestedOperationInfo> nestedOperationInformationList = nestedRouteInfo.getStrNestedOperationInformationList();
                            if (CimArrayUtils.isNotEmpty(nestedOperationInformationList)) {
                                for (Infos.NestedOperationInfo nestedOperationInfo : nestedOperationInformationList) {
                                    List<Infos.Nested2RouteInfo> nested2RouteInfoList = nestedOperationInfo.getStrNested2RouteInfoList();
                                    if (CimArrayUtils.isNotEmpty(nested2RouteInfoList)) {
                                        for (Infos.Nested2RouteInfo nested2RouteInfo : nested2RouteInfoList) {
                                            if (!CimArrayUtils.isEmpty(nested2RouteInfo.getStrNested2OperationInformationList())) {
                                                continue;
                                            }
                                            // Get Main Process Flow for Module
                                            sql = String.format("SELECT ID INTO\n" +
                                                    "                                            FROM   OMPRF\n" +
                                                    "                                            WHERE  PRP_ID = '%s'\n" +
                                                    "                                            AND    PRP_LEVEL  = '%s'\n" +
                                                    "                                            AND    ACTIVE_FLAG     = %d",
                                                    nested2RouteInfo.getRouteID().getValue(), BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE, 1);
                                            processFlow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class);
                                            Validations.check(processFlow == null, retCodeConfig.getNotFoundProcessFlowForProcessDefinition());
                                            List<CimPFDefinitionListDO> processFlowDefinitionList = new ArrayList<>();
                                            // Get Module POSs of Main PF
                                            sql = "SELECT ROUTE_NO, ROUTE_ID FROM OMPRF_ROUTESEQ WHERE REFKEY = ? ORDER BY IDX_NO";
                                            processFlowDefinitionList = cimJpaRepository.query(sql, CimPFDefinitionListDO.class, processFlow.getId());
                                            List<Infos.Nested2OperationInfo> strNested2OperationInformationList = new ArrayList<>();
                                            if (CimArrayUtils.isNotEmpty(processFlowDefinitionList)) {
                                                for (CimPFDefinitionListDO flowDefinitionList : processFlowDefinitionList) {
                                                    String pfProcessDefinitionID = flowDefinitionList.getProcessDefinitionID();
                                                    String versionID = cimFrameWorkGlobals.extractVersionFromID(pfProcessDefinitionID);
                                                    CimProcessDefinitionDO processDefinition = null;
                                                    if (CimStringUtils.equals(versionID, BizConstant.SP_ACTIVE_VERSION)) {
                                                        sql = String.format("SELECT ACTIVE_VER_ID\n" +
                                                                "                                                    FROM   OMPRP\n" +
                                                                "                                                    WHERE  PRP_ID    = '%s'\n" +
                                                                "                                                    AND    PRP_LEVEL = '%s'",
                                                                pfProcessDefinitionID, BizConstant.SP_PD_FLOWLEVEL_MODULE);
                                                        processDefinition = cimJpaRepository.queryOne(sql, CimProcessDefinitionDO.class);
                                                        Validations.check(processDefinition == null, new OmCode(retCodeConfig.getNotFoundProcessDefinition(), flowDefinitionList.getProcessDefinitionID()));
                                                        pfProcessDefinitionID = processDefinition.getActiveID();
                                                    }
                                                    sql = String.format("SELECT D_THESYSTEMKEY\n" +
                                                            "                                                FROM   OMPRF\n" +
                                                            "                                                WHERE  PRP_ID = '%s'\n" +
                                                            "                                                AND    PRP_LEVEL  = '%s'\n" +
                                                            "                                                AND    ACTIVE_FLAG     = %d",
                                                            pfProcessDefinitionID, BizConstant.SP_PD_FLOWLEVEL_MODULE, 1);
                                                    processFlow = cimJpaRepository.queryOne(sql, CimProcessFlowDO.class);
                                                    Validations.check(processFlow == null, retCodeConfig.getNotFoundProcessFlowForProcessDefinition());
                                                    List<CimPFPosListDO> processFlowPosLists = new ArrayList<>();
                                                    sql = "SELECT PRSS_RKEY FROM OMPRF_PRSSSEQ WHERE REFKEY = ? ORDER BY IDX_NO";
                                                    processFlowPosLists = cimJpaRepository.query(sql, CimPFPosListDO.class, processFlow.getId());
                                                    if (CimArrayUtils.isNotEmpty(processFlowPosLists)) {
                                                        for (CimPFPosListDO processFlowPosList : processFlowPosLists) {
                                                            String modPOS = processFlowPosList.getProcessOperationSpecificationsObj();
                                                            sql = String.format("SELECT OPE_NO, STEP_ID, STEP_RKEY, COMPULSORY_FLAG\n" +
                                                                    "                                                    FROM   OMPRSS\n" +
                                                                    "                                                    WHERE  ID = '%s'", modPOS);
                                                            CimProcessOperationSpecificationDO processOperationSpecifications = cimJpaRepository.queryOne(sql, CimProcessOperationSpecificationDO.class);
                                                            Validations.check(processOperationSpecifications == null, retCodeConfig.getNotFoundPosForPd());
                                                            String opeNo = BaseStaticMethod.convertModuleOpeNoToOpeNo(flowDefinitionList.getModuleNO(), processOperationSpecifications.getOperationNumber());
                                                            Infos.Nested2OperationInfo nested2OperationInfo = new Infos.Nested2OperationInfo();
                                                            nested2OperationInfo.setOperationID(new ObjectIdentifier(processOperationSpecifications.getProcessDefinitionID(), processOperationSpecifications.getProcessDefinitionObj()));
                                                            nested2OperationInfo.setOperationNumber(opeNo);
                                                            nested2OperationInfo.setMandatoryFlag(processOperationSpecifications.getMandatoryFlag());
                                                            sql = String.format("SELECT PRP_TYPE,TEMP_MODE_FLAG,DOC_CATEGORY\n" +
                                                                    "                                                         FROM OMPRP\n" +
                                                                    "                                                         WHERE ID = '%s'", processOperationSpecifications.getProcessDefinitionObj());
                                                            processDefinition = cimJpaRepository.queryOne(sql, CimProcessDefinitionDO.class);
                                                            Validations.check(processDefinition == null, retCodeConfig.getNotFoundProcessDefinition());
                                                            nested2OperationInfo.setOperationPDType(processDefinition.getProcessDefinitionType());
                                                            nested2OperationInfo.setWhiteDefFlag(processDefinition.getWhiteFlag());
                                                            nested2OperationInfo.setFPCCategory(processDefinition.getProcessCategory());
                                                            strNested2OperationInformationList.add(nested2OperationInfo);
                                                        }//end for
                                                    }
                                                }//end for

                                            }
                                            if (CimArrayUtils.isNotEmpty(strOperationInformationList)) {
                                                // Expand Same NestLevel and Route Information
                                                for (Infos.OperationInformation operationInfos : strOperationInformationList) {
                                                    nestedRouteInfoList = operationInfos.getStrNestedRouteInfoList();
                                                    if(CimArrayUtils.isNotEmpty(nestedRouteInfoList)){
                                                        for (Infos.NestedRouteInfo nestedRouteInfos : nestedRouteInfoList) {
                                                            nestedOperationInformationList = nestedRouteInfos.getStrNestedOperationInformationList();
                                                            if(CimArrayUtils.isNotEmpty(nestedOperationInformationList)){
                                                                for (Infos.NestedOperationInfo nestedOperationInfos : nestedOperationInformationList) {
                                                                    nested2RouteInfoList = nestedOperationInfos.getStrNested2RouteInfoList();
                                                                    if(CimArrayUtils.isNotEmpty(nested2RouteInfoList)){
                                                                        for (Infos.Nested2RouteInfo nested2RouteInfos : nested2RouteInfoList) {
                                                                            if (CimStringUtils.equals(nested2RouteInfos.getRouteID().getValue(), nested2RouteInfo.getRouteID().getValue())) {
                                                                                nested2RouteInfo.setStrNested2OperationInformationList(strNested2OperationInformationList);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        routeInfo.setStrOperationInformationList(strOperationInformationList);
        return routeInfo;
    }

    @Override
    public void processHoldRequestsMakeEntry(Infos.ObjCommon objCommon, Params.ProcessHoldReq param) {
        //----------------------------------------------------------//
        //   Reactivate Main PD                                     //
        //----------------------------------------------------------//
        com.fa.cim.newcore.bo.pd.CimProcessDefinition aProcessDefinition = baseCoreFactory.getBO(com.fa.cim.newcore.bo.pd.CimProcessDefinition.class, param.getRouteID());
        Validations.check(aProcessDefinition == null, new OmCode(retCodeConfig.getNotFoundProcessDefinition(), "*****"));
        ObjectIdentifier tmpRouteID = new ObjectIdentifier(aProcessDefinition.getIdentifier(), aProcessDefinition.getPrimaryKey());
        //----------------------------------------------------------//
        //   Reactivate Product ID                                  //
        //----------------------------------------------------------//
        ObjectIdentifier tmpProductID = null;
        if (!ObjectIdentifier.isEmptyWithValue(param.getProductID())){
            CimProductSpecification aPosProdSpec = baseCoreFactory.getBO(CimProductSpecification.class, param.getProductID());
            Validations.check(aPosProdSpec == null, new OmCode(retCodeConfig.getInvalidProdId(), param.getProductID().getValue()));
            tmpProductID = new ObjectIdentifier(aPosProdSpec.getIdentifier(), aPosProdSpec.getPrimaryKey());
        }
        //----------------------------------------------------------//
        //   Reactivate ReasonCodeID                                //
        //----------------------------------------------------------//
        CimCategory aCategory_PH = codeManager.findCategoryNamed(BizConstant.SP_REASONCAT_PROCESSHOLD);
        Validations.check(aCategory_PH == null, retCodeConfig.getNotFoundCategory());
        CimCode aReasonCode = aCategory_PH.findCodeNamed(param.getReasonCodeID().getValue());
        Validations.check(aReasonCode == null, new OmCode(retCodeConfig.getNotFoundCode(), aCategory_PH.getIdentifier(), param.getReasonCodeID().getValue()));
        ObjectIdentifier tmpReasonCodeID = new ObjectIdentifier(aReasonCode.getIdentifier(), aReasonCode.getPrimaryKey());

        //----- Set Data -----//
        ProcessDTO.ProcessHoldRequest processHoldRequest = new ProcessDTO.ProcessHoldRequest();
        processHoldRequest.setRouteID(tmpRouteID);
        processHoldRequest.setOperationNumber(param.getOperationNumber());
        processHoldRequest.setProductID(tmpProductID);
        processHoldRequest.setWithExecHoldFlag(param.getWithExecHoldFlag());
        processHoldRequest.setRequestPerson(objCommon.getUser().getUserID());
        processHoldRequest.setHoldType(param.getHoldType());
        processHoldRequest.setReasonCode(tmpReasonCodeID);
        processHoldRequest.setClaimMemo(param.getClaimMemo());
        processHoldRequest.setClaimedTimeStamp(objCommon.getTimeStamp().getReportTimeStamp().toString());
        String department = param.getDepartment();
        String section = param.getSection();
        if (CimStringUtils.isNotEmpty(department) && CimStringUtils.isNotEmpty(section)) {
            processHoldRequest.setDepartmentNamePlate(department + BizConstant.DOT + section);
        }
        aProcessDefinition.addProcessHoldRequest(processHoldRequest);
    }

    @Override
    public List<ObjectIdentifier> processHoldGetLotListForHoldDR(Infos.ObjCommon objCommon, Params.ProcessHoldReq param) {
        List<ObjectIdentifier> lotIDs = new ArrayList<>();
        StringBuffer hVBUFFER = new StringBuffer("SELECT ID,LOT_ID,LOT_HOLD_STATE,LOT_PROCESS_STATE,LOT_INV_STATE FROM OMLOT WHERE LOT_STATE = 'ACTIVE'");
        if (!ObjectIdentifier.isEmptyWithValue(param.getRouteID())) {
            hVBUFFER.append(String.format(" AND MAIN_PROCESS_ID LIKE '%s'", "%" + param.getRouteID().getValue() + "%"));
        }
        if (CimStringUtils.isNotEmpty(param.getOperationNumber())) {
            hVBUFFER.append(String.format(" AND OPE_NO = '%s'", param.getOperationNumber()));
        }
        if (!ObjectIdentifier.isEmptyWithValue(param.getProductID())) {
            hVBUFFER.append(String.format(" AND PROD_ID LIKE '%s'", "%" + param.getProductID().getValue() + "%"));
        }
        List<CimLotDO> lotList = cimJpaRepository.query(hVBUFFER.toString(), CimLotDO.class);
        boolean includeFlag = false;
        if (CimArrayUtils.isNotEmpty(lotList)) {
            for (CimLotDO lot : lotList) {
                //-------------------------------------------------------------------------------------------------------//
                // Check Hold State                                                                                      //
                // Case:1 On_Hold_State is ONHOLD ==> check ReasonCodeID/ReasonCategory (FRLOT_HOLDRECORD).              //
                //        <A> If ReasonCategory is ProcessHold(SP_ReasonCat_ProcessHold) and ReasonCodeID is the same,   //
                //            exclude the Lot from target Lot of ProcessHold.                                            //
                //        <B> Else, include the Lot in the target.                                                       //
                //                                                                                                       //
                // Case:2 On_Hold_State is NOTONHOLD, check LOT_PROCESS_STATE(FRLOT).                                    //
                //        <A> If LOT_PROCESS_STATE is Waiting,                                                           //
                //            <A-1> If LOT_INV_STATE is NonProBank||OnFloor, include the Lot in the target Lot.          //
                //            <A-2> Else(InBank), exclude the Lot from the target.                                       //
                //        <B> Else(InPro/Proceed), exclude the Lot from the target.                                      //
                //-------------------------------------------------------------------------------------------------------//
                if (CimStringUtils.equals(CIMStateConst.CIM_LOT_HOLD_STATE_ONHOLD, lot.getLotHoldState())) {
                    String sql = String.format("SELECT HOLD_TYPE,REASON_CODE_ID\n" +
                            "                    FROM   OMLOT_HOLD\n" +
                            "                    WHERE REFKEY = '%s'", lot.getId());
                    List<CimLotHoldRecordDO> holdRecordList = cimJpaRepository.query(sql, CimLotHoldRecordDO.class);
                    if (CimArrayUtils.isNotEmpty(holdRecordList)) {
                        for (CimLotHoldRecordDO holdRecord : holdRecordList) {
                            if (!CimStringUtils.equals(BizConstant.SP_HOLDTYPE_PROCESSHOLD, holdRecord.getHoldType())) {
                                includeFlag = true;
                            } else {
                                if (!ObjectIdentifier.equalsWithValue(holdRecord.getHoldReasonID(), param.getReasonCodeID())) {
                                    includeFlag = true;
                                } else {
                                    includeFlag = false;
                                    break;
                                }
                            }
                        }
                    }
                } else {
                    if (CimStringUtils.equals(BizConstant.SP_LOT_PROCSTATE_WAITING, lot.getLotProcessState())
                            && (CimStringUtils.equals(BizConstant.SP_LOT_INVENTORYSTATE_NONPROBANK, lot.getLotInventoryState())
                            || CimStringUtils.equals(BizConstant.SP_LOT_INVENTORYSTATE_ONFLOOR, lot.getLotInventoryState()))) {
                        includeFlag = true;
                    }
                }
                //-----------------------------------------------------------------------------//
                // Set Output Data                                                             //
                // -"includeFlag" is set to TRUE by above logic, set data for Process Hold-    //
                //-----------------------------------------------------------------------------//
                if (CimBooleanUtils.isTrue(includeFlag)) {
                    lotIDs.add(new ObjectIdentifier(lot.getLotID()));
                }
            }
        }
        return lotIDs;
    }

    @Override
    public void processHoldRequestsDeleteEntry(Infos.ObjCommon objCommon, Params.ProcessHoldCancelReq param) {
        com.fa.cim.newcore.bo.pd.CimProcessDefinition aProcessDefinition = baseCoreFactory.getBO(com.fa.cim.newcore.bo.pd.CimProcessDefinition.class, param.getRouteID());
        Validations.check(aProcessDefinition == null, new OmCode(retCodeConfig.getNotFoundProcessDefinition(), param.getRouteID().getValue()));
        ProcessDTO.ProcessHoldRequest processHoldRequest = new ProcessDTO.ProcessHoldRequest();
        processHoldRequest.setRouteID(param.getRouteID());
        processHoldRequest.setOperationNumber(param.getOperationNumber());
        processHoldRequest.setProductID(param.getProductID());
        processHoldRequest.setWithExecHoldFlag(param.getWithExecHoldReleaseFlag());
        processHoldRequest.setRequestPerson(objCommon.getUser().getUserID());
        processHoldRequest.setHoldType(param.getHoldType());
        processHoldRequest.setReasonCode(param.getHoldReasonCodeID());
        processHoldRequest.setClaimMemo(param.getClaimMemo());
        processHoldRequest.setClaimedTimeStamp(objCommon.getTimeStamp().getReportTimeStamp().toString());

        // Remove ProcessHoldRequest
        aProcessDefinition.removeProcessHoldRequest(processHoldRequest);
    }

    @Override
    public List<ObjectIdentifier> processHoldGetLotListForHoldReleaseDR(Infos.ObjCommon objCommon, Params.ProcessHoldCancelReq param) {
        List<ObjectIdentifier> lotIDs = new ArrayList<>();
        boolean includeFlag = false;
        StringBuffer hVBUFFER = new StringBuffer("SELECT ID,LOT_ID,LOT_HOLD_STATE,LOT_INV_STATE  FROM OMLOT WHERE LOT_STATE = 'ACTIVE' AND LOT_HOLD_STATE='ONHOLD'");
        if (!ObjectIdentifier.isEmptyWithValue(param.getRouteID())) {
            hVBUFFER.append(String.format(" AND MAIN_PROCESS_ID LIKE '%s'", "%" + param.getRouteID().getValue() + "%"));
        }
        //--- operationNumber ---//
        if (CimStringUtils.isNotEmpty(param.getOperationNumber())) {
            hVBUFFER.append(String.format(" AND OPE_NO = '%s'", param.getOperationNumber()));
        }
        //--- ProductID ---//
        if (!ObjectIdentifier.isEmptyWithValue(param.getProductID())) {
            hVBUFFER.append(String.format(" AND PROD_ID LIKE '%s'", "%" + param.getProductID().getValue() + "%"));
        }
        List<CimLotDO> lotList = cimJpaRepository.query(hVBUFFER.toString(), CimLotDO.class);
        if(CimArrayUtils.isNotEmpty(lotList)){
            for (CimLotDO lot : lotList) {
                String sql = String.format("SELECT HOLD_TYPE,CODE_REASON_ID\n" +
                        "                FROM   OMLOT_HOLD\n" +
                        "                WHERE REFKEY = '%s'", lot.getId());
                List<CimLotHoldRecordDO> holdRecordList = cimJpaRepository.query(sql, CimLotHoldRecordDO.class);
                if(CimArrayUtils.isNotEmpty(holdRecordList)){
                    for (CimLotHoldRecordDO holdRecord : holdRecordList) {
                        if(CimStringUtils.equals(BizConstant.SP_HOLDTYPE_PROCESSHOLD, holdRecord.getHoldType())){
                            if(ObjectIdentifier.equalsWithValue(holdRecord.getHoldReasonID(), param.getHoldReasonCodeID())){
                                includeFlag = true;
                            }
                        }
                    }
                }
                if(CimBooleanUtils.isTrue(includeFlag)){
                    lotIDs.add(new ObjectIdentifier(lot.getLotID()));
                }
            }
        }
        return lotIDs;
    }

    @Override
    public void processWaferPositionInProcessResourceInformationSet(Infos.ObjCommon objCommon, Infos.ProcessResourcePositionInfo processResourcePositionInfo) {
        int count = 0;

        List<Infos.WaferPositionInProcessResourceInfo> waferPositionInProcessResourceInfoSeq = processResourcePositionInfo.getWaferPositionInProcessResourceInfoList();
        List<String> lotIDs = new ArrayList<>();
        if(CimArrayUtils.isNotEmpty(waferPositionInProcessResourceInfoSeq)){
            for (Infos.WaferPositionInProcessResourceInfo waferPositionInProcessResourceInfo : waferPositionInProcessResourceInfoSeq) {
                boolean foundFlag = false;
                if(CimArrayUtils.isNotEmpty(lotIDs)){
                    for (String lotID : lotIDs) {
                        if(ObjectIdentifier.equalsWithValue(lotID, waferPositionInProcessResourceInfo.getLotID())){
                            foundFlag = true;
                            break;
                        }
                    }
                }
                if(CimBooleanUtils.isFalse(foundFlag)){
                    lotIDs.add(ObjectIdentifier.fetchValue(waferPositionInProcessResourceInfo.getLotID()));
                    count ++;
                }
            }
        }
        List<ProcessDTO.ProcessResourcePositionInfo> strProcessResourcePositionInfoSeq = new ArrayList<>();
        for (int i = 0; i < count; i++) {
            ProcessDTO.ProcessResourcePositionInfo processResourceInfo = new ProcessDTO.ProcessResourcePositionInfo();
            processResourceInfo.setProcessResourceID(processResourcePositionInfo.getProcessResourceID());
            List<ProcessDTO.WaferPositionInProcessResourceInfo> waferPositionInProcessResourceInfos = new ArrayList<>();
            for (Infos.WaferPositionInProcessResourceInfo waferPositionInProcessResourceInfo : waferPositionInProcessResourceInfoSeq) {
                if(ObjectIdentifier.equalsWithValue(lotIDs.get(i), waferPositionInProcessResourceInfo.getLotID())){
                    ProcessDTO.WaferPositionInProcessResourceInfo waferPositionInProcessResourceInf = new ProcessDTO.WaferPositionInProcessResourceInfo();
                    waferPositionInProcessResourceInf.setLotID(waferPositionInProcessResourceInfo.getLotID());
                    waferPositionInProcessResourceInf.setWaferID(waferPositionInProcessResourceInfo.getWaferID());
                    waferPositionInProcessResourceInf.setPosition(waferPositionInProcessResourceInfo.getPosition());
                    waferPositionInProcessResourceInf.setProcessReportedTimeStamp(waferPositionInProcessResourceInfo.getProcessReportedTimeStamp());
                    waferPositionInProcessResourceInfos.add(waferPositionInProcessResourceInf);
                }
                processResourceInfo.setWaferPositionInProcessResourceInfoList(waferPositionInProcessResourceInfos);
            }

            strProcessResourcePositionInfoSeq.add(processResourceInfo);
        }
        if(CimArrayUtils.isNotEmpty(strProcessResourcePositionInfoSeq)){
            for (ProcessDTO.ProcessResourcePositionInfo resourcePositionInfo : strProcessResourcePositionInfoSeq) {
                if(CimArrayUtils.isEmpty(resourcePositionInfo.getWaferPositionInProcessResourceInfoList())){
                    continue;
                }
                ObjectIdentifier lotID = resourcePositionInfo.getWaferPositionInProcessResourceInfoList().get(0).getLotID();
                CimLot lot  = baseCoreFactory.getBO(CimLot.class, lotID);
                Validations.check(null == lot,new OmCode(retCodeConfig.getNotFoundLot(), ObjectIdentifier.fetchValue(lotID)));
                String lotObjRef = lot.getPrimaryKey();
                final List<ProcessDTO.WaferPositionInProcessResourceInfo> resourceInfoList = resourcePositionInfo.getWaferPositionInProcessResourceInfoList();
                if(CimArrayUtils.isNotEmpty(resourceInfoList)){
                    for (ProcessDTO.WaferPositionInProcessResourceInfo waferPositionInProcessResourceInfo : resourceInfoList) {
                        waferPositionInProcessResourceInfo.setLotID(lot.getLotID());
                    }
                }
                com.fa.cim.newcore.bo.pd.CimProcessOperation processOperation  = lot.getProcessOperation();
                Validations.check(processOperation == null, new OmCode(retCodeConfig.getNotFoundProcessOperation(), "*****", ObjectIdentifier.fetchValue(lotID)));
                processOperation.addAssignedWaferPositionInProcessResourceInfo(resourcePositionInfo);
            }
        }

    }


    @Override
    public void processWaferChamberInformationSet(Infos.ObjCommon objCommon, List<Infos.ChamberProcessLotInfo> strChamberProcessLotInfos) {
        /*----------------*/
        /*   Initialize   */
        /*----------------*/
        int lenLot = CimArrayUtils.getSize(strChamberProcessLotInfos);
        for (int i = 0; i < lenLot; i++) {
            Infos.ChamberProcessLotInfo chamberProcessLotInfo = strChamberProcessLotInfos.get(i);
            log.info("loop to strChamberProcessLotInfos.length()");

            /*--------------------*/
            /*   Get Lot Object   */
            /*--------------------*/
            CimLot aPosLot = baseCoreFactory.getBO(CimLot.class, chamberProcessLotInfo.getLotID());
            Validations.check(null == aPosLot,retCodeConfig.getNotFoundLot());

            /*--------------------------------------------------*/
            /*   Get and Check Lot's Process Operation Object   */
            /*--------------------------------------------------*/
            CimProcessOperation aPosPO = aPosLot.getProcessOperation();
            if (null != aPosPO) {
                log.info("aPosPO is not nil");
                List<Infos.ChamberProcessWaferInfo> strChamberProcessWaferInfos = chamberProcessLotInfo.getChamberProcessWaferInfos();
                int lenWafer = CimArrayUtils.getSize(strChamberProcessWaferInfos);
                for (int j = 0; j < lenWafer; j++) {
                    Infos.ChamberProcessWaferInfo chamberProcessWaferInfo = strChamberProcessWaferInfos.get(j);
                    log.info("loop to strChamberProcessLotInfos[i].strChamberProcessWaferInfos.length() : ");
                    /*-----------------------------------*/
                    /*   Get Wafer-Chamber Information   */
                    /*-----------------------------------*/
                    String waferID = chamberProcessWaferInfo.getWaferID().getValue();
                    ProcessDTO.ProcessResourceInfo processResourceInfo = aPosPO.findAssignedProcessResourceInfo(waferID);
                    ProcessDTO.ProcessResourceInfo tmpProcessResourceInfo = new ProcessDTO.ProcessResourceInfo();
                    if (null == processResourceInfo || CimObjectUtils.isEmpty(processResourceInfo.getProcessWafer())) {
                        log.info("CIMFWStrLen( processResourceInfo->processWafer ) == 0");
                        /*---------------------------------------------------------*/
                        /*   Setup Wafer-Chamber Information using reported data   */
                        /*---------------------------------------------------------*/
                        tmpProcessResourceInfo.setProcessWafer(waferID);
                        List<ObjectIdentifier> resourceIDs = new ArrayList<>();
                        List<Infos.ProcessedChamberInfo> strProcessedChamberInfos = chamberProcessWaferInfo.getProcessedChamberInfos();
                        strProcessedChamberInfos.forEach(info -> resourceIDs.add(info.getChamberID()));
                        tmpProcessResourceInfo.setProcessResourceIDs(resourceIDs);
                    } else {
                        log.info("CIMFWStrLen( processResourceInfo->processWafer ) != 0");
                        /*----------------------------------------------------------------------*/
                        /*   Setup Wafer-Chamber Information using existing and reported data   */
                        /*----------------------------------------------------------------------*/
                        tmpProcessResourceInfo.setProcessWafer(processResourceInfo.getProcessWafer());
                        List<ObjectIdentifier> resourceIDs = processResourceInfo.getProcessResourceIDs();
                        List<Infos.ProcessedChamberInfo> strProcessedChamberInfos = chamberProcessWaferInfo.getProcessedChamberInfos();
                        strProcessedChamberInfos.forEach(info -> resourceIDs.add(info.getChamberID()));
                        tmpProcessResourceInfo.setProcessResourceIDs(resourceIDs);
                    }

                    /*-----------------------------------*/
                    /*   Add Wafer-Chamber Information   */
                    /*-----------------------------------*/
                    aPosPO.addAssignedProcessResourceInfo(tmpProcessResourceInfo);
                }
            } else {
                log.info("aPosPO is nil");
                Validations.check(retCodeConfig.getNotFoundProcessOperation());
            }
        }
    }

    @Override
    public void processCheckGatePass(Infos.ObjCommon objCommon, ObjectIdentifier lotID) {
        //Get Lot information
        com.fa.cim.newcore.bo.product.CimLot lot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class,lotID);
        com.fa.cim.newcore.bo.pd.CimProcessOperation processOperation = lot.getProcessOperation();
        Validations.check(CimObjectUtils.isEmpty(lot), retCodeConfig.getNotFoundProcessOperation(), objCommon.getTransactionID());
        Validations.check(CimBooleanUtils.isTrue(processOperation.isMandatoryOperation()),new OmCode(retCodeConfig.getCannotPassOperation(), lot.getIdentifier(), processOperation.getOperationName()));
    }

    @Override
    public void processCheckGatePassForBondingFlowSection(Infos.ObjCommon objCommon, ObjectIdentifier lotID) {
        //---------------------------------------
        // Check Bonding Group
        //---------------------------------------
        String bondingGroupID = lotMethod.lotBondingGroupIDGetDR(objCommon, lotID);
        if (CimObjectUtils.isEmpty(bondingGroupID)) return;

        //--------------------------------------------------------------------------------------------------
        // Get PosLot
        //--------------------------------------------------------------------------------------------------
        com.fa.cim.newcore.bo.product.CimLot lot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotID);
        Validations.check(CimObjectUtils.isEmpty(lot), retCodeConfig.getNotFoundLot());
        //--------------------------------------------------------------------------------------------------
        // Get PosPO
        //--------------------------------------------------------------------------------------------------
        com.fa.cim.newcore.bo.pd.CimProcessOperation processOperation = lot.getProcessOperation();
        Validations.check(CimObjectUtils.isEmpty(processOperation), retCodeConfig.getNotFoundProcessOperation());
        //--------------------------------------------------------------------------------------------------
        //  Check TargetOperation of BondingFlowSection
        //--------------------------------------------------------------------------------------------------
        String operationNo = processOperation.getOperationNumber();
        Validations.check(processOperation.isBondingFlowSectionTargetOperation(), retCodeConfigEx.getCannotPassOperationForBondinggroup(), operationNo);
    }

    @Override
    public Boolean repeatGatePassCheckCondition(Infos.ObjCommon objCommon, ObjectIdentifier monitoringLotID, ObjectIdentifier monitoredLotID) {
        boolean passThruRequiredFlag = true;
        //-----------------------------
        //   Check Lot's Hold State
        //-----------------------------
        String objLotHoldStateGetOut = lotMethod.lotHoldStateGet(objCommon,monitoredLotID);

        if(CimStringUtils.equals(CIMStateConst.CIM_LOT_HOLD_STATE_ONHOLD,objLotHoldStateGetOut)){
            return false;
        }
        //-----------------------------------------
        //  Get Lot ojbect
        //-----------------------------------------
        com.fa.cim.newcore.bo.product.CimLot aPosLot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, monitoredLotID);
        com.fa.cim.newcore.bo.pd.CimProcessOperation aPo = aPosLot.getProcessOperation();
        Validations.check(aPo==null,retCodeConfig.getNotFoundRoute());
        com.fa.cim.newcore.bo.pd.CimProcessDefinition processDefinition = aPo.getProcessDefinition();
        Validations.check(processDefinition==null,retCodeConfig.getNotFoundRoute());
        String pdType = processDefinition.getProcessDefinitionType();
        //-----------------------------
        //   Check pdType
        //-----------------------------
        if (!CimStringUtils.equals(pdType,BizConstant.SP_OPEPDTYPE_MEASUREMENT)) {
            return false;
        }
        //-----------------------------
        //   Check MandatoryOperation
        //-----------------------------
        Boolean isMandatoryFlag = aPo.isMandatoryOperation();
        if(CimBooleanUtils.isTrue(isMandatoryFlag)){
            return false;
        }
        return passThruRequiredFlag;
    }

    @Override
    public List<Infos.ConnectedSubRouteOperationInfo> processOperationListInRouteForFPCGetDR(Infos.ObjCommon objCommon, Inputs.ObjProcessOperationListInRouteForFpcGetDRIn in) {
        log.info("ObjProcessOperationListInRouteForFpcGetDRIn {}", in);
        ObjectIdentifier routeID = in.getRouteID();
        String operationNumber = in.getOperationNumber();
        ObjectIdentifier subRouteID = in.getSubRouteID();
        String subOperationNumber = in.getSubOperationNumber();
        ObjectIdentifier lotFamilyID = in.getLotFamilyID();
        ObjectIdentifier orgRouteID = in.getOrgRouteID();
        String orgOperationNumber = in.getOrgOperationNumber();

        List<Infos.OperationInfo> operationInformations = this.processOperationListInRouteGetDR(objCommon, routeID, operationNumber, in.getRouteRequirePattern());
        List<Infos.ConnectedSubRouteOperationInfo> operationInfoListObj = new ArrayList<>();
        if (!CimObjectUtils.isEmpty(operationInformations)) {
            for (Infos.OperationInfo operationInfo : operationInformations) {
                Infos.ConnectedSubRouteOperationInfo connectedSubRouteOperationInfoObj = new Infos.ConnectedSubRouteOperationInfo();
                operationInfoListObj.add(connectedSubRouteOperationInfoObj);
                connectedSubRouteOperationInfoObj.setOperationID(operationInfo.getOperationID());
                connectedSubRouteOperationInfoObj.setOperationNumber(operationInfo.getOperationNumber());
                connectedSubRouteOperationInfoObj.setMandatoryFlag(operationInfo.getMandatoryFlag());

                List<Infos.ConnectedRoute> connectedRoutes = operationInfo.getConnectedRouteList();
                List<Infos.ConnectedSub2RouteInfo> connectedSub2RouteInfosObj = new ArrayList<>();
                if (!CimObjectUtils.isEmpty(connectedRoutes)) {
                    for (Infos.ConnectedRoute connectedRoute : connectedRoutes) {
                        Infos.ConnectedSub2RouteInfo connectedSub2RouteInfoObj = new Infos.ConnectedSub2RouteInfo();
                        connectedSub2RouteInfosObj.add(connectedSub2RouteInfoObj);
                        connectedSub2RouteInfoObj.setRouteID(connectedRoute.getRouteID());
                        connectedSub2RouteInfoObj.setReturnOperationNumber(connectedRoute.getReturnOperationNumber());
                        connectedSub2RouteInfoObj.setRoutePDType(connectedRoute.getProcessDefinitionType());
                    }
                }

                List<CimProcessDefinitionDO> processDefinitions = cimJpaRepository.query("SELECT * FROM OMPRP WHERE ID = ?1", CimProcessDefinitionDO.class, operationInfo.getOperationID().getReferenceKey());
                if (CimObjectUtils.isEmpty(processDefinitions)) {
                    log.error("processDefinition == null");
                    Validations.check(true,retCodeConfig.getNotFoundProcessDefinition());
                }
                CimProcessDefinitionDO processDefinition = processDefinitions.get(0);
                connectedSubRouteOperationInfoObj.setOperationPDType(processDefinition.getProcessDefinitionType());
                connectedSubRouteOperationInfoObj.setWhiteDefFlag(processDefinition.getWhiteFlag());
                connectedSubRouteOperationInfoObj.setFPCCategory(processDefinition.getProcessCategory());

                Integer count = 0;
                String routeIDStr = ObjectIdentifier.fetchValue(routeID);
                String subRouteIDStr = ObjectIdentifier.fetchValue(subRouteID);
                String orgRouteIDStr = ObjectIdentifier.fetchValue(orgRouteID);
                if (CimBooleanUtils.isTrue(in.getFPCCountGetFlag())) {
                    if (!ObjectIdentifier.isEmpty(lotFamilyID)) {
                        CimFPCDO cimFPCExam = new CimFPCDO();
                        cimFPCExam.setLotFamilyID(ObjectIdentifier.fetchValue(lotFamilyID));
                        cimFPCExam.setMainProcessDefinitionID(routeIDStr);
                        cimFPCExam.setOperationNumber(operationNumber);
                        cimFPCExam.setSubMainProcessDefinitionID(subRouteIDStr);
                        cimFPCExam.setSubOperationNumber(subOperationNumber);
                        cimFPCExam.setOriginalMainProcessDefinitionID(orgRouteIDStr);
                        cimFPCExam.setOriginalOperationNumber(orgOperationNumber);
                        count = (int) cimJpaRepository.count(Example.of(cimFPCExam));
                    }
                } else {
                    CimFPCDO cimFPCExam = new CimFPCDO();
                    cimFPCExam.setMainProcessDefinitionID(routeIDStr);
                    cimFPCExam.setOperationNumber(operationNumber);
                    cimFPCExam.setSubMainProcessDefinitionID(subRouteIDStr);
                    cimFPCExam.setSubOperationNumber(subOperationNumber);
                    cimFPCExam.setOriginalMainProcessDefinitionID(orgRouteIDStr);
                    cimFPCExam.setOriginalOperationNumber(orgOperationNumber);
                    count = (int) cimJpaRepository.count(Example.of(cimFPCExam));
                }
                connectedSubRouteOperationInfoObj.setFPCInfoCount(count);
            }
        }
        return operationInfoListObj;
    }

    @Override
    public List<Infos.OperationInfo> processOperationListInRouteGetDR(Infos.ObjCommon objCommon, ObjectIdentifier routeID, String operationNumber, String routeRequirePattern) {
        log.info("routeID = {}, operationNumber = {}, routeRequirePattern = {}", routeID, operationNumber, routeRequirePattern);
        List<Infos.OperationInfo> out = new ArrayList<>();

        //===== Set Module Number and Module Operation Number =======//
        log.info("Set Module Number and Module Operation Number");
        Boolean opeNoFlag = false;
        String moduleNo = null;
        String moduleOpeNo = null;
        if (!CimObjectUtils.isEmpty(operationNumber)) {
            opeNoFlag = true;
            String[] opes = BaseStaticMethod.convertOpeNoToModuleNoAndModuleOpeNo(operationNumber);
            moduleNo = opes[0];
            moduleOpeNo = opes[1];
        }

        boolean reworkCheckFlag = false;
        String mainOpePF = null;
        if (!CimObjectUtils.isEmpty(routeRequirePattern)) {
            //---------------------------------------------
            // Get Main Process Flow for Operation
            //---------------------------------------------
            log.info("Get Main Process Flow for Operation");
            List<CimProcessFlowDO> processFlows = cimJpaRepository.query(" SELECT * FROM OMPRF WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2", CimProcessFlowDO.class, routeID.getValue(), BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_OPERATION);
            if (CimObjectUtils.isEmpty(processFlows)) {
                log.error("processFlow == null");
                Validations.check(true,new OmCode(retCodeConfig.getNotFoundProcessFlow()));
            }
            mainOpePF = processFlows.get(0).getId();
            if (CimStringUtils.equals(BizConstant.SP_MAINPDTYPE_REWORK,routeRequirePattern)) {
                reworkCheckFlag = true;
            }
        }

        //---------------------------------------------
        // Get Main Process Flow for Module
        //---------------------------------------------
        log.info("Get Main Process Flow for Module");
        List<CimProcessFlowDO> processFlows = cimJpaRepository.query(" SELECT * FROM OMPRF WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2 AND ACTIVE_FLAG = ?3", CimProcessFlowDO.class, routeID.getValue(), BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE, TRUE);
        if (CimObjectUtils.isEmpty(processFlows)) {
            log.error("processFlow == null");
            Validations.check(true,new OmCode(retCodeConfig.getNotFoundProcessFlow()));
        }
        String mianModID = processFlows.get(0).getId();

        //---------------------------------------------
        // Get Module POSs of Main PF
        //---------------------------------------------
        log.info("Get Module POSs of Main PF");
        //===== Get Module PDs =======//
        StringBuffer sb = new StringBuffer(String.format("SELECT ROUTE_NO, ROUTE_ID FROM OMPRF_ROUTESEQ WHERE REFKEY = '%s' ", mianModID));
        sb.append(opeNoFlag ? String.format("AND LINK_KEY = '%s' ORDER BY IDX_NO", moduleNo) : "ORDER BY IDX_NO");

        List<CimPFDefinitionListDO> pfDefinitionListDOList = cimJpaRepository.query(sb.toString(), CimPFDefinitionListDO.class);
        if (!CimObjectUtils.isEmpty(pfDefinitionListDOList)) {
            List<Infos.OperationInfo> operationInfos = new ArrayList<>();
            out = operationInfos;
            for (CimPFDefinitionListDO pfDefinitionList : pfDefinitionListDOList) {
                //===== Get Active Module PD =======//
                String pfListID = pfDefinitionList.getProcessDefinitionID();
                String pdListModuleNo = pfDefinitionList.getModuleNO();
                String versionID = BaseStaticMethod.extractVersionFromID(pfListID);
                if (CimStringUtils.equals(BizConstant.SP_ACTIVE_VERSION, versionID)) {
                    String pdLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                    List<CimProcessDefinitionDO> processDefinitions = cimJpaRepository.query("SELECT ACTIVE_VER_ID FROM OMPRP WHERE PRP_ID =?1 AND PRP_LEVEL = ?2", CimProcessDefinitionDO.class, pfListID, pdLevel);
                    if (CimObjectUtils.isEmpty(processDefinitions)) {
                        break;
                    }
                    pfListID = processDefinitions.get(0).getActiveID();
                }

                //===== Get Module PF =======//
                String pdLevel = BizConstant.SP_PD_FLOWLEVEL_MODULE;
                List<CimProcessFlowDO> processFlows1 = cimJpaRepository.query(" SELECT * FROM OMPRF WHERE PRP_ID = ?1 AND PRP_LEVEL = ?2 AND ACTIVE_FLAG = ?3", CimProcessFlowDO.class, pfListID, pdLevel, TRUE);
                if (CimObjectUtils.isEmpty(processFlows1)) {
                    break;
                }
                String hFRPFd_theSystemKey = processFlows1.get(0).getId();

                //===== Get POSs of Module PF =======//
                StringBuffer posSB = new StringBuffer(String.format("SELECT PRSS_RKEY FROM OMPRF_PRSSSEQ WHERE REFKEY = '%s' ", hFRPFd_theSystemKey));
                posSB.append(opeNoFlag ? String.format("AND LINK_KEY = '%s' ORDER BY IDX_NO", moduleOpeNo) : "ORDER BY IDX_NO");
                List<CimPFPosListDO> pfPosList = cimJpaRepository.query(posSB.toString(), CimPFPosListDO.class);
                if (CimObjectUtils.isEmpty(pfPosList)) {
                    break;
                }

                for (CimPFPosListDO pfPos : pfPosList) {
                    //===== Get Module POS =======//
                    String modPOS = pfPos.getProcessOperationSpecificationsObj();
                    List<CimProcessOperationSpecificationDO> PosList = cimJpaRepository.query("SELECT OPE_NO, STEP_ID, STEP_RKEY, COMPULSORY_FLAG FROM OMPRSS WHERE ID = ?1", CimProcessOperationSpecificationDO.class, modPOS);
                    if (CimObjectUtils.isEmpty(PosList)) {
                        throw new ServiceException(retCodeConfig.getNotFoundPos());
                    }
                    String opeNo = BaseStaticMethod.convertModuleOpeNoToOpeNo(pdListModuleNo, PosList.get(0).getOperationNumber());
                    Infos.OperationInfo operationInfo = new Infos.OperationInfo();
                    if (!CimObjectUtils.isEmpty(mainOpePF)) {
                        List<Infos.ConnectedRoute> processConnectedRouteGetDR = processMethod.processConnectedRouteGetDR(objCommon, mainOpePF, opeNo, modPOS, true, reworkCheckFlag);
                        operationInfo.setConnectedRouteList(processConnectedRouteGetDR);
                    }

                    operationInfos.add(operationInfo);
                    operationInfo.setOperationID(new ObjectIdentifier(PosList.get(0).getProcessDefinitionID(), PosList.get(0).getProcessDefinitionObj()));
                    operationInfo.setMandatoryFlag(PosList.get(0).getMandatoryFlag());
                    operationInfo.setOperationNumber(opeNo);
                }
            }
        }
        return out;
    }

    @Override
    public List<Infos.PostProcessAdditionalInfo> postProcessAdditionalInfoGetDR(Infos.ObjCommon objCommon, String dKey, Integer seqNo) {
        /*----------------*/
        /*   Initialize   */
        /*----------------*/
        CimPostProcessInfoDO cimPostProcessInfoExam = new CimPostProcessInfoDO();
        cimPostProcessInfoExam.setDkey(dKey);
        if (seqNo != -1) {
            cimPostProcessInfoExam.setSequenceNumber(seqNo);
        }
        return cimJpaRepository.findAll(Example.of(cimPostProcessInfoExam)).stream().map(data -> {
            Infos.PostProcessAdditionalInfo info = new Infos.PostProcessAdditionalInfo();
            info.setDKey(data.getDkey());
            info.setSequenceNumber(data.getSequenceNumber());
            info.setName(data.getName());
            info.setValue(data.getValue());
            return info;
        }).collect(Collectors.toList());
    }
    /**
     * description:
     * change history:
     * date             defect#             person             comments
     * ---------------------------------------------------------------------------------------------------------------------
     * 2019/3/26                               Neyo                create file
     *
     * @author: Neyo
     * @date: 2019/3/26 13:09
     * @copyright: 2018, FA Software (Shanghai) Co., Ltd. All Rights Reserved.
     */
    @Override
    public Outputs.ObjProcessBondingFlowDefinitionGetDROut processBondingFlowDefinitionGetDR(Infos.ObjCommon objCommon, String modulePOS) {

        //【step1】Initialize
        log.info("PPTManager_i::process_bondingFlowDefinition_GetDR");
        Outputs.ObjProcessBondingFlowDefinitionGetDROut out = new Outputs.ObjProcessBondingFlowDefinitionGetDROut();
        String sql = "SELECT STEP_ID,STEP_RKEY,OPE_NO,SECTION_CONTROL,SECTION_NAME,SECTION_START_FLAG,SECTION_END_FLAG FROM OMPRSS WHERE ID = ?";
        List<CimProcessOperationSpecificationDO> specificationDOList = cimJpaRepository.query(sql, CimProcessOperationSpecificationDO.class, modulePOS);
        CimProcessOperationSpecificationDO cimProcessOperationSpecificationDO = specificationDOList.get(0);
        String hFRPOSPD_ID = cimProcessOperationSpecificationDO.getProcessDefinitionID();
        String hFRPOSPD_OBJ = cimProcessOperationSpecificationDO.getProcessDefinitionObj();
        String hFRPOSOPE_NO = cimProcessOperationSpecificationDO.getOperationNumber();
        String hFRPOSFLOW_SECTION_CATEGORY = cimProcessOperationSpecificationDO.getFlowSectionCategory();
        String hFRPOSFLOW_SECTION_NAME = cimProcessOperationSpecificationDO.getFlowSectionName();
        Boolean hFRPOSFLOW_SECTION_ENTRY_FLAG = cimProcessOperationSpecificationDO.getFlowSectionEntryFlag();
        Boolean hFRPOSFLOW_SECTION_TARGET_FLAG = cimProcessOperationSpecificationDO.getFlowSectionTargetFlag();

        Infos.FlowSectionControl flowSectionControl = new Infos.FlowSectionControl();
        flowSectionControl.setFlowSectionCategory(hFRPOSFLOW_SECTION_CATEGORY);
        flowSectionControl.setFlowSectionID(hFRPOSFLOW_SECTION_NAME);
        flowSectionControl.setFlowSectionEntryFlag(hFRPOSFLOW_SECTION_ENTRY_FLAG);
        flowSectionControl.setFlowSectionTargetFlag(hFRPOSFLOW_SECTION_TARGET_FLAG);
        out.setFlowSectionControl(flowSectionControl);

        //【step2】If operation PDID's version is "##", convert it to real PDID
        String operationID = hFRPOSPD_ID;
        String strVersionId = BaseStaticMethod.extractVersionFromID(operationID);
        CimProcessDefinitionDO cimProcessDefinitionDO = new CimProcessDefinitionDO();
        if (CimStringUtils.equals(strVersionId, BizConstant.SP_ACTIVE_VERSION)){
            log.info("### VERSION_ID == '##'");
            String sql1 = "SELECT ACTIVE_VER_ID,ACTIVE_VER_RKEY FROM OMPRP WHERE PRP_ID = ? AND PRP_LEVEL = ? ";
            String pdLevel = BizConstant.SP_PD_FLOWLEVEL_OPERATION;
            List<CimProcessDefinitionDO> cimProcessDefinitionDOList = cimJpaRepository.query(sql1, CimProcessDefinitionDO.class, operationID, pdLevel);
            cimProcessDefinitionDO = cimProcessDefinitionDOList.get(0);
        }
        String hFRPDACTIVE_ID = cimProcessDefinitionDO.getActiveID();
        String hFRPDACTIVE_OBJ = cimProcessDefinitionDO.getActiveObj();
        out.setOperationID(new ObjectIdentifier(hFRPDACTIVE_ID,hFRPDACTIVE_OBJ));
        out.setOperationNumber(hFRPOSOPE_NO);
        return out;
    }
    /**
     * description:
     * change history:
     * date             defect#             person             comments
     * ---------------------------------------------------------------------------------------------------------------------
     * 2019/3/26                               Neyo                create file
     *
     * @author: Neyo
     * @date: 2019/3/26 13:27
     * @copyright: 2018, FA Software (Shanghai) Co., Ltd. All Rights Reserved.
     */
    @Override
    public void processCheckInterFabXferPlanSkip(Infos.ObjCommon objCommon, Inputs.ObjProcessCheckInterFabXferPlanSkipIn objProcessCheckInterFabXferPlanSkipIn) {
        //【joseph】we don't do,so we skip this source code.

        /*log.info("PPTManager_i:: process_CheckInterFabXferPlanSkip");
        log.info("lotID         ",objProcessCheckInterFabXferPlanSkipIn.getLotID().getValue());
        log.info("currentRouteID",objProcessCheckInterFabXferPlanSkipIn.getCurrentRouteID().getValue());
        log.info("currentOpeNo",objProcessCheckInterFabXferPlanSkipIn.getCurrentOpeNo());
        log.info("jumpingRouteID",objProcessCheckInterFabXferPlanSkipIn.getJumpingRouteID().getValue());
        log.info("jumpingOpeNo",objProcessCheckInterFabXferPlanSkipIn.getJumpingOpeNo());
        //【step0】Initialize
        String currentFabID = environmentVariableCore.getEnvironmentValue(EnvEnum.SP_FAB_ID);
        log.info("current FabID",currentFabID);
        //【step1】interFab_xferPlanList_GetDR
        Inputs.ObjInterFabXferPlanListGetDRIn objInterFabXferPlanListGetDRIn = new Inputs.ObjInterFabXferPlanListGetDRIn();
        Infos.InterFabLotXferPlanInfo strInterFabLotXferPlanInfo = new Infos.InterFabLotXferPlanInfo();
        strInterFabLotXferPlanInfo.setLotID(objProcessCheckInterFabXferPlanSkipIn.getLotID());
        objInterFabXferPlanListGetDRIn.setStrInterFabLotXferPlanInfo(strInterFabLotXferPlanInfo);
        RetCode<Outputs.ObjInterFabXferPlanListGetDROut> objInterFabXferPlanListGetDROut = cimComp.interFabXferPlanListGetDR(objCommon,objInterFabXferPlanListGetDRIn);//未完成，表数据无
        if (!Validations.isSuccess(objInterFabXferPlanListGetDROut) && objInterFabXferPlanListGetDROut.getReturnCode() != retCodeConfig.getInterfabNotFoundXferPlan()){
            log.info("interFab_xferPlanList_GetDR() != RC_OK");
            result.setReturnCode(objInterFabXferPlanListGetDROut.getReturnCode());
            return result;
        }
        int xferCount = ArrayUtils.getSize(objInterFabXferPlanListGetDROut.getObject().getStrInterFabLotXferPlanInfoSeq());
        log.info("lot's interFab xfer plan count",xferCount);
        if ( xferCount == 0){
            log.info("this lot has no xfer plan. return OK.");
            result.setReturnCode(retCodeConfig.getSucc());
            return result;
        }
        //Omit completed plan
        List<Infos.InterFabLotXferPlanInfo> tmpInterFabLotXferPlanInfoSeq = new ArrayList<>();
        for (int pCnt = 0; pCnt < xferCount; pCnt++){
            if ( !StringUtils.equals(objInterFabXferPlanListGetDROut.getObject().getStrInterFabLotXferPlanInfoSeq().get(pCnt).getState(),ConstEnum.INTER_FAB_TRANSFER_PLAN_STATE_COMPLETED.getValue())){
                Infos.InterFabLotXferPlanInfo interFabLotXferPlanInfo = objInterFabXferPlanListGetDROut.getObject().getStrInterFabLotXferPlanInfoSeq().get(pCnt);
                tmpInterFabLotXferPlanInfoSeq.add(interFabLotXferPlanInfo);
            }
        }
        //Get operation lis
        //【step2】process_OperationNumberListForLot
        Inputs.ObjProcessOperationProcessRefListForLotIn objProcessOperationNumberListForLotIn = new Inputs.ObjProcessOperationProcessRefListForLotIn();
        objProcessOperationNumberListForLotIn.setSearchDirection(true);
        objProcessOperationNumberListForLotIn.setPosSearchFlag(false);
        objProcessOperationNumberListForLotIn.setSearchCount(9999);
        objProcessOperationNumberListForLotIn.setSearchRouteID(objProcessCheckInterFabXferPlanSkipIn.getJumpingRouteID());
        objProcessOperationNumberListForLotIn.setSearchOperationNumber("");
        objProcessOperationNumberListForLotIn.setCurrentFlag(true);
        objProcessOperationNumberListForLotIn.setLotID(objProcessCheckInterFabXferPlanSkipIn.getLotID());
        RetCode<List<Infos.OperationNumberListAttributes>> processOperationNumberListForLotOut = processMethod.processOperationNumberListForLot(objCommon, objProcessOperationNumberListForLotIn);
        if(!Validations.isSuccess(processOperationNumberListForLotOut)){
            log.info("process_OperationNumberListForLot() != RC_OK");
            result.setReturnCode(processOperationNumberListForLotOut.getReturnCode());
            return result;
        }
        //Check between current operationNumber and target operationNumber
        boolean findFlag = false;
        int openCount = ArrayUtils.getSize(processOperationNumberListForLotOut.getObject());
        List<Infos.OperationNameAttributes> opeNoList = new ArrayList<>();
        int checkOpeCnt = 0;
        boolean checkStartflag = false;
        for (int i = 0; i < openCount; i++) {
            if (StringUtils.equals(processOperationNumberListForLotOut.getObject().get(i).getRouteID().getValue(), objProcessCheckInterFabXferPlanSkipIn.getCurrentRouteID().getValue()) &&
                    StringUtils.equals(processOperationNumberListForLotOut.getObject().get(i).getOperationNumber(), objProcessCheckInterFabXferPlanSkipIn.getCurrentOpeNo())) {
                checkStartflag = true;
            }
            if (true == checkStartflag) {
                if (StringUtils.equals(processOperationNumberListForLotOut.getObject().get(i).getRouteID().getValue(), objProcessCheckInterFabXferPlanSkipIn.getJumpingRouteID().getValue()) &&
                        StringUtils.equals(processOperationNumberListForLotOut.getObject().get(i).getOperationNumber(), objProcessCheckInterFabXferPlanSkipIn.getJumpingOpeNo())) {
                    findFlag = true;
                    break;
                }
                Infos.OperationNameAttributes operationNameAttributes = new Infos.OperationNameAttributes();
                operationNameAttributes.setRouteID(processOperationNumberListForLotOut.getObject().get(i).getRouteID());
                operationNameAttributes.setOperationNumber(processOperationNumberListForLotOut.getObject().get(i).getOperationNumber());
                opeNoList.add(operationNameAttributes);
                checkOpeCnt++;
            }
        }
        if ( findFlag == false){
            log.info("junmping operationNumber not found in forward process list. It means the jumping operationNumber is in backward processes. return OK.");
            result.setReturnCode(retCodeConfig.getSucc());
            return result;
        }
        //Logging
        log.info("##### Check operation");
        for (int i1 = 0; i1 < checkOpeCnt; i1++) {
            log.info("### Check routeID:OpeNumber", opeNoList.get(i1).getRouteID().getValue(), opeNoList.get(i1).getOperationNumber());
        }
        log.info("##### Planned operation");
        for (int j1 = 0; j1 < xferCount; j1++) {
            log.info("### Planned routeID:OpeNumber",tmpInterFabLotXferPlanInfoSeq.get(j1).getOriginalRouteID().getValue(),tmpInterFabLotXferPlanInfoSeq.get(j1).getOriginalOpeNumber());
        }
        //Do checking
        for (int i = 0; i < checkOpeCnt; i++) {
            for (int j = 0; j < xferCount; j++) {
                if (!StringUtils.equals(tmpInterFabLotXferPlanInfoSeq.get(j).getState(),ConstEnum.INTER_FAB_TRANSFER_PLAN_STATE_CREATED.getValue()) &&
                        !StringUtils.equals(tmpInterFabLotXferPlanInfoSeq.get(j).getState(),ConstEnum.INTER_FAB_TRANSFER_PLAN_STATE_CANCELED.getValue())){
                    log.info("no check when the state of xfer plan is NOT 'Created'");
                    continue;
                }
                if (StringUtils.equals(opeNoList.get(i).getRouteID().getValue(),tmpInterFabLotXferPlanInfoSeq.get(j).getOriginalRouteID().getValue()) &&
                        StringUtils.equals(opeNoList.get(i).getOperationNumber(),tmpInterFabLotXferPlanInfoSeq.get(j).getOriginalOpeNumber())){
                    log.info("found interFab xfer plan. operationNumber is ",opeNoList.get(i).getOperationNumber());
                    Validations.check(true,retCodeConfig.getInterfabProcessSkipError());
                }
            }
        }*/
        //Return to Caller
    }

    @Override
    public void processOperationRawDCItemsSet(Infos.ObjCommon objCommon, List<Infos.CollectedDataItemStruct> dcItems) {
        //Initialize;
        List<Infos.CollectedDataItemStruct> strCDItemSeq = new ArrayList<>();
        if (CimArrayUtils.isNotEmpty(dcItems)) {
            dcItems.forEach(dcItem -> {
                if (dcItem != null) {
                    strCDItemSeq.add(dcItem);
                }
            });
        }

        int nCDItemLen = CimArrayUtils.getSize(strCDItemSeq);
        int nCDItemNum = 0;
        int nLotIDSeqNum = 0;
        int nLotIDSeqCnt = 0;
        List<ObjectIdentifier> lotIDs = new ArrayList<>();
        //Check DataValue length (Pick up lot IDs in the same time);
        for (nCDItemNum = 0; nCDItemNum < nCDItemLen; nCDItemNum++) {
            Infos.CollectedDataItemStruct collectedDataItem = strCDItemSeq.get(nCDItemNum);
            Boolean bLotFoundFlag = false;
            for (nLotIDSeqNum = 0; nLotIDSeqNum < nLotIDSeqCnt; nLotIDSeqNum++) {
                ObjectIdentifier lotID = lotIDs.get(nLotIDSeqNum);
                if (ObjectIdentifier.equalsWithValue(collectedDataItem.getLotID(), lotID)) {
                    bLotFoundFlag = true;
                    break;
                }
            }
            if (!bLotFoundFlag) {
                lotIDs.add(collectedDataItem.getLotID());
                nLotIDSeqCnt++;
            }
        }

        for (nLotIDSeqNum = 0; nLotIDSeqNum < nLotIDSeqCnt; nLotIDSeqNum++) {
            ObjectIdentifier lotID = lotIDs.get(nLotIDSeqNum);
            //---------------------------------------------------------------------------------
            //   Get Lot object
            //---------------------------------------------------------------------------------
            CimLot aPosLot = baseCoreFactory.getBO(CimLot.class, lotID);
            Validations.check(aPosLot == null, new OmCode(retCodeConfig.getNotFoundLot(), lotID.getValue()));
            //---------------------------------------------------------------------------------
            //   Get Process Operation from Lot
            //---------------------------------------------------------------------------------
            CimProcessOperation aPosPO = aPosLot.getProcessOperation();
            Validations.check(aPosPO == null, new OmCode(retCodeConfig.getNotFoundProcessOperation(), "*****", lotID.getValue()));
            //---------------------------------------------------------------------------------
            //   Get DC Definition from PO
            //---------------------------------------------------------------------------------
            CimDataCollectionDefinition aDCDef = aPosPO.getAssignedDCDef();
            Validations.check(aDCDef == null, new OmCode(retCodeConfig.getNotFoundPrevDcDef(), "*****"));
            String aDCDefID = aDCDef.getIdentifier();
            //---------------------------------------------------------------------------------
            //   Get Data Collection Item information from PO
            //---------------------------------------------------------------------------------
            List<ProcessDTO.DataCollectionItemInfo> strPODCItemSeq = aPosPO.getAssignedDataCollectionItemInfo(aDCDefID);
            int nPODCItemSeqCnt = CimArrayUtils.getSize(strPODCItemSeq);
            int nPODCItemSeqMax = nPODCItemSeqCnt;
            int nPODCItemSeqNum = 0;
            Map<String, Integer> srcIndexListByPJWS = new HashMap<>();
            Map<String, Integer> srcIndexListByPJPJ = new HashMap<>();
            Map<String, Integer> srcIndexListByPJWSTemplate = new HashMap<>();
            Map<String, Integer> srcIndexListByPJPJTemplate = new HashMap<>();

            //Create ByPJ DC Item index list;
            for (nPODCItemSeqNum = 0; nPODCItemSeqNum < nPODCItemSeqCnt; nPODCItemSeqNum++) {
                ProcessDTO.DataCollectionItemInfo dcItemInfo = strPODCItemSeq.get(nPODCItemSeqNum);
                if (dcItemInfo == null) {
                    continue;
                }
                if (CimStringUtils.equals(BizConstant.SP_DCDEF_MEAS_PJWAFER, dcItemInfo.getMeasurementType())
                        || CimStringUtils.equals(BizConstant.SP_DCDEF_MEAS_PJWAFERSITE, dcItemInfo.getMeasurementType())) {
                    // Memorize template item index of strPODCItemSeq to ByPJ Wafer/Site list;
                    String listKeyName = dcItemInfo.getDataCollectionItemName() + "#" +
                            dcItemInfo.getMeasurementType() + "#" + dcItemInfo.getSitePosition();
                    listKeyName = listKeyName.replaceAll("null", "");
                    if (!srcIndexListByPJWSTemplate.containsKey(listKeyName)) {
                        srcIndexListByPJWSTemplate.put(listKeyName, nPODCItemSeqNum);
                    }
                    // Memorize index of strPODCItemSeq to ByPJ Wafer/Site list;
                    listKeyName += "#";
                    listKeyName += !ObjectIdentifier.isEmpty(dcItemInfo.getWaferID()) ? dcItemInfo.getWaferID().getValue() : "";
                    listKeyName = listKeyName.replaceAll("null", "");
                    if (!srcIndexListByPJWS.containsKey(listKeyName)) {
                        srcIndexListByPJWS.put(listKeyName, nPODCItemSeqNum);
                    }
                } else if (CimStringUtils.equals(BizConstant.SP_DCDEF_MEAS_PJ, dcItemInfo.getMeasurementType())) {
                    // Memorize template item index of strPODCItemSeq to ByPJ ProcessJob list;
                    String listKeyName = dcItemInfo.getDataCollectionItemName() + "#" + dcItemInfo.getMeasurementType();
                    if (!srcIndexListByPJPJTemplate.containsKey(listKeyName)) {
                        srcIndexListByPJPJTemplate.put(listKeyName, nPODCItemSeqNum);
                    }
                    // Memorize index of strPODCItemSeq to ByPJ ProcessJob list;
                    listKeyName += "#" + dcItemInfo.getWaferPosition();
                    listKeyName = listKeyName.replaceAll("null", "");
                    if (!srcIndexListByPJPJ.containsKey(listKeyName)) {
                        srcIndexListByPJPJ.put(listKeyName, nPODCItemSeqNum);
                    }
                }
            }
            for (nCDItemNum = 0; nCDItemNum < nCDItemLen; nCDItemNum++) {
                Infos.CollectedDataItemStruct strCDItem = strCDItemSeq.get(nCDItemNum);
                if (strCDItem == null) {
                    continue;
                }
                if (!ObjectIdentifier.equalsWithValue(strCDItem.getLotID(), lotID)) {
                    continue;
                }
                if (!ObjectIdentifier.equalsWithValue(strCDItem.getDataCollectionDefinitionID(), aDCDefID)) {
                    continue;
                }
                if (!CimStringUtils.equals(BizConstant.SP_DCDEF_ITEM_RAW, strCDItem.getItemType())) {
                    continue;
                }
                int seqLen = CimArrayUtils.getSize(strCDItem.getCollectedDataList());
                int sourceIndex = 0;
                if (CimStringUtils.equals(BizConstant.SP_DCDEF_MEAS_PJWAFER, strCDItem.getMeasurementType())
                        || CimStringUtils.equals(BizConstant.SP_DCDEF_MEAS_PJWAFERSITE, strCDItem.getMeasurementType())) {
                    for (int seqNo = 0; seqNo < seqLen; seqNo++) {
                        Infos.CollectedDataStruct dc = strCDItem.getCollectedDataList().get(seqNo);
                        if (dc.getWaferID() == null || ObjectIdentifier.isEmptyWithValue(dc.getWaferID())) {
                            continue;
                        }
                        if (CimStringUtils.equals("*", dc.getWaferPosition())) {
                            dc.setWaferPosition("");
                        }
                        // Get index of strPODCItemSeq from ByPJ Wafer/Site list;
                        String listKeyName = strCDItem.getDataCollectionItemName() + "#" +
                                strCDItem.getMeasurementType() + "#" + strCDItem.getSitePosition()
                                + "#" + dc.getWaferID().getValue();
                        listKeyName = listKeyName.replaceAll("null", "");
                        if (srcIndexListByPJWS.containsKey(listKeyName)){
                            throw new ServiceException(retCodeConfig.getProcessJobDataAlreadyReported());
                        } else {
                            // Get unreported item index (Empty value item);
                            String tmplistKeyName = listKeyName;
                            // Get unreported item index (Empty value item);
                            listKeyName = strCDItem.getDataCollectionItemName() + "#" + strCDItem.getMeasurementType()
                                    + "#" + strCDItem.getSitePosition() + "#";
                            listKeyName = listKeyName.replaceAll("null", "");
                            if (srcIndexListByPJWS.containsKey(listKeyName)) {
                                sourceIndex = srcIndexListByPJWS.get(listKeyName);
                                // Update data;
                                if (strPODCItemSeq.get(sourceIndex) != null) {
                                    strPODCItemSeq.get(sourceIndex).setWaferID(dc.getWaferID());
                                    strPODCItemSeq.get(sourceIndex).setDataValue(dc.getDataValue());
                                    strPODCItemSeq.get(sourceIndex).setWaferPosition(dc.getWaferPosition());
                                }
                                // Remove empty value item index from ByPJ Wafer/Site list;
                                srcIndexListByPJWS.remove(listKeyName);
                                // Memorize index of strPODCItemSeq to ByPJ Wafer/Site list
                                if (!srcIndexListByPJWS.containsKey(tmplistKeyName)) {
                                    srcIndexListByPJWS.put(tmplistKeyName, sourceIndex);
                                }
                            } else {
                                // Get template item index;
                                listKeyName = strCDItem.getDataCollectionItemName() + "#" +
                                        strCDItem.getMeasurementType() + "#" + strCDItem.getSitePosition();
                                listKeyName = listKeyName.replaceAll("null", "");
                                if (srcIndexListByPJWSTemplate.containsKey(listKeyName)) {
                                    sourceIndex = srcIndexListByPJWSTemplate.get(listKeyName);
                                    ProcessDTO.DataCollectionItemInfo tmpDcItemInfo = strPODCItemSeq.get(sourceIndex);
                                    if (tmpDcItemInfo != null) {
                                        ProcessDTO.DataCollectionItemInfo dcItemInfo = new ProcessDTO.DataCollectionItemInfo();
                                        BeanUtils.copyProperties(tmpDcItemInfo, dcItemInfo);
                                        strPODCItemSeq.add(dcItemInfo);
                                        dcItemInfo.setWaferID(dc.getWaferID());
                                        dcItemInfo.setDataValue(dc.getDataValue());
                                        dcItemInfo.setWaferPosition(dc.getWaferPosition());
                                        dcItemInfo.setSpecCheckResult("");
                                        dcItemInfo.setActionCodes("");
                                    }
                                    // Memorize index of strPODCItemSeq to ByPJ Wafer/Site list;
                                    if (!srcIndexListByPJWS.containsKey(tmplistKeyName)) {
                                        srcIndexListByPJWS.put(tmplistKeyName, nPODCItemSeqCnt);
                                    }
                                    nPODCItemSeqCnt++;
                                }
                            }
                        }
                    }
                } else if (CimStringUtils.equals(BizConstant.SP_DCDEF_MEAS_PJ, strCDItem.getMeasurementType())) {
                    for (int seqNo = 0; seqNo < seqLen; seqNo++) {
                        Infos.CollectedDataStruct dc = strCDItem.getCollectedDataList().get(seqNo);
                        if (CimStringUtils.isEmpty(dc.getProcessJobPosition())) {
                            continue;
                        }
                        if (CimStringUtils.equals("*", dc.getProcessJobPosition())) {
                            dc.setProcessJobPosition("");
                        }
                        // Get index of strPODCItemSeq from ByPJ ProcessJob list;
                        String listKeyName = strCDItem.getDataCollectionItemName() + "#" +
                                strCDItem.getMeasurementType() + "#" + dc.getProcessJobPosition();
                        listKeyName = listKeyName.replaceAll("null", "");
                        if (srcIndexListByPJPJ.containsKey(listKeyName)){
                            throw new ServiceException(retCodeConfig.getProcessJobDataAlreadyReported());
                        } else {
                            String tmplistKeyName = listKeyName;
                            // Get unreported item index (Empty value item);
                            listKeyName = strCDItem.getDataCollectionItemName() + "#" +
                                    strCDItem.getMeasurementType() + "#" + "*";
                            listKeyName = listKeyName.replaceAll("null", "");
                            if (srcIndexListByPJPJ.containsKey(listKeyName)) {
                                sourceIndex = srcIndexListByPJPJ.get(listKeyName);
                                // Update data;
                                ProcessDTO.DataCollectionItemInfo newDCItem = strPODCItemSeq.get(sourceIndex);
                                if (newDCItem != null){
                                    newDCItem.setDataValue(dc.getDataValue());
                                    newDCItem.setWaferPosition(dc.getProcessJobPosition());
                                }
                                // Remove empty value item index from ByPJ ProcessJob list;
                                srcIndexListByPJPJ.remove(listKeyName);
                                // Memorize index of strPODCItemSeq to ByPJ ProcessJob list;
                                if (!srcIndexListByPJPJ.containsKey(tmplistKeyName)) {
                                    srcIndexListByPJPJ.put(tmplistKeyName, sourceIndex);
                                }
                            } else {
                                // Get template item index;
                                listKeyName = strCDItem.getDataCollectionItemName() + "#" + strCDItem.getMeasurementType();
                                listKeyName = listKeyName.replaceAll("null", "");
                                if (srcIndexListByPJPJTemplate.containsKey(listKeyName)) {
                                    sourceIndex = srcIndexListByPJPJTemplate.get(listKeyName);
                                    ProcessDTO.DataCollectionItemInfo tmpDcItemInfo = strPODCItemSeq.get(sourceIndex);
                                    if (tmpDcItemInfo != null) {
                                        ProcessDTO.DataCollectionItemInfo dcItemInfo = new ProcessDTO.DataCollectionItemInfo();
                                        BeanUtils.copyProperties(tmpDcItemInfo, dcItemInfo);
                                        strPODCItemSeq.add(dcItemInfo);
                                        dcItemInfo.setDataValue(dc.getDataValue());
                                        dcItemInfo.setWaferPosition(dc.getWaferPosition());
                                        dcItemInfo.setSpecCheckResult("");
                                        dcItemInfo.setActionCodes("");
                                    }
                                    // Memorize index of strPODCItemSeq to ByPJ ProcessJob list;
                                    if (!srcIndexListByPJPJ.containsKey(tmplistKeyName)) {
                                        srcIndexListByPJPJ.put(tmplistKeyName, nPODCItemSeqCnt);
                                    }
                                    nPODCItemSeqCnt++;
                                }
                            }
                        }
                    }
                }
            }
            //Set Data Collection Item information to PO;
            aPosPO.setAssignedDataCollectionItemInfo(aDCDefID, strPODCItemSeq);
        }

    }

    /**
     * description:
     * change history:
     * date             defect#             person             comments
     * ---------------------------------------------------------------------------------------------------------------------
     * 2019/7/25                               Neyo                create file
     *
     * @author: Neyo
     * @date: 2019/7/25 13:04
     * @copyright: 2019, FA Software (Shanghai) Co., Ltd. All Rights Reserved.
     */
    @Override
    public void processOperationRecipeParametersSet(Infos.ObjCommon objCommon, ObjectIdentifier controlJobID, List<Infos.LotStartRecipeParameter> strLotStartRecipeParameterSeq) {

        /*----------------*/
        /*   Initialize   */
        /*----------------*/
        int iCnt1 = 0;
        int iCnt2 = 0;
        int iCnt3 = 0;
        // each lot, get its process operation and set recipe parameters
        int lotStartRecpLen = CimArrayUtils.getSize(strLotStartRecipeParameterSeq);
        for (iCnt1 = 0; iCnt1 < lotStartRecpLen; iCnt1++) {
            ObjectIdentifier tmpLotID = strLotStartRecipeParameterSeq.get(iCnt1).getLotID();
            List<Infos.LotWafer> tmpLotWaferSeq = strLotStartRecipeParameterSeq.get(iCnt1).getStrLotWaferSeq();
            // Get Lot Object
            com.fa.cim.newcore.bo.product.CimLot aLot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, tmpLotID);
            Validations.check(aLot == null, new OmCode(retCodeConfig.getNotFoundLot(), tmpLotID.getValue()));

            // Get lot process operation
            log.info("Get lot process operation");
            com.fa.cim.newcore.bo.pd.CimProcessOperation aPO = aLot.getProcessOperation();
            if (aPO == null){
                //Set error message MSG_NOT_FOUND_PO ("",reportedLotIDs[iCnt1]);
                log.info("MSG_NOT_FOUND_PO");
                Validations.check(true,new OmCode(retCodeConfig.getNotFoundProcessOperation(),"",tmpLotID.getValue()));
            }
            // Set RecipeParameterChangeType to PO
            log.info("Set RecipeParameterChangeType to PO");
            String changeType = BizConstant.SP_RPARM_CHANGETYPE_BYWAFER;
            //-----------------------------------------------------
            // Set RecipeParameters to PO
            //-----------------------------------------------------
            aPO.setAssignedRecipeParameterChangeType(changeType);
            // create resulted parameters
            int lenLotWafer = CimArrayUtils.getSize(strLotStartRecipeParameterSeq.get(iCnt1).getStrLotWaferSeq());
            List<ProcessDTO.StartRecipeParameterSetInfo> assignedRecipeParameterSets = new ArrayList<>();
            for (iCnt2 = 0; iCnt2 < lenLotWafer; iCnt2++) {
                // setNumber
                ProcessDTO.StartRecipeParameterSetInfo startRecipeParameterSetInfo = new ProcessDTO.StartRecipeParameterSetInfo();
                assignedRecipeParameterSets.add(iCnt2,startRecipeParameterSetInfo);
                startRecipeParameterSetInfo.setSetNumber(iCnt2 + 1);
                // recipeParameters
                int lenStartRecipePara = CimArrayUtils.getSize(strLotStartRecipeParameterSeq.get(iCnt1).getStrLotWaferSeq().get(iCnt2).getStartRecipeParameterList());
                List<ProcessDTO.StartRecipeParameter> strRecipeParameters = new ArrayList<>();
                startRecipeParameterSetInfo.setRecipeParameterList(strRecipeParameters);
                for (iCnt3 = 0; iCnt3 < lenStartRecipePara; iCnt3++) {
                    //Convert strProcessOperation_recipeParameters_Set_in..[iCnt1].strLotWaferSeq[iCnt2].strStartRecipeParameter to recipeParameters;
                    ProcessDTO.StartRecipeParameter startRecipeParameter = new ProcessDTO.StartRecipeParameter();
                    strRecipeParameters.add(iCnt3,startRecipeParameter);
                    startRecipeParameter.setParameterName(strLotStartRecipeParameterSeq.get(iCnt1).getStrLotWaferSeq().get(iCnt2).getStartRecipeParameterList().get(iCnt3).getParameterName());
                    startRecipeParameter.setParameterValue(strLotStartRecipeParameterSeq.get(iCnt1).getStrLotWaferSeq().get(iCnt2).getStartRecipeParameterList().get(iCnt3).getParameterValue());
                    startRecipeParameter.setTargetValue(strLotStartRecipeParameterSeq.get(iCnt1).getStrLotWaferSeq().get(iCnt2).getStartRecipeParameterList().get(iCnt3).getTargetValue());
                    startRecipeParameter.setUseCurrentSettingValueFlag(strLotStartRecipeParameterSeq.get(iCnt1).getStrLotWaferSeq().get(iCnt2).getStartRecipeParameterList().get(iCnt3).getUseCurrentSettingValueFlag());
                }
                // applyWafers
                List<ProcessDTO.ParameterApplyWaferInfo> strApplyWafers = new ArrayList<>();
                startRecipeParameterSetInfo.setApplyWaferInfoList(strApplyWafers);
                ProcessDTO.ParameterApplyWaferInfo parameterApplyWaferInfo = new ProcessDTO.ParameterApplyWaferInfo();
                strApplyWafers.add(parameterApplyWaferInfo);
                parameterApplyWaferInfo.setWaferID(strLotStartRecipeParameterSeq.get(iCnt1).getStrLotWaferSeq().get(iCnt2).getWaferID());
                parameterApplyWaferInfo.setSlotNumber(strLotStartRecipeParameterSeq.get(iCnt1).getStrLotWaferSeq().get(iCnt2).getSlotNumber());
                parameterApplyWaferInfo.setControlWaferFlag(strLotStartRecipeParameterSeq.get(iCnt1).getStrLotWaferSeq().get(iCnt2).getControlWaferFlag());

                ObjectIdentifier machineRecipeID = new ObjectIdentifier("");
                startRecipeParameterSetInfo.setMachineRecipe(machineRecipeID);
                startRecipeParameterSetInfo.setPhysicalRecipe("");
            }
            aPO.setAssignedRecipeParameterSets(assignedRecipeParameterSets);
        }
    }

    @Override
    public List<Infos.BOMPartsInfo> processBOMPartsInfoGetDR(Infos.ObjCommon objCommon, ObjectIdentifier productID, ObjectIdentifier operationID) {
        //---------------------------------------------------------------------------------
        //   Get BOM Information.
        //---------------------------------------------------------------------------------
        CimBomDO bom = cimJpaRepository.queryOne("select B.ID from OMBOM B inner join OMPRODINFO S on S.BOM_ID = B.BOM_ID where S.PROD_ID = ?1", CimBomDO.class, productID.getValue());
        Validations.check(CimObjectUtils.isEmpty(bom), retCodeConfig.getBomNotDefined());
        //---------------------------------------------------------------------------------
        //   Get Parts Information.
        //---------------------------------------------------------------------------------
        List<CimBomPartsDO> bomPartsDOS = cimJpaRepository.query("select BP.PARTS_ID, BP.PARTS_RKEY, BP.QTY from OMBOM_PARTS BP " +
                "inner join OMPRP_PARTS PP on PP.PARTS_ID = BP.PARTS_ID " +
                "inner join OMPRP P on P.ID = PP.REFKEY " +
                "where BP.REFKEY = ?1 and P.PRP_ID = ?2 and P.PRP_LEVEL = ?3", CimBomPartsDO.class, bom.getId(), ObjectIdentifier.fetchValue(operationID), BizConstant.SP_PD_FLOWLEVEL_OPERATION);
        Validations.check(CimObjectUtils.isEmpty(bomPartsDOS), retCodeConfigEx.getPartsNotDefinedForProcess());
        List<Infos.BOMPartsInfo> bomPartsInfos = new ArrayList<>();
        for (CimBomPartsDO bomPart : bomPartsDOS) {
            Infos.BOMPartsInfo bomPartsInfo = new Infos.BOMPartsInfo();
            bomPartsInfo.setPartID(new ObjectIdentifier(bomPart.getPartsID(), bomPart.getPartsObj()));
            bomPartsInfo.setQty(bomPart.getQuantity());
            bomPartsInfos.add(bomPartsInfo);
        }
        return bomPartsInfos;
    }

    @Override
    public void processOperationActionResultSet(Infos.ObjCommon objCommon, Inputs.ObjProcessOperationActionResultSetIn objProcessOperationActionResultSetIn) {
        List<Infos.StartCassette> strStartCassette = objProcessOperationActionResultSetIn.getStrStartCassette();
        List<Results.DCActionLotResult> strDCActionLotResult = objProcessOperationActionResultSetIn.getStrDCActionLotResult();
        boolean overwriteFlag = objProcessOperationActionResultSetIn.isOverwriteFlag();
        int cassetteLen = CimArrayUtils.getSize(strStartCassette);
        for (int i = 0; i < cassetteLen; i++){
            List<Infos.LotInCassette> lotInCassetteList = strStartCassette.get(i).getLotInCassetteList();
            int lotLen = CimArrayUtils.getSize(lotInCassetteList);
            for (int j = 0; j < lotLen; j++){
                Infos.LotInCassette lotInCassette = lotInCassetteList.get(j);
                /*--------------------------*/
                /*   Omit Not-Started Lot   */
                /*--------------------------*/
                if (!lotInCassette.getMoveInFlag()){
                    continue;
                }
                /*--------------------*/
                /*   Get Lot Object   */
                /*--------------------*/
                com.fa.cim.newcore.bo.product.CimLot aPosLot = baseCoreFactory.getBO(com.fa.cim.newcore.bo.product.CimLot.class, lotInCassette.getLotID());
                Validations.check(aPosLot == null, new OmCode(retCodeConfig.getNotFoundLot(), lotInCassette.getLotID().getValue()));
                /*----------------------------------*/
                /*   Get Process Operation Object   */
                /*----------------------------------*/
                Boolean currentPOFlag = lotMethod.lotCheckConditionForPO(objCommon, lotInCassette.getLotID());
                com.fa.cim.newcore.bo.pd.CimProcessOperation aPosPO = null;
                if (currentPOFlag){
                    //--------------------------------------------------------------------------
                    // Get PO from Current Operation
                    //--------------------------------------------------------------------------
                    aPosPO = aPosLot.getProcessOperation();
                } else {
                    //--------------------------------------------------------------------------
                    // Get PO from Previous Operation
                    //--------------------------------------------------------------------------
                    aPosPO = aPosLot.getPreviousProcessOperation();
                }
                Validations.check(aPosPO == null, new OmCode(retCodeConfig.getNotFoundProcessOperation(), "", lotInCassette.getLotID().getValue()));
                List<ProcessDTO.ActionResultInfo> dcActionResultInfoSeq = null;
                if (!overwriteFlag){
                    dcActionResultInfoSeq = aPosPO.getActionResultInfo();
                }
                if (!CimArrayUtils.isEmpty(dcActionResultInfoSeq) || dcActionResultInfoSeq == Collections.EMPTY_LIST){
                    dcActionResultInfoSeq = new ArrayList<>();
                }
                int actionRsltLen = CimArrayUtils.getSize(dcActionResultInfoSeq);
                int dcActionLot_count = CimArrayUtils.getSize(strDCActionLotResult);
                for (int k = 0; k < dcActionLot_count; k++){
                    if (ObjectIdentifier.equalsWithValue(lotInCassette.getLotID(), strDCActionLotResult.get(k).getMeasurementLotID())){
                        List<Infos.DCActionResultInfo> dcActionResultInfo = strDCActionLotResult.get(k).getDcActionResultInfo();
                        int dcActionInfo_count = CimArrayUtils.getSize(dcActionResultInfo);
                        for (int l = 0; l < dcActionInfo_count; l++){
                            ProcessDTO.ActionResultInfo actionResultInfo = new ProcessDTO.ActionResultInfo();
                            dcActionResultInfoSeq.add(actionResultInfo);
                            actionResultInfo.setLotID(dcActionResultInfo.get(l).getLotID());
                            actionResultInfo.setMonitorLotFlag(dcActionResultInfo.get(l).getMonitorLotFlag());
                            actionResultInfo.setDataCollectionDefinitionID(dcActionResultInfo.get(l).getDcDefID());
                            actionResultInfo.setDataCollectionSpecificationID(dcActionResultInfo.get(l).getDcSpecID());
                            actionResultInfo.setCheckType(dcActionResultInfo.get(l).getCheckType());
                            actionResultInfo.setReasonCode(dcActionResultInfo.get(l).getReasonCode());
                            actionResultInfo.setActionCode(dcActionResultInfo.get(l).getActionCode());
                            actionResultInfo.setCorrespondingObjRefPO(dcActionResultInfo.get(l).getCorrespondingObjRefPO());
                            actionResultInfo.setBankID(dcActionResultInfo.get(l).getBankID());
                            actionResultInfo.setReworkRouteID(dcActionResultInfo.get(l).getReworkRouteID());
                            List<ProcessDTO.ActionEntityInfo> actionEntityInfoList = new ArrayList<>();
                            actionResultInfo.setEntities(actionEntityInfoList);
                            List<Infos.EntityIdentifier> entities = dcActionResultInfo.get(l).getEntities();
                            int entities_count = CimArrayUtils.getSize(entities);
                            for (int p = 0; p < entities_count; p++){
                                ProcessDTO.ActionEntityInfo actionEntityInfo = new ProcessDTO.ActionEntityInfo();
                                actionEntityInfoList.add(actionEntityInfo);
                                actionEntityInfo.setClassName(entities.get(p).getClassName());
                                actionEntityInfo.setObjectID(entities.get(p).getObjectID());
                                actionEntityInfo.setAttribution(entities.get(p).getAttribution());
                            }
                        }
                    }
                }
                aPosPO.setActionResultInfo(dcActionResultInfoSeq);
            }
        }
    }

    @Override
    public Outputs.RawProcessResourceStateTranslateOut rawProcessResourceStateTranslate(Infos.ObjCommon objCommon, ObjectIdentifier equipmentID, List<Infos.EqpChamberStatus> strEqpChamberStatus) {
        Outputs.RawProcessResourceStateTranslateOut resourceStateTranslateOut = new Outputs.RawProcessResourceStateTranslateOut();

        List<Infos.EqpChamberStatus> tmpEqpChamberStatus = strEqpChamberStatus;
        Infos.EqpChamberStatus anEqpChamberStatus ;

        int ECSLength = CimArrayUtils.getSize(strEqpChamberStatus);
        for(int i=0;i < ECSLength-1;i++) {
            int ECSLength2 = CimArrayUtils.getSize(strEqpChamberStatus);
            for(int j=i+1;j < ECSLength2; j++) {
                if(ObjectIdentifier.equalsWithValue(tmpEqpChamberStatus.get(i).getChamberStatusCode(), tmpEqpChamberStatus.get(j).getChamberStatusCode())) {
                    anEqpChamberStatus = tmpEqpChamberStatus.get(j);
                    Infos.EqpChamberStatus eqpChamberStatus = tmpEqpChamberStatus.get(j);
                    eqpChamberStatus = tmpEqpChamberStatus.get(i);
                    Infos.EqpChamberStatus eqpChamberStatus1 = tmpEqpChamberStatus.get(i);
                    eqpChamberStatus1 = anEqpChamberStatus;
                }
            }
        }

        //PTR 9900207 char * aChamberStatus = NULL ;
        String aChamberStatus = null;
        int ECSLength3 = CimArrayUtils.getSize(strEqpChamberStatus);

        List<Infos.TranslatedChamberState> translatedChamberStates = new ArrayList<>();
        for (int i=0; i<ECSLength3; i++) {
            Infos.TranslatedChamberState translatedChamberState = new Infos.TranslatedChamberState();

            translatedChamberState.setChamberID(tmpEqpChamberStatus.get(i).getChamberID());
            if( i>0 ) {
                if(!ObjectIdentifier.equalsWithValue(aChamberStatus, tmpEqpChamberStatus.get(i).getChamberStatusCode())) {
                    translatedChamberState.setTranslatedStatusCode(tmpEqpChamberStatus.get(i).getChamberStatusCode());
                } else {
                    //Pass equipmentID, and tmpEqpChamberStatus[i].chamberStatusCode
                    Outputs.ObjRawEquipmentStateTranslateOut  strRawEquipmentStateTranslateOut = equipmentMethod.rawEquipmentStateTranslate(objCommon, equipmentID, tmpEqpChamberStatus.get(i).getChamberStatusCode());
                    translatedChamberState.setTranslatedStatusCode(strRawEquipmentStateTranslateOut.getEquipmentStatusCode());
                    aChamberStatus = ObjectIdentifier.fetchValue(strRawEquipmentStateTranslateOut.getEquipmentStatusCode());
                }
            } else {
                //Pass equipmentID, and tmpEqpChamberStatus[i].chamberStatusCode

                Outputs.ObjRawEquipmentStateTranslateOut  strRawEquipmentStateTranslateOut = equipmentMethod.rawEquipmentStateTranslate(objCommon, equipmentID, tmpEqpChamberStatus.get(i).getChamberStatusCode());

                translatedChamberState.setTranslatedStatusCode(strRawEquipmentStateTranslateOut.getEquipmentStatusCode());
                aChamberStatus = ObjectIdentifier.fetchValue(strRawEquipmentStateTranslateOut.getEquipmentStatusCode());
            }
            translatedChamberStates.add(translatedChamberState);
        }
        resourceStateTranslateOut.setStrTranslatedChamberState(translatedChamberStates);
        return resourceStateTranslateOut;
    }

    @Override
    public List<ObjectIdentifier> processDispatchEquipmentsGetDR(Infos.ObjCommon objCommon, ObjectIdentifier productID, ObjectIdentifier operationID) {
        List<ObjectIdentifier> equipmentIDs = new ArrayList<>();
        String sql = String.format(" SELECT  ID\n" +
                "                    FROM    OMPRP\n" +
                "                    WHERE   PRP_ID='%s'\n" +
                "                    AND     PRP_LEVEL='%s'", ObjectIdentifier.fetchValue(operationID), BizConstant.SP_PD_FLOWLEVEL_OPERATION);
        CimProcessDefinitionDO processDefinition = cimJpaRepository.queryOne(sql, CimProcessDefinitionDO.class);
        Validations.check(processDefinition == null, new OmCode(retCodeConfig.getNotFoundProcessDefinition(), ObjectIdentifier.fetchValue(operationID)));

        //----------------------------------------
        //  Get Specific Eqp from Product level
        //----------------------------------------
        sql = String.format(" SELECT IDX_NO\n" +
                "                 FROM   OMPRP_EQPSETPRD\n" +
                "                 WHERE  REFKEY = '%s'\n" +
                "                 AND    PROD_ID = '%s'", processDefinition.getId(), productID.getValue());
        CimPDSpecEqpDO processDefinitionSpecEqps = cimJpaRepository.queryOne(sql, CimPDSpecEqpDO.class);
        boolean returnFlag = false;
        int count = 0;
        if (processDefinitionSpecEqps != null){
            returnFlag = true;
            sql = String.format("SELECT EQP_ID,\n" +
                            "                            EQP_RKEY\n" +
                            "                     FROM   OMPRP_EQPSETPRD_ASGN\n" +
                            "                     WHERE  REFKEY = '%s'\n" +
                            "                     AND    LINK_MARKER = '%s'\n" +
                            "                     AND    (LINK_MARKER = '%s' OR LINK_MARKER = '%s')",
                    processDefinition.getId(), processDefinitionSpecEqps.getSequenceNumber(), processDefinitionSpecEqps.getSequenceNumber(), processDefinitionSpecEqps.getSequenceNumber());
            List<CimPDSpecEqpEqpDO> processDefinitionSpecEqpEqps = cimJpaRepository.query(sql, CimPDSpecEqpEqpDO.class);
            if (!CimArrayUtils.isEmpty(processDefinitionSpecEqpEqps)){
                for (CimPDSpecEqpEqpDO cimPDSpecEqpEqpDO : processDefinitionSpecEqpEqps){
                    equipmentIDs.add(new ObjectIdentifier(cimPDSpecEqpEqpDO.getEquipmentID(), cimPDSpecEqpEqpDO.getEquipmentObj()));
                }
            }
        }
        if (CimBooleanUtils.isTrue(returnFlag)){
            return equipmentIDs;
        }

        //---------------------------------------------
        //  Get Specific Eqp from productgroup level
        //---------------------------------------------
        sql = String.format("SELECT  PRODFMLY_ID\n" +
                "                    FROM    OMPRODINFO\n" +
                "                    WHERE   PROD_ID='%s'", productID.getValue());
        CimProductSpecificationDO cimProductSpecificationDO = cimJpaRepository.queryOne(sql, CimProductSpecificationDO.class);
        Validations.check(cimProductSpecificationDO == null, retCodeConfig.getNotFoundProductSpec());
        sql = String.format("SELECT IDX_NO\n" +
                "                 FROM   OMPRP_EQPSETPRODFMLY\n" +
                "                 WHERE  REFKEY = '%s'\n" +
                "                 AND    PRODFMLY_ID = '%s'", processDefinition.getId(), cimProductSpecificationDO.getProductGroupID());
        CimPDSpecEqpPgrpDO processDefinitionSpecEqpPgrp = cimJpaRepository.queryOne(sql, CimPDSpecEqpPgrpDO.class);
        if (null != processDefinitionSpecEqpPgrp) {
            returnFlag = true;
            sql = String.format("SELECT EQP_ID,\n" +
                            "                            EQP_RKEY\n" +
                            "                     FROM   OMPRP_EQPSETPRODFMLY_ASGN\n" +
                            "                     WHERE  REFKEY = '%s'\n" +
                            "                     AND    LINK_MARKER = '%s'\n" +
                            "                     AND    (LINK_MARKER = '%s' OR LINK_MARKER = '%s')",
                    processDefinition.getId(), processDefinitionSpecEqpPgrp.getSequenceNumber(), processDefinitionSpecEqpPgrp.getSequenceNumber(), processDefinitionSpecEqpPgrp.getSequenceNumber());
            List<CimPDSpecEqpPgrpEqpDO> processDefinitionSpecEqpPgrpEqps = cimJpaRepository.query(sql, CimPDSpecEqpPgrpEqpDO.class);
            if (!CimArrayUtils.isEmpty(processDefinitionSpecEqpPgrpEqps)) {
                for (CimPDSpecEqpPgrpEqpDO p : processDefinitionSpecEqpPgrpEqps) {
                    equipmentIDs.add(new ObjectIdentifier(p.getEquipmentID(), p.getEquipmentObj()));
                }
                return equipmentIDs;
            }
        }

        //---------------------------------------------
        //  Get Specific Eqp from Technology level
        //---------------------------------------------
        sql = String.format("SELECT  TECH_ID\n" +
                "                    FROM    OMPRODFMLY\n" +
                "                    WHERE   PRODFMLY_ID= '%s' ", cimProductSpecificationDO.getProductGroupID());
        CimProductGroupDO productGroup = cimJpaRepository.queryOne(sql, CimProductGroupDO.class);
        Validations.check(productGroup == null, retCodeConfig.getNotFoundProductGroup());
        sql = String.format("SELECT IDX_NO\n" +
                "                 FROM   OMPRP_EQPSETTECH\n" +
                "                 WHERE  REFKEY = '%s'\n" +
                "                 AND    TECH_ID = '%s'", processDefinition.getId(), productGroup.getTechnologyID());
        CimPDSpecEqpTechDO processDefinitionSpecEqpTech = cimJpaRepository.queryOne(sql, CimPDSpecEqpTechDO.class);
        if (null != processDefinitionSpecEqpTech) {
            returnFlag = true;
            sql = String.format("SELECT EQP_ID,\n" +
                            "                            EQP_RKEY\n" +
                            "                     FROM   OMPRP_EQPSETTECH_ASGN\n" +
                            "                     WHERE  REFKEY = '%s'\n" +
                            "                     AND    LINK_MARKER = '%s'\n" +
                            "                     AND    (LINK_MARKER = '%s' OR LINK_MARKER = '%s') ",
                    processDefinition.getId(), processDefinitionSpecEqpTech.getSequenceNumber(), processDefinitionSpecEqpTech.getSequenceNumber(), processDefinitionSpecEqpTech.getSequenceNumber());
            List<CimPDSpecEqpTechEqpDO> processDefinitionSpecEqpTechEqps = cimJpaRepository.query(sql, CimPDSpecEqpTechEqpDO.class);
            if (!CimArrayUtils.isEmpty(processDefinitionSpecEqpTechEqps)) {
                for (CimPDSpecEqpTechEqpDO p : processDefinitionSpecEqpTechEqps) {
                    equipmentIDs.add(new ObjectIdentifier(p.getEquipmentID(), p.getEquipmentObj()));
                }
                return equipmentIDs;
            }
        }
        //-----------------------------------
        //  Get logical recipe
        //-----------------------------------
        ObjectIdentifier logicalRecipe = logicalRecipeMethod.processLogicalRecipeGetDR(objCommon, productID, operationID);
        //----------------------------------------------
        //  Get Eqp specified by processDefinition
        //----------------------------------------------
        List<ObjectIdentifier> pdEqpSeq = new ArrayList<>();
        sql = String.format("SELECT EQP_ID,\n" +
                "                        EQP_RKEY\n" +
                "                 FROM   OMPRP_RESTRICTEQP\n" +
                "                 WHERE  REFKEY = '%s' ORDER BY IDX_NO",  processDefinition.getId());
        List<CimPDEqpDO> processDefinitionEqps = cimJpaRepository.query(sql, CimPDEqpDO.class);
        if (!CimArrayUtils.isEmpty(processDefinitionEqps)) {
            for (CimPDEqpDO p : processDefinitionEqps) {
                pdEqpSeq.add(new ObjectIdentifier(p.getEquipmentID(), p.getEquipmentObj()));
            }
        }
        //-----------------------------------------------------
        //  Get Eqp from logicalRecipe(MachineRecipe's EQP)
        //-----------------------------------------------------
        sql = String.format("SELECT  ID\n" +
                "                    FROM    OMLRCP\n" +
                "                    WHERE   LRCP_ID='%s'", logicalRecipe.getValue());
        CimLogicalRecipeDO cimLogicalRecipeDO = cimJpaRepository.queryOne(sql, CimLogicalRecipeDO.class);
        Validations.check(cimLogicalRecipeDO == null, retCodeConfig.getNotFoundLogicRecipe());
        List<ObjectIdentifier> recipeEqpSeq = new ArrayList<>();
        sql = String.format("SELECT RECIPE_RKEY\n" +
                "        FROM OMLRCP_DFLT\n" +
                "        WHERE REFKEY = '%s'\n" +
                "         ORDER BY IDX_NO", cimLogicalRecipeDO.getId());
        List<CimLogicalRecipeDSetDO> logicalRecipeDefaultSettings = cimJpaRepository.query(sql, CimLogicalRecipeDSetDO.class);
        if (!CimArrayUtils.isEmpty(logicalRecipeDefaultSettings)) {
            for (CimLogicalRecipeDSetDO cimLogicalRecipeDSetDO : logicalRecipeDefaultSettings) {
                sql = String.format("SELECT DISTINCT(EQP_ID) EQP_ID,\n" +
                        "                                    EQP_RKEY\n" +
                        "                     FROM   OMRCP_EQP\n" +
                        "                     WHERE  REFKEY = '%s'", cimLogicalRecipeDSetDO.getRecipeObj());
                List<CimMachineRecipeEqpDO> mRecipeEqps = cimJpaRepository.query(sql, CimMachineRecipeEqpDO.class);
                if (!CimArrayUtils.isEmpty(mRecipeEqps)){
                    for (CimMachineRecipeEqpDO m : mRecipeEqps) {
                        recipeEqpSeq.add(new ObjectIdentifier(m.getEquipmentID(), m.getEquipmentObj()));
                    }
                }
            }
        }
        //-----------------------------------
        //  Compare two list of machines
        //-----------------------------------
        if (!CimArrayUtils.isEmpty(pdEqpSeq) && !CimArrayUtils.isNotEmpty(recipeEqpSeq)) {
            for (ObjectIdentifier pdEqp : pdEqpSeq) {
                for (ObjectIdentifier recipeEqp : recipeEqpSeq) {
                    if (ObjectIdentifier.equalsWithValue(pdEqp, recipeEqp)) {
                        boolean redundantFlag = false;
                        for (ObjectIdentifier equipmentID : equipmentIDs) {
                            if (ObjectIdentifier.equalsWithValue(equipmentID, pdEqp)) {
                                redundantFlag = true;
                                break;
                            }
                        }
                        if (!redundantFlag) {
                            equipmentIDs.add(pdEqp);
                            break;
                        }
                    }
                }
            }
        } else {
            for (ObjectIdentifier recipeEqp : recipeEqpSeq) {
                boolean redundantFlag = false;
                for (ObjectIdentifier equipmentID : equipmentIDs) {
                    if (ObjectIdentifier.equalsWithValue(equipmentID, recipeEqp)) {
                        redundantFlag = true;
                        break;
                    }
                }
                if (CimBooleanUtils.isFalse(redundantFlag)) {
                    equipmentIDs.add(recipeEqp);
                }
            }
        }

        return equipmentIDs;
    }

    @Override
    public Outputs.ObjProcessOperationSequenceGetDROut processOperationSequenceGetDR(Infos.ObjCommon objCommon, Inputs.ProcessOperationSequenceGetDRIn processOperationSequenceGetDRIn) {
        //Initialize
        Outputs.ObjProcessOperationSequenceGetDROut out = new Outputs.ObjProcessOperationSequenceGetDROut();
        ObjectIdentifier routeId = processOperationSequenceGetDRIn.getRouteId();
        String operationNumber = processOperationSequenceGetDRIn.getOperationNumber();
        log.info("in-parm's lotID,{}",routeId.getValue());
        log.info("in-parm's operationNumber,{}",operationNumber);
        String hFRPFPDLISTKey = BaseStaticMethod.convertOpeNoToModuleNo(operationNumber);
        String hFRPFPOSLISTKey = BaseStaticMethod.convertOpeNoToModuleNo(operationNumber);
        log.info("generated moduleNo = {}",hFRPFPDLISTKey);
        log.info("generated moduleOpeNo = {}",hFRPFPOSLISTKey);

        // Get Main Process Flow For Module
        log.info("##### Get Main Process Flow For Module");
        String hFRPFMAINPDID = routeId.getValue();
        String hFRPFPDLEVEL = BizConstant.SP_PD_FLOWLEVEL_MAIN_FOR_MODULE;
        String sqlFRPF = "SELECT ID FROM  OMPRF WHERE  PRP_ID = ?1 AND  PRP_LEVEL = ?2 AND ACTIVE_FLAG = ?3";
        List<CimProcessFlowDO> pfList = cimJpaRepository.query(sqlFRPF, CimProcessFlowDO.class, hFRPFMAINPDID, hFRPFPDLEVEL, 1);
        Validations.check(CimArrayUtils.isEmpty(pfList), retCodeConfig.getNotFoundProcessFlow());

        log.info("### Select Result(OMPRF) ,{}",pfList);
        log.info("### hOMPRFd_theSystemKey = {}",pfList.get(0).getId());
        //Get D_SEQNO in mainPF and module PDID
        log.info("##### Get D_SEQNO in mainPF and module PDID");
        Integer hFRPFPDLISTdSeqNo = 0;
        String sqlFRPFPDLIST = "SELECT IDX_NO,ROUTE_ID FROM OMPRF_ROUTESEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2";
        List<CimPFDefinitionListDO> frPdList = cimJpaRepository.query(sqlFRPFPDLIST, CimPFDefinitionListDO.class, pfList.get(0).getId(), hFRPFPDLISTKey);
        Validations.check(CimArrayUtils.isEmpty(frPdList), retCodeConfig.getNotFoundProcessDefinition());

        log.info("### Select Result(OMPRF_ROUTESEQ),{}",frPdList);
        log.info("### hOMPRF_ROUTESEQd_SeqNo = {}",frPdList.get(0).getSequenceNumber());
        log.info("### hOMPRF_ROUTESEQPD_ID = {}",frPdList.get(0).getProcessDefinitionID());

        //Get Module Process Flow
        log.info("##### Get Module Process Flow");
        hFRPFPDLEVEL = BizConstant.SP_PD_FLOWLEVEL_MODULE;
        //--- If module PDID's version is "##", convert it to real PDID
        String hFRPFPDLISTPDID = frPdList.get(0).getProcessDefinitionID();
        String strVersionId = BaseStaticMethod.extractVersionFromID(hFRPFPDLISTPDID);
        if (CimStringUtils.equals(BizConstant.SP_ACTIVE_VERSION, strVersionId)){
            log.info("### VERSION_ID == '##'");
            String hFRPDPDID = frPdList.get(0).getProcessDefinitionID();
            String sqlFRPD = "SELECT ACTIVE_VER_ID  FROM OMPRP WHERE PRP_ID = ?1 AND PRP_LEVEL= ?2";
            List<CimProcessDefinitionDO> pdList = cimJpaRepository.query(sqlFRPD, CimProcessDefinitionDO.class, hFRPDPDID, hFRPFPDLEVEL);
            Validations.check(CimArrayUtils.isEmpty(pdList), retCodeConfig.getNotFoundProcessDefinition());

            hFRPFPDLISTPDID = pdList.get(0).getActiveID();
        }else {
            log.info("### VERSION_ID != '##'");
        }
        log.info("### hOMPRF_ROUTESEQPD_ID = {}",hFRPFPDLISTPDID);
        List<CimProcessFlowDO> frPfList = cimJpaRepository.query("SELECT ID FROM OMPRF WHERE  PRP_ID = ?1 AND PRP_LEVEL = ?2 AND ACTIVE_FLAG = ?3", CimProcessFlowDO.class, hFRPFPDLISTPDID, hFRPFPDLEVEL, 1);
        Validations.check(CimArrayUtils.isEmpty(frPfList), retCodeConfig.getNotFoundProcessDefinition());

        log.info("### Select Result(OMPRF),{} ",frPfList);
        log.info("### hOMPRFd_theSystemKey = {}",frPfList.get(0).getId());

        // Get D_SEQNO in modulePF
        log.info("##### Get D_SEQNO in modulePF");
        Integer hFRPFPOSLISTdSeqNo = 0;
        List<CimPFPosListDO> frpfPosList = cimJpaRepository.query("SELECT IDX_NO FROM OMPRF_PRSSSEQ WHERE REFKEY = ?1 AND LINK_KEY = ?2", CimPFPosListDO.class, frPfList.get(0).getId(), hFRPFPOSLISTKey);
        Validations.check(CimArrayUtils.isEmpty(frpfPosList),retCodeConfig.getNotFoundPos() );

        log.info("### Select Result(OMPRF_PRSSSEQ) {}",frpfPosList);
        hFRPFPOSLISTdSeqNo = frpfPosList.get(0).getSequenceNumber();
        log.info("### hOMPRF_PRSSSEQd_SeqNo = {}",hFRPFPOSLISTdSeqNo);

        //-------------------------------------
        // Return Sequence Number Making
        //  PD_SEQ_NUM * 100000 + POS_SEQ_NUM
        //   ex) 8.12 -> 800012
        //-------------------------------------
        out.setOperationSequenceNumber(hFRPFPDLISTdSeqNo * 100000L + hFRPFPOSLISTdSeqNo);
        log.info("Sequence Num {},{}",operationNumber,out.getOperationSequenceNumber());

        //Return to Caller
        return out;
    }

    @Override
    public void processFutureHoldRequestsCheck(Infos.ObjCommon objCommon, ObjectIdentifier lotID, ObjectIdentifier routeID, String operationNumber, Infos.ProcessRef operationReference, String referentialOperationNumber) {
        //------------------------------------------------------------
        // The preparation for the check
        //------------------------------------------------------------
        CimLot aLot = baseCoreFactory.getBO(CimLot.class, lotID);
        Validations.check(aLot == null, retCodeConfig.getNotFoundLot(), lotID);

        CimProcessFlowContext aPFX = aLot.getProcessFlowContext();
        Validations.check(CimObjectUtils.isEmpty(aPFX), retCodeConfig.getNotFoundPfx());

        //===== Check whether the target referential operation is more forward to the target operation or not =======//
        //----- The target operation's main profess flow -------//
        CimProcessFlow aMainPF = baseCoreFactory.getBO(CimProcessFlow.class, operationReference.getMainProcessFlow());
        Validations.check(CimObjectUtils.isEmpty(aMainPF), retCodeConfig.getNotFoundProcessFlow(), operationReference.getMainProcessFlow());

        //----- The target operation's module profess flow -------//
        CimProcessFlow aModulePF = baseCoreFactory.getBO(CimProcessFlow.class, operationReference.getModuleProcessFlow());
        Validations.check(CimObjectUtils.isEmpty(aModulePF), retCodeConfig.getNotFoundProcessFlow(), operationReference.getProcessFlow());

        boolean isAfter = aMainPF.isAfterOperationNumberForMain(aModulePF, referentialOperationNumber, operationNumber);
        //===== If the target referential operation is more forward to the target operation, the check is required =======//
        if (!isAfter) {
            log.info("The target referential operation is same as or more backward to the target operation. {} {}", referentialOperationNumber, operationNumber);
        } else {
            log.info("The target referential operation is more forward to the target operation. {} {}", referentialOperationNumber, operationNumber);

            //------------------------------------------------------------
            // The check for the target operation
            //------------------------------------------------------------
            //===== Search the target operation's future hold request that phase is "POST" =======//
            Infos.FutureHoldSearchKey futureHoldSearchKey = new Infos.FutureHoldSearchKey();
            try {
                futureHoldSearchKey.setLotID(lotID);
                futureHoldSearchKey.setRouteID(routeID);
                futureHoldSearchKey.setOperationNumber(operationNumber);
                futureHoldSearchKey.setPhase(BizConstant.SP_FUTUREHOLD_POST);
                lotMethod.lotFutureHoldListbyKeyDR(objCommon, futureHoldSearchKey, 0);

                //===== Verify that any future hold request doesn't relate to the target operation =======//
                log.info("More than one future hold request that phase is \"POST\" is found about the target operation.");
                Validations.check(true, retCodeConfig.getFutureHoldInBranch(), lotID, routeID, operationNumber);
            } catch (ServiceException e) {
                if (!Validations.isEquals(retCodeConfig.getNotFoundFtholdEntW(), e.getCode())) {
                    throw e;
                }
            }


            //------------------------------------------------------------
            // The check for the target operation's forward operations
            //------------------------------------------------------------
            //===== Get the target operation's next operation =======//
            //----- The target operation's module number -------//
            String moduleNo = operationReference.getModuleNumber();

            //----- The target operation's module profess operation specification -------//
            CimProcessOperationSpecification aModulePOS = baseCoreFactory.getBO(CimProcessOperationSpecification.class, operationReference.getModulePOS());
            Validations.check(CimObjectUtils.isEmpty(aModulePOS), retCodeConfig.getNotFoundPos(), operationReference.getModulePOS());

            AtomicReference<CimProcessFlow> aMainPFOut = new AtomicReference<>(), aModulePFOut = new AtomicReference<>();
            AtomicReference<String> moduleNoOut = new AtomicReference<>();    //To prevent DFREE, the variable is initialized using NULL.
            CimProcessOperationSpecification aModulePOSOut = aPFX.getNextProcessOperationSpecificationOnCurrentRouteFor(aMainPF, moduleNo, aModulePF, aModulePOS, aMainPFOut, moduleNoOut, aModulePFOut);
            String moduleNum = moduleNoOut.get();                  //The memory is managed by the variable of CORBA::String_var type.

            //===== Search an operation's future hold request =======//
            List<Infos.FutureHoldListAttributes> aTmpFutureHoldList;
            try {
                futureHoldSearchKey = new Infos.FutureHoldSearchKey();
                futureHoldSearchKey.setLotID(lotID);
                futureHoldSearchKey.setRouteID(routeID);
                aTmpFutureHoldList = lotMethod.lotFutureHoldListbyKeyDR(objCommon, futureHoldSearchKey, 0);

            } catch (ServiceException e) {
                if (Validations.isEquals(retCodeConfig.getNotFoundFtholdEntW(), e.getCode())) {
                    //===== Verify that no future hold exist =======//
                    log.info("No futureHold exists.");
                    return;
                } else {
                    throw e;
                }
            }

            aMainPF = aMainPFOut.get();
            moduleNo = moduleNum;
            aModulePF = aModulePFOut.get();
            aModulePOS = aModulePOSOut;

            while (!CimObjectUtils.isEmpty(aModulePOS)) {
                //===== Check whether an operation is same as the target referential operation or not =======//
                String moduleOpeNo = aModulePOS.getOperationNumber();
                String opeNo = BaseStaticMethod.convertModuleOpeNoToOpeNo(moduleNo, moduleOpeNo);

                //===== If an operation is same as the target referential operation, the check will finish =======//
                if (CimStringUtils.equals(referentialOperationNumber, opeNo)) {
                    log.info("The target referential operation is found, so the check for the target lot's future hold requests will finish.");
                    break;
                }

                for (Infos.FutureHoldListAttributes futureHoldListAttribute : aTmpFutureHoldList) {
                    Validations.check(CimStringUtils.equals(futureHoldListAttribute.getOperationNumber(), opeNo), retCodeConfig.getFutureHoldInBranch());
                }

                //===== Get an operation's next operation =======//
                aModulePOSOut = aPFX.getNextProcessOperationSpecificationOnCurrentRouteFor(aMainPF, moduleNo, aModulePF, aModulePOS, aMainPFOut, moduleNoOut, aModulePFOut);
                aMainPF = aMainPFOut.get();
                moduleNo = moduleNoOut.get();
                aModulePF = aModulePFOut.get();
                aModulePOS = aModulePOSOut;
            }
        }
    }

    @Override
    public void processMaxCountCheck(Infos.ObjCommon objCommon, ObjectIdentifier lotID, ObjectIdentifier routeID, String operationNumber, Infos.ProcessRef operationReference) {
        //------------------------------------------------------------
        // The preparation for the check
        //------------------------------------------------------------
        //===== Get the target lot object =======//
        CimLot aLot = baseCoreFactory.getBO(CimLot.class, lotID);
        Validations.check(CimObjectUtils.isEmpty(aLot), retCodeConfig.getNotFoundLot(), lotID);

        //===== Get the product object of the target lot =======//
        CimProductSpecification aProduct = aLot.getProductSpecification();
        Validations.check(CimObjectUtils.isEmpty(aProduct), retCodeConfig.getNotFoundProductSpec());

        //===== Get the main process flow object of the target operation =======//
        CimProcessFlow aMainPF = baseCoreFactory.getBO(CimProcessFlow.class, operationReference.getMainProcessFlow());
        Validations.check(CimObjectUtils.isEmpty(aMainPF), retCodeConfig.getNotFoundProcessFlow(), operationReference.getMainProcessFlow());

        //===== Get the main process operation specification object of the target operation =======//
        CimProcessOperationSpecification aMainPOS = baseCoreFactory.getBO(CimProcessOperationSpecification.class, operationReference.getProcessOperationSpecification());
        //===== Get the module process operation specification object of the target operation =======//
        CimProcessOperationSpecification aModulePOS = baseCoreFactory.getBO(CimProcessOperationSpecification.class, operationReference.getModulePOS());

        Validations.check(CimObjectUtils.isEmpty(aModulePOS), retCodeConfig.getNotFoundPos(), operationReference.getModulePOS());

        //------------------------------------------------------------
        // The check for the max rework count
        //------------------------------------------------------------
        //===== Get the max rework count of the target operation =======//
        Long maxReworkCount = processDefinitionManager.findMaxReworkCountForProduct(aProduct, aMainPOS, aModulePOS);

        if (maxReworkCount < 0) {
            log.info("No max rework count of the target operation is set.");
        } else if (maxReworkCount == 0) {
            log.info("The max rework count of the target operation is set as zero.");
            Validations.check(retCodeConfig.getReachMaxRework());
        } else    //else if( maxReworkCount > 0 )
        {
            log.info("The max rework count of the target operation {}", maxReworkCount);

            //===== Create the key to check the rework count of the target lot's wafers =======//
            String rwkCntKeyVar = BaseStaticMethod.convertModuleOpeNoToOpeNo(ObjectIdentifier.fetchValue(routeID), operationNumber);
            log.info("The key to check the rework count of the target lot's wafers {}", rwkCntKeyVar);

            //===== Verify that the rework count of the target lot's wafers doesn't exceed the max rework count =======//
            /////// Get the target lot's wafers /////////
            List<Material> waferList = aLot.allMaterial();
            for (Material wafer : waferList) {
                /////// Get the wafer object /////////
                CimWafer aWafer = (CimWafer) wafer;
                Validations.check(CimObjectUtils.isEmpty(aWafer), retCodeConfig.getNotFoundWafer());

                /////// Get the rework count of the wafer /////////
                Long reworkCount = aWafer.getReworkCount(rwkCntKeyVar);

                /////// Check whether the rework count exceeds the max rework count or not /////////
                if (maxReworkCount <= reworkCount) {
                    String waferID = aWafer.getIdentifier();
                    log.info("The rework count of a wafer {} exceeds the max rework count. {}", waferID, reworkCount);
                    Validations.check(true, retCodeConfig.getReachMaxRework(), maxReworkCount);
                }
            }
        }

        //------------------------------------------------------------
        // The check for the max process counts
        //------------------------------------------------------------
        //===== Get the max process counts of the target operation =======//
        List<ProcessDTO.MaxProcessCount> maxProcessCountList = processDefinitionManager.findMaxProcessCountForProduct(aProduct, aMainPF, operationNumber, aMainPOS, aModulePOS);

        //===== Verify that the process count of the target lot's reference operations doesn't exceed the corresponding max process count =======//
        for (ProcessDTO.MaxProcessCount maxProcessCount : maxProcessCountList) {
            log.info("A reference operation {} and its max process count {}, of the target operation", maxProcessCount.getOperationNumber(), maxProcessCount.getCount());

            if (maxProcessCount.getCount() < 0) {
                continue;
            }

            CimProcessFlowContext aPFX = null;
            if (CimObjectUtils.isEmpty(aPFX)) {
                /////// Get the target lot's process flow context which is used to get the reference operations' process count /////////
                aPFX = aLot.getProcessFlowContext();
                Validations.check(CimObjectUtils.isEmpty(aPFX), retCodeConfig.getNotFoundPfx());
            }

            /////// Create the key to check the process count in the target lot's reference operations /////////
            String prcCntKey = BaseStaticMethod.convertModuleOpeNoToOpeNo(ObjectIdentifier.fetchValue(routeID), maxProcessCount.getOperationNumber());
            log.info("The key to check the process count in the target lot's reference operations {}", prcCntKey);

            /////// Get the process count of the reference operation /////////
            Integer processCount = aPFX.getPassCountFor(prcCntKey);

            /////// Check whether the process count exceeds the max process count or not /////////
            Validations.check (processCount > maxProcessCount.getCount(), retCodeConfig.getReachMaxRework(), maxProcessCount.getCount(), maxProcessCount.getOperationNumber());
        }
    }

    @Override
    public ObjectIdentifier processlogicalRecipeGetDR(Infos.ObjCommon objCommon, ObjectIdentifier productID, ObjectIdentifier operationID) {
        CimProcessDefinition processDefinitionNamed = CimStringUtils.isNotEmpty(ObjectIdentifier.fetchReferenceKey(operationID)) ?
                baseCoreFactory.getBO(CimProcessDefinition.class, operationID) :
                processDefinitionManager.findProcessDefinitionNamed(ObjectIdentifier.fetchValue(operationID));
        if (CimObjectUtils.isEmpty(processDefinitionNamed)){
            return ObjectIdentifier.emptyIdentifier();
        }
        CimProductSpecification cimProductSpecification = baseCoreFactory.getBO(CimProductSpecification.class, productID);
        CimLogicalRecipe logicalRecipeFor = processDefinitionNamed.findLogicalRecipeFor(cimProductSpecification);
        if (logicalRecipeFor == null)
            return ObjectIdentifier.emptyIdentifier();
        return ObjectIdentifier.build(logicalRecipeFor.getIdentifier(), logicalRecipeFor.getPrimaryKey());
    }

    @Override
    public List<Infos.ConnectedRouteList> processConnectedRouteListForDurable(Infos.ObjCommon objCommon, String durableCategory, ObjectIdentifier durableID, String routeType) {
        int count = 0;
        CimProcessDefinition returnMainPD;
        List<Infos.ConnectedRouteList> strConnectedRouteList = new ArrayList<>();
        CimDurableProcessOperation durablePO;
        List<ProcessDTO.ProcessFlowConnection> reworkFlowSeq;

        if (CimStringUtils.equals(durableCategory, BizConstant.SP_DURABLECAT_CASSETTE)) {
            log.info("durableCategory is Cassette");
            CimCassette aCassette = baseCoreFactory.getBO(CimCassette.class, durableID);

            returnMainPD = aCassette.getMainProcessDefinition();
            Validations.check(CimObjectUtils.isEmpty(returnMainPD), retCodeConfig.getNotFoundProcessDefinition());

            // --- Get rework route information -----------------------------------------------------------
            if (CimStringUtils.equals(routeType, BizConstant.SP_MAINPDTYPE_DURABLEREWORK)) {
                log.info("ObjectUtils.equalsWithValue(routeType, SP_MAINPDTYPE_DURABLEREWORK) == 0");

                //---------------------------------------
                // Current PO or Previous PO ?
                //---------------------------------------
                boolean currentPOFlag = durableMethod.durableCheckConditionForDurablePO(objCommon, durableCategory, durableID);
                if (currentPOFlag) {
                    //--------------------------------------------------------------------------
                    // Get PO from Current Operation.
                    //--------------------------------------------------------------------------
                    log.info("Get PO from the current Operation.");
                    durablePO = aCassette.getDurableProcessOperation();
                } else {
                    //--------------------------------------------------------------------------
                    // Get PO from Previous Operation.
                    //--------------------------------------------------------------------------
                    log.info("Get PO from the previous Operation.");
                    durablePO = aCassette.getPreviousDurableProcessOperation();
                }
                Validations.check(CimObjectUtils.isEmpty(durablePO), retCodeConfig.getNotFoundDurablePo(), durableID);
                reworkFlowSeq = durablePO.allReworkProcessFlowConnections();
                Validations.check(CimObjectUtils.isEmpty(reworkFlowSeq), retCodeConfig.getNotFoundEntryW());

                int rwkLen = CimArrayUtils.getSize(reworkFlowSeq);
                log.info("ObjectUtils.equalsWithValue(routeType, SP_MAINPDTYPE_DURABLEREWORK) reworkFlowSeq->length() {}", rwkLen);
                CimProcessDefinition aProcessDefinition;

                for (ProcessDTO.ProcessFlowConnection processFlowConnection : reworkFlowSeq) {
                    ObjectIdentifier branchPD = processFlowConnection.getBranchPD();
                    aProcessDefinition = baseCoreFactory.getBO(CimProcessDefinition.class, branchPD);
                    Validations.check(CimObjectUtils.isEmpty(aProcessDefinition), retCodeConfig.getNotFoundProcessDefinition(), branchPD);

                    Infos.ConnectedRouteList connectedRoute = new Infos.ConnectedRouteList();
                    strConnectedRouteList.add(connectedRoute);

                    connectedRoute.setRouteID(new ObjectIdentifier(aProcessDefinition.getIdentifier(), aProcessDefinition.getPrimaryKey()));
                    connectedRoute.setRouteDescription(aProcessDefinition.getDescription());
                    connectedRoute.setManufacturingLayerID(new ObjectIdentifier(aProcessDefinition.getMFGLayer()));
                    Person owner = aProcessDefinition.getOwner();
                    Validations.check(CimObjectUtils.isEmpty(owner), retCodeConfig.getNotFoundPerson(), "*****");
                    connectedRoute.setRouteOwner(owner.getIdentifier());
                    connectedRoute.setReturnRouteID(new ObjectIdentifier(returnMainPD.getIdentifier(), returnMainPD.getPrimaryKey()));
                    connectedRoute.setReturnOperationNumber(processFlowConnection.getReturnOperationNumber());

                    log.info("strConnectedRouteList[i].returnOperationNumber {}", processFlowConnection.getReturnOperationNumber());
                    count++;
                }
            }
            // --- Get sub route information --------------------------------------------------------------
            else {
                log.info("ObjectUtils.equalsWithValue(routeType, SP_MAINPDTYPE_DURABLEREWORK) != 0");
                durablePO = aCassette.getDurableProcessOperation();
                Validations.check(CimObjectUtils.isEmpty(durablePO), retCodeConfig.getNotFoundDurablePo(), durableID);
                reworkFlowSeq = durablePO.allReworkProcessFlowConnections();
                Validations.check(CimObjectUtils.isEmpty(reworkFlowSeq), retCodeConfig.getNotFoundEntryW());

                int rwkLen = CimArrayUtils.getSize(reworkFlowSeq);
                log.info("ObjectUtils.equalsWithValue(routeType, SP_MAINPDTYPE_DURABLEREWORK) reworkFlowSeq->length() {}", rwkLen);
                CimProcessDefinition aProcessDefinition;

                for (ProcessDTO.ProcessFlowConnection processFlowConnection : reworkFlowSeq) {
                    ObjectIdentifier branchPD = processFlowConnection.getBranchPD();
                    aProcessDefinition = baseCoreFactory.getBO(CimProcessDefinition.class, branchPD);
                    Validations.check(CimObjectUtils.isEmpty(aProcessDefinition), retCodeConfig.getNotFoundProcessDefinition(), branchPD);

                    Infos.ConnectedRouteList connectedRoute = new Infos.ConnectedRouteList();
                    strConnectedRouteList.add(connectedRoute);

                    connectedRoute.setRouteID(new ObjectIdentifier(aProcessDefinition.getIdentifier(), aProcessDefinition.getPrimaryKey()));
                    connectedRoute.setRouteDescription(aProcessDefinition.getDescription());
                    connectedRoute.setManufacturingLayerID(new ObjectIdentifier(aProcessDefinition.getMFGLayer()));
                    Person owner = aProcessDefinition.getOwner();
                    Validations.check(CimObjectUtils.isEmpty(owner), retCodeConfig.getNotFoundPerson(), "*****");
                    connectedRoute.setRouteOwner(owner.getIdentifier());
                    connectedRoute.setReturnRouteID(new ObjectIdentifier(returnMainPD.getIdentifier(), returnMainPD.getPrimaryKey()));
                    connectedRoute.setReturnOperationNumber(processFlowConnection.getReturnOperationNumber());

                    log.info("strConnectedRouteList[i].returnOperationNumber {}", processFlowConnection.getReturnOperationNumber());
                    count++;
                }
            }
        } else if (CimStringUtils.equals(durableCategory, BizConstant.SP_DURABLECAT_RETICLEPOD)) {
            log.info("durableCategory is ReticlePod");
            CimReticlePod aReticlePod = baseCoreFactory.getBO(CimReticlePod.class, durableID);

            returnMainPD = aReticlePod.getMainProcessDefinition();
            Validations.check(CimObjectUtils.isEmpty(returnMainPD), retCodeConfig.getNotFoundProcessDefinition());

            // --- Get rework route information -----------------------------------------------------------
            if (CimStringUtils.equals(routeType, BizConstant.SP_MAINPDTYPE_DURABLEREWORK)) {
                log.info("ObjectUtils.equalsWithValue(routeType, SP_MAINPDTYPE_DURABLEREWORK) == 0");

                //---------------------------------------
                // Current PO or Previous PO ?
                //---------------------------------------
                boolean currentPOFlag = durableMethod.durableCheckConditionForDurablePO(objCommon, durableCategory, durableID);
                if (currentPOFlag) {
                    //--------------------------------------------------------------------------
                    // Get PO from Current Operation.
                    //--------------------------------------------------------------------------
                    log.info("Get PO from the current Operation.");
                    durablePO = aReticlePod.getDurableProcessOperation();
                } else {
                    //--------------------------------------------------------------------------
                    // Get PO from Previous Operation.
                    //--------------------------------------------------------------------------
                    log.info("Get PO from the previous Operation.");
                    durablePO = aReticlePod.getPreviousDurableProcessOperation();
                }
                Validations.check(CimObjectUtils.isEmpty(durablePO), retCodeConfig.getNotFoundDurablePo(), durableID);
                reworkFlowSeq = durablePO.allReworkProcessFlowConnections();
                Validations.check(CimObjectUtils.isEmpty(reworkFlowSeq), retCodeConfig.getNotFoundEntryW());

                int rwkLen = CimArrayUtils.getSize(reworkFlowSeq);
                log.info("ObjectUtils.equalsWithValue(routeType, SP_MAINPDTYPE_DURABLEREWORK) reworkFlowSeq->length() {}", rwkLen);
                CimProcessDefinition aProcessDefinition;

                for (ProcessDTO.ProcessFlowConnection processFlowConnection : reworkFlowSeq) {
                    ObjectIdentifier branchPD = processFlowConnection.getBranchPD();
                    aProcessDefinition = baseCoreFactory.getBO(CimProcessDefinition.class, branchPD);
                    Validations.check(CimObjectUtils.isEmpty(aProcessDefinition), retCodeConfig.getNotFoundProcessDefinition(), branchPD);

                    Infos.ConnectedRouteList connectedRoute = new Infos.ConnectedRouteList();
                    strConnectedRouteList.add(connectedRoute);

                    connectedRoute.setRouteID(new ObjectIdentifier(aProcessDefinition.getIdentifier(), aProcessDefinition.getPrimaryKey()));
                    connectedRoute.setRouteDescription(aProcessDefinition.getDescription());
                    connectedRoute.setManufacturingLayerID(new ObjectIdentifier(aProcessDefinition.getMFGLayer()));
                    Person owner = aProcessDefinition.getOwner();
                    Validations.check(CimObjectUtils.isEmpty(owner), retCodeConfig.getNotFoundPerson(), "*****");
                    connectedRoute.setRouteOwner(owner.getIdentifier());
                    connectedRoute.setReturnRouteID(new ObjectIdentifier(returnMainPD.getIdentifier(), returnMainPD.getPrimaryKey()));
                    connectedRoute.setReturnOperationNumber(processFlowConnection.getReturnOperationNumber());

                    log.info("strConnectedRouteList[i].returnOperationNumber {}", processFlowConnection.getReturnOperationNumber());
                    count++;
                }
            }
            // --- Get sub route information --------------------------------------------------------------
            else {
                log.info("ObjectUtils.equalsWithValue(routeType, SP_MAINPDTYPE_DURABLEREWORK) != 0");
                durablePO = aReticlePod.getDurableProcessOperation();
                Validations.check(CimObjectUtils.isEmpty(durablePO), retCodeConfig.getNotFoundDurablePo(), durableID);
                reworkFlowSeq = durablePO.allReworkProcessFlowConnections();
                Validations.check(CimObjectUtils.isEmpty(reworkFlowSeq), retCodeConfig.getNotFoundEntryW());

                int rwkLen = CimArrayUtils.getSize(reworkFlowSeq);
                log.info("ObjectUtils.equalsWithValue(routeType, SP_MAINPDTYPE_DURABLEREWORK) reworkFlowSeq->length() {}", rwkLen);
                CimProcessDefinition aProcessDefinition;

                for (ProcessDTO.ProcessFlowConnection processFlowConnection : reworkFlowSeq) {
                    ObjectIdentifier branchPD = processFlowConnection.getBranchPD();
                    aProcessDefinition = baseCoreFactory.getBO(CimProcessDefinition.class, branchPD);
                    Validations.check(CimObjectUtils.isEmpty(aProcessDefinition), retCodeConfig.getNotFoundProcessDefinition(), branchPD);

                    Infos.ConnectedRouteList connectedRoute = new Infos.ConnectedRouteList();
                    strConnectedRouteList.add(connectedRoute);

                    connectedRoute.setRouteID(new ObjectIdentifier(aProcessDefinition.getIdentifier(), aProcessDefinition.getPrimaryKey()));
                    connectedRoute.setRouteDescription(aProcessDefinition.getDescription());
                    connectedRoute.setManufacturingLayerID(new ObjectIdentifier(aProcessDefinition.getMFGLayer()));
                    Person owner = aProcessDefinition.getOwner();
                    Validations.check(CimObjectUtils.isEmpty(owner), retCodeConfig.getNotFoundPerson(), "*****");
                    connectedRoute.setRouteOwner(owner.getIdentifier());
                    connectedRoute.setReturnRouteID(new ObjectIdentifier(returnMainPD.getIdentifier(), returnMainPD.getPrimaryKey()));
                    connectedRoute.setReturnOperationNumber(processFlowConnection.getReturnOperationNumber());

                    log.info("strConnectedRouteList[i].returnOperationNumber {}", processFlowConnection.getReturnOperationNumber());
                    count++;
                }
            }
        } else if (CimStringUtils.equals(durableCategory, BizConstant.SP_DURABLECAT_RETICLE)) {
            log.info("durableCategory is Reticle");
            CimProcessDurable aReticle = baseCoreFactory.getBO(CimProcessDurable.class, durableID);

            returnMainPD = aReticle.getMainProcessDefinition();
            Validations.check(CimObjectUtils.isEmpty(returnMainPD), retCodeConfig.getNotFoundProcessDefinition());

            // --- Get rework route information -----------------------------------------------------------
            if (CimStringUtils.equals(routeType, BizConstant.SP_MAINPDTYPE_DURABLEREWORK)) {
                log.info("ObjectUtils.equalsWithValue(routeType, SP_MAINPDTYPE_DURABLEREWORK) == 0");

                //---------------------------------------
                // Current PO or Previous PO ?
                //---------------------------------------
                boolean currentPOFlag = durableMethod.durableCheckConditionForDurablePO(objCommon, durableCategory, durableID);
                if (currentPOFlag) {
                    //--------------------------------------------------------------------------
                    // Get PO from Current Operation.
                    //--------------------------------------------------------------------------
                    log.info("Get PO from the current Operation.");
                    durablePO = aReticle.getDurableProcessOperation();
                } else {
                    //--------------------------------------------------------------------------
                    // Get PO from Previous Operation.
                    //--------------------------------------------------------------------------
                    log.info("Get PO from the previous Operation.");
                    durablePO = aReticle.getPreviousDurableProcessOperation();
                }
                Validations.check(CimObjectUtils.isEmpty(durablePO), retCodeConfig.getNotFoundDurablePo(), durableID);
                reworkFlowSeq = durablePO.allReworkProcessFlowConnections();
                Validations.check(CimObjectUtils.isEmpty(reworkFlowSeq), retCodeConfig.getNotFoundEntryW());

                int rwkLen = CimArrayUtils.getSize(reworkFlowSeq);
                log.info("ObjectUtils.equalsWithValue(routeType, SP_MAINPDTYPE_DURABLEREWORK) reworkFlowSeq->length() {}", rwkLen);
                CimProcessDefinition aProcessDefinition;

                for (ProcessDTO.ProcessFlowConnection processFlowConnection : reworkFlowSeq) {
                    ObjectIdentifier branchPD = processFlowConnection.getBranchPD();
                    aProcessDefinition = baseCoreFactory.getBO(CimProcessDefinition.class, branchPD);
                    Validations.check(CimObjectUtils.isEmpty(aProcessDefinition), retCodeConfig.getNotFoundProcessDefinition(), branchPD);

                    Infos.ConnectedRouteList connectedRoute = new Infos.ConnectedRouteList();
                    strConnectedRouteList.add(connectedRoute);

                    connectedRoute.setRouteID(new ObjectIdentifier(aProcessDefinition.getIdentifier(), aProcessDefinition.getPrimaryKey()));
                    connectedRoute.setRouteDescription(aProcessDefinition.getDescription());
                    connectedRoute.setManufacturingLayerID(new ObjectIdentifier(aProcessDefinition.getMFGLayer()));
                    Person owner = aProcessDefinition.getOwner();
                    Validations.check(CimObjectUtils.isEmpty(owner), retCodeConfig.getNotFoundPerson(), "*****");
                    connectedRoute.setRouteOwner(owner.getIdentifier());
                    connectedRoute.setReturnRouteID(new ObjectIdentifier(returnMainPD.getIdentifier(), returnMainPD.getPrimaryKey()));
                    connectedRoute.setReturnOperationNumber(processFlowConnection.getReturnOperationNumber());

                    log.info("strConnectedRouteList[i].returnOperationNumber {}", processFlowConnection.getReturnOperationNumber());
                    count++;
                }
            }
            // --- Get sub route information --------------------------------------------------------------
            else {
                log.info("ObjectUtils.equalsWithValue(routeType, SP_MAINPDTYPE_DURABLEREWORK) != 0");
                durablePO = aReticle.getDurableProcessOperation();
                Validations.check(CimObjectUtils.isEmpty(durablePO), retCodeConfig.getNotFoundDurablePo(), durableID);
                reworkFlowSeq = durablePO.allReworkProcessFlowConnections();
                Validations.check(CimObjectUtils.isEmpty(reworkFlowSeq), retCodeConfig.getNotFoundEntryW());

                int rwkLen = CimArrayUtils.getSize(reworkFlowSeq);
                log.info("ObjectUtils.equalsWithValue(routeType, SP_MAINPDTYPE_DURABLEREWORK) reworkFlowSeq->length() {}", rwkLen);
                CimProcessDefinition aProcessDefinition;

                for (ProcessDTO.ProcessFlowConnection processFlowConnection : reworkFlowSeq) {
                    ObjectIdentifier branchPD = processFlowConnection.getBranchPD();
                    aProcessDefinition = baseCoreFactory.getBO(CimProcessDefinition.class, branchPD);
                    Validations.check(CimObjectUtils.isEmpty(aProcessDefinition), retCodeConfig.getNotFoundProcessDefinition(), branchPD);

                    Infos.ConnectedRouteList connectedRoute = new Infos.ConnectedRouteList();
                    strConnectedRouteList.add(connectedRoute);

                    connectedRoute.setRouteID(new ObjectIdentifier(aProcessDefinition.getIdentifier(), aProcessDefinition.getPrimaryKey()));
                    connectedRoute.setRouteDescription(aProcessDefinition.getDescription());
                    connectedRoute.setManufacturingLayerID(new ObjectIdentifier(aProcessDefinition.getMFGLayer()));
                    Person owner = aProcessDefinition.getOwner();
                    Validations.check(CimObjectUtils.isEmpty(owner), retCodeConfig.getNotFoundPerson(), "*****");
                    connectedRoute.setRouteOwner(owner.getIdentifier());
                    connectedRoute.setReturnRouteID(new ObjectIdentifier(returnMainPD.getIdentifier(), returnMainPD.getPrimaryKey()));
                    connectedRoute.setReturnOperationNumber(processFlowConnection.getReturnOperationNumber());

                    log.info("strConnectedRouteList[i].returnOperationNumber {}", processFlowConnection.getReturnOperationNumber());
                    count++;
                }
            }
        }
        Validations.check(count == 0, retCodeConfig.getNotFoundEntryW());
        return strConnectedRouteList;
    }

    @Override
    public Infos.ScriptInfo processScriptInfoGetDR(Infos.ObjCommon objCommon, ObjectIdentifier routeID, ObjectIdentifier operationID, String operationNumber, String mainPOSID, String modulePOSID) {

        String mainPostScriptID = null, mainPostScriptObj = null, mainPre1ScriptID = null, mainPre1ScriptObj = null, mainPre2ScriptID = null, mainPre2ScriptObj = null;
        String modulePostScriptID = null, modulePostScriptObj = null, modulePre1ScriptID = null, modulePre1ScriptObj = null, modulePre2ScriptID = null, modulePre2ScriptObj = null;
        CimProcessOperationSpecificationDO mainPOS = cimJpaRepository.queryOne("SELECT POST_PCS_ID, POST_PCS_RKEY, PREMOV1_PCS_ID, PREMOV1_PCS_RKEY, PREMOV2_PCS_ID, PREMOV2_PCS_RKEY FROM OMPRSS WHERE ID = ?1", CimProcessOperationSpecificationDO.class, mainPOSID);
        if (!CimObjectUtils.isEmpty(mainPOS)) {
            mainPostScriptID = mainPOS.getPostScriptID();
            mainPostScriptObj = mainPOS.getPostScriptObj();
            mainPre1ScriptID = mainPOS.getPre1ScriptID();
            mainPre1ScriptObj = mainPOS.getPre1ScriptObj();
            mainPre2ScriptID = mainPOS.getPre2ScriptID();
            mainPre2ScriptObj = mainPOS.getPre2ScriptObj();
        }
        CimProcessOperationSpecificationDO modulePOS = cimJpaRepository.queryOne("SELECT POST_PCS_ID, POST_PCS_RKEY, PREMOV1_PCS_ID, PREMOV1_PCS_RKEY, PREMOV2_PCS_ID, PREMOV2_PCS_RKEY FROM OMPRSS WHERE ID = ?1", CimProcessOperationSpecificationDO.class, modulePOSID);
        if (!CimObjectUtils.isEmpty(modulePOS)) {
            modulePostScriptID = modulePOS.getPostScriptID();
            modulePostScriptObj = modulePOS.getPostScriptObj();
            modulePre1ScriptID = modulePOS.getPre1ScriptID();
            modulePre1ScriptObj = modulePOS.getPre1ScriptObj();
            modulePre2ScriptID = modulePOS.getPre2ScriptID();
            modulePre2ScriptObj = modulePOS.getPre2ScriptObj();
        }

        Infos.ScriptInfo scriptInfo = new Infos.ScriptInfo();
        //Set Post Script
        scriptInfo.setPost(CimObjectUtils.isEmpty(mainPostScriptID) ? new ObjectIdentifier(modulePostScriptID, modulePostScriptObj) : new ObjectIdentifier(mainPostScriptID, mainPostScriptObj));

        //Set Pre1 Script
        scriptInfo.setPre1(CimObjectUtils.isEmpty(mainPre1ScriptID) ? new ObjectIdentifier(modulePre1ScriptID, modulePre1ScriptObj) : new ObjectIdentifier(mainPre1ScriptID, mainPre1ScriptObj));

        //Set Pre2 Script
        scriptInfo.setPre2(CimObjectUtils.isEmpty(mainPre2ScriptID) ? new ObjectIdentifier(modulePre2ScriptID, modulePre2ScriptObj) : new ObjectIdentifier(mainPre2ScriptID, mainPre2ScriptObj));

        scriptInfo.setRouteID(routeID);
        scriptInfo.setOperationID(operationID);
        scriptInfo.setOperationNumber(operationNumber);
        return scriptInfo;
    }

    @Override
    public void processHoldRequestsChangeEntry(Infos.ObjCommon objCommon, Params.ProcessHoldReq param) {
        //----------------------------------------------------------//
        //   Reactivate Main PD                                     //
        //----------------------------------------------------------//
        com.fa.cim.newcore.bo.pd.CimProcessDefinition processDefinition = baseCoreFactory.getBO(com.fa.cim.newcore.bo.pd.CimProcessDefinition.class, param.getRouteID());
        Validations.check(CimObjectUtils.isEmpty(processDefinition), new OmCode(retCodeConfig.getNotFoundProcessDefinition(), "*****"));
        ObjectIdentifier tmpRouteID = new ObjectIdentifier(processDefinition.getIdentifier(), processDefinition.getPrimaryKey());

        //----------------------------------------------------------//
        //   Reactivate Product ID                                  //
        //----------------------------------------------------------//
        ObjectIdentifier tmpProductID = null;
        if (!ObjectIdentifier.isEmptyWithValue(param.getProductID())){
            CimProductSpecification aPosProdSpec = baseCoreFactory.getBO(CimProductSpecification.class, param.getProductID());
            Validations.check(aPosProdSpec == null, new OmCode(retCodeConfig.getInvalidProdId(), param.getProductID().getValue()));
            tmpProductID = new ObjectIdentifier(aPosProdSpec.getIdentifier(), aPosProdSpec.getPrimaryKey());
        }

        //----------------------------------------------------------//
        //   Reactivate ReasonCodeID                                //
        //----------------------------------------------------------//
        CimCategory aCategory_PH = codeManager.findCategoryNamed(BizConstant.SP_REASONCAT_PROCESSHOLD);
        Validations.check(aCategory_PH == null, retCodeConfig.getNotFoundCategory());
        CimCode aReasonCode = aCategory_PH.findCodeNamed(param.getReasonCodeID().getValue());
        Validations.check(aReasonCode == null, new OmCode(retCodeConfig.getNotFoundCode(), aCategory_PH.getIdentifier(), param.getReasonCodeID().getValue()));
        ObjectIdentifier tmpReasonCodeID = new ObjectIdentifier(aReasonCode.getIdentifier(), aReasonCode.getPrimaryKey());

        //----- Set Data -----//
        ProcessDTO.ProcessHoldRequest processHoldRequest = new ProcessDTO.ProcessHoldRequest();
        processHoldRequest.setRouteID(tmpRouteID);
        processHoldRequest.setOperationNumber(param.getOperationNumber());
        processHoldRequest.setProductID(ObjectIdentifier.isEmpty(tmpProductID) ? param.getProductID() : tmpProductID);
        processHoldRequest.setWithExecHoldFlag(param.getWithExecHoldFlag());
        processHoldRequest.setRequestPerson(objCommon.getUser().getUserID());
        processHoldRequest.setHoldType(param.getHoldType());
        processHoldRequest.setReasonCode(tmpReasonCodeID);
        processHoldRequest.setClaimMemo(param.getClaimMemo());
        processHoldRequest.setClaimedTimeStamp(objCommon.getTimeStamp().getReportTimeStamp().toString());
        String department = param.getDepartment();
        String section = param.getSection();
        if (CimStringUtils.isNotEmpty(department) && CimStringUtils.isNotEmpty(section)) {
            processHoldRequest.setDepartmentNamePlate(department + BizConstant.DOT + section);
        }
        processHoldRequest.setOldReasonCode(param.getOldReasonCodeID());

        // ----- change data ------//
        processDefinition.updateProcessHoldRequest(processHoldRequest);
    }

    @Override
    public Params.SkipReqParams prepareForSkip(Infos.ObjCommon objCommon, String operationNumber, ObjectIdentifier lotID) {
        OperationInfo operationInfo = getOperationInfoForOpeNumber(operationNumber, lotID);
        Params.SkipReqParams params = new Params.SkipReqParams();
        params.setLocateDirection(false);
        params.setLotID(lotID);
        if (null != operationInfo) {
            params.setCurrentOperationNumber(operationInfo.getCurrentOpeNumber());
            params.setClaimMemo(String.format("[NPW AUTO SKIP] Skip from %s to %s",
                    operationInfo.getCurrentOpeNumber(), operationInfo.getTargetOperationNumber()));
            params.setCurrentRouteID(operationInfo.getCurrentRootID());
            params.setOperationID(operationInfo.getTargetOperationID());
            params.setOperationNumber(operationInfo.getTargetOperationNumber());
            params.setProcessRef(operationInfo.getProcessRef());
            params.setRouteID(operationInfo.getCurrentRootID());
        }
        params.setSeqno(-1);
        params.setSequenceNumber(0);
        params.setUser(objCommon.getUser());
        return params;
    }

    @Override
    public String getFisrtStepOpeNumByLot(Infos.ObjCommon objCommon, ObjectIdentifier lotID) {
        String sql = "SELECT\n" +
                "    TMP.MODULE_NO,\n" +
                "    TMP.STEP_NO,\n" +
                "    TMP.ID,\n" +
                "    TMP.MAIN_OPE_PF\n" +
                "    FROM\n" +
                "    (\n" +
                "        SELECT\n" +
                "            PF_PD.ROUTE_NO AS MODULE_NO,\n" +
                "            POS.OPE_NO      AS STEP_NO,\n" +
                "            POS.ID,\n" +
                "            PF_PD.IDX_NO  AS MAIN_SEQNO,\n" +
                "            PF_POS.IDX_NO AS MODULE_SEQNO,\n" +
                "            MAINPD.ACTIVE_PRF_RKEY AS MAIN_OPE_PF\n" +
                "        FROM\n" +
                "            OMLOT LOT,\n" +
                "            OMPRP MAINPD,\n" +
                "            OMPRF MAIN_MODPF,\n" +
                "            OMPRF_ROUTESEQ PF_PD,\n" +
                "            OMPRP MODULEPD,\n" +
                "            OMPRF MOUDLEPF,\n" +
                "            OMPRF_PRSSSEQ PF_POS,\n" +
                "            OMPRSS POS\n" +
                "        WHERE\n" +
                "            LOT.LOT_ID = ?1 \n" +
                "        AND LOT.MAIN_PROCESS_ID = MAINPD.PRP_ID\n" +
                "        AND MAINPD.ACTIVE_MROUTE_PRF_RKEY = MAIN_MODPF.ID\n" +
                "        AND MAIN_MODPF.ID = PF_PD.REFKEY\n" +
                "        AND PF_PD.ROUTE_RKEY = MODULEPD.ID\n" +
                "        AND MODULEPD.ACTIVE_PRF_RKEY = MOUDLEPF.ID\n" +
                "        AND MOUDLEPF.ID = PF_POS.REFKEY\n" +
                "        AND PF_POS.PRSS_RKEY = POS.ID\n" +
                "        ORDER BY\n" +
                "            4,5 ) TMP\n" +
                "WHERE\n" +
                "    ROWNUM = 1 ";


        Object[] resultQuery = cimJpaRepository.queryOne(sql, lotID.getValue());
        Validations.check(CimObjectUtils.isEmpty(resultQuery),retCodeConfig.getInvalidParameter());
        return CimObjectUtils.toString(resultQuery[0]) + "." + CimObjectUtils.toString(resultQuery[1]);
    }

    @Override
    public void checkProcessDefinitionType(ObjectIdentifier routeID, String processDefinitionType) {
        CimProcessDefinition processDefinition = baseCoreFactory.getBO(CimProcessDefinition.class, routeID);
        Validations.check(processDefinition == null, retCodeConfig.getNotFoundProcessDefinition());
        String routeProcessDefinitionType = processDefinition.getProcessDefinitionType();
        Validations.check(!routeProcessDefinitionType.equals(processDefinitionType),
                retCodeConfigEx.getRoutePdTypeDoesNotMatchProcess(), routeProcessDefinitionType,
                ObjectIdentifier.fetchValue(routeID), processDefinitionType);
    }

    @Getter
    @Setter
    static class OperationInfo {
        private String targetOperationNumber;
        private ObjectIdentifier targetOperationID;
        private Infos.ProcessRef processRef;
        private ObjectIdentifier currentRootID;
        private String currentOpeNumber;
        private Boolean jumpDirection;  // support skip. true: forward  false: backward

        OperationInfo() {
            this.jumpDirection = true;
        }
    }

    private OperationInfo getOperationInfoForOpeNumber(@Nullable String opeNumber, ObjectIdentifier lotID) {
        CimLot bizObject = baseCoreFactory.getBO(CimLot.class, lotID);
        // step1: get Process Flow(Main_Ope Level).
        ProcessFlow processFlow = bizObject.getProcessFlow();
        log.trace(String.format("(1) get Process Flow(Main_Ope Level).[%s]", processFlow.getPrimaryKey()));

        // step2: get current operation number.
        String currentOpeNumber = bizObject.getOperationNumber();
        log.trace(String.format("(2) get current operation number.[%s]", currentOpeNumber));

        // step3: get PFX info of current lot.
        CimProcessFlowContext pfx = bizObject.getProcessFlowContext();
        Validations.check(null == pfx, String.format("The Lot[%s]'s PFX is null.", bizObject.getIdentifier()));
        log.trace(String.format("(3) get PFX info for current lot.[%s]", pfx.getPrimaryKey()));

        // step4: get Main PF.
        CimProcessFlow mainPF = pfx.getMainProcessFlow();
        Validations.check(null == mainPF, "Main PF is null.");
        log.trace(String.format("(4) get Main PF.[%s]", mainPF.getPrimaryKey()));

        // step5: get Main PD.
        CimProcessDefinition currentRoot = bizObject.getMainProcessDefinition();
        log.trace(String.format("(5) get Main PD.[%s]", currentRoot.getIdentifier()));

        // step6: get Process Definition(Module PF) of Main PF.
        List<ProcessDTO.ProcessDefinitionInfo> processDefinitions = mainPF.getProcessDefinitions();
        log.trace("(6) get Process Definition (Module PF) of Main PF.");

        log.trace("Process Definition (Module PF) size : " + CimArrayUtils.getSize(processDefinitions));

        // step7: get all operation info of current lot.
        log.trace("(7) get all operation info of current lot.");
        List<OperationInfo> operationInfos = new ArrayList<>();
        Optional.ofNullable(processDefinitions).ifPresent(list -> list.forEach(data -> {
            String moduleNumber = data.getNumber();
            // step7.1: get module PD info.
            CimProcessDefinition modulePD = processDefinitionManager.findModuleProcessDefinitionNamed(ObjectIdentifier.fetchValue(data.getProcessDefinition()));
            Validations.check(null == modulePD, "Module PD is null.");
            log.trace(String.format("(7.1) get module PD info.[%s]", modulePD.getIdentifier()));
            String pdLevel = modulePD.getProcessDefinitionLevel();
            // step7.2: get Active PF of the module PD.
            Validations.check(!CimStringUtils.equals(pdLevel, BizConstant.SP_PD_FLOWLEVEL_MODULE),
                    "This PD Level is not " + BizConstant.SP_PD_FLOWLEVEL_MODULE);
            CimProcessFlow activeProcessFlow = modulePD.getActiveProcessFlow();
            Validations.check(null == activeProcessFlow, "Active Process Flow is null.");
            log.trace(String.format("(7.2) get Active PF of the module PD.[%s]", activeProcessFlow.getPrimaryKey()));

            // step7.3: get operation number and pos info.
            log.trace("(7.3) get operation number and pos info.");

            CimPFPosListDO example = new CimPFPosListDO();
            example.setReferenceKey(activeProcessFlow.getPrimaryKey());
            List<CimPFPosListDO> posListDOS = cimJpaRepository.findAll(Example.of(example));
            posListDOS.sort(Comparator.comparing(CimPFPosListDO::getSequenceNumber));

            Optional.ofNullable(posListDOS).ifPresent(posList -> posList.forEach(pos -> {
                Validations.check(CimStringUtils.isEmpty(pos.getDKey()), "Can't find operation number.");
                String operationNumber = String.format("%s.%s", moduleNumber, pos.getDKey());

                // get module POS info.
                CimProcessOperationSpecification modulePOS = baseCoreFactory.getBO(CimProcessOperationSpecification.class,
                        pos.getProcessOperationSpecificationsObj());
                Validations.check(null == modulePOS, "Module POS is null.");
                CimProcessDefinition operationPD = modulePOS.getProcessDefinition();
                Validations.check(null == operationPD, "Operation PD is null.");

                OperationInfo operationInfo = new OperationInfo();
                operationInfo.setTargetOperationNumber(operationNumber);
                operationInfo.setTargetOperationID(ObjectIdentifier.build(operationPD.getIdentifier(), operationPD.getPrimaryKey()));
                operationInfo.setCurrentRootID(ObjectIdentifier.build(currentRoot.getIdentifier(), currentRoot.getPrimaryKey()));
                operationInfo.setCurrentOpeNumber(currentOpeNumber);

                Infos.ProcessRef processRef = new Infos.ProcessRef();
                operationInfo.setProcessRef(processRef);
                processRef.setMainProcessFlow(mainPF.getPrimaryKey());
                processRef.setModuleNumber(moduleNumber);
                processRef.setModulePOS(modulePOS.getPrimaryKey());
                processRef.setModuleProcessFlow(activeProcessFlow.getPrimaryKey());
                processRef.setProcessFlow(processFlow.getPrimaryKey());
                processRef.setProcessOperationSpecification("*");
                processRef.setSiInfo(null);
                operationInfos.add(operationInfo);
            }));
        }));

        int operationListSize = CimArrayUtils.getSize(operationInfos);
        log.trace("Operation List[size : " + operationListSize + "]");

        // step8: get next operation of current step and check jump direction.
        log.trace("(8) get next operation of current step and check jump direction.");
        OperationInfo nextOperationInfo = null;
        int currentIndex = -1;
        int toIndex;
        for (int i = 0; i < operationListSize; i++) {
            if (CimStringUtils.equals(currentOpeNumber, operationInfos.get(i).getTargetOperationNumber())) {
                currentIndex = i;
                if (CimStringUtils.isEmpty(opeNumber)) {
                    log.trace("(8.1) Get the next step information of the current step");
                    Validations.check(currentIndex + 1 >= operationListSize,
                            "The current step is already the last step, so you cannot do skip operations");
                    nextOperationInfo = operationInfos.get(i + 1);
                }
                break;
            }
        }

        if (CimStringUtils.isNotEmpty(opeNumber)) {
            log.trace("(8.1) Get specified step information");
            for (int j = 0; j < operationListSize; j++) {
                if (CimStringUtils.equals(opeNumber, operationInfos.get(j).getTargetOperationNumber())) {
                    toIndex = j;
                    operationInfos.get(j).setJumpDirection(toIndex > currentIndex);
                    nextOperationInfo = operationInfos.get(j);
                    break;
                }
            }
        }

        // step9: return operation info.
        log.trace("(9) return operation info.");
        return nextOperationInfo;
    }
}
