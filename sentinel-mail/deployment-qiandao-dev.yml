---
apiVersion: v1
kind: Service
metadata:
  # 服务暴露的service名字
  name: oms-mail-sentinel
  # 命名空间根据实际情况修改
  namespace: oms-dev
spec:
  ports:
    # 提供http服务的这么配置
    - name: http
      # 服务端口号，spring boot的应用可以直接用默认的8206
      port: 8217
      targetPort: 8217
  selector:
    app: oms-mail-sentinel
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oms-mail-sentinel
  namespace: oms-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: oms-mail-sentinel
  template:
    metadata:
      labels:
        app: oms-mail-sentinel
    spec:
      # 启动账户的id，红区必须填写这个字段，黄区可以不填
      #securityContext:
      #  runAsUser: <userid>
      imagePullSecrets:
        - name: regcred
      # 节点失活后，该节点的 pod 2s后进行迁移，
      # k8s集群检测node down掉40s后，将node状态置为not-ready，
      # 再过2s，该节点pod会重新迁移到其他节点
      hostNetwork: false
      tolerations:
        - key: "node.kubernetes.io/unreachable"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 2
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 2
      #      增加反亲和性调度，pod调度到不同node
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: cad-t2-notshare
                    operator: NotIn
                    values:
                      - 'true'
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                topologyKey: "kubernetes.io/hostname"
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - oms-mail-sentinel
              weight: 100
      containers:
        - name: oms-mail-sentinel
          image: 172.16.30.244:8087/oms-dev/oms-mail-sentinel:1.0.0
          imagePullPolicy: Always
          #   系统环境变量，这个模板是针对spring boot的，这里设置的是spring boot服务的端口号和profile
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "qiandao-dev"
            - name: SERVER_PORT
              value: "8217"
          ports:
            - containerPort: 8217
          resources:
            limits:
              cpu: "4"
              memory: 4096Mi
            requests:
              # 根据现网3个月历史数据监测绝大部分小应用50M都够了，只有极少部分应用request可以写到200M，根据实际情况写
              cpu: "0.05"
              #   绝大部分spring boot的应用跑几个月都没有超过800Mi，极少部分应用会超，limit2G也完全够用，根据实际情况修改
              memory: 2048Mi
          # 存活性探针 和 准备就绪探针
          livenessProbe:
#            failureThreshold: 3
#            httpGet:
#              path: /actuator/env
#              port: 8206
#              scheme: HTTP
#            initialDelaySeconds: 500
#            periodSeconds: 10
#            successThreshold: 1
#            timeoutSeconds: 20
#          readinessProbe:
#            failureThreshold: 3
#            httpGet:
#              path: /actuator/env
#              port: 8206
#              scheme: HTTP
#            periodSeconds: 10
#            successThreshold: 1
#            timeoutSeconds: 10
          # 0宕机(zero-downtime)更新
          lifecycle:
            preStop:
              exec:
                command: [ "/bin/bash", "-c", "sleep 30" ]
